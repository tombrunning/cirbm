
DE4_DDR2_test.elf:     file format elf32-littlenios2
DE4_DDR2_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x410201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x41020000 paddr 0x41020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x41020020 paddr 0x41020020 align 2**12
         filesz 0x0000e134 memsz 0x0000e134 flags r-x
    LOAD off    0x0000f154 vaddr 0x4102e154 paddr 0x4102fbb0 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x0001160c vaddr 0x4103160c paddr 0x4103160c align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  41020000  41020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  41020020  41020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000da2c  410201b4  410201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000574  4102dbe0  4102dbe0  0000ebe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  4102e154  4102fbb0  0000f154  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  4103160c  4103160c  0001160c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00010bb0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e18  00000000  00000000  00010bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001587  00000000  00000000  000119f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026cd3  00000000  00000000  00012f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000089ee  00000000  00000000  00039c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000159af  00000000  00000000  00042638  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001b24  00000000  00000000  00057fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000023c7  00000000  00000000  00059b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c576  00000000  00000000  0005bed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006844c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000684b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006c114  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0006c117  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006c121  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006c122  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006c123  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006c127  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006c12b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006c12f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006c138  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006c141  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0006c14a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004c  00000000  00000000  0006c152  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c6b  00000000  00000000  0006c19e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
41020000 l    d  .entry	00000000 .entry
41020020 l    d  .exceptions	00000000 .exceptions
410201b4 l    d  .text	00000000 .text
4102dbe0 l    d  .rodata	00000000 .rodata
4102e154 l    d  .rwdata	00000000 .rwdata
4103160c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
410201fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mem_test.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
410213b8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
41021d24 l     F .text	00000058 __sprint_r
4102df8a l     O .rodata	00000010 blanks.3452
4102df7a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
41023d88 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
41025784 l     F .text	00000058 std
41025890 l     F .text	00000008 __fp_lock
41025898 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
4102e154 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
4102fb7c l     O .rwdata	00000004 charset
4102dfc0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
4102e108 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
41029cbc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
4102b0d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
4102b178 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
4102b278 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
4102b398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
4102b478 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
4102b5d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
4102b800 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
4102fba0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
4102bc70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
4102eb10 l     O .rwdata	00001060 jtag_uart
4102bd5c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
4102bf9c l     F .text	00000228 altera_avalon_jtag_uart_irq
4102c1c4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
4102c840 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
4102cc94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
4102d0b8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
4102d1f4 l     F .text	000000dc alt_file_locked
4102d458 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
4102d9c8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
4102db7c l     F .text	00000040 alt_sim_halt
41021bd8 g     F .text	0000001c putchar
410274a0 g     F .text	00000094 _mprec_log10
410202d8 g     F .text	00000104 I2C_Read
4102758c g     F .text	00000088 __any_on
41028fd0 g     F .text	00000070 _isatty_r
4102e0e0 g     O .rodata	00000028 __mprec_tinytens
4102b634 g     F .text	0000006c alt_main
41021bfc g     F .text	000000a0 _puts_r
41031668 g     O .bss	00000100 alt_irq
41029040 g     F .text	00000078 _lseek_r
4102fbb0 g       *ABS*	00000000 __flash_rwdata_start
4102a7cc g     F .text	00000088 __eqdf2
410318f8 g       *ABS*	00000000 __alt_heap_start
41021b60 g     F .text	00000044 printf
41028950 g     F .text	00000068 __sseek
410257ec g     F .text	000000a4 __sinit
41028b50 g     F .text	00000130 __swbuf_r
410264c4 g     F .text	00000084 _setlocale_r
410258ec g     F .text	00000068 __sfmoreglue
4102b6c0 g     F .text	00000020 __malloc_unlock
41021060 g     F .text	00000174 __divsf3
41026f1c g     F .text	000000e0 memmove
410208ac g     F .text	000000d4 DDR2_RepeatRead
410258dc g     F .text	00000010 _cleanup
41027614 g     F .text	000000bc _Balloc
4102a8dc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
4102063c g     F .text	00000124 i2c_write
41020000 g     F .entry	0000001c __reset
41020020 g       *ABS*	00000000 __flash_exceptions_start
41028f5c g     F .text	00000074 _fstat_r
41031624 g     O .bss	00000004 errno
41021380 g     F .text	00000038 __make_dp
4103162c g     O .bss	00000004 alt_argv
41037b70 g       *ABS*	00000000 _gp
4102bb20 g     F .text	00000030 usleep
4102e990 g     O .rwdata	00000180 alt_fd_list
41021bf4 g     F .text	00000008 _putchar_r
4102d4d8 g     F .text	00000094 alt_find_dev
41021ac0 g     F .text	000000a0 memcpy
41020b44 g     F .text	0000051c TMEM_Verify
410258d0 g     F .text	0000000c _cleanup_r
4102aa74 g     F .text	000000f8 __floatsidf
4102d17c g     F .text	00000078 alt_io_redirect
4102a9ec g     F .text	00000088 __ltdf2
4102dbe0 g       *ABS*	00000000 __DTOR_END__
41021c9c g     F .text	00000014 puts
410273f0 g     F .text	000000b0 __ratio
4102c3dc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
41021ba4 g     F .text	00000034 _printf_r
410214f4 g     F .text	00000008 __udivsi3
4102b2d8 g     F .text	000000c0 isatty
4102dff0 g     O .rodata	000000c8 __mprec_tens
410264a0 g     F .text	00000008 __locale_charset
4102d744 g     F .text	00000090 alt_icache_flush
410203dc g     F .text	00000160 I2C_MultipleRead
41031618 g     O .bss	00000004 __malloc_top_pad
4102fb78 g     O .rwdata	00000004 __mb_cur_max
410264a8 g     F .text	0000000c _localeconv_r
41027d0c g     F .text	0000003c __i2b
41025e84 g     F .text	0000049c __sfvwrite_r
410288d8 g     F .text	00000070 _sbrk_r
410290b8 g     F .text	00000078 _read_r
4102e554 g     O .rwdata	0000000c __lc_ctype
4102fb98 g     O .rwdata	00000004 alt_max_fd
4102add8 g     F .text	00000138 __unpack_d
41028e38 g     F .text	00000110 _fclose_r
41025750 g     F .text	00000034 fflush
4103161c g     O .bss	00000004 __malloc_max_sbrked_mem
4102126c g     F .text	00000054 __extendsfdf2
4102a14c g     F .text	00000074 __adddf3
410272d0 g     F .text	00000120 __b2d
4102970c g     F .text	000005b0 __umoddi3
4102b4e4 g     F .text	000000f0 lseek
4102fb74 g     O .rwdata	00000004 _global_impure_ptr
41028274 g     F .text	000005f4 _realloc_r
410318f8 g       *ABS*	00000000 __bss_end
4102cfc0 g     F .text	000000f8 alt_iic_isr_register
4102ba14 g     F .text	0000010c alt_tick
41029130 g     F .text	000005dc __udivdi3
4102e0b8 g     O .rodata	00000028 __mprec_bigtens
41027f68 g     F .text	00000120 __s2b
4102ac44 g     F .text	00000194 __floatunsidf
410271f0 g     F .text	00000060 __mcmp
410258b8 g     F .text	00000018 __fp_lock_all
4102cf78 g     F .text	00000048 alt_ic_irq_enabled
41020200 g     F .text	000000d8 I2C_Write
4102b97c g     F .text	00000098 alt_alarm_stop
4103163c g     O .bss	00000004 alt_irq_active
410200ec g     F .exceptions	000000c8 alt_irq_handler
4102e968 g     O .rwdata	00000028 alt_dev_null
410216e4 g     F .text	000000c8 __unpack_f
4102053c g     F .text	00000088 i2c_start
4102b134 g     F .text	00000044 alt_dcache_flush_all
410270bc g     F .text	00000070 __hi0bits
4102ab6c g     F .text	000000d8 __fixdfsi
4102fbb0 g       *ABS*	00000000 __ram_rwdata_end
41020000 g       *ABS*	00000000 __alt_mem_onchip_memory
4102fb90 g     O .rwdata	00000008 alt_dev_list
4102bb50 g     F .text	00000120 write
4102818c g     F .text	000000e8 _putc_r
4102e154 g       *ABS*	00000000 __ram_rodata_end
4102b1a4 g     F .text	000000d4 fstat
41027e48 g     F .text	00000120 __pow5mult
4103160c g     O .bss	00000004 __nlocale_changed
410214fc g     F .text	00000008 __umodsi3
410318f8 g       *ABS*	00000000 end
41021584 g     F .text	00000160 __pack_f
4102bedc g     F .text	000000c0 altera_avalon_jtag_uart_init
4102dbdc g       *ABS*	00000000 __CTOR_LIST__
4103f400 g       *ABS*	00000000 __alt_stack_pointer
4102c8b0 g     F .text	00000090 alt_avalon_timer_sc_init
41021504 g     F .text	00000080 __clzsi2
4102c600 g     F .text	00000240 altera_avalon_jtag_uart_write
410257dc g     F .text	00000004 __sfp_lock_acquire
41026e38 g     F .text	000000e4 memchr
41021d7c g     F .text	00001eac ___vfprintf_internal_r
41025b70 g     F .text	00000314 _free_r
4102d9cc g     F .text	000001b0 __call_exitprocs
41031610 g     O .bss	00000004 __mlocale_changed
4102fb84 g     O .rwdata	00000004 __malloc_sbrk_base
410201b4 g     F .text	0000004c _start
41031634 g     O .bss	00000004 _alt_tick_rate
410279d8 g     F .text	0000014c __lshift
41031638 g     O .bss	00000004 _alt_nticks
4102b6e0 g     F .text	00000120 read
4102bd04 g     F .text	00000058 alt_sys_init
410211d4 g     F .text	00000098 __floatsisf
4102d894 g     F .text	00000134 __register_exitproc
41027b24 g     F .text	000001e8 __multiply
4102c274 g     F .text	00000074 altera_avalon_jtag_uart_close
4102e154 g       *ABS*	00000000 __ram_rwdata_start
4102dbe0 g       *ABS*	00000000 __ram_rodata_start
41031640 g     O .bss	00000028 __malloc_current_mallinfo
410276d0 g     F .text	0000017c __d2b
4102bd94 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
4102d68c g     F .text	000000b8 alt_get_fd
4102ca94 g     F .text	0000014c alt_busy_sleep
4102af10 g     F .text	000000c8 __fpcmp_parts_d
41028dc8 g     F .text	00000070 _close_r
4102d820 g     F .text	00000074 memcmp
4102be44 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
410318f8 g       *ABS*	00000000 __alt_stack_base
4102be8c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
41023c4c g     F .text	0000013c __swsetup_r
4102a574 g     F .text	00000258 __divdf3
41025954 g     F .text	000000f0 __sfp
41027534 g     F .text	00000058 __copybits
4102e560 g     O .rwdata	00000408 __malloc_av_
410257e8 g     F .text	00000004 __sinit_lock_release
410205c4 g     F .text	00000078 i2c_stop
4102a1c0 g     F .text	000003b4 __muldf3
41028a34 g     F .text	00000060 __sread
4102de08 g     O .rodata	00000010 __thenan_sf
4102d56c g     F .text	00000120 alt_find_file
4102cbe0 g     F .text	000000b4 alt_dev_llist_insert
4102b6a0 g     F .text	00000020 __malloc_lock
4102b8c0 g     F .text	000000bc sbrk
41025554 g     F .text	000001fc _fflush_r
41028d14 g     F .text	000000b4 _calloc_r
4103160c g       *ABS*	00000000 __bss_start
41026ffc g     F .text	00000098 memset
41020980 g     F .text	000001c4 main
41031630 g     O .bss	00000004 alt_envp
41031620 g     O .bss	00000004 __malloc_max_total_mem
4102bdec g     F .text	00000058 altera_avalon_jtag_uart_write_fd
41020760 g     F .text	0000014c i2c_read
41028c80 g     F .text	0000001c __swbuf
41028948 g     F .text	00000008 __sclose
4103f400 g       *ABS*	00000000 __alt_heap_limit
41028f48 g     F .text	00000014 fclose
41031768 g     O .bss	00000190 _atexit0
41023fa0 g     F .text	000015b4 _dtoa_r
410266f8 g     F .text	00000740 _malloc_r
4102fb9c g     O .rwdata	00000004 alt_errno
00000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr2_emif
410263e8 g     F .text	000000b8 _fwalk
41028088 g     F .text	00000104 putc
41021434 g     F .text	00000060 __divsi3
4102e114 g     O .rodata	00000014 __thenan_df
41025a44 g     F .text	0000012c _malloc_trim_r
4102dbe0 g       *ABS*	00000000 __CTOR_END__
41028a94 g     F .text	000000bc strcmp
4102dbe0 g       *ABS*	00000000 __flash_rodata_start
4102dbe0 g       *ABS*	00000000 __DTOR_LIST__
4102a854 g     F .text	00000088 __nedf2
4102bcd0 g     F .text	00000034 alt_irq_init
4102b860 g     F .text	00000060 alt_release_fd
4102de18 g     O .rodata	00000100 __clz_tab
41031614 g     O .bss	00000004 _PathLocale
4102d7d4 g     F .text	00000014 atexit
41028c9c g     F .text	00000078 _write_r
41026548 g     F .text	0000001c setlocale
4102fb70 g     O .rwdata	00000004 _impure_ptr
41031628 g     O .bss	00000004 alt_argc
4102cd58 g     F .text	00000064 _do_dtors
41020020 g       .exceptions	00000000 alt_irq_entry
41027250 g     F .text	00000080 __ulp
41028868 g     F .text	00000040 __isinfd
410258a0 g     F .text	00000018 __fp_unlock_all
4102fb88 g     O .rwdata	00000008 alt_fs_list
41020020 g       *ABS*	00000000 __ram_exceptions_start
410264b4 g     F .text	00000010 localeconv
4102cdec g     F .text	00000050 alt_ic_isr_register
4102fbb0 g       *ABS*	00000000 _edata
410318f8 g       *ABS*	00000000 _end
410201b4 g       *ABS*	00000000 __ram_exceptions_end
4102c2e8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
4102ced8 g     F .text	000000a0 alt_ic_irq_disable
410289b8 g     F .text	0000007c __swrite
4102fb80 g     O .rwdata	00000004 __malloc_trim_threshold
4102d4b8 g     F .text	00000020 altera_nios2_qsys_irq_init
4102d7e8 g     F .text	00000038 exit
41026320 g     F .text	000000c8 _fwalk_reent
410212c0 g     F .text	000000c0 __floatunsisf
4102784c g     F .text	0000018c __mdiff
41021494 g     F .text	00000060 __modsi3
4103f400 g       *ABS*	00000000 __alt_data_end
41020020 g     F .exceptions	00000000 alt_exception
410257e0 g     F .text	00000004 __sfp_lock_release
4102dbbc g     F .text	00000020 _exit
410288a8 g     F .text	00000030 __isnand
4102c940 g     F .text	00000154 alt_alarm_start
41026564 g     F .text	00000194 __smakebuf_r
41021cb0 g     F .text	00000074 strlen
4102d2d0 g     F .text	00000188 open
4102a964 g     F .text	00000088 __gedf2
4102cdbc g     F .text	00000030 alt_icache_flush_all
4102fbac g     O .rwdata	00000004 alt_priority_mask
4102ce3c g     F .text	0000009c alt_ic_irq_enable
41023c28 g     F .text	00000024 __vfprintf_internal
4102a0cc g     F .text	00000080 __subdf3
4102712c g     F .text	000000c4 __lo0bits
4102fba4 g     O .rwdata	00000008 alt_alarm_list
4102ccf4 g     F .text	00000064 _do_ctors
4102afd8 g     F .text	000000fc close
4102b3f8 g     F .text	00000080 alt_load
410217ac g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
410257e4 g     F .text	00000004 __sinit_lock_acquire
41027d48 g     F .text	00000100 __multadd
41027094 g     F .text	00000028 _Bfree



Disassembly of section .entry:

41020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
41020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
41020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
41020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
4102000c:	00bffd16 	blt	zero,r2,41020004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
41020010:	005040b4 	movhi	at,16642
    ori r1, r1, %lo(_start)
41020014:	08406d14 	ori	at,at,436
    jmp r1
41020018:	0800683a 	jmp	at
4102001c:	00000000 	call	40000000 <__alt_mem_mem_if_ddr2_emif+0x40000000>

Disassembly of section .exceptions:

41020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
41020020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
41020024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
41020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
4102002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
41020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
41020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
41020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
4102003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
41020040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
41020044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
41020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
4102004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
41020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
41020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
41020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
4102005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
41020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
41020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
41020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
4102006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
41020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
41020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
41020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
4102007c:	10000326 	beq	r2,zero,4102008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
41020080:	20000226 	beq	r4,zero,4102008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
41020084:	10200ec0 	call	410200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
41020088:	00000306 	br	41020098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
4102008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
41020090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
41020094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
41020098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
4102009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
410200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
410200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
410200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
410200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
410200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
410200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
410200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
410200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
410200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
410200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
410200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
410200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
410200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
410200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
410200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
410200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
410200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
410200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
410200e8:	ef80083a 	eret

410200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
410200ec:	defff904 	addi	sp,sp,-28
410200f0:	dfc00615 	stw	ra,24(sp)
410200f4:	df000515 	stw	fp,20(sp)
410200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
410200fc:	0005313a 	rdctl	r2,ipending
41020100:	e0bffc15 	stw	r2,-16(fp)

  return active;
41020104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
41020108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
4102010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
41020110:	00800044 	movi	r2,1
41020114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
41020118:	e0ffff17 	ldw	r3,-4(fp)
4102011c:	e0bffe17 	ldw	r2,-8(fp)
41020120:	1884703a 	and	r2,r3,r2
41020124:	1005003a 	cmpeq	r2,r2,zero
41020128:	1000161e 	bne	r2,zero,41020184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
4102012c:	e0bffd17 	ldw	r2,-12(fp)
41020130:	00d040f4 	movhi	r3,16643
41020134:	18c59a04 	addi	r3,r3,5736
41020138:	100490fa 	slli	r2,r2,3
4102013c:	10c5883a 	add	r2,r2,r3
41020140:	11400017 	ldw	r5,0(r2)
41020144:	e0bffd17 	ldw	r2,-12(fp)
41020148:	00d040f4 	movhi	r3,16643
4102014c:	18c59a04 	addi	r3,r3,5736
41020150:	100490fa 	slli	r2,r2,3
41020154:	10c5883a 	add	r2,r2,r3
41020158:	10800104 	addi	r2,r2,4
4102015c:	11000017 	ldw	r4,0(r2)
41020160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
41020164:	0005313a 	rdctl	r2,ipending
41020168:	e0bffb15 	stw	r2,-20(fp)

  return active;
4102016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
41020170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
41020174:	e0bfff17 	ldw	r2,-4(fp)
41020178:	1004c03a 	cmpne	r2,r2,zero
4102017c:	103fe31e 	bne	r2,zero,4102010c <alt_irq_handler+0x20>
41020180:	00000706 	br	410201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
41020184:	e0bffe17 	ldw	r2,-8(fp)
41020188:	1085883a 	add	r2,r2,r2
4102018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
41020190:	e0bffd17 	ldw	r2,-12(fp)
41020194:	10800044 	addi	r2,r2,1
41020198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
4102019c:	003fde06 	br	41020118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
410201a0:	e037883a 	mov	sp,fp
410201a4:	dfc00117 	ldw	ra,4(sp)
410201a8:	df000017 	ldw	fp,0(sp)
410201ac:	dec00204 	addi	sp,sp,8
410201b0:	f800283a 	ret

Disassembly of section .text:

410201b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
410201b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
410201b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
410201bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
410201c0:	00bffd16 	blt	zero,r2,410201b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
410201c4:	06d040f4 	movhi	sp,16643
    ori sp, sp, %lo(__alt_stack_pointer)
410201c8:	defd0014 	ori	sp,sp,62464

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
410201cc:	069040f4 	movhi	gp,16643
    ori gp, gp, %lo(_gp)
410201d0:	d69edc14 	ori	gp,gp,31600
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
410201d4:	009040f4 	movhi	r2,16643
    ori r2, r2, %lo(__bss_start)
410201d8:	10858314 	ori	r2,r2,5644

    movhi r3, %hi(__bss_end)
410201dc:	00d040f4 	movhi	r3,16643
    ori r3, r3, %lo(__bss_end)
410201e0:	18c63e14 	ori	r3,r3,6392

    beq r2, r3, 1f
410201e4:	10c00326 	beq	r2,r3,410201f4 <_start+0x40>

0:
    stw zero, (r2)
410201e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
410201ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
410201f0:	10fffd36 	bltu	r2,r3,410201e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
410201f4:	102b3f80 	call	4102b3f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
410201f8:	102b6340 	call	4102b634 <alt_main>

410201fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
410201fc:	003fff06 	br	410201fc <alt_after_alt_main>

41020200 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
41020200:	defff804 	addi	sp,sp,-32
41020204:	dfc00715 	stw	ra,28(sp)
41020208:	df000615 	stw	fp,24(sp)
4102020c:	df000604 	addi	fp,sp,24
41020210:	e13ffb15 	stw	r4,-20(fp)
41020214:	e17ffc15 	stw	r5,-16(fp)
41020218:	e0800217 	ldw	r2,8(fp)
4102021c:	e1bffd05 	stb	r6,-12(fp)
41020220:	e1fffe05 	stb	r7,-8(fp)
41020224:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
41020228:	00800044 	movi	r2,1
4102022c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
41020230:	e13ffb17 	ldw	r4,-20(fp)
41020234:	e17ffc17 	ldw	r5,-16(fp)
41020238:	102053c0 	call	4102053c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
4102023c:	e0bffd03 	ldbu	r2,-12(fp)
41020240:	11803fcc 	andi	r6,r2,255
41020244:	e13ffb17 	ldw	r4,-20(fp)
41020248:	e17ffc17 	ldw	r5,-16(fp)
4102024c:	102063c0 	call	4102063c <i2c_write>
41020250:	1004c03a 	cmpne	r2,r2,zero
41020254:	1000011e 	bne	r2,zero,4102025c <I2C_Write+0x5c>
        bSuccess = FALSE;
41020258:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
4102025c:	e0bffa17 	ldw	r2,-24(fp)
41020260:	1005003a 	cmpeq	r2,r2,zero
41020264:	1000071e 	bne	r2,zero,41020284 <I2C_Write+0x84>
41020268:	e1bffe03 	ldbu	r6,-8(fp)
4102026c:	e13ffb17 	ldw	r4,-20(fp)
41020270:	e17ffc17 	ldw	r5,-16(fp)
41020274:	102063c0 	call	4102063c <i2c_write>
41020278:	1004c03a 	cmpne	r2,r2,zero
4102027c:	1000011e 	bne	r2,zero,41020284 <I2C_Write+0x84>
        bSuccess = FALSE;
41020280:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
41020284:	e0bffa17 	ldw	r2,-24(fp)
41020288:	1005003a 	cmpeq	r2,r2,zero
4102028c:	1000071e 	bne	r2,zero,410202ac <I2C_Write+0xac>
41020290:	e1bfff03 	ldbu	r6,-4(fp)
41020294:	e13ffb17 	ldw	r4,-20(fp)
41020298:	e17ffc17 	ldw	r5,-16(fp)
4102029c:	102063c0 	call	4102063c <i2c_write>
410202a0:	1004c03a 	cmpne	r2,r2,zero
410202a4:	1000011e 	bne	r2,zero,410202ac <I2C_Write+0xac>
        bSuccess = FALSE;
410202a8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
410202ac:	e13ffb17 	ldw	r4,-20(fp)
410202b0:	e17ffc17 	ldw	r5,-16(fp)
410202b4:	10205c40 	call	410205c4 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
410202b8:	0106d604 	movi	r4,7000
410202bc:	102bb200 	call	4102bb20 <usleep>
    
    return bSuccess;
410202c0:	e0bffa17 	ldw	r2,-24(fp)

    
}
410202c4:	e037883a 	mov	sp,fp
410202c8:	dfc00117 	ldw	ra,4(sp)
410202cc:	df000017 	ldw	fp,0(sp)
410202d0:	dec00204 	addi	sp,sp,8
410202d4:	f800283a 	ret

410202d8 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
410202d8:	defff904 	addi	sp,sp,-28
410202dc:	dfc00615 	stw	ra,24(sp)
410202e0:	df000515 	stw	fp,20(sp)
410202e4:	df000504 	addi	fp,sp,20
410202e8:	e13ffc15 	stw	r4,-16(fp)
410202ec:	e17ffd15 	stw	r5,-12(fp)
410202f0:	e1bffe05 	stb	r6,-8(fp)
410202f4:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
410202f8:	00800044 	movi	r2,1
410202fc:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
41020300:	e13ffc17 	ldw	r4,-16(fp)
41020304:	e17ffd17 	ldw	r5,-12(fp)
41020308:	102053c0 	call	4102053c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
4102030c:	e0bffe03 	ldbu	r2,-8(fp)
41020310:	11803fcc 	andi	r6,r2,255
41020314:	e13ffc17 	ldw	r4,-16(fp)
41020318:	e17ffd17 	ldw	r5,-12(fp)
4102031c:	102063c0 	call	4102063c <i2c_write>
41020320:	1004c03a 	cmpne	r2,r2,zero
41020324:	1000011e 	bne	r2,zero,4102032c <I2C_Read+0x54>
        bSuccess = FALSE;
41020328:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
4102032c:	e0bffb17 	ldw	r2,-20(fp)
41020330:	1005003a 	cmpeq	r2,r2,zero
41020334:	1000071e 	bne	r2,zero,41020354 <I2C_Read+0x7c>
41020338:	e1bfff03 	ldbu	r6,-4(fp)
4102033c:	e13ffc17 	ldw	r4,-16(fp)
41020340:	e17ffd17 	ldw	r5,-12(fp)
41020344:	102063c0 	call	4102063c <i2c_write>
41020348:	1004c03a 	cmpne	r2,r2,zero
4102034c:	1000011e 	bne	r2,zero,41020354 <I2C_Read+0x7c>
        bSuccess = FALSE;
41020350:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
41020354:	e13ffc17 	ldw	r4,-16(fp)
41020358:	e17ffd17 	ldw	r5,-12(fp)
4102035c:	102053c0 	call	4102053c <i2c_start>
    DeviceAddr |= 1; // Read
41020360:	e0bffe03 	ldbu	r2,-8(fp)
41020364:	10800054 	ori	r2,r2,1
41020368:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
4102036c:	e0bffb17 	ldw	r2,-20(fp)
41020370:	1005003a 	cmpeq	r2,r2,zero
41020374:	1000081e 	bne	r2,zero,41020398 <I2C_Read+0xc0>
41020378:	e0bffe03 	ldbu	r2,-8(fp)
4102037c:	11803fcc 	andi	r6,r2,255
41020380:	e13ffc17 	ldw	r4,-16(fp)
41020384:	e17ffd17 	ldw	r5,-12(fp)
41020388:	102063c0 	call	4102063c <i2c_write>
4102038c:	1004c03a 	cmpne	r2,r2,zero
41020390:	1000011e 	bne	r2,zero,41020398 <I2C_Read+0xc0>
        bSuccess = FALSE;
41020394:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
41020398:	e0bffb17 	ldw	r2,-20(fp)
4102039c:	1005003a 	cmpeq	r2,r2,zero
410203a0:	1000051e 	bne	r2,zero,410203b8 <I2C_Read+0xe0>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
410203a4:	e13ffc17 	ldw	r4,-16(fp)
410203a8:	e17ffd17 	ldw	r5,-12(fp)
410203ac:	e1800217 	ldw	r6,8(fp)
410203b0:	000f883a 	mov	r7,zero
410203b4:	10207600 	call	41020760 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
410203b8:	e13ffc17 	ldw	r4,-16(fp)
410203bc:	e17ffd17 	ldw	r5,-12(fp)
410203c0:	10205c40 	call	410205c4 <i2c_stop>
    
    return bSuccess;
410203c4:	e0bffb17 	ldw	r2,-20(fp)
}
410203c8:	e037883a 	mov	sp,fp
410203cc:	dfc00117 	ldw	ra,4(sp)
410203d0:	df000017 	ldw	fp,0(sp)
410203d4:	dec00204 	addi	sp,sp,8
410203d8:	f800283a 	ret

410203dc <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
410203dc:	defff604 	addi	sp,sp,-40
410203e0:	dfc00915 	stw	ra,36(sp)
410203e4:	df000815 	stw	fp,32(sp)
410203e8:	df000804 	addi	fp,sp,32
410203ec:	e13ffb15 	stw	r4,-20(fp)
410203f0:	e17ffc15 	stw	r5,-16(fp)
410203f4:	e1fffe15 	stw	r7,-8(fp)
410203f8:	e0800217 	ldw	r2,8(fp)
410203fc:	e1bffd05 	stb	r6,-12(fp)
41020400:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
41020404:	00800044 	movi	r2,1
41020408:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
4102040c:	e03ff805 	stb	zero,-32(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
41020410:	e13ffb17 	ldw	r4,-20(fp)
41020414:	e17ffc17 	ldw	r5,-16(fp)
41020418:	102053c0 	call	4102053c <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
4102041c:	e0bffd03 	ldbu	r2,-12(fp)
41020420:	11803fcc 	andi	r6,r2,255
41020424:	e13ffb17 	ldw	r4,-20(fp)
41020428:	e17ffc17 	ldw	r5,-16(fp)
4102042c:	102063c0 	call	4102063c <i2c_write>
41020430:	1004c03a 	cmpne	r2,r2,zero
41020434:	1000011e 	bne	r2,zero,4102043c <I2C_MultipleRead+0x60>
        bSuccess = FALSE;
41020438:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
4102043c:	e0bff917 	ldw	r2,-28(fp)
41020440:	1005003a 	cmpeq	r2,r2,zero
41020444:	1000071e 	bne	r2,zero,41020464 <I2C_MultipleRead+0x88>
41020448:	e1bff803 	ldbu	r6,-32(fp)
4102044c:	e13ffb17 	ldw	r4,-20(fp)
41020450:	e17ffc17 	ldw	r5,-16(fp)
41020454:	102063c0 	call	4102063c <i2c_write>
41020458:	1004c03a 	cmpne	r2,r2,zero
4102045c:	1000011e 	bne	r2,zero,41020464 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
41020460:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
41020464:	e0bff917 	ldw	r2,-28(fp)
41020468:	1005003a 	cmpeq	r2,r2,zero
4102046c:	1000031e 	bne	r2,zero,4102047c <I2C_MultipleRead+0xa0>
        i2c_start(clk_base, data_base);  // restart
41020470:	e13ffb17 	ldw	r4,-20(fp)
41020474:	e17ffc17 	ldw	r5,-16(fp)
41020478:	102053c0 	call	4102053c <i2c_start>
    DeviceAddr |= 1; // Read
4102047c:	e0bffd03 	ldbu	r2,-12(fp)
41020480:	10800054 	ori	r2,r2,1
41020484:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
41020488:	e0bff917 	ldw	r2,-28(fp)
4102048c:	1005003a 	cmpeq	r2,r2,zero
41020490:	1000081e 	bne	r2,zero,410204b4 <I2C_MultipleRead+0xd8>
41020494:	e0bffd03 	ldbu	r2,-12(fp)
41020498:	11803fcc 	andi	r6,r2,255
4102049c:	e13ffb17 	ldw	r4,-20(fp)
410204a0:	e17ffc17 	ldw	r5,-16(fp)
410204a4:	102063c0 	call	4102063c <i2c_write>
410204a8:	1004c03a 	cmpne	r2,r2,zero
410204ac:	1000011e 	bne	r2,zero,410204b4 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
410204b0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
410204b4:	e0bff917 	ldw	r2,-28(fp)
410204b8:	1005003a 	cmpeq	r2,r2,zero
410204bc:	1000161e 	bne	r2,zero,41020518 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
410204c0:	e03ffa15 	stw	zero,-24(fp)
410204c4:	00000e06 	br	41020500 <I2C_MultipleRead+0x124>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
410204c8:	e0bffa17 	ldw	r2,-24(fp)
410204cc:	1007883a 	mov	r3,r2
410204d0:	e0bffe17 	ldw	r2,-8(fp)
410204d4:	188d883a 	add	r6,r3,r2
410204d8:	e0bfff0b 	ldhu	r2,-4(fp)
410204dc:	10ffffc4 	addi	r3,r2,-1
410204e0:	e0bffa17 	ldw	r2,-24(fp)
410204e4:	188ec03a 	cmpne	r7,r3,r2
410204e8:	e13ffb17 	ldw	r4,-20(fp)
410204ec:	e17ffc17 	ldw	r5,-16(fp)
410204f0:	10207600 	call	41020760 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
410204f4:	e0bffa17 	ldw	r2,-24(fp)
410204f8:	10800044 	addi	r2,r2,1
410204fc:	e0bffa15 	stw	r2,-24(fp)
41020500:	e0ffff0b 	ldhu	r3,-4(fp)
41020504:	e0bffa17 	ldw	r2,-24(fp)
41020508:	10c0030e 	bge	r2,r3,41020518 <I2C_MultipleRead+0x13c>
4102050c:	e0bff917 	ldw	r2,-28(fp)
41020510:	1004c03a 	cmpne	r2,r2,zero
41020514:	103fec1e 	bne	r2,zero,410204c8 <I2C_MultipleRead+0xec>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
41020518:	e13ffb17 	ldw	r4,-20(fp)
4102051c:	e17ffc17 	ldw	r5,-16(fp)
41020520:	10205c40 	call	410205c4 <i2c_stop>
    
    return bSuccess;    
41020524:	e0bff917 	ldw	r2,-28(fp)
    
}
41020528:	e037883a 	mov	sp,fp
4102052c:	dfc00117 	ldw	ra,4(sp)
41020530:	df000017 	ldw	fp,0(sp)
41020534:	dec00204 	addi	sp,sp,8
41020538:	f800283a 	ret

4102053c <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
4102053c:	defffc04 	addi	sp,sp,-16
41020540:	dfc00315 	stw	ra,12(sp)
41020544:	df000215 	stw	fp,8(sp)
41020548:	df000204 	addi	fp,sp,8
4102054c:	e13ffe15 	stw	r4,-8(fp)
41020550:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
41020554:	e0bfff17 	ldw	r2,-4(fp)
41020558:	10800104 	addi	r2,r2,4
4102055c:	1007883a 	mov	r3,r2
41020560:	00800044 	movi	r2,1
41020564:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
41020568:	e0bfff17 	ldw	r2,-4(fp)
4102056c:	1007883a 	mov	r3,r2
41020570:	00800044 	movi	r2,1
41020574:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
41020578:	e0bffe17 	ldw	r2,-8(fp)
4102057c:	1007883a 	mov	r3,r2
41020580:	00800044 	movi	r2,1
41020584:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
41020588:	01000044 	movi	r4,1
4102058c:	102bb200 	call	4102bb20 <usleep>
     
    SDA_LOW(data_base); // data low
41020590:	e0bfff17 	ldw	r2,-4(fp)
41020594:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
41020598:	01000044 	movi	r4,1
4102059c:	102bb200 	call	4102bb20 <usleep>
    SCL_LOW(clk_base); // clock low
410205a0:	e0bffe17 	ldw	r2,-8(fp)
410205a4:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
410205a8:	01000044 	movi	r4,1
410205ac:	102bb200 	call	4102bb20 <usleep>
}
410205b0:	e037883a 	mov	sp,fp
410205b4:	dfc00117 	ldw	ra,4(sp)
410205b8:	df000017 	ldw	fp,0(sp)
410205bc:	dec00204 	addi	sp,sp,8
410205c0:	f800283a 	ret

410205c4 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
410205c4:	defffc04 	addi	sp,sp,-16
410205c8:	dfc00315 	stw	ra,12(sp)
410205cc:	df000215 	stw	fp,8(sp)
410205d0:	df000204 	addi	fp,sp,8
410205d4:	e13ffe15 	stw	r4,-8(fp)
410205d8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
410205dc:	e0bfff17 	ldw	r2,-4(fp)
410205e0:	10800104 	addi	r2,r2,4
410205e4:	1007883a 	mov	r3,r2
410205e8:	00800044 	movi	r2,1
410205ec:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
410205f0:	e0bfff17 	ldw	r2,-4(fp)
410205f4:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
410205f8:	e0bffe17 	ldw	r2,-8(fp)
410205fc:	1007883a 	mov	r3,r2
41020600:	00800044 	movi	r2,1
41020604:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
41020608:	01000044 	movi	r4,1
4102060c:	102bb200 	call	4102bb20 <usleep>
    SDA_HIGH(data_base); // data high
41020610:	e0bfff17 	ldw	r2,-4(fp)
41020614:	1007883a 	mov	r3,r2
41020618:	00800044 	movi	r2,1
4102061c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
41020620:	01000044 	movi	r4,1
41020624:	102bb200 	call	4102bb20 <usleep>
    

    
}
41020628:	e037883a 	mov	sp,fp
4102062c:	dfc00117 	ldw	ra,4(sp)
41020630:	df000017 	ldw	fp,0(sp)
41020634:	dec00204 	addi	sp,sp,8
41020638:	f800283a 	ret

4102063c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
4102063c:	defff804 	addi	sp,sp,-32
41020640:	dfc00715 	stw	ra,28(sp)
41020644:	df000615 	stw	fp,24(sp)
41020648:	df000604 	addi	fp,sp,24
4102064c:	e13ffd15 	stw	r4,-12(fp)
41020650:	e17ffe15 	stw	r5,-8(fp)
41020654:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
41020658:	00bfe004 	movi	r2,-128
4102065c:	e0bffc05 	stb	r2,-16(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
41020660:	e0bffe17 	ldw	r2,-8(fp)
41020664:	10800104 	addi	r2,r2,4
41020668:	1007883a 	mov	r3,r2
4102066c:	00800044 	movi	r2,1
41020670:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
41020674:	e03ffa15 	stw	zero,-24(fp)
41020678:	00001f06 	br	410206f8 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
4102067c:	e0bffd17 	ldw	r2,-12(fp)
41020680:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
41020684:	e0ffff03 	ldbu	r3,-4(fp)
41020688:	e0bffc03 	ldbu	r2,-16(fp)
4102068c:	1884703a 	and	r2,r3,r2
41020690:	10803fcc 	andi	r2,r2,255
41020694:	1005003a 	cmpeq	r2,r2,zero
41020698:	1000051e 	bne	r2,zero,410206b0 <i2c_write+0x74>
            SDA_HIGH(data_base);
4102069c:	e0bffe17 	ldw	r2,-8(fp)
410206a0:	1007883a 	mov	r3,r2
410206a4:	00800044 	movi	r2,1
410206a8:	18800035 	stwio	r2,0(r3)
410206ac:	00000206 	br	410206b8 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
410206b0:	e0bffe17 	ldw	r2,-8(fp)
410206b4:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
410206b8:	e0bffc03 	ldbu	r2,-16(fp)
410206bc:	1004d07a 	srli	r2,r2,1
410206c0:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_HIGH(clk_base);
410206c4:	e0bffd17 	ldw	r2,-12(fp)
410206c8:	1007883a 	mov	r3,r2
410206cc:	00800044 	movi	r2,1
410206d0:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
410206d4:	01000044 	movi	r4,1
410206d8:	102bb200 	call	4102bb20 <usleep>
        SCL_LOW(clk_base);
410206dc:	e0bffd17 	ldw	r2,-12(fp)
410206e0:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
410206e4:	01000044 	movi	r4,1
410206e8:	102bb200 	call	4102bb20 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
410206ec:	e0bffa17 	ldw	r2,-24(fp)
410206f0:	10800044 	addi	r2,r2,1
410206f4:	e0bffa15 	stw	r2,-24(fp)
410206f8:	e0bffa17 	ldw	r2,-24(fp)
410206fc:	10800210 	cmplti	r2,r2,8
41020700:	103fde1e 	bne	r2,zero,4102067c <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
41020704:	e0bffe17 	ldw	r2,-8(fp)
41020708:	10800104 	addi	r2,r2,4
4102070c:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
41020710:	e0bffd17 	ldw	r2,-12(fp)
41020714:	1007883a 	mov	r3,r2
41020718:	00800044 	movi	r2,1
4102071c:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
41020720:	01000044 	movi	r4,1
41020724:	102bb200 	call	4102bb20 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
41020728:	e0bffe17 	ldw	r2,-8(fp)
4102072c:	10800037 	ldwio	r2,0(r2)
41020730:	1005003a 	cmpeq	r2,r2,zero
41020734:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
41020738:	e0bffd17 	ldw	r2,-12(fp)
4102073c:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
41020740:	01000044 	movi	r4,1
41020744:	102bb200 	call	4102bb20 <usleep>
    return bAck;
41020748:	e0bffb17 	ldw	r2,-20(fp)
}    
4102074c:	e037883a 	mov	sp,fp
41020750:	dfc00117 	ldw	ra,4(sp)
41020754:	df000017 	ldw	fp,0(sp)
41020758:	dec00204 	addi	sp,sp,8
4102075c:	f800283a 	ret

41020760 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
41020760:	defff804 	addi	sp,sp,-32
41020764:	dfc00715 	stw	ra,28(sp)
41020768:	df000615 	stw	fp,24(sp)
4102076c:	df000604 	addi	fp,sp,24
41020770:	e13ffc15 	stw	r4,-16(fp)
41020774:	e17ffd15 	stw	r5,-12(fp)
41020778:	e1bffe15 	stw	r6,-8(fp)
4102077c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
41020780:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
41020784:	e0bffd17 	ldw	r2,-12(fp)
41020788:	10800104 	addi	r2,r2,4
4102078c:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
41020790:	e0bffc17 	ldw	r2,-16(fp)
41020794:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
41020798:	01000044 	movi	r4,1
4102079c:	102bb200 	call	4102bb20 <usleep>

    for(i=0;i<8;i++){
410207a0:	e03ffa15 	stw	zero,-24(fp)
410207a4:	00001706 	br	41020804 <i2c_read+0xa4>
        Data <<= 1;
410207a8:	e0bffb03 	ldbu	r2,-20(fp)
410207ac:	1085883a 	add	r2,r2,r2
410207b0:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
410207b4:	e0bffc17 	ldw	r2,-16(fp)
410207b8:	1007883a 	mov	r3,r2
410207bc:	00800044 	movi	r2,1
410207c0:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
410207c4:	01000044 	movi	r4,1
410207c8:	102bb200 	call	4102bb20 <usleep>
        if (SDA_READ(data_base))  // read data   
410207cc:	e0bffd17 	ldw	r2,-12(fp)
410207d0:	10800037 	ldwio	r2,0(r2)
410207d4:	1005003a 	cmpeq	r2,r2,zero
410207d8:	1000031e 	bne	r2,zero,410207e8 <i2c_read+0x88>
            Data |= 0x01;
410207dc:	e0bffb03 	ldbu	r2,-20(fp)
410207e0:	10800054 	ori	r2,r2,1
410207e4:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
410207e8:	e0bffc17 	ldw	r2,-16(fp)
410207ec:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
410207f0:	01000044 	movi	r4,1
410207f4:	102bb200 	call	4102bb20 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
410207f8:	e0bffa17 	ldw	r2,-24(fp)
410207fc:	10800044 	addi	r2,r2,1
41020800:	e0bffa15 	stw	r2,-24(fp)
41020804:	e0bffa17 	ldw	r2,-24(fp)
41020808:	10800210 	cmplti	r2,r2,8
4102080c:	103fe61e 	bne	r2,zero,410207a8 <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
41020810:	e0bffc17 	ldw	r2,-16(fp)
41020814:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
41020818:	e0bffd17 	ldw	r2,-12(fp)
4102081c:	10800104 	addi	r2,r2,4
41020820:	1007883a 	mov	r3,r2
41020824:	00800044 	movi	r2,1
41020828:	18800035 	stwio	r2,0(r3)
    if (bAck)
4102082c:	e0bfff17 	ldw	r2,-4(fp)
41020830:	1005003a 	cmpeq	r2,r2,zero
41020834:	1000031e 	bne	r2,zero,41020844 <i2c_read+0xe4>
        SDA_LOW(data_base);
41020838:	e0bffd17 	ldw	r2,-12(fp)
4102083c:	10000035 	stwio	zero,0(r2)
41020840:	00000406 	br	41020854 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
41020844:	e0bffd17 	ldw	r2,-12(fp)
41020848:	1007883a 	mov	r3,r2
4102084c:	00800044 	movi	r2,1
41020850:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
41020854:	e0bffc17 	ldw	r2,-16(fp)
41020858:	1007883a 	mov	r3,r2
4102085c:	00800044 	movi	r2,1
41020860:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
41020864:	01000044 	movi	r4,1
41020868:	102bb200 	call	4102bb20 <usleep>
    SCL_LOW(clk_base); // clock low
4102086c:	e0bffc17 	ldw	r2,-16(fp)
41020870:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
41020874:	01000044 	movi	r4,1
41020878:	102bb200 	call	4102bb20 <usleep>
    SDA_LOW(data_base);  // data low
4102087c:	e0bffd17 	ldw	r2,-12(fp)
41020880:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
41020884:	01000044 	movi	r4,1
41020888:	102bb200 	call	4102bb20 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
4102088c:	e0fffe17 	ldw	r3,-8(fp)
41020890:	e0bffb03 	ldbu	r2,-20(fp)
41020894:	18800005 	stb	r2,0(r3)
}
41020898:	e037883a 	mov	sp,fp
4102089c:	dfc00117 	ldw	ra,4(sp)
410208a0:	df000017 	ldw	fp,0(sp)
410208a4:	dec00204 	addi	sp,sp,8
410208a8:	f800283a 	ret

410208ac <DDR2_RepeatRead>:
#include <io.h>

#define SHOW_PROGRESS
#define xTEST_I2C

bool DDR2_RepeatRead(int Addr, int nNum){
410208ac:	defff704 	addi	sp,sp,-36
410208b0:	dfc00815 	stw	ra,32(sp)
410208b4:	df000715 	stw	fp,28(sp)
410208b8:	df000704 	addi	fp,sp,28
410208bc:	e13ffe15 	stw	r4,-8(fp)
410208c0:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
410208c4:	00800044 	movi	r2,1
410208c8:	e0bffd15 	stw	r2,-12(fp)
    int i, Value, FirstValue;
    FirstValue = IORD(MEM_IF_DDR2_EMIF_BASE, Addr);
410208cc:	e0bffe17 	ldw	r2,-8(fp)
410208d0:	1085883a 	add	r2,r2,r2
410208d4:	1085883a 	add	r2,r2,r2
410208d8:	10800037 	ldwio	r2,0(r2)
410208dc:	e0bffa15 	stw	r2,-24(fp)
    for(i=0;i<nNum;i++){
410208e0:	e03ffc15 	stw	zero,-16(fp)
410208e4:	00001406 	br	41020938 <DDR2_RepeatRead+0x8c>
        Value = IORD(MEM_IF_DDR2_EMIF_BASE, Addr);
410208e8:	e0bffe17 	ldw	r2,-8(fp)
410208ec:	1085883a 	add	r2,r2,r2
410208f0:	1085883a 	add	r2,r2,r2
410208f4:	10800037 	ldwio	r2,0(r2)
410208f8:	e0bffb15 	stw	r2,-20(fp)
        if (Value != FirstValue){
410208fc:	e0fffb17 	ldw	r3,-20(fp)
41020900:	e0bffa17 	ldw	r2,-24(fp)
41020904:	18800926 	beq	r3,r2,4102092c <DDR2_RepeatRead+0x80>
            printf("Data mismatch at try=%d/%d, Read=%08Xh, Expected=%08Xh\n", i, nNum, Value, FirstValue);
41020908:	e0bffa17 	ldw	r2,-24(fp)
4102090c:	d8800015 	stw	r2,0(sp)
41020910:	011040f4 	movhi	r4,16643
41020914:	2136f804 	addi	r4,r4,-9248
41020918:	e17ffc17 	ldw	r5,-16(fp)
4102091c:	e1bfff17 	ldw	r6,-4(fp)
41020920:	e1fffb17 	ldw	r7,-20(fp)
41020924:	1021b600 	call	41021b60 <printf>
            bSuccess = FALSE;
41020928:	e03ffd15 	stw	zero,-12(fp)

bool DDR2_RepeatRead(int Addr, int nNum){
    bool bSuccess = TRUE;
    int i, Value, FirstValue;
    FirstValue = IORD(MEM_IF_DDR2_EMIF_BASE, Addr);
    for(i=0;i<nNum;i++){
4102092c:	e0bffc17 	ldw	r2,-16(fp)
41020930:	10800044 	addi	r2,r2,1
41020934:	e0bffc15 	stw	r2,-16(fp)
41020938:	e0fffc17 	ldw	r3,-16(fp)
4102093c:	e0bfff17 	ldw	r2,-4(fp)
41020940:	18bfe916 	blt	r3,r2,410208e8 <DDR2_RepeatRead+0x3c>
            printf("Data mismatch at try=%d/%d, Read=%08Xh, Expected=%08Xh\n", i, nNum, Value, FirstValue);
            bSuccess = FALSE;
        }            
    }
    
    if (bSuccess)
41020944:	e0bffd17 	ldw	r2,-12(fp)
41020948:	1005003a 	cmpeq	r2,r2,zero
4102094c:	1000061e 	bne	r2,zero,41020968 <DDR2_RepeatRead+0xbc>
        printf("Repeat read  success, addr=%d, repeat=%d, value=%08Xh\n", Addr, nNum, FirstValue); 
41020950:	011040f4 	movhi	r4,16643
41020954:	21370604 	addi	r4,r4,-9192
41020958:	e17ffe17 	ldw	r5,-8(fp)
4102095c:	e1bfff17 	ldw	r6,-4(fp)
41020960:	e1fffa17 	ldw	r7,-24(fp)
41020964:	1021b600 	call	41021b60 <printf>
    return bSuccess;
41020968:	e0bffd17 	ldw	r2,-12(fp)
}
4102096c:	e037883a 	mov	sp,fp
41020970:	dfc00117 	ldw	ra,4(sp)
41020974:	df000017 	ldw	fp,0(sp)
41020978:	dec00204 	addi	sp,sp,8
4102097c:	f800283a 	ret

41020980 <main>:
}

#endif //TEST_I2C


int main(){
41020980:	defff404 	addi	sp,sp,-48
41020984:	dfc00b15 	stw	ra,44(sp)
41020988:	df000a15 	stw	fp,40(sp)
4102098c:	dc000915 	stw	r16,36(sp)
41020990:	df000904 	addi	fp,sp,36

    bool bPass, bLoop = FALSE;
41020994:	e03ffe15 	stw	zero,-8(fp)
    int MemSize = MEM_IF_DDR2_EMIF_SPAN;
41020998:	00900034 	movhi	r2,16384
4102099c:	e0bffd15 	stw	r2,-12(fp)
    int TimeStart, TimeElapsed, TestIndex = 0;
410209a0:	e03ffa15 	stw	zero,-24(fp)
    void *ddr2_base = (void *)MEM_IF_DDR2_EMIF_BASE;
410209a4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 InitValue;
    alt_u8 ButtonMask;
    
    
    printf("===== DE4 DDR2 Test Program (UniPHY) =====\n");
410209a8:	011040f4 	movhi	r4,16643
410209ac:	21371404 	addi	r4,r4,-9136
410209b0:	1021c9c0 	call	41021c9c <puts>
    printf("DDR2 Clock: 400 MHZ\n");
410209b4:	011040f4 	movhi	r4,16643
410209b8:	21371f04 	addi	r4,r4,-9092
410209bc:	1021c9c0 	call	41021c9c <puts>
    printf("DDR2  Size: %d MBytes\n", MEM_IF_DDR2_EMIF_SPAN/1024/1024);
410209c0:	011040f4 	movhi	r4,16643
410209c4:	21372404 	addi	r4,r4,-9072
410209c8:	01410004 	movi	r5,1024
410209cc:	1021b600 	call	41021b60 <printf>
410209d0:	00000006 	br	410209d4 <main+0x54>
#ifdef TEST_I2C    
    printf("DDR2 PSD Test: Yes\n");
#endif    
    
    while(1){
        printf("\n==========================================================\n");
410209d4:	011040f4 	movhi	r4,16643
410209d8:	21372a04 	addi	r4,r4,-9048
410209dc:	1021c9c0 	call	41021c9c <puts>
        printf("Press any BUTTON to start test [BUTTON0 for continued test] \n");
410209e0:	011040f4 	movhi	r4,16643
410209e4:	21373904 	addi	r4,r4,-8988
410209e8:	1021c9c0 	call	41021c9c <puts>
        ButtonMask = 0x0F;
410209ec:	008003c4 	movi	r2,15
410209f0:	e0bff705 	stb	r2,-36(fp)
        while((ButtonMask & 0x0F) == 0x0F){
410209f4:	00000506 	br	41020a0c <main+0x8c>
            ButtonMask = IORD(BUTTON_BASE, 0) & 0x0F;
410209f8:	00900034 	movhi	r2,16384
410209fc:	10801404 	addi	r2,r2,80
41020a00:	10800037 	ldwio	r2,0(r2)
41020a04:	108003cc 	andi	r2,r2,15
41020a08:	e0bff705 	stb	r2,-36(fp)
    
    while(1){
        printf("\n==========================================================\n");
        printf("Press any BUTTON to start test [BUTTON0 for continued test] \n");
        ButtonMask = 0x0F;
        while((ButtonMask & 0x0F) == 0x0F){
41020a0c:	e0bff703 	ldbu	r2,-36(fp)
41020a10:	108003cc 	andi	r2,r2,15
41020a14:	108003e0 	cmpeqi	r2,r2,15
41020a18:	103ff71e 	bne	r2,zero,410209f8 <main+0x78>
            ButtonMask = IORD(BUTTON_BASE, 0) & 0x0F;
        }
        
        if ((ButtonMask & 0x01) == 0x00){
41020a1c:	e0bff703 	ldbu	r2,-36(fp)
41020a20:	1080004c 	andi	r2,r2,1
41020a24:	1004c03a 	cmpne	r2,r2,zero
41020a28:	1000031e 	bne	r2,zero,41020a38 <main+0xb8>
            bLoop = TRUE;
41020a2c:	00800044 	movi	r2,1
41020a30:	e0bffe15 	stw	r2,-8(fp)
41020a34:	00000106 	br	41020a3c <main+0xbc>
        }else{
            bLoop = FALSE;
41020a38:	e03ffe15 	stw	zero,-8(fp)
        }                    
        
        bPass = TRUE;
41020a3c:	00800044 	movi	r2,1
41020a40:	e0bfff15 	stw	r2,-4(fp)
        TestIndex = 0;
41020a44:	e03ffa15 	stw	zero,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
41020a48:	009040f4 	movhi	r2,16643
41020a4c:	10858e04 	addi	r2,r2,5688
41020a50:	10800017 	ldw	r2,0(r2)
        
        do{
        
            TimeStart = alt_nticks();
41020a54:	e0bffc15 	stw	r2,-16(fp)
            TestIndex++;
41020a58:	e0bffa17 	ldw	r2,-24(fp)
41020a5c:	10800044 	addi	r2,r2,1
41020a60:	e0bffa15 	stw	r2,-24(fp)
            else        
                printf("I2C NG\n");
#endif                
    
            // memory test
            printf("=====> DDR2 Testing, Iteration: %d\n", TestIndex);
41020a64:	011040f4 	movhi	r4,16643
41020a68:	21374904 	addi	r4,r4,-8924
41020a6c:	e17ffa17 	ldw	r5,-24(fp)
41020a70:	1021b600 	call	41021b60 <printf>
41020a74:	009040f4 	movhi	r2,16643
41020a78:	10858e04 	addi	r2,r2,5688
41020a7c:	10800017 	ldw	r2,0(r2)
            InitValue = alt_nticks();
41020a80:	e0bff815 	stw	r2,-32(fp)
            bPass = TMEM_Verify((alt_u32)ddr2_base, MemSize, InitValue);
41020a84:	e0bff917 	ldw	r2,-28(fp)
41020a88:	1009883a 	mov	r4,r2
41020a8c:	e17ffd17 	ldw	r5,-12(fp)
41020a90:	e1bff817 	ldw	r6,-32(fp)
41020a94:	1020b440 	call	41020b44 <TMEM_Verify>
41020a98:	e0bfff15 	stw	r2,-4(fp)
41020a9c:	009040f4 	movhi	r2,16643
41020aa0:	10858e04 	addi	r2,r2,5688
41020aa4:	10800017 	ldw	r2,0(r2)
41020aa8:	1007883a 	mov	r3,r2
            TimeElapsed = alt_nticks()-TimeStart;
41020aac:	e0bffc17 	ldw	r2,-16(fp)
41020ab0:	1885c83a 	sub	r2,r3,r2
41020ab4:	e0bffb15 	stw	r2,-20(fp)
            if (bPass){
41020ab8:	e0bfff17 	ldw	r2,-4(fp)
41020abc:	1005003a 	cmpeq	r2,r2,zero
41020ac0:	1000161e 	bne	r2,zero,41020b1c <main+0x19c>
                printf("DDR2 test pass, size=%d bytes, %.3f sec\n", MemSize, (float)TimeElapsed/(float)alt_ticks_per_second());
41020ac4:	e13ffb17 	ldw	r4,-20(fp)
41020ac8:	10211d40 	call	410211d4 <__floatsisf>
41020acc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
41020ad0:	009040f4 	movhi	r2,16643
41020ad4:	10858d04 	addi	r2,r2,5684
41020ad8:	10800017 	ldw	r2,0(r2)
41020adc:	1009883a 	mov	r4,r2
41020ae0:	10212c00 	call	410212c0 <__floatunsisf>
41020ae4:	8009883a 	mov	r4,r16
41020ae8:	100b883a 	mov	r5,r2
41020aec:	10210600 	call	41021060 <__divsf3>
41020af0:	1009883a 	mov	r4,r2
41020af4:	102126c0 	call	4102126c <__extendsfdf2>
41020af8:	100f883a 	mov	r7,r2
41020afc:	1811883a 	mov	r8,r3
41020b00:	011040f4 	movhi	r4,16643
41020b04:	21375204 	addi	r4,r4,-8888
41020b08:	e17ffd17 	ldw	r5,-12(fp)
41020b0c:	380d883a 	mov	r6,r7
41020b10:	400f883a 	mov	r7,r8
41020b14:	1021b600 	call	41021b60 <printf>
41020b18:	00000306 	br	41020b28 <main+0x1a8>
            }else{
                printf("DDR2 test fail\n");
41020b1c:	011040f4 	movhi	r4,16643
41020b20:	21375d04 	addi	r4,r4,-8844
41020b24:	1021c9c0 	call	41021c9c <puts>
            }
        }while(bLoop && bPass);
41020b28:	e0bffe17 	ldw	r2,-8(fp)
41020b2c:	1005003a 	cmpeq	r2,r2,zero
41020b30:	103fa81e 	bne	r2,zero,410209d4 <main+0x54>
41020b34:	e0bfff17 	ldw	r2,-4(fp)
41020b38:	1004c03a 	cmpne	r2,r2,zero
41020b3c:	103fc21e 	bne	r2,zero,41020a48 <main+0xc8>
    }        
41020b40:	003fa406 	br	410209d4 <main+0x54>

41020b44 <TMEM_Verify>:
#include "mem_test.h"
#include "system.h" // IOWR()

#define SHOW_PROGRESS

bool TMEM_Verify(alt_u32 BaseAddr, alt_u32 ByteLen, alt_u32 InitValue){
41020b44:	defedf04 	addi	sp,sp,-1156
41020b48:	dfc12015 	stw	ra,1152(sp)
41020b4c:	df011f15 	stw	fp,1148(sp)
41020b50:	dc411e15 	stw	r17,1144(sp)
41020b54:	dc011d15 	stw	r16,1140(sp)
41020b58:	df011d04 	addi	fp,sp,1140
41020b5c:	e13ffb15 	stw	r4,-20(fp)
41020b60:	e17ffc15 	stw	r5,-16(fp)
41020b64:	e1bffd15 	stw	r6,-12(fp)
    bool bPass = TRUE;
41020b68:	00800044 	movi	r2,1
41020b6c:	e0beef15 	stw	r2,-1092(fp)
    typedef alt_u32 my_data;
    my_data szData[257];
    int i, nRemainedLen, nAccessLen;
    my_data *pDes, *pSrc;
    int nItemNum, nPos;
    const int my_data_size = sizeof(my_data);
41020b70:	00800104 	movi	r2,4
41020b74:	e0bee715 	stw	r2,-1124(fp)
#ifdef SHOW_PROGRESS
    int nProgressIndex=0;
41020b78:	e03ee615 	stw	zero,-1128(fp)
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
41020b7c:	e03eee15 	stw	zero,-1096(fp)
41020b80:	00001606 	br	41020bdc <TMEM_Verify+0x98>
        szProgress[i] = ByteLen/10*(i+1);     
41020b84:	e13eee17 	ldw	r4,-1096(fp)
41020b88:	e0fffc17 	ldw	r3,-16(fp)
41020b8c:	00b33374 	movhi	r2,52429
41020b90:	10b33344 	addi	r2,r2,-13107
41020b94:	188b383a 	mul	r5,r3,r2
41020b98:	e17ffe15 	stw	r5,-8(fp)
41020b9c:	1886383a 	mulxuu	r3,r3,r2
41020ba0:	e0ffff15 	stw	r3,-4(fp)
41020ba4:	e0bfff17 	ldw	r2,-4(fp)
41020ba8:	1006d0fa 	srli	r3,r2,3
41020bac:	e0beee17 	ldw	r2,-1096(fp)
41020bb0:	10800044 	addi	r2,r2,1
41020bb4:	1887383a 	mul	r3,r3,r2
41020bb8:	2105883a 	add	r2,r4,r4
41020bbc:	1085883a 	add	r2,r2,r2
41020bc0:	e13ee304 	addi	r4,fp,-1140
41020bc4:	1105883a 	add	r2,r2,r4
41020bc8:	10810e04 	addi	r2,r2,1080
41020bcc:	10c00015 	stw	r3,0(r2)
    const int my_data_size = sizeof(my_data);
#ifdef SHOW_PROGRESS
    int nProgressIndex=0;
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
41020bd0:	e0beee17 	ldw	r2,-1096(fp)
41020bd4:	10800044 	addi	r2,r2,1
41020bd8:	e0beee15 	stw	r2,-1096(fp)
41020bdc:	e0beee17 	ldw	r2,-1096(fp)
41020be0:	10800290 	cmplti	r2,r2,10
41020be4:	103fe71e 	bne	r2,zero,41020b84 <TMEM_Verify+0x40>
        szProgress[i] = ByteLen/10*(i+1);     
    }
    
#endif    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
41020be8:	00804044 	movi	r2,257
41020bec:	e0bee915 	stw	r2,-1116(fp)
    for(i=0;i<nItemNum;i++){
41020bf0:	e03eee15 	stw	zero,-1096(fp)
41020bf4:	00001f06 	br	41020c74 <TMEM_Verify+0x130>
        if (i == 0)
41020bf8:	e0beee17 	ldw	r2,-1096(fp)
41020bfc:	1004c03a 	cmpne	r2,r2,zero
41020c00:	1000091e 	bne	r2,zero,41020c28 <TMEM_Verify+0xe4>
            szData[i] = InitValue;
41020c04:	e0beee17 	ldw	r2,-1096(fp)
41020c08:	1085883a 	add	r2,r2,r2
41020c0c:	1085883a 	add	r2,r2,r2
41020c10:	e17ee304 	addi	r5,fp,-1140
41020c14:	1145883a 	add	r2,r2,r5
41020c18:	10c00d04 	addi	r3,r2,52
41020c1c:	e0bffd17 	ldw	r2,-12(fp)
41020c20:	18800015 	stw	r2,0(r3)
41020c24:	00001006 	br	41020c68 <TMEM_Verify+0x124>
        else     
            szData[i] = szData[i-1] * 13;
41020c28:	e13eee17 	ldw	r4,-1096(fp)
41020c2c:	e0beee17 	ldw	r2,-1096(fp)
41020c30:	10bfffc4 	addi	r2,r2,-1
41020c34:	1085883a 	add	r2,r2,r2
41020c38:	1085883a 	add	r2,r2,r2
41020c3c:	e0fee304 	addi	r3,fp,-1140
41020c40:	10c5883a 	add	r2,r2,r3
41020c44:	10800d04 	addi	r2,r2,52
41020c48:	10800017 	ldw	r2,0(r2)
41020c4c:	10c00364 	muli	r3,r2,13
41020c50:	2105883a 	add	r2,r4,r4
41020c54:	1085883a 	add	r2,r2,r2
41020c58:	e13ee304 	addi	r4,fp,-1140
41020c5c:	1105883a 	add	r2,r2,r4
41020c60:	10800d04 	addi	r2,r2,52
41020c64:	10c00015 	stw	r3,0(r2)
    }
    
#endif    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
    for(i=0;i<nItemNum;i++){
41020c68:	e0beee17 	ldw	r2,-1096(fp)
41020c6c:	10800044 	addi	r2,r2,1
41020c70:	e0beee15 	stw	r2,-1096(fp)
41020c74:	e0feee17 	ldw	r3,-1096(fp)
41020c78:	e0bee917 	ldw	r2,-1116(fp)
41020c7c:	18bfde16 	blt	r3,r2,41020bf8 <TMEM_Verify+0xb4>
        if (i == 0)
            szData[i] = InitValue;
        else     
            szData[i] = szData[i-1] * 13;
    }
    szData[nItemNum-1] = 0xAAAAAAAA;
41020c80:	e0bee917 	ldw	r2,-1116(fp)
41020c84:	10bfffc4 	addi	r2,r2,-1
41020c88:	1085883a 	add	r2,r2,r2
41020c8c:	1085883a 	add	r2,r2,r2
41020c90:	e17ee304 	addi	r5,fp,-1140
41020c94:	1145883a 	add	r2,r2,r5
41020c98:	10c00d04 	addi	r3,r2,52
41020c9c:	00aaaaf4 	movhi	r2,43691
41020ca0:	10aaaa84 	addi	r2,r2,-21846
41020ca4:	18800015 	stw	r2,0(r3)
    szData[nItemNum-2] = 0x55555555;
41020ca8:	e0bee917 	ldw	r2,-1116(fp)
41020cac:	10bfff84 	addi	r2,r2,-2
41020cb0:	1085883a 	add	r2,r2,r2
41020cb4:	1085883a 	add	r2,r2,r2
41020cb8:	e0fee304 	addi	r3,fp,-1140
41020cbc:	10c5883a 	add	r2,r2,r3
41020cc0:	10c00d04 	addi	r3,r2,52
41020cc4:	00955574 	movhi	r2,21845
41020cc8:	10955544 	addi	r2,r2,21845
41020ccc:	18800015 	stw	r2,0(r3)
    szData[nItemNum-3] = 0x00000000;
41020cd0:	e0bee917 	ldw	r2,-1116(fp)
41020cd4:	10bfff44 	addi	r2,r2,-3
41020cd8:	1085883a 	add	r2,r2,r2
41020cdc:	1085883a 	add	r2,r2,r2
41020ce0:	e13ee304 	addi	r4,fp,-1140
41020ce4:	1105883a 	add	r2,r2,r4
41020ce8:	10800d04 	addi	r2,r2,52
41020cec:	10000015 	stw	zero,0(r2)
    szData[nItemNum-4] = 0xFFFFFFFF;
41020cf0:	e0bee917 	ldw	r2,-1116(fp)
41020cf4:	10bfff04 	addi	r2,r2,-4
41020cf8:	1085883a 	add	r2,r2,r2
41020cfc:	1085883a 	add	r2,r2,r2
41020d00:	e17ee304 	addi	r5,fp,-1140
41020d04:	1145883a 	add	r2,r2,r5
41020d08:	10c00d04 	addi	r3,r2,52
41020d0c:	00bfffc4 	movi	r2,-1
41020d10:	18800015 	stw	r2,0(r3)
    
#ifdef SHOW_PROGRESS
    printf("write...\n");
41020d14:	011040f4 	movhi	r4,16643
41020d18:	21376104 	addi	r4,r4,-8828
41020d1c:	1021c9c0 	call	41021c9c <puts>
#endif      
    // write
    pDes = (my_data *)BaseAddr;
41020d20:	e0bffb17 	ldw	r2,-20(fp)
41020d24:	e0beeb15 	stw	r2,-1108(fp)
    nAccessLen = sizeof(szData);
41020d28:	00810104 	movi	r2,1028
41020d2c:	e0beec15 	stw	r2,-1104(fp)
    nItemNum = nAccessLen / my_data_size;
41020d30:	e13eec17 	ldw	r4,-1104(fp)
41020d34:	e17ee717 	ldw	r5,-1124(fp)
41020d38:	10214340 	call	41021434 <__divsi3>
41020d3c:	e0bee915 	stw	r2,-1116(fp)
    nPos = 0;
41020d40:	e03ee815 	stw	zero,-1120(fp)
    while(nPos < ByteLen){
41020d44:	00003206 	br	41020e10 <TMEM_Verify+0x2cc>
        nRemainedLen = ByteLen - nPos;
41020d48:	e0fee817 	ldw	r3,-1120(fp)
41020d4c:	e0bffc17 	ldw	r2,-16(fp)
41020d50:	10c5c83a 	sub	r2,r2,r3
41020d54:	e0beed15 	stw	r2,-1100(fp)
        if (nAccessLen > nRemainedLen){
41020d58:	e0feec17 	ldw	r3,-1104(fp)
41020d5c:	e0beed17 	ldw	r2,-1100(fp)
41020d60:	10c0060e 	bge	r2,r3,41020d7c <TMEM_Verify+0x238>
            nAccessLen = nRemainedLen;
41020d64:	e0beed17 	ldw	r2,-1100(fp)
41020d68:	e0beec15 	stw	r2,-1104(fp)
            nItemNum = nAccessLen / my_data_size;
41020d6c:	e13eec17 	ldw	r4,-1104(fp)
41020d70:	e17ee717 	ldw	r5,-1124(fp)
41020d74:	10214340 	call	41021434 <__divsi3>
41020d78:	e0bee915 	stw	r2,-1116(fp)
        }    
        memcpy(pDes, szData, nAccessLen);
41020d7c:	e1beec17 	ldw	r6,-1104(fp)
41020d80:	e0beeb17 	ldw	r2,-1108(fp)
41020d84:	e0fef004 	addi	r3,fp,-1088
41020d88:	1009883a 	mov	r4,r2
41020d8c:	180b883a 	mov	r5,r3
41020d90:	1021ac00 	call	41021ac0 <memcpy>
        pDes += nItemNum;
41020d94:	e0bee917 	ldw	r2,-1116(fp)
41020d98:	1085883a 	add	r2,r2,r2
41020d9c:	1085883a 	add	r2,r2,r2
41020da0:	1007883a 	mov	r3,r2
41020da4:	e0beeb17 	ldw	r2,-1108(fp)
41020da8:	10c5883a 	add	r2,r2,r3
41020dac:	e0beeb15 	stw	r2,-1108(fp)
        nPos += nAccessLen;
41020db0:	e0fee817 	ldw	r3,-1120(fp)
41020db4:	e0beec17 	ldw	r2,-1104(fp)
41020db8:	1885883a 	add	r2,r3,r2
41020dbc:	e0bee815 	stw	r2,-1120(fp)
#ifdef SHOW_PROGRESS
        if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
41020dc0:	e0bee617 	ldw	r2,-1128(fp)
41020dc4:	10800288 	cmpgei	r2,r2,10
41020dc8:	1000111e 	bne	r2,zero,41020e10 <TMEM_Verify+0x2cc>
41020dcc:	e0fee817 	ldw	r3,-1120(fp)
41020dd0:	e0bee617 	ldw	r2,-1128(fp)
41020dd4:	1085883a 	add	r2,r2,r2
41020dd8:	1085883a 	add	r2,r2,r2
41020ddc:	e13ee304 	addi	r4,fp,-1140
41020de0:	1105883a 	add	r2,r2,r4
41020de4:	10810e04 	addi	r2,r2,1080
41020de8:	10800017 	ldw	r2,0(r2)
41020dec:	18800836 	bltu	r3,r2,41020e10 <TMEM_Verify+0x2cc>
            nProgressIndex++;
41020df0:	e0bee617 	ldw	r2,-1128(fp)
41020df4:	10800044 	addi	r2,r2,1
41020df8:	e0bee615 	stw	r2,-1128(fp)
            printf("%02d%% ", nProgressIndex*10);
41020dfc:	e0bee617 	ldw	r2,-1128(fp)
41020e00:	114002a4 	muli	r5,r2,10
41020e04:	011040f4 	movhi	r4,16643
41020e08:	21376404 	addi	r4,r4,-8816
41020e0c:	1021b600 	call	41021b60 <printf>
    // write
    pDes = (my_data *)BaseAddr;
    nAccessLen = sizeof(szData);
    nItemNum = nAccessLen / my_data_size;
    nPos = 0;
    while(nPos < ByteLen){
41020e10:	e0fee817 	ldw	r3,-1120(fp)
41020e14:	e0bffc17 	ldw	r2,-16(fp)
41020e18:	18bfcb36 	bltu	r3,r2,41020d48 <TMEM_Verify+0x204>
            printf("%02d%% ", nProgressIndex*10);
        }
#endif           
    } 
    
    alt_dcache_flush_all();
41020e1c:	102b1340 	call	4102b134 <alt_dcache_flush_all>
/////May the God bless me. Jiang////
    alt_u32 a = 2;
41020e20:	00800084 	movi	r2,2
41020e24:	e0bee515 	stw	r2,-1132(fp)
    alt_u32 b = 3;
41020e28:	008000c4 	movi	r2,3
41020e2c:	e0bee415 	stw	r2,-1136(fp)
    alt_u32 c = 0;
41020e30:	e03ee315 	stw	zero,-1140(fp)
    //alt_u32 h = 0;

    IOWR_32DIRECT(TESTING_WRAPPERR_BASE,0x0,a);
41020e34:	e0fee517 	ldw	r3,-1132(fp)
41020e38:	00904134 	movhi	r2,16644
41020e3c:	10840404 	addi	r2,r2,4112
41020e40:	10c00035 	stwio	r3,0(r2)
    IOWR_32DIRECT(TESTING_WRAPPERR_BASE,0x4,b);
41020e44:	e0fee417 	ldw	r3,-1136(fp)
41020e48:	00904134 	movhi	r2,16644
41020e4c:	10840504 	addi	r2,r2,4116
41020e50:	10c00035 	stwio	r3,0(r2)
    IOWR_32DIRECT(TESTING_WRAPPERR_BASE,0x8,c);
41020e54:	e0fee317 	ldw	r3,-1140(fp)
41020e58:	00904134 	movhi	r2,16644
41020e5c:	10840604 	addi	r2,r2,4120
41020e60:	10c00035 	stwio	r3,0(r2)
    c = IORD_32DIRECT(TESTING_WRAPPERR_BASE,0x0);
41020e64:	00904134 	movhi	r2,16644
41020e68:	10840404 	addi	r2,r2,4112
41020e6c:	10800037 	ldwio	r2,0(r2)
41020e70:	e0bee315 	stw	r2,-1140(fp)
    printf("\n //////// \nThe result is %d //////// \n", (int)c);
41020e74:	e17ee317 	ldw	r5,-1140(fp)
41020e78:	011040f4 	movhi	r4,16643
41020e7c:	21376604 	addi	r4,r4,-8808
41020e80:	1021b600 	call	41021b60 <printf>


///////Thanks a lot. God/////////////
#ifdef SHOW_PROGRESS
    nProgressIndex = 0;
41020e84:	e03ee615 	stw	zero,-1128(fp)
    printf("\nread/verify...\n");
41020e88:	011040f4 	movhi	r4,16643
41020e8c:	21377004 	addi	r4,r4,-8768
41020e90:	1021c9c0 	call	41021c9c <puts>
#endif      
    
    // read & verify
    pSrc = (my_data *)BaseAddr;
41020e94:	e0bffb17 	ldw	r2,-20(fp)
41020e98:	e0beea15 	stw	r2,-1112(fp)
    nAccessLen = sizeof(szData);
41020e9c:	00810104 	movi	r2,1028
41020ea0:	e0beec15 	stw	r2,-1104(fp)
    nItemNum = nAccessLen / my_data_size;
41020ea4:	e13eec17 	ldw	r4,-1104(fp)
41020ea8:	e17ee717 	ldw	r5,-1124(fp)
41020eac:	10214340 	call	41021434 <__divsi3>
41020eb0:	e0bee915 	stw	r2,-1116(fp)
    nPos = 0;
41020eb4:	e03ee815 	stw	zero,-1120(fp)
    while(bPass && nPos < ByteLen){
41020eb8:	00005906 	br	41021020 <TMEM_Verify+0x4dc>
        nRemainedLen = ByteLen - nPos;
41020ebc:	e0fee817 	ldw	r3,-1120(fp)
41020ec0:	e0bffc17 	ldw	r2,-16(fp)
41020ec4:	10c5c83a 	sub	r2,r2,r3
41020ec8:	e0beed15 	stw	r2,-1100(fp)
        if (nAccessLen > nRemainedLen){
41020ecc:	e0feec17 	ldw	r3,-1104(fp)
41020ed0:	e0beed17 	ldw	r2,-1100(fp)
41020ed4:	10c0060e 	bge	r2,r3,41020ef0 <TMEM_Verify+0x3ac>
            nAccessLen = nRemainedLen;
41020ed8:	e0beed17 	ldw	r2,-1100(fp)
41020edc:	e0beec15 	stw	r2,-1104(fp)
            nItemNum = nAccessLen / my_data_size;
41020ee0:	e13eec17 	ldw	r4,-1104(fp)
41020ee4:	e17ee717 	ldw	r5,-1124(fp)
41020ee8:	10214340 	call	41021434 <__divsi3>
41020eec:	e0bee915 	stw	r2,-1116(fp)
        }            
        pDes = szData;
41020ef0:	e0bef004 	addi	r2,fp,-1088
41020ef4:	e0beeb15 	stw	r2,-1108(fp)
        for(i=0;i<nItemNum && bPass;i++){
41020ef8:	e03eee15 	stw	zero,-1096(fp)
41020efc:	00002a06 	br	41020fa8 <TMEM_Verify+0x464>
            if (*pSrc++ != *pDes++){ 
41020f00:	e0beea17 	ldw	r2,-1112(fp)
41020f04:	10c00017 	ldw	r3,0(r2)
41020f08:	e0beeb17 	ldw	r2,-1108(fp)
41020f0c:	10800017 	ldw	r2,0(r2)
41020f10:	1884c03a 	cmpne	r2,r3,r2
41020f14:	1007883a 	mov	r3,r2
41020f18:	e0beea17 	ldw	r2,-1112(fp)
41020f1c:	10800104 	addi	r2,r2,4
41020f20:	e0beea15 	stw	r2,-1112(fp)
41020f24:	e0beeb17 	ldw	r2,-1108(fp)
41020f28:	10800104 	addi	r2,r2,4
41020f2c:	e0beeb15 	stw	r2,-1108(fp)
41020f30:	18803fcc 	andi	r2,r3,255
41020f34:	1005003a 	cmpeq	r2,r2,zero
41020f38:	1000181e 	bne	r2,zero,41020f9c <TMEM_Verify+0x458>
#ifdef SHOW_PROGRESS                
               printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
41020f3c:	e0beea17 	ldw	r2,-1112(fp)
41020f40:	10bfff04 	addi	r2,r2,-4
41020f44:	10800017 	ldw	r2,0(r2)
41020f48:	1023883a 	mov	r17,r2
41020f4c:	e0beee17 	ldw	r2,-1096(fp)
41020f50:	1085883a 	add	r2,r2,r2
41020f54:	1085883a 	add	r2,r2,r2
41020f58:	e17ee304 	addi	r5,fp,-1140
41020f5c:	1145883a 	add	r2,r2,r5
41020f60:	10800d04 	addi	r2,r2,52
41020f64:	10800017 	ldw	r2,0(r2)
41020f68:	1021883a 	mov	r16,r2
41020f6c:	e13ee817 	ldw	r4,-1120(fp)
41020f70:	e17ee717 	ldw	r5,-1124(fp)
41020f74:	10214340 	call	41021434 <__divsi3>
41020f78:	1007883a 	mov	r3,r2
41020f7c:	e0beee17 	ldw	r2,-1096(fp)
41020f80:	188f883a 	add	r7,r3,r2
41020f84:	011040f4 	movhi	r4,16643
41020f88:	21377404 	addi	r4,r4,-8752
41020f8c:	880b883a 	mov	r5,r17
41020f90:	800d883a 	mov	r6,r16
41020f94:	1021b600 	call	41021b60 <printf>
#endif               
                bPass = FALSE;
41020f98:	e03eef15 	stw	zero,-1092(fp)
        if (nAccessLen > nRemainedLen){
            nAccessLen = nRemainedLen;
            nItemNum = nAccessLen / my_data_size;
        }            
        pDes = szData;
        for(i=0;i<nItemNum && bPass;i++){
41020f9c:	e0beee17 	ldw	r2,-1096(fp)
41020fa0:	10800044 	addi	r2,r2,1
41020fa4:	e0beee15 	stw	r2,-1096(fp)
41020fa8:	e0feee17 	ldw	r3,-1096(fp)
41020fac:	e0bee917 	ldw	r2,-1116(fp)
41020fb0:	1880030e 	bge	r3,r2,41020fc0 <TMEM_Verify+0x47c>
41020fb4:	e0beef17 	ldw	r2,-1092(fp)
41020fb8:	1004c03a 	cmpne	r2,r2,zero
41020fbc:	103fd01e 	bne	r2,zero,41020f00 <TMEM_Verify+0x3bc>
               printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
#endif               
                bPass = FALSE;
            }    
        }
        nPos += nAccessLen;
41020fc0:	e0fee817 	ldw	r3,-1120(fp)
41020fc4:	e0beec17 	ldw	r2,-1104(fp)
41020fc8:	1885883a 	add	r2,r3,r2
41020fcc:	e0bee815 	stw	r2,-1120(fp)
#ifdef SHOW_PROGRESS
        if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
41020fd0:	e0bee617 	ldw	r2,-1128(fp)
41020fd4:	10800288 	cmpgei	r2,r2,10
41020fd8:	1000111e 	bne	r2,zero,41021020 <TMEM_Verify+0x4dc>
41020fdc:	e0fee817 	ldw	r3,-1120(fp)
41020fe0:	e0bee617 	ldw	r2,-1128(fp)
41020fe4:	1085883a 	add	r2,r2,r2
41020fe8:	1085883a 	add	r2,r2,r2
41020fec:	e13ee304 	addi	r4,fp,-1140
41020ff0:	1105883a 	add	r2,r2,r4
41020ff4:	10810e04 	addi	r2,r2,1080
41020ff8:	10800017 	ldw	r2,0(r2)
41020ffc:	18800836 	bltu	r3,r2,41021020 <TMEM_Verify+0x4dc>
            nProgressIndex++;
41021000:	e0bee617 	ldw	r2,-1128(fp)
41021004:	10800044 	addi	r2,r2,1
41021008:	e0bee615 	stw	r2,-1128(fp)
            printf("%02d%% ", nProgressIndex*10);
4102100c:	e0bee617 	ldw	r2,-1128(fp)
41021010:	114002a4 	muli	r5,r2,10
41021014:	011040f4 	movhi	r4,16643
41021018:	21376404 	addi	r4,r4,-8816
4102101c:	1021b600 	call	41021b60 <printf>
    // read & verify
    pSrc = (my_data *)BaseAddr;
    nAccessLen = sizeof(szData);
    nItemNum = nAccessLen / my_data_size;
    nPos = 0;
    while(bPass && nPos < ByteLen){
41021020:	e0beef17 	ldw	r2,-1092(fp)
41021024:	1005003a 	cmpeq	r2,r2,zero
41021028:	1000031e 	bne	r2,zero,41021038 <TMEM_Verify+0x4f4>
4102102c:	e0fee817 	ldw	r3,-1120(fp)
41021030:	e0bffc17 	ldw	r2,-16(fp)
41021034:	18bfa136 	bltu	r3,r2,41020ebc <TMEM_Verify+0x378>
        }
#endif          
    }     
    
#ifdef SHOW_PROGRESS
    printf("\n");
41021038:	01000284 	movi	r4,10
4102103c:	1021bd80 	call	41021bd8 <putchar>
#endif     
    
    
    return bPass;
41021040:	e0beef17 	ldw	r2,-1092(fp)
}
41021044:	e037883a 	mov	sp,fp
41021048:	dfc00317 	ldw	ra,12(sp)
4102104c:	df000217 	ldw	fp,8(sp)
41021050:	dc400117 	ldw	r17,4(sp)
41021054:	dc000017 	ldw	r16,0(sp)
41021058:	dec00404 	addi	sp,sp,16
4102105c:	f800283a 	ret

41021060 <__divsf3>:
41021060:	defff304 	addi	sp,sp,-52
41021064:	dc400b15 	stw	r17,44(sp)
41021068:	dc400204 	addi	r17,sp,8
4102106c:	dc000a15 	stw	r16,40(sp)
41021070:	d9000015 	stw	r4,0(sp)
41021074:	d9400115 	stw	r5,4(sp)
41021078:	d809883a 	mov	r4,sp
4102107c:	880b883a 	mov	r5,r17
41021080:	dc000604 	addi	r16,sp,24
41021084:	dfc00c15 	stw	ra,48(sp)
41021088:	10216e40 	call	410216e4 <__unpack_f>
4102108c:	d9000104 	addi	r4,sp,4
41021090:	800b883a 	mov	r5,r16
41021094:	10216e40 	call	410216e4 <__unpack_f>
41021098:	d9000217 	ldw	r4,8(sp)
4102109c:	00800044 	movi	r2,1
410210a0:	01800104 	movi	r6,4
410210a4:	11000a2e 	bgeu	r2,r4,410210d0 <__divsf3+0x70>
410210a8:	d9400617 	ldw	r5,24(sp)
410210ac:	1140432e 	bgeu	r2,r5,410211bc <__divsf3+0x15c>
410210b0:	d8800317 	ldw	r2,12(sp)
410210b4:	d8c00717 	ldw	r3,28(sp)
410210b8:	10c4f03a 	xor	r2,r2,r3
410210bc:	d8800315 	stw	r2,12(sp)
410210c0:	21800226 	beq	r4,r6,410210cc <__divsf3+0x6c>
410210c4:	00800084 	movi	r2,2
410210c8:	2080101e 	bne	r4,r2,4102110c <__divsf3+0xac>
410210cc:	29000726 	beq	r5,r4,410210ec <__divsf3+0x8c>
410210d0:	8809883a 	mov	r4,r17
410210d4:	10215840 	call	41021584 <__pack_f>
410210d8:	dfc00c17 	ldw	ra,48(sp)
410210dc:	dc400b17 	ldw	r17,44(sp)
410210e0:	dc000a17 	ldw	r16,40(sp)
410210e4:	dec00d04 	addi	sp,sp,52
410210e8:	f800283a 	ret
410210ec:	011040f4 	movhi	r4,16643
410210f0:	21378204 	addi	r4,r4,-8696
410210f4:	10215840 	call	41021584 <__pack_f>
410210f8:	dfc00c17 	ldw	ra,48(sp)
410210fc:	dc400b17 	ldw	r17,44(sp)
41021100:	dc000a17 	ldw	r16,40(sp)
41021104:	dec00d04 	addi	sp,sp,52
41021108:	f800283a 	ret
4102110c:	29802d26 	beq	r5,r6,410211c4 <__divsf3+0x164>
41021110:	28801a26 	beq	r5,r2,4102117c <__divsf3+0x11c>
41021114:	d8c00417 	ldw	r3,16(sp)
41021118:	d8800817 	ldw	r2,32(sp)
4102111c:	d9000517 	ldw	r4,20(sp)
41021120:	d9800917 	ldw	r6,36(sp)
41021124:	1885c83a 	sub	r2,r3,r2
41021128:	d8800415 	stw	r2,16(sp)
4102112c:	2180032e 	bgeu	r4,r6,4102113c <__divsf3+0xdc>
41021130:	10bfffc4 	addi	r2,r2,-1
41021134:	d8800415 	stw	r2,16(sp)
41021138:	2109883a 	add	r4,r4,r4
4102113c:	01500034 	movhi	r5,16384
41021140:	0007883a 	mov	r3,zero
41021144:	0005883a 	mov	r2,zero
41021148:	01c007c4 	movi	r7,31
4102114c:	10800044 	addi	r2,r2,1
41021150:	21800236 	bltu	r4,r6,4102115c <__divsf3+0xfc>
41021154:	1946b03a 	or	r3,r3,r5
41021158:	2189c83a 	sub	r4,r4,r6
4102115c:	280ad07a 	srli	r5,r5,1
41021160:	2109883a 	add	r4,r4,r4
41021164:	11fff91e 	bne	r2,r7,4102114c <__divsf3+0xec>
41021168:	19401fcc 	andi	r5,r3,127
4102116c:	00801004 	movi	r2,64
41021170:	28800a26 	beq	r5,r2,4102119c <__divsf3+0x13c>
41021174:	d8c00515 	stw	r3,20(sp)
41021178:	003fd506 	br	410210d0 <__divsf3+0x70>
4102117c:	8809883a 	mov	r4,r17
41021180:	d9800215 	stw	r6,8(sp)
41021184:	10215840 	call	41021584 <__pack_f>
41021188:	dfc00c17 	ldw	ra,48(sp)
4102118c:	dc400b17 	ldw	r17,44(sp)
41021190:	dc000a17 	ldw	r16,40(sp)
41021194:	dec00d04 	addi	sp,sp,52
41021198:	f800283a 	ret
4102119c:	1880200c 	andi	r2,r3,128
410211a0:	103ff41e 	bne	r2,zero,41021174 <__divsf3+0x114>
410211a4:	203ff326 	beq	r4,zero,41021174 <__divsf3+0x114>
410211a8:	1947883a 	add	r3,r3,r5
410211ac:	00bfe004 	movi	r2,-128
410211b0:	1886703a 	and	r3,r3,r2
410211b4:	d8c00515 	stw	r3,20(sp)
410211b8:	003fc506 	br	410210d0 <__divsf3+0x70>
410211bc:	8009883a 	mov	r4,r16
410211c0:	003fc406 	br	410210d4 <__divsf3+0x74>
410211c4:	8809883a 	mov	r4,r17
410211c8:	d8000515 	stw	zero,20(sp)
410211cc:	d8000415 	stw	zero,16(sp)
410211d0:	003fc006 	br	410210d4 <__divsf3+0x74>

410211d4 <__floatsisf>:
410211d4:	2006d7fa 	srli	r3,r4,31
410211d8:	defffa04 	addi	sp,sp,-24
410211dc:	008000c4 	movi	r2,3
410211e0:	dfc00515 	stw	ra,20(sp)
410211e4:	dc000415 	stw	r16,16(sp)
410211e8:	d8800015 	stw	r2,0(sp)
410211ec:	d8c00115 	stw	r3,4(sp)
410211f0:	2000081e 	bne	r4,zero,41021214 <__floatsisf+0x40>
410211f4:	00800084 	movi	r2,2
410211f8:	d8800015 	stw	r2,0(sp)
410211fc:	d809883a 	mov	r4,sp
41021200:	10215840 	call	41021584 <__pack_f>
41021204:	dfc00517 	ldw	ra,20(sp)
41021208:	dc000417 	ldw	r16,16(sp)
4102120c:	dec00604 	addi	sp,sp,24
41021210:	f800283a 	ret
41021214:	00800784 	movi	r2,30
41021218:	1807003a 	cmpeq	r3,r3,zero
4102121c:	d8800215 	stw	r2,8(sp)
41021220:	18000e1e 	bne	r3,zero,4102125c <__floatsisf+0x88>
41021224:	00a00034 	movhi	r2,32768
41021228:	20800e26 	beq	r4,r2,41021264 <__floatsisf+0x90>
4102122c:	0121c83a 	sub	r16,zero,r4
41021230:	8009883a 	mov	r4,r16
41021234:	dc000315 	stw	r16,12(sp)
41021238:	10215040 	call	41021504 <__clzsi2>
4102123c:	117fffc4 	addi	r5,r2,-1
41021240:	017fee0e 	bge	zero,r5,410211fc <__floatsisf+0x28>
41021244:	d8800217 	ldw	r2,8(sp)
41021248:	8146983a 	sll	r3,r16,r5
4102124c:	1145c83a 	sub	r2,r2,r5
41021250:	d8c00315 	stw	r3,12(sp)
41021254:	d8800215 	stw	r2,8(sp)
41021258:	003fe806 	br	410211fc <__floatsisf+0x28>
4102125c:	2021883a 	mov	r16,r4
41021260:	003ff306 	br	41021230 <__floatsisf+0x5c>
41021264:	00b3c034 	movhi	r2,52992
41021268:	003fe606 	br	41021204 <__floatsisf+0x30>

4102126c <__extendsfdf2>:
4102126c:	defff904 	addi	sp,sp,-28
41021270:	d9000115 	stw	r4,4(sp)
41021274:	d9400204 	addi	r5,sp,8
41021278:	d9000104 	addi	r4,sp,4
4102127c:	dfc00615 	stw	ra,24(sp)
41021280:	10216e40 	call	410216e4 <__unpack_f>
41021284:	d9c00517 	ldw	r7,20(sp)
41021288:	0011883a 	mov	r8,zero
4102128c:	400697ba 	slli	r3,r8,30
41021290:	3812d0ba 	srli	r9,r7,2
41021294:	380497ba 	slli	r2,r7,30
41021298:	d9000217 	ldw	r4,8(sp)
4102129c:	d9400317 	ldw	r5,12(sp)
410212a0:	d9800417 	ldw	r6,16(sp)
410212a4:	48c6b03a 	or	r3,r9,r3
410212a8:	100f883a 	mov	r7,r2
410212ac:	d8c00015 	stw	r3,0(sp)
410212b0:	10213800 	call	41021380 <__make_dp>
410212b4:	dfc00617 	ldw	ra,24(sp)
410212b8:	dec00704 	addi	sp,sp,28
410212bc:	f800283a 	ret

410212c0 <__floatunsisf>:
410212c0:	defff904 	addi	sp,sp,-28
410212c4:	dc400515 	stw	r17,20(sp)
410212c8:	dc000415 	stw	r16,16(sp)
410212cc:	dfc00615 	stw	ra,24(sp)
410212d0:	04400784 	movi	r17,30
410212d4:	2021883a 	mov	r16,r4
410212d8:	d8000115 	stw	zero,4(sp)
410212dc:	2000091e 	bne	r4,zero,41021304 <__floatunsisf+0x44>
410212e0:	00800084 	movi	r2,2
410212e4:	d8800015 	stw	r2,0(sp)
410212e8:	d809883a 	mov	r4,sp
410212ec:	10215840 	call	41021584 <__pack_f>
410212f0:	dfc00617 	ldw	ra,24(sp)
410212f4:	dc400517 	ldw	r17,20(sp)
410212f8:	dc000417 	ldw	r16,16(sp)
410212fc:	dec00704 	addi	sp,sp,28
41021300:	f800283a 	ret
41021304:	008000c4 	movi	r2,3
41021308:	d9000315 	stw	r4,12(sp)
4102130c:	d8800015 	stw	r2,0(sp)
41021310:	dc400215 	stw	r17,8(sp)
41021314:	10215040 	call	41021504 <__clzsi2>
41021318:	117fffc4 	addi	r5,r2,-1
4102131c:	0147c83a 	sub	r3,zero,r5
41021320:	00800044 	movi	r2,1
41021324:	10c4983a 	sll	r2,r2,r3
41021328:	80c6d83a 	srl	r3,r16,r3
4102132c:	8949c83a 	sub	r4,r17,r5
41021330:	10bfffc4 	addi	r2,r2,-1
41021334:	8084703a 	and	r2,r16,r2
41021338:	1004c03a 	cmpne	r2,r2,zero
4102133c:	1886b03a 	or	r3,r3,r2
41021340:	28000c16 	blt	r5,zero,41021374 <__floatunsisf+0xb4>
41021344:	8144983a 	sll	r2,r16,r5
41021348:	8947c83a 	sub	r3,r17,r5
4102134c:	283fe626 	beq	r5,zero,410212e8 <__floatunsisf+0x28>
41021350:	d809883a 	mov	r4,sp
41021354:	d8800315 	stw	r2,12(sp)
41021358:	d8c00215 	stw	r3,8(sp)
4102135c:	10215840 	call	41021584 <__pack_f>
41021360:	dfc00617 	ldw	ra,24(sp)
41021364:	dc400517 	ldw	r17,20(sp)
41021368:	dc000417 	ldw	r16,16(sp)
4102136c:	dec00704 	addi	sp,sp,28
41021370:	f800283a 	ret
41021374:	d8c00315 	stw	r3,12(sp)
41021378:	d9000215 	stw	r4,8(sp)
4102137c:	003fda06 	br	410212e8 <__floatunsisf+0x28>

41021380 <__make_dp>:
41021380:	defff904 	addi	sp,sp,-28
41021384:	d8c00717 	ldw	r3,28(sp)
41021388:	d9000015 	stw	r4,0(sp)
4102138c:	d809883a 	mov	r4,sp
41021390:	dfc00515 	stw	ra,20(sp)
41021394:	d9c00615 	stw	r7,24(sp)
41021398:	d9400115 	stw	r5,4(sp)
4102139c:	d9800215 	stw	r6,8(sp)
410213a0:	d8c00415 	stw	r3,16(sp)
410213a4:	d9c00315 	stw	r7,12(sp)
410213a8:	10217ac0 	call	410217ac <__pack_d>
410213ac:	dfc00517 	ldw	ra,20(sp)
410213b0:	dec00704 	addi	sp,sp,28
410213b4:	f800283a 	ret

410213b8 <udivmodsi4>:
410213b8:	29001b2e 	bgeu	r5,r4,41021428 <udivmodsi4+0x70>
410213bc:	28001a16 	blt	r5,zero,41021428 <udivmodsi4+0x70>
410213c0:	00800044 	movi	r2,1
410213c4:	0007883a 	mov	r3,zero
410213c8:	01c007c4 	movi	r7,31
410213cc:	00000306 	br	410213dc <udivmodsi4+0x24>
410213d0:	19c01326 	beq	r3,r7,41021420 <udivmodsi4+0x68>
410213d4:	18c00044 	addi	r3,r3,1
410213d8:	28000416 	blt	r5,zero,410213ec <udivmodsi4+0x34>
410213dc:	294b883a 	add	r5,r5,r5
410213e0:	1085883a 	add	r2,r2,r2
410213e4:	293ffa36 	bltu	r5,r4,410213d0 <udivmodsi4+0x18>
410213e8:	10000d26 	beq	r2,zero,41021420 <udivmodsi4+0x68>
410213ec:	0007883a 	mov	r3,zero
410213f0:	21400236 	bltu	r4,r5,410213fc <udivmodsi4+0x44>
410213f4:	2149c83a 	sub	r4,r4,r5
410213f8:	1886b03a 	or	r3,r3,r2
410213fc:	1004d07a 	srli	r2,r2,1
41021400:	280ad07a 	srli	r5,r5,1
41021404:	103ffa1e 	bne	r2,zero,410213f0 <udivmodsi4+0x38>
41021408:	30000226 	beq	r6,zero,41021414 <udivmodsi4+0x5c>
4102140c:	2005883a 	mov	r2,r4
41021410:	f800283a 	ret
41021414:	1809883a 	mov	r4,r3
41021418:	2005883a 	mov	r2,r4
4102141c:	f800283a 	ret
41021420:	0007883a 	mov	r3,zero
41021424:	003ff806 	br	41021408 <udivmodsi4+0x50>
41021428:	00800044 	movi	r2,1
4102142c:	0007883a 	mov	r3,zero
41021430:	003fef06 	br	410213f0 <udivmodsi4+0x38>

41021434 <__divsi3>:
41021434:	defffe04 	addi	sp,sp,-8
41021438:	dc000015 	stw	r16,0(sp)
4102143c:	dfc00115 	stw	ra,4(sp)
41021440:	0021883a 	mov	r16,zero
41021444:	20000c16 	blt	r4,zero,41021478 <__divsi3+0x44>
41021448:	000d883a 	mov	r6,zero
4102144c:	28000e16 	blt	r5,zero,41021488 <__divsi3+0x54>
41021450:	10213b80 	call	410213b8 <udivmodsi4>
41021454:	1007883a 	mov	r3,r2
41021458:	8005003a 	cmpeq	r2,r16,zero
4102145c:	1000011e 	bne	r2,zero,41021464 <__divsi3+0x30>
41021460:	00c7c83a 	sub	r3,zero,r3
41021464:	1805883a 	mov	r2,r3
41021468:	dfc00117 	ldw	ra,4(sp)
4102146c:	dc000017 	ldw	r16,0(sp)
41021470:	dec00204 	addi	sp,sp,8
41021474:	f800283a 	ret
41021478:	0109c83a 	sub	r4,zero,r4
4102147c:	04000044 	movi	r16,1
41021480:	000d883a 	mov	r6,zero
41021484:	283ff20e 	bge	r5,zero,41021450 <__divsi3+0x1c>
41021488:	014bc83a 	sub	r5,zero,r5
4102148c:	8021003a 	cmpeq	r16,r16,zero
41021490:	003fef06 	br	41021450 <__divsi3+0x1c>

41021494 <__modsi3>:
41021494:	deffff04 	addi	sp,sp,-4
41021498:	dfc00015 	stw	ra,0(sp)
4102149c:	01800044 	movi	r6,1
410214a0:	2807883a 	mov	r3,r5
410214a4:	20000416 	blt	r4,zero,410214b8 <__modsi3+0x24>
410214a8:	28000c16 	blt	r5,zero,410214dc <__modsi3+0x48>
410214ac:	dfc00017 	ldw	ra,0(sp)
410214b0:	dec00104 	addi	sp,sp,4
410214b4:	10213b81 	jmpi	410213b8 <udivmodsi4>
410214b8:	0109c83a 	sub	r4,zero,r4
410214bc:	28000b16 	blt	r5,zero,410214ec <__modsi3+0x58>
410214c0:	180b883a 	mov	r5,r3
410214c4:	01800044 	movi	r6,1
410214c8:	10213b80 	call	410213b8 <udivmodsi4>
410214cc:	0085c83a 	sub	r2,zero,r2
410214d0:	dfc00017 	ldw	ra,0(sp)
410214d4:	dec00104 	addi	sp,sp,4
410214d8:	f800283a 	ret
410214dc:	014bc83a 	sub	r5,zero,r5
410214e0:	dfc00017 	ldw	ra,0(sp)
410214e4:	dec00104 	addi	sp,sp,4
410214e8:	10213b81 	jmpi	410213b8 <udivmodsi4>
410214ec:	0147c83a 	sub	r3,zero,r5
410214f0:	003ff306 	br	410214c0 <__modsi3+0x2c>

410214f4 <__udivsi3>:
410214f4:	000d883a 	mov	r6,zero
410214f8:	10213b81 	jmpi	410213b8 <udivmodsi4>

410214fc <__umodsi3>:
410214fc:	01800044 	movi	r6,1
41021500:	10213b81 	jmpi	410213b8 <udivmodsi4>

41021504 <__clzsi2>:
41021504:	00bfffd4 	movui	r2,65535
41021508:	11000e36 	bltu	r2,r4,41021544 <__clzsi2+0x40>
4102150c:	00803fc4 	movi	r2,255
41021510:	01400204 	movi	r5,8
41021514:	0007883a 	mov	r3,zero
41021518:	11001036 	bltu	r2,r4,4102155c <__clzsi2+0x58>
4102151c:	000b883a 	mov	r5,zero
41021520:	20c6d83a 	srl	r3,r4,r3
41021524:	009040f4 	movhi	r2,16643
41021528:	10b78604 	addi	r2,r2,-8680
4102152c:	1887883a 	add	r3,r3,r2
41021530:	18800003 	ldbu	r2,0(r3)
41021534:	00c00804 	movi	r3,32
41021538:	2885883a 	add	r2,r5,r2
4102153c:	1885c83a 	sub	r2,r3,r2
41021540:	f800283a 	ret
41021544:	01400404 	movi	r5,16
41021548:	00804034 	movhi	r2,256
4102154c:	10bfffc4 	addi	r2,r2,-1
41021550:	2807883a 	mov	r3,r5
41021554:	113ff22e 	bgeu	r2,r4,41021520 <__clzsi2+0x1c>
41021558:	01400604 	movi	r5,24
4102155c:	2807883a 	mov	r3,r5
41021560:	20c6d83a 	srl	r3,r4,r3
41021564:	009040f4 	movhi	r2,16643
41021568:	10b78604 	addi	r2,r2,-8680
4102156c:	1887883a 	add	r3,r3,r2
41021570:	18800003 	ldbu	r2,0(r3)
41021574:	00c00804 	movi	r3,32
41021578:	2885883a 	add	r2,r5,r2
4102157c:	1885c83a 	sub	r2,r3,r2
41021580:	f800283a 	ret

41021584 <__pack_f>:
41021584:	20c00017 	ldw	r3,0(r4)
41021588:	01c00044 	movi	r7,1
4102158c:	21800317 	ldw	r6,12(r4)
41021590:	21400117 	ldw	r5,4(r4)
41021594:	38c02d2e 	bgeu	r7,r3,4102164c <__pack_f+0xc8>
41021598:	00800104 	movi	r2,4
4102159c:	18802826 	beq	r3,r2,41021640 <__pack_f+0xbc>
410215a0:	00800084 	movi	r2,2
410215a4:	18800126 	beq	r3,r2,410215ac <__pack_f+0x28>
410215a8:	3000101e 	bne	r6,zero,410215ec <__pack_f+0x68>
410215ac:	000d883a 	mov	r6,zero
410215b0:	0007883a 	mov	r3,zero
410215b4:	19003fcc 	andi	r4,r3,255
410215b8:	200895fa 	slli	r4,r4,23
410215bc:	00c02034 	movhi	r3,128
410215c0:	18ffffc4 	addi	r3,r3,-1
410215c4:	30c6703a 	and	r3,r6,r3
410215c8:	10a0002c 	andhi	r2,r2,32768
410215cc:	10c4b03a 	or	r2,r2,r3
410215d0:	280a97fa 	slli	r5,r5,31
410215d4:	1104b03a 	or	r2,r2,r4
410215d8:	00e00034 	movhi	r3,32768
410215dc:	18ffffc4 	addi	r3,r3,-1
410215e0:	10c4703a 	and	r2,r2,r3
410215e4:	1144b03a 	or	r2,r2,r5
410215e8:	f800283a 	ret
410215ec:	21000217 	ldw	r4,8(r4)
410215f0:	00bfe084 	movi	r2,-126
410215f4:	20801b16 	blt	r4,r2,41021664 <__pack_f+0xe0>
410215f8:	00801fc4 	movi	r2,127
410215fc:	11001016 	blt	r2,r4,41021640 <__pack_f+0xbc>
41021600:	308e703a 	and	r7,r6,r2
41021604:	2087883a 	add	r3,r4,r2
41021608:	00801004 	movi	r2,64
4102160c:	38800526 	beq	r7,r2,41021624 <__pack_f+0xa0>
41021610:	31800fc4 	addi	r6,r6,63
41021614:	30000716 	blt	r6,zero,41021634 <__pack_f+0xb0>
41021618:	300490ba 	slli	r2,r6,2
4102161c:	100cd27a 	srli	r6,r2,9
41021620:	003fe406 	br	410215b4 <__pack_f+0x30>
41021624:	3080200c 	andi	r2,r6,128
41021628:	103ffa26 	beq	r2,zero,41021614 <__pack_f+0x90>
4102162c:	31cd883a 	add	r6,r6,r7
41021630:	003ff806 	br	41021614 <__pack_f+0x90>
41021634:	300cd07a 	srli	r6,r6,1
41021638:	18c00044 	addi	r3,r3,1
4102163c:	003ff606 	br	41021618 <__pack_f+0x94>
41021640:	000d883a 	mov	r6,zero
41021644:	00ffffc4 	movi	r3,-1
41021648:	003fda06 	br	410215b4 <__pack_f+0x30>
4102164c:	31800434 	orhi	r6,r6,16
41021650:	00802034 	movhi	r2,128
41021654:	10bfffc4 	addi	r2,r2,-1
41021658:	308c703a 	and	r6,r6,r2
4102165c:	00ffffc4 	movi	r3,-1
41021660:	003fd406 	br	410215b4 <__pack_f+0x30>
41021664:	1109c83a 	sub	r4,r2,r4
41021668:	00800644 	movi	r2,25
4102166c:	11001216 	blt	r2,r4,410216b8 <__pack_f+0x134>
41021670:	3904983a 	sll	r2,r7,r4
41021674:	3106d83a 	srl	r3,r6,r4
41021678:	10bfffc4 	addi	r2,r2,-1
4102167c:	3084703a 	and	r2,r6,r2
41021680:	1004c03a 	cmpne	r2,r2,zero
41021684:	1886b03a 	or	r3,r3,r2
41021688:	19001fcc 	andi	r4,r3,127
4102168c:	00801004 	movi	r2,64
41021690:	20800c26 	beq	r4,r2,410216c4 <__pack_f+0x140>
41021694:	18c00fc4 	addi	r3,r3,63
41021698:	00900034 	movhi	r2,16384
4102169c:	10bfffc4 	addi	r2,r2,-1
410216a0:	180cd1fa 	srli	r6,r3,7
410216a4:	10c7803a 	cmpltu	r3,r2,r3
410216a8:	00802034 	movhi	r2,128
410216ac:	10bfffc4 	addi	r2,r2,-1
410216b0:	308c703a 	and	r6,r6,r2
410216b4:	003fbf06 	br	410215b4 <__pack_f+0x30>
410216b8:	0007883a 	mov	r3,zero
410216bc:	000d883a 	mov	r6,zero
410216c0:	003ff906 	br	410216a8 <__pack_f+0x124>
410216c4:	1880200c 	andi	r2,r3,128
410216c8:	10000126 	beq	r2,zero,410216d0 <__pack_f+0x14c>
410216cc:	1907883a 	add	r3,r3,r4
410216d0:	180cd1fa 	srli	r6,r3,7
410216d4:	00900034 	movhi	r2,16384
410216d8:	10bfffc4 	addi	r2,r2,-1
410216dc:	10c7803a 	cmpltu	r3,r2,r3
410216e0:	003ff106 	br	410216a8 <__pack_f+0x124>

410216e4 <__unpack_f>:
410216e4:	21800017 	ldw	r6,0(r4)
410216e8:	00c02034 	movhi	r3,128
410216ec:	18ffffc4 	addi	r3,r3,-1
410216f0:	3004d5fa 	srli	r2,r6,23
410216f4:	3008d7fa 	srli	r4,r6,31
410216f8:	30ce703a 	and	r7,r6,r3
410216fc:	10c03fcc 	andi	r3,r2,255
41021700:	29000115 	stw	r4,4(r5)
41021704:	1800131e 	bne	r3,zero,41021754 <__unpack_f+0x70>
41021708:	38000f26 	beq	r7,zero,41021748 <__unpack_f+0x64>
4102170c:	380691fa 	slli	r3,r7,7
41021710:	01bfe084 	movi	r6,-126
41021714:	008000c4 	movi	r2,3
41021718:	01100034 	movhi	r4,16384
4102171c:	213fffc4 	addi	r4,r4,-1
41021720:	28800015 	stw	r2,0(r5)
41021724:	29800215 	stw	r6,8(r5)
41021728:	20c00536 	bltu	r4,r3,41021740 <__unpack_f+0x5c>
4102172c:	3005883a 	mov	r2,r6
41021730:	18c7883a 	add	r3,r3,r3
41021734:	10bfffc4 	addi	r2,r2,-1
41021738:	20fffd2e 	bgeu	r4,r3,41021730 <__unpack_f+0x4c>
4102173c:	28800215 	stw	r2,8(r5)
41021740:	28c00315 	stw	r3,12(r5)
41021744:	f800283a 	ret
41021748:	00800084 	movi	r2,2
4102174c:	28800015 	stw	r2,0(r5)
41021750:	f800283a 	ret
41021754:	00803fc4 	movi	r2,255
41021758:	18800826 	beq	r3,r2,4102177c <__unpack_f+0x98>
4102175c:	380491fa 	slli	r2,r7,7
41021760:	18ffe044 	addi	r3,r3,-127
41021764:	28c00215 	stw	r3,8(r5)
41021768:	10900034 	orhi	r2,r2,16384
4102176c:	28800315 	stw	r2,12(r5)
41021770:	008000c4 	movi	r2,3
41021774:	28800015 	stw	r2,0(r5)
41021778:	f800283a 	ret
4102177c:	3800031e 	bne	r7,zero,4102178c <__unpack_f+0xa8>
41021780:	00800104 	movi	r2,4
41021784:	28800015 	stw	r2,0(r5)
41021788:	f800283a 	ret
4102178c:	3080042c 	andhi	r2,r6,16
41021790:	10000426 	beq	r2,zero,410217a4 <__unpack_f+0xc0>
41021794:	00800044 	movi	r2,1
41021798:	28800015 	stw	r2,0(r5)
4102179c:	29c00315 	stw	r7,12(r5)
410217a0:	f800283a 	ret
410217a4:	28000015 	stw	zero,0(r5)
410217a8:	003ffc06 	br	4102179c <__unpack_f+0xb8>

410217ac <__pack_d>:
410217ac:	20c00017 	ldw	r3,0(r4)
410217b0:	defffd04 	addi	sp,sp,-12
410217b4:	dc000015 	stw	r16,0(sp)
410217b8:	dc800215 	stw	r18,8(sp)
410217bc:	dc400115 	stw	r17,4(sp)
410217c0:	00800044 	movi	r2,1
410217c4:	22000317 	ldw	r8,12(r4)
410217c8:	001f883a 	mov	r15,zero
410217cc:	22400417 	ldw	r9,16(r4)
410217d0:	24000117 	ldw	r16,4(r4)
410217d4:	10c0552e 	bgeu	r2,r3,4102192c <__pack_d+0x180>
410217d8:	00800104 	movi	r2,4
410217dc:	18804f26 	beq	r3,r2,4102191c <__pack_d+0x170>
410217e0:	00800084 	movi	r2,2
410217e4:	18800226 	beq	r3,r2,410217f0 <__pack_d+0x44>
410217e8:	4244b03a 	or	r2,r8,r9
410217ec:	10001a1e 	bne	r2,zero,41021858 <__pack_d+0xac>
410217f0:	000d883a 	mov	r6,zero
410217f4:	000f883a 	mov	r7,zero
410217f8:	0011883a 	mov	r8,zero
410217fc:	00800434 	movhi	r2,16
41021800:	10bfffc4 	addi	r2,r2,-1
41021804:	301d883a 	mov	r14,r6
41021808:	3884703a 	and	r2,r7,r2
4102180c:	400a953a 	slli	r5,r8,20
41021810:	79bffc2c 	andhi	r6,r15,65520
41021814:	308cb03a 	or	r6,r6,r2
41021818:	00e00434 	movhi	r3,32784
4102181c:	18ffffc4 	addi	r3,r3,-1
41021820:	800497fa 	slli	r2,r16,31
41021824:	30c6703a 	and	r3,r6,r3
41021828:	1946b03a 	or	r3,r3,r5
4102182c:	01600034 	movhi	r5,32768
41021830:	297fffc4 	addi	r5,r5,-1
41021834:	194a703a 	and	r5,r3,r5
41021838:	288ab03a 	or	r5,r5,r2
4102183c:	2807883a 	mov	r3,r5
41021840:	7005883a 	mov	r2,r14
41021844:	dc800217 	ldw	r18,8(sp)
41021848:	dc400117 	ldw	r17,4(sp)
4102184c:	dc000017 	ldw	r16,0(sp)
41021850:	dec00304 	addi	sp,sp,12
41021854:	f800283a 	ret
41021858:	21000217 	ldw	r4,8(r4)
4102185c:	00bf0084 	movi	r2,-1022
41021860:	20803f16 	blt	r4,r2,41021960 <__pack_d+0x1b4>
41021864:	0080ffc4 	movi	r2,1023
41021868:	11002c16 	blt	r2,r4,4102191c <__pack_d+0x170>
4102186c:	00803fc4 	movi	r2,255
41021870:	408c703a 	and	r6,r8,r2
41021874:	00802004 	movi	r2,128
41021878:	0007883a 	mov	r3,zero
4102187c:	000f883a 	mov	r7,zero
41021880:	2280ffc4 	addi	r10,r4,1023
41021884:	30801e26 	beq	r6,r2,41021900 <__pack_d+0x154>
41021888:	00801fc4 	movi	r2,127
4102188c:	4089883a 	add	r4,r8,r2
41021890:	220d803a 	cmpltu	r6,r4,r8
41021894:	324d883a 	add	r6,r6,r9
41021898:	2011883a 	mov	r8,r4
4102189c:	3013883a 	mov	r9,r6
410218a0:	00880034 	movhi	r2,8192
410218a4:	10bfffc4 	addi	r2,r2,-1
410218a8:	12400d36 	bltu	r2,r9,410218e0 <__pack_d+0x134>
410218ac:	4804963a 	slli	r2,r9,24
410218b0:	400cd23a 	srli	r6,r8,8
410218b4:	480ed23a 	srli	r7,r9,8
410218b8:	013fffc4 	movi	r4,-1
410218bc:	118cb03a 	or	r6,r2,r6
410218c0:	01400434 	movhi	r5,16
410218c4:	297fffc4 	addi	r5,r5,-1
410218c8:	3104703a 	and	r2,r6,r4
410218cc:	3946703a 	and	r3,r7,r5
410218d0:	5201ffcc 	andi	r8,r10,2047
410218d4:	100d883a 	mov	r6,r2
410218d8:	180f883a 	mov	r7,r3
410218dc:	003fc706 	br	410217fc <__pack_d+0x50>
410218e0:	480897fa 	slli	r4,r9,31
410218e4:	4004d07a 	srli	r2,r8,1
410218e8:	4806d07a 	srli	r3,r9,1
410218ec:	52800044 	addi	r10,r10,1
410218f0:	2084b03a 	or	r2,r4,r2
410218f4:	1011883a 	mov	r8,r2
410218f8:	1813883a 	mov	r9,r3
410218fc:	003feb06 	br	410218ac <__pack_d+0x100>
41021900:	383fe11e 	bne	r7,zero,41021888 <__pack_d+0xdc>
41021904:	01004004 	movi	r4,256
41021908:	4104703a 	and	r2,r8,r4
4102190c:	10c4b03a 	or	r2,r2,r3
41021910:	103fe326 	beq	r2,zero,410218a0 <__pack_d+0xf4>
41021914:	3005883a 	mov	r2,r6
41021918:	003fdc06 	br	4102188c <__pack_d+0xe0>
4102191c:	000d883a 	mov	r6,zero
41021920:	000f883a 	mov	r7,zero
41021924:	0201ffc4 	movi	r8,2047
41021928:	003fb406 	br	410217fc <__pack_d+0x50>
4102192c:	0005883a 	mov	r2,zero
41021930:	00c00234 	movhi	r3,8
41021934:	408cb03a 	or	r6,r8,r2
41021938:	48ceb03a 	or	r7,r9,r3
4102193c:	013fffc4 	movi	r4,-1
41021940:	01400434 	movhi	r5,16
41021944:	297fffc4 	addi	r5,r5,-1
41021948:	3104703a 	and	r2,r6,r4
4102194c:	3946703a 	and	r3,r7,r5
41021950:	100d883a 	mov	r6,r2
41021954:	180f883a 	mov	r7,r3
41021958:	0201ffc4 	movi	r8,2047
4102195c:	003fa706 	br	410217fc <__pack_d+0x50>
41021960:	1109c83a 	sub	r4,r2,r4
41021964:	00800e04 	movi	r2,56
41021968:	11004316 	blt	r2,r4,41021a78 <__pack_d+0x2cc>
4102196c:	21fff804 	addi	r7,r4,-32
41021970:	38004516 	blt	r7,zero,41021a88 <__pack_d+0x2dc>
41021974:	49d8d83a 	srl	r12,r9,r7
41021978:	001b883a 	mov	r13,zero
4102197c:	0023883a 	mov	r17,zero
41021980:	01400044 	movi	r5,1
41021984:	0025883a 	mov	r18,zero
41021988:	38004716 	blt	r7,zero,41021aa8 <__pack_d+0x2fc>
4102198c:	29d6983a 	sll	r11,r5,r7
41021990:	0015883a 	mov	r10,zero
41021994:	00bfffc4 	movi	r2,-1
41021998:	5089883a 	add	r4,r10,r2
4102199c:	588b883a 	add	r5,r11,r2
410219a0:	228d803a 	cmpltu	r6,r4,r10
410219a4:	314b883a 	add	r5,r6,r5
410219a8:	4104703a 	and	r2,r8,r4
410219ac:	4946703a 	and	r3,r9,r5
410219b0:	10c4b03a 	or	r2,r2,r3
410219b4:	10000226 	beq	r2,zero,410219c0 <__pack_d+0x214>
410219b8:	04400044 	movi	r17,1
410219bc:	0025883a 	mov	r18,zero
410219c0:	00803fc4 	movi	r2,255
410219c4:	644eb03a 	or	r7,r12,r17
410219c8:	3892703a 	and	r9,r7,r2
410219cc:	00802004 	movi	r2,128
410219d0:	6c90b03a 	or	r8,r13,r18
410219d4:	0015883a 	mov	r10,zero
410219d8:	48801626 	beq	r9,r2,41021a34 <__pack_d+0x288>
410219dc:	01001fc4 	movi	r4,127
410219e0:	3905883a 	add	r2,r7,r4
410219e4:	11cd803a 	cmpltu	r6,r2,r7
410219e8:	320d883a 	add	r6,r6,r8
410219ec:	100f883a 	mov	r7,r2
410219f0:	00840034 	movhi	r2,4096
410219f4:	10bfffc4 	addi	r2,r2,-1
410219f8:	3011883a 	mov	r8,r6
410219fc:	0007883a 	mov	r3,zero
41021a00:	11801b36 	bltu	r2,r6,41021a70 <__pack_d+0x2c4>
41021a04:	4004963a 	slli	r2,r8,24
41021a08:	3808d23a 	srli	r4,r7,8
41021a0c:	400ad23a 	srli	r5,r8,8
41021a10:	1813883a 	mov	r9,r3
41021a14:	1108b03a 	or	r4,r2,r4
41021a18:	00bfffc4 	movi	r2,-1
41021a1c:	00c00434 	movhi	r3,16
41021a20:	18ffffc4 	addi	r3,r3,-1
41021a24:	208c703a 	and	r6,r4,r2
41021a28:	28ce703a 	and	r7,r5,r3
41021a2c:	4a01ffcc 	andi	r8,r9,2047
41021a30:	003f7206 	br	410217fc <__pack_d+0x50>
41021a34:	503fe91e 	bne	r10,zero,410219dc <__pack_d+0x230>
41021a38:	01004004 	movi	r4,256
41021a3c:	3904703a 	and	r2,r7,r4
41021a40:	0007883a 	mov	r3,zero
41021a44:	10c4b03a 	or	r2,r2,r3
41021a48:	10000626 	beq	r2,zero,41021a64 <__pack_d+0x2b8>
41021a4c:	3a45883a 	add	r2,r7,r9
41021a50:	11cd803a 	cmpltu	r6,r2,r7
41021a54:	320d883a 	add	r6,r6,r8
41021a58:	100f883a 	mov	r7,r2
41021a5c:	3011883a 	mov	r8,r6
41021a60:	0007883a 	mov	r3,zero
41021a64:	00840034 	movhi	r2,4096
41021a68:	10bfffc4 	addi	r2,r2,-1
41021a6c:	123fe52e 	bgeu	r2,r8,41021a04 <__pack_d+0x258>
41021a70:	00c00044 	movi	r3,1
41021a74:	003fe306 	br	41021a04 <__pack_d+0x258>
41021a78:	0009883a 	mov	r4,zero
41021a7c:	0013883a 	mov	r9,zero
41021a80:	000b883a 	mov	r5,zero
41021a84:	003fe406 	br	41021a18 <__pack_d+0x26c>
41021a88:	4a47883a 	add	r3,r9,r9
41021a8c:	008007c4 	movi	r2,31
41021a90:	1105c83a 	sub	r2,r2,r4
41021a94:	1886983a 	sll	r3,r3,r2
41021a98:	4118d83a 	srl	r12,r8,r4
41021a9c:	491ad83a 	srl	r13,r9,r4
41021aa0:	1b18b03a 	or	r12,r3,r12
41021aa4:	003fb506 	br	4102197c <__pack_d+0x1d0>
41021aa8:	2806d07a 	srli	r3,r5,1
41021aac:	008007c4 	movi	r2,31
41021ab0:	1105c83a 	sub	r2,r2,r4
41021ab4:	1896d83a 	srl	r11,r3,r2
41021ab8:	2914983a 	sll	r10,r5,r4
41021abc:	003fb506 	br	41021994 <__pack_d+0x1e8>

41021ac0 <memcpy>:
41021ac0:	01c003c4 	movi	r7,15
41021ac4:	2007883a 	mov	r3,r4
41021ac8:	3980032e 	bgeu	r7,r6,41021ad8 <memcpy+0x18>
41021acc:	2904b03a 	or	r2,r5,r4
41021ad0:	108000cc 	andi	r2,r2,3
41021ad4:	10000926 	beq	r2,zero,41021afc <memcpy+0x3c>
41021ad8:	30000626 	beq	r6,zero,41021af4 <memcpy+0x34>
41021adc:	30cd883a 	add	r6,r6,r3
41021ae0:	28800003 	ldbu	r2,0(r5)
41021ae4:	29400044 	addi	r5,r5,1
41021ae8:	18800005 	stb	r2,0(r3)
41021aec:	18c00044 	addi	r3,r3,1
41021af0:	30fffb1e 	bne	r6,r3,41021ae0 <memcpy+0x20>
41021af4:	2005883a 	mov	r2,r4
41021af8:	f800283a 	ret
41021afc:	3811883a 	mov	r8,r7
41021b00:	200f883a 	mov	r7,r4
41021b04:	28c00017 	ldw	r3,0(r5)
41021b08:	31bffc04 	addi	r6,r6,-16
41021b0c:	38c00015 	stw	r3,0(r7)
41021b10:	28800117 	ldw	r2,4(r5)
41021b14:	38800115 	stw	r2,4(r7)
41021b18:	28c00217 	ldw	r3,8(r5)
41021b1c:	38c00215 	stw	r3,8(r7)
41021b20:	28800317 	ldw	r2,12(r5)
41021b24:	29400404 	addi	r5,r5,16
41021b28:	38800315 	stw	r2,12(r7)
41021b2c:	39c00404 	addi	r7,r7,16
41021b30:	41bff436 	bltu	r8,r6,41021b04 <memcpy+0x44>
41021b34:	008000c4 	movi	r2,3
41021b38:	1180072e 	bgeu	r2,r6,41021b58 <memcpy+0x98>
41021b3c:	1007883a 	mov	r3,r2
41021b40:	28800017 	ldw	r2,0(r5)
41021b44:	31bfff04 	addi	r6,r6,-4
41021b48:	29400104 	addi	r5,r5,4
41021b4c:	38800015 	stw	r2,0(r7)
41021b50:	39c00104 	addi	r7,r7,4
41021b54:	19bffa36 	bltu	r3,r6,41021b40 <memcpy+0x80>
41021b58:	3807883a 	mov	r3,r7
41021b5c:	003fde06 	br	41021ad8 <memcpy+0x18>

41021b60 <printf>:
41021b60:	defffb04 	addi	sp,sp,-20
41021b64:	dfc00115 	stw	ra,4(sp)
41021b68:	d9400215 	stw	r5,8(sp)
41021b6c:	d9800315 	stw	r6,12(sp)
41021b70:	d9c00415 	stw	r7,16(sp)
41021b74:	009040f4 	movhi	r2,16643
41021b78:	10bedc04 	addi	r2,r2,-1168
41021b7c:	10c00017 	ldw	r3,0(r2)
41021b80:	200b883a 	mov	r5,r4
41021b84:	d8800204 	addi	r2,sp,8
41021b88:	19000217 	ldw	r4,8(r3)
41021b8c:	100d883a 	mov	r6,r2
41021b90:	d8800015 	stw	r2,0(sp)
41021b94:	1023c280 	call	41023c28 <__vfprintf_internal>
41021b98:	dfc00117 	ldw	ra,4(sp)
41021b9c:	dec00504 	addi	sp,sp,20
41021ba0:	f800283a 	ret

41021ba4 <_printf_r>:
41021ba4:	defffc04 	addi	sp,sp,-16
41021ba8:	dfc00115 	stw	ra,4(sp)
41021bac:	d9800215 	stw	r6,8(sp)
41021bb0:	d9c00315 	stw	r7,12(sp)
41021bb4:	280d883a 	mov	r6,r5
41021bb8:	21400217 	ldw	r5,8(r4)
41021bbc:	d8c00204 	addi	r3,sp,8
41021bc0:	180f883a 	mov	r7,r3
41021bc4:	d8c00015 	stw	r3,0(sp)
41021bc8:	1021d7c0 	call	41021d7c <___vfprintf_internal_r>
41021bcc:	dfc00117 	ldw	ra,4(sp)
41021bd0:	dec00404 	addi	sp,sp,16
41021bd4:	f800283a 	ret

41021bd8 <putchar>:
41021bd8:	009040f4 	movhi	r2,16643
41021bdc:	10bedc04 	addi	r2,r2,-1168
41021be0:	11800017 	ldw	r6,0(r2)
41021be4:	200b883a 	mov	r5,r4
41021be8:	3009883a 	mov	r4,r6
41021bec:	31800217 	ldw	r6,8(r6)
41021bf0:	102818c1 	jmpi	4102818c <_putc_r>

41021bf4 <_putchar_r>:
41021bf4:	21800217 	ldw	r6,8(r4)
41021bf8:	102818c1 	jmpi	4102818c <_putc_r>

41021bfc <_puts_r>:
41021bfc:	defff604 	addi	sp,sp,-40
41021c00:	dc400715 	stw	r17,28(sp)
41021c04:	2023883a 	mov	r17,r4
41021c08:	2809883a 	mov	r4,r5
41021c0c:	dfc00915 	stw	ra,36(sp)
41021c10:	dcc00815 	stw	r19,32(sp)
41021c14:	2827883a 	mov	r19,r5
41021c18:	1021cb00 	call	41021cb0 <strlen>
41021c1c:	89400217 	ldw	r5,8(r17)
41021c20:	00d040f4 	movhi	r3,16643
41021c24:	18f7c604 	addi	r3,r3,-8424
41021c28:	01c00044 	movi	r7,1
41021c2c:	12000044 	addi	r8,r2,1
41021c30:	d8c00515 	stw	r3,20(sp)
41021c34:	d9c00615 	stw	r7,24(sp)
41021c38:	d8c00304 	addi	r3,sp,12
41021c3c:	01c00084 	movi	r7,2
41021c40:	8809883a 	mov	r4,r17
41021c44:	d80d883a 	mov	r6,sp
41021c48:	d8c00015 	stw	r3,0(sp)
41021c4c:	dcc00315 	stw	r19,12(sp)
41021c50:	da000215 	stw	r8,8(sp)
41021c54:	d9c00115 	stw	r7,4(sp)
41021c58:	d8800415 	stw	r2,16(sp)
41021c5c:	1025e840 	call	41025e84 <__sfvwrite_r>
41021c60:	00ffffc4 	movi	r3,-1
41021c64:	10000626 	beq	r2,zero,41021c80 <_puts_r+0x84>
41021c68:	1805883a 	mov	r2,r3
41021c6c:	dfc00917 	ldw	ra,36(sp)
41021c70:	dcc00817 	ldw	r19,32(sp)
41021c74:	dc400717 	ldw	r17,28(sp)
41021c78:	dec00a04 	addi	sp,sp,40
41021c7c:	f800283a 	ret
41021c80:	00c00284 	movi	r3,10
41021c84:	1805883a 	mov	r2,r3
41021c88:	dfc00917 	ldw	ra,36(sp)
41021c8c:	dcc00817 	ldw	r19,32(sp)
41021c90:	dc400717 	ldw	r17,28(sp)
41021c94:	dec00a04 	addi	sp,sp,40
41021c98:	f800283a 	ret

41021c9c <puts>:
41021c9c:	009040f4 	movhi	r2,16643
41021ca0:	10bedc04 	addi	r2,r2,-1168
41021ca4:	200b883a 	mov	r5,r4
41021ca8:	11000017 	ldw	r4,0(r2)
41021cac:	1021bfc1 	jmpi	41021bfc <_puts_r>

41021cb0 <strlen>:
41021cb0:	208000cc 	andi	r2,r4,3
41021cb4:	2011883a 	mov	r8,r4
41021cb8:	1000161e 	bne	r2,zero,41021d14 <strlen+0x64>
41021cbc:	20c00017 	ldw	r3,0(r4)
41021cc0:	017fbff4 	movhi	r5,65279
41021cc4:	297fbfc4 	addi	r5,r5,-257
41021cc8:	01e02074 	movhi	r7,32897
41021ccc:	39e02004 	addi	r7,r7,-32640
41021cd0:	1945883a 	add	r2,r3,r5
41021cd4:	11c4703a 	and	r2,r2,r7
41021cd8:	00c6303a 	nor	r3,zero,r3
41021cdc:	1886703a 	and	r3,r3,r2
41021ce0:	18000c1e 	bne	r3,zero,41021d14 <strlen+0x64>
41021ce4:	280d883a 	mov	r6,r5
41021ce8:	380b883a 	mov	r5,r7
41021cec:	21000104 	addi	r4,r4,4
41021cf0:	20800017 	ldw	r2,0(r4)
41021cf4:	1187883a 	add	r3,r2,r6
41021cf8:	1946703a 	and	r3,r3,r5
41021cfc:	0084303a 	nor	r2,zero,r2
41021d00:	10c4703a 	and	r2,r2,r3
41021d04:	103ff926 	beq	r2,zero,41021cec <strlen+0x3c>
41021d08:	20800007 	ldb	r2,0(r4)
41021d0c:	10000326 	beq	r2,zero,41021d1c <strlen+0x6c>
41021d10:	21000044 	addi	r4,r4,1
41021d14:	20800007 	ldb	r2,0(r4)
41021d18:	103ffd1e 	bne	r2,zero,41021d10 <strlen+0x60>
41021d1c:	2205c83a 	sub	r2,r4,r8
41021d20:	f800283a 	ret

41021d24 <__sprint_r>:
41021d24:	30800217 	ldw	r2,8(r6)
41021d28:	defffe04 	addi	sp,sp,-8
41021d2c:	dc000015 	stw	r16,0(sp)
41021d30:	dfc00115 	stw	ra,4(sp)
41021d34:	3021883a 	mov	r16,r6
41021d38:	0007883a 	mov	r3,zero
41021d3c:	1000061e 	bne	r2,zero,41021d58 <__sprint_r+0x34>
41021d40:	1805883a 	mov	r2,r3
41021d44:	30000115 	stw	zero,4(r6)
41021d48:	dfc00117 	ldw	ra,4(sp)
41021d4c:	dc000017 	ldw	r16,0(sp)
41021d50:	dec00204 	addi	sp,sp,8
41021d54:	f800283a 	ret
41021d58:	1025e840 	call	41025e84 <__sfvwrite_r>
41021d5c:	1007883a 	mov	r3,r2
41021d60:	1805883a 	mov	r2,r3
41021d64:	80000115 	stw	zero,4(r16)
41021d68:	80000215 	stw	zero,8(r16)
41021d6c:	dfc00117 	ldw	ra,4(sp)
41021d70:	dc000017 	ldw	r16,0(sp)
41021d74:	dec00204 	addi	sp,sp,8
41021d78:	f800283a 	ret

41021d7c <___vfprintf_internal_r>:
41021d7c:	defea404 	addi	sp,sp,-1392
41021d80:	dd815815 	stw	r22,1376(sp)
41021d84:	dc015215 	stw	r16,1352(sp)
41021d88:	d9c15115 	stw	r7,1348(sp)
41021d8c:	dfc15b15 	stw	ra,1388(sp)
41021d90:	df015a15 	stw	fp,1384(sp)
41021d94:	ddc15915 	stw	r23,1380(sp)
41021d98:	dd415715 	stw	r21,1372(sp)
41021d9c:	dd015615 	stw	r20,1368(sp)
41021da0:	dcc15515 	stw	r19,1364(sp)
41021da4:	dc815415 	stw	r18,1360(sp)
41021da8:	dc415315 	stw	r17,1356(sp)
41021dac:	282d883a 	mov	r22,r5
41021db0:	3021883a 	mov	r16,r6
41021db4:	d9014f15 	stw	r4,1340(sp)
41021db8:	10264a80 	call	410264a8 <_localeconv_r>
41021dbc:	10800017 	ldw	r2,0(r2)
41021dc0:	d9c15117 	ldw	r7,1348(sp)
41021dc4:	d8814915 	stw	r2,1316(sp)
41021dc8:	d8814f17 	ldw	r2,1340(sp)
41021dcc:	10000226 	beq	r2,zero,41021dd8 <___vfprintf_internal_r+0x5c>
41021dd0:	10800e17 	ldw	r2,56(r2)
41021dd4:	10020d26 	beq	r2,zero,4102260c <___vfprintf_internal_r+0x890>
41021dd8:	b080030b 	ldhu	r2,12(r22)
41021ddc:	1080020c 	andi	r2,r2,8
41021de0:	10020e26 	beq	r2,zero,4102261c <___vfprintf_internal_r+0x8a0>
41021de4:	b0800417 	ldw	r2,16(r22)
41021de8:	10020c26 	beq	r2,zero,4102261c <___vfprintf_internal_r+0x8a0>
41021dec:	b200030b 	ldhu	r8,12(r22)
41021df0:	00800284 	movi	r2,10
41021df4:	40c0068c 	andi	r3,r8,26
41021df8:	18802f1e 	bne	r3,r2,41021eb8 <___vfprintf_internal_r+0x13c>
41021dfc:	b080038f 	ldh	r2,14(r22)
41021e00:	10002d16 	blt	r2,zero,41021eb8 <___vfprintf_internal_r+0x13c>
41021e04:	b240038b 	ldhu	r9,14(r22)
41021e08:	b2800717 	ldw	r10,28(r22)
41021e0c:	b2c00917 	ldw	r11,36(r22)
41021e10:	d9014f17 	ldw	r4,1340(sp)
41021e14:	dc402904 	addi	r17,sp,164
41021e18:	d8804004 	addi	r2,sp,256
41021e1c:	00c10004 	movi	r3,1024
41021e20:	423fff4c 	andi	r8,r8,65533
41021e24:	800d883a 	mov	r6,r16
41021e28:	880b883a 	mov	r5,r17
41021e2c:	da002c0d 	sth	r8,176(sp)
41021e30:	da402c8d 	sth	r9,178(sp)
41021e34:	da803015 	stw	r10,192(sp)
41021e38:	dac03215 	stw	r11,200(sp)
41021e3c:	d8802d15 	stw	r2,180(sp)
41021e40:	d8c02e15 	stw	r3,184(sp)
41021e44:	d8802915 	stw	r2,164(sp)
41021e48:	d8c02b15 	stw	r3,172(sp)
41021e4c:	d8002f15 	stw	zero,188(sp)
41021e50:	1021d7c0 	call	41021d7c <___vfprintf_internal_r>
41021e54:	d8814b15 	stw	r2,1324(sp)
41021e58:	10000416 	blt	r2,zero,41021e6c <___vfprintf_internal_r+0xf0>
41021e5c:	d9014f17 	ldw	r4,1340(sp)
41021e60:	880b883a 	mov	r5,r17
41021e64:	10255540 	call	41025554 <_fflush_r>
41021e68:	1002321e 	bne	r2,zero,41022734 <___vfprintf_internal_r+0x9b8>
41021e6c:	d8802c0b 	ldhu	r2,176(sp)
41021e70:	1080100c 	andi	r2,r2,64
41021e74:	10000326 	beq	r2,zero,41021e84 <___vfprintf_internal_r+0x108>
41021e78:	b080030b 	ldhu	r2,12(r22)
41021e7c:	10801014 	ori	r2,r2,64
41021e80:	b080030d 	sth	r2,12(r22)
41021e84:	d8814b17 	ldw	r2,1324(sp)
41021e88:	dfc15b17 	ldw	ra,1388(sp)
41021e8c:	df015a17 	ldw	fp,1384(sp)
41021e90:	ddc15917 	ldw	r23,1380(sp)
41021e94:	dd815817 	ldw	r22,1376(sp)
41021e98:	dd415717 	ldw	r21,1372(sp)
41021e9c:	dd015617 	ldw	r20,1368(sp)
41021ea0:	dcc15517 	ldw	r19,1364(sp)
41021ea4:	dc815417 	ldw	r18,1360(sp)
41021ea8:	dc415317 	ldw	r17,1356(sp)
41021eac:	dc015217 	ldw	r16,1352(sp)
41021eb0:	dec15c04 	addi	sp,sp,1392
41021eb4:	f800283a 	ret
41021eb8:	0005883a 	mov	r2,zero
41021ebc:	0007883a 	mov	r3,zero
41021ec0:	dd401904 	addi	r21,sp,100
41021ec4:	d8814215 	stw	r2,1288(sp)
41021ec8:	802f883a 	mov	r23,r16
41021ecc:	d8c14315 	stw	r3,1292(sp)
41021ed0:	d8014b15 	stw	zero,1324(sp)
41021ed4:	d8014815 	stw	zero,1312(sp)
41021ed8:	d8014415 	stw	zero,1296(sp)
41021edc:	d8014715 	stw	zero,1308(sp)
41021ee0:	dd400c15 	stw	r21,48(sp)
41021ee4:	d8000e15 	stw	zero,56(sp)
41021ee8:	d8000d15 	stw	zero,52(sp)
41021eec:	b8800007 	ldb	r2,0(r23)
41021ef0:	10001926 	beq	r2,zero,41021f58 <___vfprintf_internal_r+0x1dc>
41021ef4:	00c00944 	movi	r3,37
41021ef8:	10c01726 	beq	r2,r3,41021f58 <___vfprintf_internal_r+0x1dc>
41021efc:	b821883a 	mov	r16,r23
41021f00:	00000106 	br	41021f08 <___vfprintf_internal_r+0x18c>
41021f04:	10c00326 	beq	r2,r3,41021f14 <___vfprintf_internal_r+0x198>
41021f08:	84000044 	addi	r16,r16,1
41021f0c:	80800007 	ldb	r2,0(r16)
41021f10:	103ffc1e 	bne	r2,zero,41021f04 <___vfprintf_internal_r+0x188>
41021f14:	85e7c83a 	sub	r19,r16,r23
41021f18:	98000e26 	beq	r19,zero,41021f54 <___vfprintf_internal_r+0x1d8>
41021f1c:	dc800e17 	ldw	r18,56(sp)
41021f20:	dc400d17 	ldw	r17,52(sp)
41021f24:	008001c4 	movi	r2,7
41021f28:	94e5883a 	add	r18,r18,r19
41021f2c:	8c400044 	addi	r17,r17,1
41021f30:	adc00015 	stw	r23,0(r21)
41021f34:	dc800e15 	stw	r18,56(sp)
41021f38:	acc00115 	stw	r19,4(r21)
41021f3c:	dc400d15 	stw	r17,52(sp)
41021f40:	14428b16 	blt	r2,r17,41022970 <___vfprintf_internal_r+0xbf4>
41021f44:	ad400204 	addi	r21,r21,8
41021f48:	d9014b17 	ldw	r4,1324(sp)
41021f4c:	24c9883a 	add	r4,r4,r19
41021f50:	d9014b15 	stw	r4,1324(sp)
41021f54:	802f883a 	mov	r23,r16
41021f58:	b8800007 	ldb	r2,0(r23)
41021f5c:	10013c26 	beq	r2,zero,41022450 <___vfprintf_internal_r+0x6d4>
41021f60:	bdc00044 	addi	r23,r23,1
41021f64:	d8000405 	stb	zero,16(sp)
41021f68:	b8c00007 	ldb	r3,0(r23)
41021f6c:	04ffffc4 	movi	r19,-1
41021f70:	d8014c15 	stw	zero,1328(sp)
41021f74:	d8014a15 	stw	zero,1320(sp)
41021f78:	d8c14d15 	stw	r3,1332(sp)
41021f7c:	bdc00044 	addi	r23,r23,1
41021f80:	d9414d17 	ldw	r5,1332(sp)
41021f84:	00801604 	movi	r2,88
41021f88:	28fff804 	addi	r3,r5,-32
41021f8c:	10c06036 	bltu	r2,r3,41022110 <___vfprintf_internal_r+0x394>
41021f90:	18c5883a 	add	r2,r3,r3
41021f94:	1085883a 	add	r2,r2,r2
41021f98:	00d040b4 	movhi	r3,16642
41021f9c:	18c7eb04 	addi	r3,r3,8108
41021fa0:	10c5883a 	add	r2,r2,r3
41021fa4:	11000017 	ldw	r4,0(r2)
41021fa8:	2000683a 	jmp	r4
41021fac:	41022f20 	cmpeqi	r4,r8,2236
41021fb0:	41022110 	cmplti	r4,r8,2180
41021fb4:	41022110 	cmplti	r4,r8,2180
41021fb8:	41022f0c 	andi	r4,r8,2236
41021fbc:	41022110 	cmplti	r4,r8,2180
41021fc0:	41022110 	cmplti	r4,r8,2180
41021fc4:	41022110 	cmplti	r4,r8,2180
41021fc8:	41022110 	cmplti	r4,r8,2180
41021fcc:	41022110 	cmplti	r4,r8,2180
41021fd0:	41022110 	cmplti	r4,r8,2180
41021fd4:	41022cec 	andhi	r4,r8,2227
41021fd8:	41022efc 	xorhi	r4,r8,2235
41021fdc:	41022110 	cmplti	r4,r8,2180
41021fe0:	41022d04 	addi	r4,r8,2228
41021fe4:	41022f98 	cmpnei	r4,r8,2238
41021fe8:	41022110 	cmplti	r4,r8,2180
41021fec:	41022f84 	addi	r4,r8,2238
41021ff0:	41022f4c 	andi	r4,r8,2237
41021ff4:	41022f4c 	andi	r4,r8,2237
41021ff8:	41022f4c 	andi	r4,r8,2237
41021ffc:	41022f4c 	andi	r4,r8,2237
41022000:	41022f4c 	andi	r4,r8,2237
41022004:	41022f4c 	andi	r4,r8,2237
41022008:	41022f4c 	andi	r4,r8,2237
4102200c:	41022f4c 	andi	r4,r8,2237
41022010:	41022f4c 	andi	r4,r8,2237
41022014:	41022110 	cmplti	r4,r8,2180
41022018:	41022110 	cmplti	r4,r8,2180
4102201c:	41022110 	cmplti	r4,r8,2180
41022020:	41022110 	cmplti	r4,r8,2180
41022024:	41022110 	cmplti	r4,r8,2180
41022028:	41022110 	cmplti	r4,r8,2180
4102202c:	41022110 	cmplti	r4,r8,2180
41022030:	41022110 	cmplti	r4,r8,2180
41022034:	41022110 	cmplti	r4,r8,2180
41022038:	41022110 	cmplti	r4,r8,2180
4102203c:	41022768 	cmpgeui	r4,r8,2205
41022040:	41022dd4 	ori	r4,r8,2231
41022044:	41022110 	cmplti	r4,r8,2180
41022048:	41022dd4 	ori	r4,r8,2231
4102204c:	41022110 	cmplti	r4,r8,2180
41022050:	41022110 	cmplti	r4,r8,2180
41022054:	41022110 	cmplti	r4,r8,2180
41022058:	41022110 	cmplti	r4,r8,2180
4102205c:	41022f38 	rdprs	r4,r8,2236
41022060:	41022110 	cmplti	r4,r8,2180
41022064:	41022110 	cmplti	r4,r8,2180
41022068:	4102281c 	xori	r4,r8,2208
4102206c:	41022110 	cmplti	r4,r8,2180
41022070:	41022110 	cmplti	r4,r8,2180
41022074:	41022110 	cmplti	r4,r8,2180
41022078:	41022110 	cmplti	r4,r8,2180
4102207c:	41022110 	cmplti	r4,r8,2180
41022080:	41022868 	cmpgeui	r4,r8,2209
41022084:	41022110 	cmplti	r4,r8,2180
41022088:	41022110 	cmplti	r4,r8,2180
4102208c:	41022e88 	cmpgei	r4,r8,2234
41022090:	41022110 	cmplti	r4,r8,2180
41022094:	41022110 	cmplti	r4,r8,2180
41022098:	41022110 	cmplti	r4,r8,2180
4102209c:	41022110 	cmplti	r4,r8,2180
410220a0:	41022110 	cmplti	r4,r8,2180
410220a4:	41022110 	cmplti	r4,r8,2180
410220a8:	41022110 	cmplti	r4,r8,2180
410220ac:	41022110 	cmplti	r4,r8,2180
410220b0:	41022110 	cmplti	r4,r8,2180
410220b4:	41022110 	cmplti	r4,r8,2180
410220b8:	41022e5c 	xori	r4,r8,2233
410220bc:	41022774 	orhi	r4,r8,2205
410220c0:	41022dd4 	ori	r4,r8,2231
410220c4:	41022dd4 	ori	r4,r8,2231
410220c8:	41022dd4 	ori	r4,r8,2231
410220cc:	41022dc0 	call	441022dc <__alt_data_end+0x30c2edc>
410220d0:	41022774 	orhi	r4,r8,2205
410220d4:	41022110 	cmplti	r4,r8,2180
410220d8:	41022110 	cmplti	r4,r8,2180
410220dc:	41022d48 	cmpgei	r4,r8,2229
410220e0:	41022110 	cmplti	r4,r8,2180
410220e4:	41022d18 	cmpnei	r4,r8,2228
410220e8:	41022828 	cmpgeui	r4,r8,2208
410220ec:	41022d78 	rdprs	r4,r8,2229
410220f0:	41022d64 	muli	r4,r8,2229
410220f4:	41022110 	cmplti	r4,r8,2180
410220f8:	41022ff4 	orhi	r4,r8,2239
410220fc:	41022110 	cmplti	r4,r8,2180
41022100:	41022874 	orhi	r4,r8,2209
41022104:	41022110 	cmplti	r4,r8,2180
41022108:	41022110 	cmplti	r4,r8,2180
4102210c:	41022eec 	andhi	r4,r8,2235
41022110:	d9014d17 	ldw	r4,1332(sp)
41022114:	2000ce26 	beq	r4,zero,41022450 <___vfprintf_internal_r+0x6d4>
41022118:	01400044 	movi	r5,1
4102211c:	d9800f04 	addi	r6,sp,60
41022120:	d9c14015 	stw	r7,1280(sp)
41022124:	d9414515 	stw	r5,1300(sp)
41022128:	d9814115 	stw	r6,1284(sp)
4102212c:	280f883a 	mov	r7,r5
41022130:	d9000f05 	stb	r4,60(sp)
41022134:	d8000405 	stb	zero,16(sp)
41022138:	d8014615 	stw	zero,1304(sp)
4102213c:	d8c14c17 	ldw	r3,1328(sp)
41022140:	1880008c 	andi	r2,r3,2
41022144:	1005003a 	cmpeq	r2,r2,zero
41022148:	d8815015 	stw	r2,1344(sp)
4102214c:	1000031e 	bne	r2,zero,4102215c <___vfprintf_internal_r+0x3e0>
41022150:	d9014517 	ldw	r4,1300(sp)
41022154:	21000084 	addi	r4,r4,2
41022158:	d9014515 	stw	r4,1300(sp)
4102215c:	d9414c17 	ldw	r5,1328(sp)
41022160:	2940210c 	andi	r5,r5,132
41022164:	d9414e15 	stw	r5,1336(sp)
41022168:	28002d1e 	bne	r5,zero,41022220 <___vfprintf_internal_r+0x4a4>
4102216c:	d9814a17 	ldw	r6,1320(sp)
41022170:	d8814517 	ldw	r2,1300(sp)
41022174:	30a1c83a 	sub	r16,r6,r2
41022178:	0400290e 	bge	zero,r16,41022220 <___vfprintf_internal_r+0x4a4>
4102217c:	00800404 	movi	r2,16
41022180:	1404580e 	bge	r2,r16,410232e4 <___vfprintf_internal_r+0x1568>
41022184:	dc800e17 	ldw	r18,56(sp)
41022188:	dc400d17 	ldw	r17,52(sp)
4102218c:	1027883a 	mov	r19,r2
41022190:	071040f4 	movhi	fp,16643
41022194:	e737e284 	addi	fp,fp,-8310
41022198:	050001c4 	movi	r20,7
4102219c:	00000306 	br	410221ac <___vfprintf_internal_r+0x430>
410221a0:	843ffc04 	addi	r16,r16,-16
410221a4:	ad400204 	addi	r21,r21,8
410221a8:	9c00130e 	bge	r19,r16,410221f8 <___vfprintf_internal_r+0x47c>
410221ac:	94800404 	addi	r18,r18,16
410221b0:	8c400044 	addi	r17,r17,1
410221b4:	af000015 	stw	fp,0(r21)
410221b8:	acc00115 	stw	r19,4(r21)
410221bc:	dc800e15 	stw	r18,56(sp)
410221c0:	dc400d15 	stw	r17,52(sp)
410221c4:	a47ff60e 	bge	r20,r17,410221a0 <___vfprintf_internal_r+0x424>
410221c8:	d9014f17 	ldw	r4,1340(sp)
410221cc:	b00b883a 	mov	r5,r22
410221d0:	d9800c04 	addi	r6,sp,48
410221d4:	d9c15115 	stw	r7,1348(sp)
410221d8:	1021d240 	call	41021d24 <__sprint_r>
410221dc:	d9c15117 	ldw	r7,1348(sp)
410221e0:	10009e1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
410221e4:	843ffc04 	addi	r16,r16,-16
410221e8:	dc800e17 	ldw	r18,56(sp)
410221ec:	dc400d17 	ldw	r17,52(sp)
410221f0:	dd401904 	addi	r21,sp,100
410221f4:	9c3fed16 	blt	r19,r16,410221ac <___vfprintf_internal_r+0x430>
410221f8:	9425883a 	add	r18,r18,r16
410221fc:	8c400044 	addi	r17,r17,1
41022200:	008001c4 	movi	r2,7
41022204:	af000015 	stw	fp,0(r21)
41022208:	ac000115 	stw	r16,4(r21)
4102220c:	dc800e15 	stw	r18,56(sp)
41022210:	dc400d15 	stw	r17,52(sp)
41022214:	1441f516 	blt	r2,r17,410229ec <___vfprintf_internal_r+0xc70>
41022218:	ad400204 	addi	r21,r21,8
4102221c:	00000206 	br	41022228 <___vfprintf_internal_r+0x4ac>
41022220:	dc800e17 	ldw	r18,56(sp)
41022224:	dc400d17 	ldw	r17,52(sp)
41022228:	d8800407 	ldb	r2,16(sp)
4102222c:	10000b26 	beq	r2,zero,4102225c <___vfprintf_internal_r+0x4e0>
41022230:	00800044 	movi	r2,1
41022234:	94800044 	addi	r18,r18,1
41022238:	8c400044 	addi	r17,r17,1
4102223c:	a8800115 	stw	r2,4(r21)
41022240:	d8c00404 	addi	r3,sp,16
41022244:	008001c4 	movi	r2,7
41022248:	a8c00015 	stw	r3,0(r21)
4102224c:	dc800e15 	stw	r18,56(sp)
41022250:	dc400d15 	stw	r17,52(sp)
41022254:	1441da16 	blt	r2,r17,410229c0 <___vfprintf_internal_r+0xc44>
41022258:	ad400204 	addi	r21,r21,8
4102225c:	d9015017 	ldw	r4,1344(sp)
41022260:	20000b1e 	bne	r4,zero,41022290 <___vfprintf_internal_r+0x514>
41022264:	d8800444 	addi	r2,sp,17
41022268:	94800084 	addi	r18,r18,2
4102226c:	8c400044 	addi	r17,r17,1
41022270:	a8800015 	stw	r2,0(r21)
41022274:	00c00084 	movi	r3,2
41022278:	008001c4 	movi	r2,7
4102227c:	a8c00115 	stw	r3,4(r21)
41022280:	dc800e15 	stw	r18,56(sp)
41022284:	dc400d15 	stw	r17,52(sp)
41022288:	1441c216 	blt	r2,r17,41022994 <___vfprintf_internal_r+0xc18>
4102228c:	ad400204 	addi	r21,r21,8
41022290:	d9414e17 	ldw	r5,1336(sp)
41022294:	00802004 	movi	r2,128
41022298:	2880b126 	beq	r5,r2,41022560 <___vfprintf_internal_r+0x7e4>
4102229c:	d8c14617 	ldw	r3,1304(sp)
410222a0:	19e1c83a 	sub	r16,r3,r7
410222a4:	0400260e 	bge	zero,r16,41022340 <___vfprintf_internal_r+0x5c4>
410222a8:	00800404 	movi	r2,16
410222ac:	1403c90e 	bge	r2,r16,410231d4 <___vfprintf_internal_r+0x1458>
410222b0:	1027883a 	mov	r19,r2
410222b4:	071040f4 	movhi	fp,16643
410222b8:	e737de84 	addi	fp,fp,-8326
410222bc:	050001c4 	movi	r20,7
410222c0:	00000306 	br	410222d0 <___vfprintf_internal_r+0x554>
410222c4:	843ffc04 	addi	r16,r16,-16
410222c8:	ad400204 	addi	r21,r21,8
410222cc:	9c00130e 	bge	r19,r16,4102231c <___vfprintf_internal_r+0x5a0>
410222d0:	94800404 	addi	r18,r18,16
410222d4:	8c400044 	addi	r17,r17,1
410222d8:	af000015 	stw	fp,0(r21)
410222dc:	acc00115 	stw	r19,4(r21)
410222e0:	dc800e15 	stw	r18,56(sp)
410222e4:	dc400d15 	stw	r17,52(sp)
410222e8:	a47ff60e 	bge	r20,r17,410222c4 <___vfprintf_internal_r+0x548>
410222ec:	d9014f17 	ldw	r4,1340(sp)
410222f0:	b00b883a 	mov	r5,r22
410222f4:	d9800c04 	addi	r6,sp,48
410222f8:	d9c15115 	stw	r7,1348(sp)
410222fc:	1021d240 	call	41021d24 <__sprint_r>
41022300:	d9c15117 	ldw	r7,1348(sp)
41022304:	1000551e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022308:	843ffc04 	addi	r16,r16,-16
4102230c:	dc800e17 	ldw	r18,56(sp)
41022310:	dc400d17 	ldw	r17,52(sp)
41022314:	dd401904 	addi	r21,sp,100
41022318:	9c3fed16 	blt	r19,r16,410222d0 <___vfprintf_internal_r+0x554>
4102231c:	9425883a 	add	r18,r18,r16
41022320:	8c400044 	addi	r17,r17,1
41022324:	008001c4 	movi	r2,7
41022328:	af000015 	stw	fp,0(r21)
4102232c:	ac000115 	stw	r16,4(r21)
41022330:	dc800e15 	stw	r18,56(sp)
41022334:	dc400d15 	stw	r17,52(sp)
41022338:	14418216 	blt	r2,r17,41022944 <___vfprintf_internal_r+0xbc8>
4102233c:	ad400204 	addi	r21,r21,8
41022340:	d9014c17 	ldw	r4,1328(sp)
41022344:	2080400c 	andi	r2,r4,256
41022348:	10004a1e 	bne	r2,zero,41022474 <___vfprintf_internal_r+0x6f8>
4102234c:	d9414117 	ldw	r5,1284(sp)
41022350:	91e5883a 	add	r18,r18,r7
41022354:	8c400044 	addi	r17,r17,1
41022358:	008001c4 	movi	r2,7
4102235c:	a9400015 	stw	r5,0(r21)
41022360:	a9c00115 	stw	r7,4(r21)
41022364:	dc800e15 	stw	r18,56(sp)
41022368:	dc400d15 	stw	r17,52(sp)
4102236c:	14416716 	blt	r2,r17,4102290c <___vfprintf_internal_r+0xb90>
41022370:	a8c00204 	addi	r3,r21,8
41022374:	d9814c17 	ldw	r6,1328(sp)
41022378:	3080010c 	andi	r2,r6,4
4102237c:	10002826 	beq	r2,zero,41022420 <___vfprintf_internal_r+0x6a4>
41022380:	d8814a17 	ldw	r2,1320(sp)
41022384:	d9014517 	ldw	r4,1300(sp)
41022388:	1121c83a 	sub	r16,r2,r4
4102238c:	0400240e 	bge	zero,r16,41022420 <___vfprintf_internal_r+0x6a4>
41022390:	00800404 	movi	r2,16
41022394:	14044f0e 	bge	r2,r16,410234d4 <___vfprintf_internal_r+0x1758>
41022398:	dc400d17 	ldw	r17,52(sp)
4102239c:	1027883a 	mov	r19,r2
410223a0:	071040f4 	movhi	fp,16643
410223a4:	e737e284 	addi	fp,fp,-8310
410223a8:	050001c4 	movi	r20,7
410223ac:	00000306 	br	410223bc <___vfprintf_internal_r+0x640>
410223b0:	843ffc04 	addi	r16,r16,-16
410223b4:	18c00204 	addi	r3,r3,8
410223b8:	9c00110e 	bge	r19,r16,41022400 <___vfprintf_internal_r+0x684>
410223bc:	94800404 	addi	r18,r18,16
410223c0:	8c400044 	addi	r17,r17,1
410223c4:	1f000015 	stw	fp,0(r3)
410223c8:	1cc00115 	stw	r19,4(r3)
410223cc:	dc800e15 	stw	r18,56(sp)
410223d0:	dc400d15 	stw	r17,52(sp)
410223d4:	a47ff60e 	bge	r20,r17,410223b0 <___vfprintf_internal_r+0x634>
410223d8:	d9014f17 	ldw	r4,1340(sp)
410223dc:	b00b883a 	mov	r5,r22
410223e0:	d9800c04 	addi	r6,sp,48
410223e4:	1021d240 	call	41021d24 <__sprint_r>
410223e8:	10001c1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
410223ec:	843ffc04 	addi	r16,r16,-16
410223f0:	dc800e17 	ldw	r18,56(sp)
410223f4:	dc400d17 	ldw	r17,52(sp)
410223f8:	d8c01904 	addi	r3,sp,100
410223fc:	9c3fef16 	blt	r19,r16,410223bc <___vfprintf_internal_r+0x640>
41022400:	9425883a 	add	r18,r18,r16
41022404:	8c400044 	addi	r17,r17,1
41022408:	008001c4 	movi	r2,7
4102240c:	1f000015 	stw	fp,0(r3)
41022410:	1c000115 	stw	r16,4(r3)
41022414:	dc800e15 	stw	r18,56(sp)
41022418:	dc400d15 	stw	r17,52(sp)
4102241c:	1440cb16 	blt	r2,r17,4102274c <___vfprintf_internal_r+0x9d0>
41022420:	d8814a17 	ldw	r2,1320(sp)
41022424:	d9414517 	ldw	r5,1300(sp)
41022428:	1140010e 	bge	r2,r5,41022430 <___vfprintf_internal_r+0x6b4>
4102242c:	2805883a 	mov	r2,r5
41022430:	d9814b17 	ldw	r6,1324(sp)
41022434:	308d883a 	add	r6,r6,r2
41022438:	d9814b15 	stw	r6,1324(sp)
4102243c:	90013b1e 	bne	r18,zero,4102292c <___vfprintf_internal_r+0xbb0>
41022440:	d9c14017 	ldw	r7,1280(sp)
41022444:	dd401904 	addi	r21,sp,100
41022448:	d8000d15 	stw	zero,52(sp)
4102244c:	003ea706 	br	41021eec <___vfprintf_internal_r+0x170>
41022450:	d8800e17 	ldw	r2,56(sp)
41022454:	10053f1e 	bne	r2,zero,41023954 <___vfprintf_internal_r+0x1bd8>
41022458:	d8000d15 	stw	zero,52(sp)
4102245c:	b080030b 	ldhu	r2,12(r22)
41022460:	1080100c 	andi	r2,r2,64
41022464:	103e8726 	beq	r2,zero,41021e84 <___vfprintf_internal_r+0x108>
41022468:	00bfffc4 	movi	r2,-1
4102246c:	d8814b15 	stw	r2,1324(sp)
41022470:	003e8406 	br	41021e84 <___vfprintf_internal_r+0x108>
41022474:	d9814d17 	ldw	r6,1332(sp)
41022478:	00801944 	movi	r2,101
4102247c:	11806e16 	blt	r2,r6,41022638 <___vfprintf_internal_r+0x8bc>
41022480:	d9414717 	ldw	r5,1308(sp)
41022484:	00c00044 	movi	r3,1
41022488:	1943430e 	bge	r3,r5,41023198 <___vfprintf_internal_r+0x141c>
4102248c:	d8814117 	ldw	r2,1284(sp)
41022490:	94800044 	addi	r18,r18,1
41022494:	8c400044 	addi	r17,r17,1
41022498:	a8800015 	stw	r2,0(r21)
4102249c:	008001c4 	movi	r2,7
410224a0:	a8c00115 	stw	r3,4(r21)
410224a4:	dc800e15 	stw	r18,56(sp)
410224a8:	dc400d15 	stw	r17,52(sp)
410224ac:	1441ca16 	blt	r2,r17,41022bd8 <___vfprintf_internal_r+0xe5c>
410224b0:	a8c00204 	addi	r3,r21,8
410224b4:	d9014917 	ldw	r4,1316(sp)
410224b8:	00800044 	movi	r2,1
410224bc:	94800044 	addi	r18,r18,1
410224c0:	8c400044 	addi	r17,r17,1
410224c4:	18800115 	stw	r2,4(r3)
410224c8:	008001c4 	movi	r2,7
410224cc:	19000015 	stw	r4,0(r3)
410224d0:	dc800e15 	stw	r18,56(sp)
410224d4:	dc400d15 	stw	r17,52(sp)
410224d8:	1441b616 	blt	r2,r17,41022bb4 <___vfprintf_internal_r+0xe38>
410224dc:	1cc00204 	addi	r19,r3,8
410224e0:	d9014217 	ldw	r4,1288(sp)
410224e4:	d9414317 	ldw	r5,1292(sp)
410224e8:	000d883a 	mov	r6,zero
410224ec:	000f883a 	mov	r7,zero
410224f0:	102a8540 	call	4102a854 <__nedf2>
410224f4:	10017426 	beq	r2,zero,41022ac8 <___vfprintf_internal_r+0xd4c>
410224f8:	d9414717 	ldw	r5,1308(sp)
410224fc:	d9814117 	ldw	r6,1284(sp)
41022500:	8c400044 	addi	r17,r17,1
41022504:	2c85883a 	add	r2,r5,r18
41022508:	14bfffc4 	addi	r18,r2,-1
4102250c:	28bfffc4 	addi	r2,r5,-1
41022510:	30c00044 	addi	r3,r6,1
41022514:	98800115 	stw	r2,4(r19)
41022518:	008001c4 	movi	r2,7
4102251c:	98c00015 	stw	r3,0(r19)
41022520:	dc800e15 	stw	r18,56(sp)
41022524:	dc400d15 	stw	r17,52(sp)
41022528:	14418e16 	blt	r2,r17,41022b64 <___vfprintf_internal_r+0xde8>
4102252c:	9cc00204 	addi	r19,r19,8
41022530:	d9414817 	ldw	r5,1312(sp)
41022534:	d8800804 	addi	r2,sp,32
41022538:	8c400044 	addi	r17,r17,1
4102253c:	9165883a 	add	r18,r18,r5
41022540:	98800015 	stw	r2,0(r19)
41022544:	008001c4 	movi	r2,7
41022548:	99400115 	stw	r5,4(r19)
4102254c:	dc800e15 	stw	r18,56(sp)
41022550:	dc400d15 	stw	r17,52(sp)
41022554:	1440ed16 	blt	r2,r17,4102290c <___vfprintf_internal_r+0xb90>
41022558:	98c00204 	addi	r3,r19,8
4102255c:	003f8506 	br	41022374 <___vfprintf_internal_r+0x5f8>
41022560:	d9814a17 	ldw	r6,1320(sp)
41022564:	d8814517 	ldw	r2,1300(sp)
41022568:	30a1c83a 	sub	r16,r6,r2
4102256c:	043f4b0e 	bge	zero,r16,4102229c <___vfprintf_internal_r+0x520>
41022570:	00800404 	movi	r2,16
41022574:	1404340e 	bge	r2,r16,41023648 <___vfprintf_internal_r+0x18cc>
41022578:	1027883a 	mov	r19,r2
4102257c:	071040f4 	movhi	fp,16643
41022580:	e737de84 	addi	fp,fp,-8326
41022584:	050001c4 	movi	r20,7
41022588:	00000306 	br	41022598 <___vfprintf_internal_r+0x81c>
4102258c:	843ffc04 	addi	r16,r16,-16
41022590:	ad400204 	addi	r21,r21,8
41022594:	9c00130e 	bge	r19,r16,410225e4 <___vfprintf_internal_r+0x868>
41022598:	94800404 	addi	r18,r18,16
4102259c:	8c400044 	addi	r17,r17,1
410225a0:	af000015 	stw	fp,0(r21)
410225a4:	acc00115 	stw	r19,4(r21)
410225a8:	dc800e15 	stw	r18,56(sp)
410225ac:	dc400d15 	stw	r17,52(sp)
410225b0:	a47ff60e 	bge	r20,r17,4102258c <___vfprintf_internal_r+0x810>
410225b4:	d9014f17 	ldw	r4,1340(sp)
410225b8:	b00b883a 	mov	r5,r22
410225bc:	d9800c04 	addi	r6,sp,48
410225c0:	d9c15115 	stw	r7,1348(sp)
410225c4:	1021d240 	call	41021d24 <__sprint_r>
410225c8:	d9c15117 	ldw	r7,1348(sp)
410225cc:	103fa31e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
410225d0:	843ffc04 	addi	r16,r16,-16
410225d4:	dc800e17 	ldw	r18,56(sp)
410225d8:	dc400d17 	ldw	r17,52(sp)
410225dc:	dd401904 	addi	r21,sp,100
410225e0:	9c3fed16 	blt	r19,r16,41022598 <___vfprintf_internal_r+0x81c>
410225e4:	9425883a 	add	r18,r18,r16
410225e8:	8c400044 	addi	r17,r17,1
410225ec:	008001c4 	movi	r2,7
410225f0:	af000015 	stw	fp,0(r21)
410225f4:	ac000115 	stw	r16,4(r21)
410225f8:	dc800e15 	stw	r18,56(sp)
410225fc:	dc400d15 	stw	r17,52(sp)
41022600:	14416116 	blt	r2,r17,41022b88 <___vfprintf_internal_r+0xe0c>
41022604:	ad400204 	addi	r21,r21,8
41022608:	003f2406 	br	4102229c <___vfprintf_internal_r+0x520>
4102260c:	d9014f17 	ldw	r4,1340(sp)
41022610:	10257ec0 	call	410257ec <__sinit>
41022614:	d9c15117 	ldw	r7,1348(sp)
41022618:	003def06 	br	41021dd8 <___vfprintf_internal_r+0x5c>
4102261c:	d9014f17 	ldw	r4,1340(sp)
41022620:	b00b883a 	mov	r5,r22
41022624:	d9c15115 	stw	r7,1348(sp)
41022628:	1023c4c0 	call	41023c4c <__swsetup_r>
4102262c:	d9c15117 	ldw	r7,1348(sp)
41022630:	103dee26 	beq	r2,zero,41021dec <___vfprintf_internal_r+0x70>
41022634:	003f8c06 	br	41022468 <___vfprintf_internal_r+0x6ec>
41022638:	d9014217 	ldw	r4,1288(sp)
4102263c:	d9414317 	ldw	r5,1292(sp)
41022640:	000d883a 	mov	r6,zero
41022644:	000f883a 	mov	r7,zero
41022648:	102a7cc0 	call	4102a7cc <__eqdf2>
4102264c:	1000f21e 	bne	r2,zero,41022a18 <___vfprintf_internal_r+0xc9c>
41022650:	009040f4 	movhi	r2,16643
41022654:	10b7de04 	addi	r2,r2,-8328
41022658:	94800044 	addi	r18,r18,1
4102265c:	8c400044 	addi	r17,r17,1
41022660:	a8800015 	stw	r2,0(r21)
41022664:	00c00044 	movi	r3,1
41022668:	008001c4 	movi	r2,7
4102266c:	a8c00115 	stw	r3,4(r21)
41022670:	dc800e15 	stw	r18,56(sp)
41022674:	dc400d15 	stw	r17,52(sp)
41022678:	1442fa16 	blt	r2,r17,41023264 <___vfprintf_internal_r+0x14e8>
4102267c:	a8c00204 	addi	r3,r21,8
41022680:	d8800517 	ldw	r2,20(sp)
41022684:	d9014717 	ldw	r4,1308(sp)
41022688:	11015c0e 	bge	r2,r4,41022bfc <___vfprintf_internal_r+0xe80>
4102268c:	dc400d17 	ldw	r17,52(sp)
41022690:	d9814917 	ldw	r6,1316(sp)
41022694:	00800044 	movi	r2,1
41022698:	94800044 	addi	r18,r18,1
4102269c:	8c400044 	addi	r17,r17,1
410226a0:	18800115 	stw	r2,4(r3)
410226a4:	008001c4 	movi	r2,7
410226a8:	19800015 	stw	r6,0(r3)
410226ac:	dc800e15 	stw	r18,56(sp)
410226b0:	dc400d15 	stw	r17,52(sp)
410226b4:	14431016 	blt	r2,r17,410232f8 <___vfprintf_internal_r+0x157c>
410226b8:	18c00204 	addi	r3,r3,8
410226bc:	d8814717 	ldw	r2,1308(sp)
410226c0:	143fffc4 	addi	r16,r2,-1
410226c4:	043f2b0e 	bge	zero,r16,41022374 <___vfprintf_internal_r+0x5f8>
410226c8:	00800404 	movi	r2,16
410226cc:	1402a20e 	bge	r2,r16,41023158 <___vfprintf_internal_r+0x13dc>
410226d0:	dc400d17 	ldw	r17,52(sp)
410226d4:	1027883a 	mov	r19,r2
410226d8:	071040f4 	movhi	fp,16643
410226dc:	e737de84 	addi	fp,fp,-8326
410226e0:	050001c4 	movi	r20,7
410226e4:	00000306 	br	410226f4 <___vfprintf_internal_r+0x978>
410226e8:	18c00204 	addi	r3,r3,8
410226ec:	843ffc04 	addi	r16,r16,-16
410226f0:	9c029c0e 	bge	r19,r16,41023164 <___vfprintf_internal_r+0x13e8>
410226f4:	94800404 	addi	r18,r18,16
410226f8:	8c400044 	addi	r17,r17,1
410226fc:	1f000015 	stw	fp,0(r3)
41022700:	1cc00115 	stw	r19,4(r3)
41022704:	dc800e15 	stw	r18,56(sp)
41022708:	dc400d15 	stw	r17,52(sp)
4102270c:	a47ff60e 	bge	r20,r17,410226e8 <___vfprintf_internal_r+0x96c>
41022710:	d9014f17 	ldw	r4,1340(sp)
41022714:	b00b883a 	mov	r5,r22
41022718:	d9800c04 	addi	r6,sp,48
4102271c:	1021d240 	call	41021d24 <__sprint_r>
41022720:	103f4e1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022724:	dc800e17 	ldw	r18,56(sp)
41022728:	dc400d17 	ldw	r17,52(sp)
4102272c:	d8c01904 	addi	r3,sp,100
41022730:	003fee06 	br	410226ec <___vfprintf_internal_r+0x970>
41022734:	d8802c0b 	ldhu	r2,176(sp)
41022738:	00ffffc4 	movi	r3,-1
4102273c:	d8c14b15 	stw	r3,1324(sp)
41022740:	1080100c 	andi	r2,r2,64
41022744:	103dcc1e 	bne	r2,zero,41021e78 <___vfprintf_internal_r+0xfc>
41022748:	003dce06 	br	41021e84 <___vfprintf_internal_r+0x108>
4102274c:	d9014f17 	ldw	r4,1340(sp)
41022750:	b00b883a 	mov	r5,r22
41022754:	d9800c04 	addi	r6,sp,48
41022758:	1021d240 	call	41021d24 <__sprint_r>
4102275c:	103f3f1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022760:	dc800e17 	ldw	r18,56(sp)
41022764:	003f2e06 	br	41022420 <___vfprintf_internal_r+0x6a4>
41022768:	d9414c17 	ldw	r5,1328(sp)
4102276c:	29400414 	ori	r5,r5,16
41022770:	d9414c15 	stw	r5,1328(sp)
41022774:	d9814c17 	ldw	r6,1328(sp)
41022778:	3080080c 	andi	r2,r6,32
4102277c:	10014f1e 	bne	r2,zero,41022cbc <___vfprintf_internal_r+0xf40>
41022780:	d8c14c17 	ldw	r3,1328(sp)
41022784:	1880040c 	andi	r2,r3,16
41022788:	1002ea1e 	bne	r2,zero,41023334 <___vfprintf_internal_r+0x15b8>
4102278c:	d9014c17 	ldw	r4,1328(sp)
41022790:	2080100c 	andi	r2,r4,64
41022794:	1002e726 	beq	r2,zero,41023334 <___vfprintf_internal_r+0x15b8>
41022798:	3880000f 	ldh	r2,0(r7)
4102279c:	39c00104 	addi	r7,r7,4
410227a0:	d9c14015 	stw	r7,1280(sp)
410227a4:	1023d7fa 	srai	r17,r2,31
410227a8:	1021883a 	mov	r16,r2
410227ac:	88037216 	blt	r17,zero,41023578 <___vfprintf_internal_r+0x17fc>
410227b0:	01000044 	movi	r4,1
410227b4:	98000416 	blt	r19,zero,410227c8 <___vfprintf_internal_r+0xa4c>
410227b8:	d8c14c17 	ldw	r3,1328(sp)
410227bc:	00bfdfc4 	movi	r2,-129
410227c0:	1886703a 	and	r3,r3,r2
410227c4:	d8c14c15 	stw	r3,1328(sp)
410227c8:	8444b03a 	or	r2,r16,r17
410227cc:	1002261e 	bne	r2,zero,41023068 <___vfprintf_internal_r+0x12ec>
410227d0:	9802251e 	bne	r19,zero,41023068 <___vfprintf_internal_r+0x12ec>
410227d4:	20803fcc 	andi	r2,r4,255
410227d8:	10029b26 	beq	r2,zero,41023248 <___vfprintf_internal_r+0x14cc>
410227dc:	d8c01904 	addi	r3,sp,100
410227e0:	dd000f04 	addi	r20,sp,60
410227e4:	d8c14115 	stw	r3,1284(sp)
410227e8:	d8c14117 	ldw	r3,1284(sp)
410227ec:	dcc14515 	stw	r19,1300(sp)
410227f0:	a0c5c83a 	sub	r2,r20,r3
410227f4:	11c00a04 	addi	r7,r2,40
410227f8:	99c0010e 	bge	r19,r7,41022800 <___vfprintf_internal_r+0xa84>
410227fc:	d9c14515 	stw	r7,1300(sp)
41022800:	dcc14615 	stw	r19,1304(sp)
41022804:	d8800407 	ldb	r2,16(sp)
41022808:	103e4c26 	beq	r2,zero,4102213c <___vfprintf_internal_r+0x3c0>
4102280c:	d8814517 	ldw	r2,1300(sp)
41022810:	10800044 	addi	r2,r2,1
41022814:	d8814515 	stw	r2,1300(sp)
41022818:	003e4806 	br	4102213c <___vfprintf_internal_r+0x3c0>
4102281c:	d9814c17 	ldw	r6,1328(sp)
41022820:	31800414 	ori	r6,r6,16
41022824:	d9814c15 	stw	r6,1328(sp)
41022828:	d8c14c17 	ldw	r3,1328(sp)
4102282c:	1880080c 	andi	r2,r3,32
41022830:	1001271e 	bne	r2,zero,41022cd0 <___vfprintf_internal_r+0xf54>
41022834:	d9414c17 	ldw	r5,1328(sp)
41022838:	2880040c 	andi	r2,r5,16
4102283c:	1002b61e 	bne	r2,zero,41023318 <___vfprintf_internal_r+0x159c>
41022840:	d9814c17 	ldw	r6,1328(sp)
41022844:	3080100c 	andi	r2,r6,64
41022848:	1002b326 	beq	r2,zero,41023318 <___vfprintf_internal_r+0x159c>
4102284c:	3c00000b 	ldhu	r16,0(r7)
41022850:	0009883a 	mov	r4,zero
41022854:	39c00104 	addi	r7,r7,4
41022858:	0023883a 	mov	r17,zero
4102285c:	d9c14015 	stw	r7,1280(sp)
41022860:	d8000405 	stb	zero,16(sp)
41022864:	003fd306 	br	410227b4 <___vfprintf_internal_r+0xa38>
41022868:	d9014c17 	ldw	r4,1328(sp)
4102286c:	21000414 	ori	r4,r4,16
41022870:	d9014c15 	stw	r4,1328(sp)
41022874:	d9414c17 	ldw	r5,1328(sp)
41022878:	2880080c 	andi	r2,r5,32
4102287c:	1001081e 	bne	r2,zero,41022ca0 <___vfprintf_internal_r+0xf24>
41022880:	d8c14c17 	ldw	r3,1328(sp)
41022884:	1880040c 	andi	r2,r3,16
41022888:	1002b01e 	bne	r2,zero,4102334c <___vfprintf_internal_r+0x15d0>
4102288c:	d9014c17 	ldw	r4,1328(sp)
41022890:	2080100c 	andi	r2,r4,64
41022894:	1002ad26 	beq	r2,zero,4102334c <___vfprintf_internal_r+0x15d0>
41022898:	3c00000b 	ldhu	r16,0(r7)
4102289c:	01000044 	movi	r4,1
410228a0:	39c00104 	addi	r7,r7,4
410228a4:	0023883a 	mov	r17,zero
410228a8:	d9c14015 	stw	r7,1280(sp)
410228ac:	d8000405 	stb	zero,16(sp)
410228b0:	003fc006 	br	410227b4 <___vfprintf_internal_r+0xa38>
410228b4:	d9014f17 	ldw	r4,1340(sp)
410228b8:	b00b883a 	mov	r5,r22
410228bc:	d9800c04 	addi	r6,sp,48
410228c0:	1021d240 	call	41021d24 <__sprint_r>
410228c4:	103ee51e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
410228c8:	dc800e17 	ldw	r18,56(sp)
410228cc:	d8c01904 	addi	r3,sp,100
410228d0:	d9814c17 	ldw	r6,1328(sp)
410228d4:	3080004c 	andi	r2,r6,1
410228d8:	1005003a 	cmpeq	r2,r2,zero
410228dc:	103ea51e 	bne	r2,zero,41022374 <___vfprintf_internal_r+0x5f8>
410228e0:	00800044 	movi	r2,1
410228e4:	dc400d17 	ldw	r17,52(sp)
410228e8:	18800115 	stw	r2,4(r3)
410228ec:	d8814917 	ldw	r2,1316(sp)
410228f0:	94800044 	addi	r18,r18,1
410228f4:	8c400044 	addi	r17,r17,1
410228f8:	18800015 	stw	r2,0(r3)
410228fc:	008001c4 	movi	r2,7
41022900:	dc800e15 	stw	r18,56(sp)
41022904:	dc400d15 	stw	r17,52(sp)
41022908:	14421e0e 	bge	r2,r17,41023184 <___vfprintf_internal_r+0x1408>
4102290c:	d9014f17 	ldw	r4,1340(sp)
41022910:	b00b883a 	mov	r5,r22
41022914:	d9800c04 	addi	r6,sp,48
41022918:	1021d240 	call	41021d24 <__sprint_r>
4102291c:	103ecf1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022920:	dc800e17 	ldw	r18,56(sp)
41022924:	d8c01904 	addi	r3,sp,100
41022928:	003e9206 	br	41022374 <___vfprintf_internal_r+0x5f8>
4102292c:	d9014f17 	ldw	r4,1340(sp)
41022930:	b00b883a 	mov	r5,r22
41022934:	d9800c04 	addi	r6,sp,48
41022938:	1021d240 	call	41021d24 <__sprint_r>
4102293c:	103ec026 	beq	r2,zero,41022440 <___vfprintf_internal_r+0x6c4>
41022940:	003ec606 	br	4102245c <___vfprintf_internal_r+0x6e0>
41022944:	d9014f17 	ldw	r4,1340(sp)
41022948:	b00b883a 	mov	r5,r22
4102294c:	d9800c04 	addi	r6,sp,48
41022950:	d9c15115 	stw	r7,1348(sp)
41022954:	1021d240 	call	41021d24 <__sprint_r>
41022958:	d9c15117 	ldw	r7,1348(sp)
4102295c:	103ebf1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022960:	dc800e17 	ldw	r18,56(sp)
41022964:	dc400d17 	ldw	r17,52(sp)
41022968:	dd401904 	addi	r21,sp,100
4102296c:	003e7406 	br	41022340 <___vfprintf_internal_r+0x5c4>
41022970:	d9014f17 	ldw	r4,1340(sp)
41022974:	b00b883a 	mov	r5,r22
41022978:	d9800c04 	addi	r6,sp,48
4102297c:	d9c15115 	stw	r7,1348(sp)
41022980:	1021d240 	call	41021d24 <__sprint_r>
41022984:	d9c15117 	ldw	r7,1348(sp)
41022988:	103eb41e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
4102298c:	dd401904 	addi	r21,sp,100
41022990:	003d6d06 	br	41021f48 <___vfprintf_internal_r+0x1cc>
41022994:	d9014f17 	ldw	r4,1340(sp)
41022998:	b00b883a 	mov	r5,r22
4102299c:	d9800c04 	addi	r6,sp,48
410229a0:	d9c15115 	stw	r7,1348(sp)
410229a4:	1021d240 	call	41021d24 <__sprint_r>
410229a8:	d9c15117 	ldw	r7,1348(sp)
410229ac:	103eab1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
410229b0:	dc800e17 	ldw	r18,56(sp)
410229b4:	dc400d17 	ldw	r17,52(sp)
410229b8:	dd401904 	addi	r21,sp,100
410229bc:	003e3406 	br	41022290 <___vfprintf_internal_r+0x514>
410229c0:	d9014f17 	ldw	r4,1340(sp)
410229c4:	b00b883a 	mov	r5,r22
410229c8:	d9800c04 	addi	r6,sp,48
410229cc:	d9c15115 	stw	r7,1348(sp)
410229d0:	1021d240 	call	41021d24 <__sprint_r>
410229d4:	d9c15117 	ldw	r7,1348(sp)
410229d8:	103ea01e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
410229dc:	dc800e17 	ldw	r18,56(sp)
410229e0:	dc400d17 	ldw	r17,52(sp)
410229e4:	dd401904 	addi	r21,sp,100
410229e8:	003e1c06 	br	4102225c <___vfprintf_internal_r+0x4e0>
410229ec:	d9014f17 	ldw	r4,1340(sp)
410229f0:	b00b883a 	mov	r5,r22
410229f4:	d9800c04 	addi	r6,sp,48
410229f8:	d9c15115 	stw	r7,1348(sp)
410229fc:	1021d240 	call	41021d24 <__sprint_r>
41022a00:	d9c15117 	ldw	r7,1348(sp)
41022a04:	103e951e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022a08:	dc800e17 	ldw	r18,56(sp)
41022a0c:	dc400d17 	ldw	r17,52(sp)
41022a10:	dd401904 	addi	r21,sp,100
41022a14:	003e0406 	br	41022228 <___vfprintf_internal_r+0x4ac>
41022a18:	d9000517 	ldw	r4,20(sp)
41022a1c:	0102520e 	bge	zero,r4,41023368 <___vfprintf_internal_r+0x15ec>
41022a20:	d9814717 	ldw	r6,1308(sp)
41022a24:	21807a16 	blt	r4,r6,41022c10 <___vfprintf_internal_r+0xe94>
41022a28:	d8814117 	ldw	r2,1284(sp)
41022a2c:	91a5883a 	add	r18,r18,r6
41022a30:	8c400044 	addi	r17,r17,1
41022a34:	a8800015 	stw	r2,0(r21)
41022a38:	008001c4 	movi	r2,7
41022a3c:	a9800115 	stw	r6,4(r21)
41022a40:	dc800e15 	stw	r18,56(sp)
41022a44:	dc400d15 	stw	r17,52(sp)
41022a48:	1442f616 	blt	r2,r17,41023624 <___vfprintf_internal_r+0x18a8>
41022a4c:	a8c00204 	addi	r3,r21,8
41022a50:	d9414717 	ldw	r5,1308(sp)
41022a54:	2161c83a 	sub	r16,r4,r5
41022a58:	043f9d0e 	bge	zero,r16,410228d0 <___vfprintf_internal_r+0xb54>
41022a5c:	00800404 	movi	r2,16
41022a60:	1402130e 	bge	r2,r16,410232b0 <___vfprintf_internal_r+0x1534>
41022a64:	dc400d17 	ldw	r17,52(sp)
41022a68:	1027883a 	mov	r19,r2
41022a6c:	071040f4 	movhi	fp,16643
41022a70:	e737de84 	addi	fp,fp,-8326
41022a74:	050001c4 	movi	r20,7
41022a78:	00000306 	br	41022a88 <___vfprintf_internal_r+0xd0c>
41022a7c:	18c00204 	addi	r3,r3,8
41022a80:	843ffc04 	addi	r16,r16,-16
41022a84:	9c020d0e 	bge	r19,r16,410232bc <___vfprintf_internal_r+0x1540>
41022a88:	94800404 	addi	r18,r18,16
41022a8c:	8c400044 	addi	r17,r17,1
41022a90:	1f000015 	stw	fp,0(r3)
41022a94:	1cc00115 	stw	r19,4(r3)
41022a98:	dc800e15 	stw	r18,56(sp)
41022a9c:	dc400d15 	stw	r17,52(sp)
41022aa0:	a47ff60e 	bge	r20,r17,41022a7c <___vfprintf_internal_r+0xd00>
41022aa4:	d9014f17 	ldw	r4,1340(sp)
41022aa8:	b00b883a 	mov	r5,r22
41022aac:	d9800c04 	addi	r6,sp,48
41022ab0:	1021d240 	call	41021d24 <__sprint_r>
41022ab4:	103e691e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022ab8:	dc800e17 	ldw	r18,56(sp)
41022abc:	dc400d17 	ldw	r17,52(sp)
41022ac0:	d8c01904 	addi	r3,sp,100
41022ac4:	003fee06 	br	41022a80 <___vfprintf_internal_r+0xd04>
41022ac8:	d8814717 	ldw	r2,1308(sp)
41022acc:	143fffc4 	addi	r16,r2,-1
41022ad0:	043e970e 	bge	zero,r16,41022530 <___vfprintf_internal_r+0x7b4>
41022ad4:	00800404 	movi	r2,16
41022ad8:	1400180e 	bge	r2,r16,41022b3c <___vfprintf_internal_r+0xdc0>
41022adc:	1029883a 	mov	r20,r2
41022ae0:	071040f4 	movhi	fp,16643
41022ae4:	e737de84 	addi	fp,fp,-8326
41022ae8:	054001c4 	movi	r21,7
41022aec:	00000306 	br	41022afc <___vfprintf_internal_r+0xd80>
41022af0:	9cc00204 	addi	r19,r19,8
41022af4:	843ffc04 	addi	r16,r16,-16
41022af8:	a400120e 	bge	r20,r16,41022b44 <___vfprintf_internal_r+0xdc8>
41022afc:	94800404 	addi	r18,r18,16
41022b00:	8c400044 	addi	r17,r17,1
41022b04:	9f000015 	stw	fp,0(r19)
41022b08:	9d000115 	stw	r20,4(r19)
41022b0c:	dc800e15 	stw	r18,56(sp)
41022b10:	dc400d15 	stw	r17,52(sp)
41022b14:	ac7ff60e 	bge	r21,r17,41022af0 <___vfprintf_internal_r+0xd74>
41022b18:	d9014f17 	ldw	r4,1340(sp)
41022b1c:	b00b883a 	mov	r5,r22
41022b20:	d9800c04 	addi	r6,sp,48
41022b24:	1021d240 	call	41021d24 <__sprint_r>
41022b28:	103e4c1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022b2c:	dc800e17 	ldw	r18,56(sp)
41022b30:	dc400d17 	ldw	r17,52(sp)
41022b34:	dcc01904 	addi	r19,sp,100
41022b38:	003fee06 	br	41022af4 <___vfprintf_internal_r+0xd78>
41022b3c:	071040f4 	movhi	fp,16643
41022b40:	e737de84 	addi	fp,fp,-8326
41022b44:	9425883a 	add	r18,r18,r16
41022b48:	8c400044 	addi	r17,r17,1
41022b4c:	008001c4 	movi	r2,7
41022b50:	9f000015 	stw	fp,0(r19)
41022b54:	9c000115 	stw	r16,4(r19)
41022b58:	dc800e15 	stw	r18,56(sp)
41022b5c:	dc400d15 	stw	r17,52(sp)
41022b60:	147e720e 	bge	r2,r17,4102252c <___vfprintf_internal_r+0x7b0>
41022b64:	d9014f17 	ldw	r4,1340(sp)
41022b68:	b00b883a 	mov	r5,r22
41022b6c:	d9800c04 	addi	r6,sp,48
41022b70:	1021d240 	call	41021d24 <__sprint_r>
41022b74:	103e391e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022b78:	dc800e17 	ldw	r18,56(sp)
41022b7c:	dc400d17 	ldw	r17,52(sp)
41022b80:	dcc01904 	addi	r19,sp,100
41022b84:	003e6a06 	br	41022530 <___vfprintf_internal_r+0x7b4>
41022b88:	d9014f17 	ldw	r4,1340(sp)
41022b8c:	b00b883a 	mov	r5,r22
41022b90:	d9800c04 	addi	r6,sp,48
41022b94:	d9c15115 	stw	r7,1348(sp)
41022b98:	1021d240 	call	41021d24 <__sprint_r>
41022b9c:	d9c15117 	ldw	r7,1348(sp)
41022ba0:	103e2e1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022ba4:	dc800e17 	ldw	r18,56(sp)
41022ba8:	dc400d17 	ldw	r17,52(sp)
41022bac:	dd401904 	addi	r21,sp,100
41022bb0:	003dba06 	br	4102229c <___vfprintf_internal_r+0x520>
41022bb4:	d9014f17 	ldw	r4,1340(sp)
41022bb8:	b00b883a 	mov	r5,r22
41022bbc:	d9800c04 	addi	r6,sp,48
41022bc0:	1021d240 	call	41021d24 <__sprint_r>
41022bc4:	103e251e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022bc8:	dc800e17 	ldw	r18,56(sp)
41022bcc:	dc400d17 	ldw	r17,52(sp)
41022bd0:	dcc01904 	addi	r19,sp,100
41022bd4:	003e4206 	br	410224e0 <___vfprintf_internal_r+0x764>
41022bd8:	d9014f17 	ldw	r4,1340(sp)
41022bdc:	b00b883a 	mov	r5,r22
41022be0:	d9800c04 	addi	r6,sp,48
41022be4:	1021d240 	call	41021d24 <__sprint_r>
41022be8:	103e1c1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41022bec:	dc800e17 	ldw	r18,56(sp)
41022bf0:	dc400d17 	ldw	r17,52(sp)
41022bf4:	d8c01904 	addi	r3,sp,100
41022bf8:	003e2e06 	br	410224b4 <___vfprintf_internal_r+0x738>
41022bfc:	d9414c17 	ldw	r5,1328(sp)
41022c00:	2880004c 	andi	r2,r5,1
41022c04:	1005003a 	cmpeq	r2,r2,zero
41022c08:	103dda1e 	bne	r2,zero,41022374 <___vfprintf_internal_r+0x5f8>
41022c0c:	003e9f06 	br	4102268c <___vfprintf_internal_r+0x910>
41022c10:	d8c14117 	ldw	r3,1284(sp)
41022c14:	9125883a 	add	r18,r18,r4
41022c18:	8c400044 	addi	r17,r17,1
41022c1c:	008001c4 	movi	r2,7
41022c20:	a8c00015 	stw	r3,0(r21)
41022c24:	a9000115 	stw	r4,4(r21)
41022c28:	dc800e15 	stw	r18,56(sp)
41022c2c:	dc400d15 	stw	r17,52(sp)
41022c30:	14426616 	blt	r2,r17,410235cc <___vfprintf_internal_r+0x1850>
41022c34:	a8c00204 	addi	r3,r21,8
41022c38:	d9414917 	ldw	r5,1316(sp)
41022c3c:	00800044 	movi	r2,1
41022c40:	94800044 	addi	r18,r18,1
41022c44:	8c400044 	addi	r17,r17,1
41022c48:	18800115 	stw	r2,4(r3)
41022c4c:	008001c4 	movi	r2,7
41022c50:	19400015 	stw	r5,0(r3)
41022c54:	dc800e15 	stw	r18,56(sp)
41022c58:	dc400d15 	stw	r17,52(sp)
41022c5c:	2021883a 	mov	r16,r4
41022c60:	14425016 	blt	r2,r17,410235a4 <___vfprintf_internal_r+0x1828>
41022c64:	19400204 	addi	r5,r3,8
41022c68:	d9814717 	ldw	r6,1308(sp)
41022c6c:	8c400044 	addi	r17,r17,1
41022c70:	dc400d15 	stw	r17,52(sp)
41022c74:	3107c83a 	sub	r3,r6,r4
41022c78:	d9014117 	ldw	r4,1284(sp)
41022c7c:	90e5883a 	add	r18,r18,r3
41022c80:	28c00115 	stw	r3,4(r5)
41022c84:	8105883a 	add	r2,r16,r4
41022c88:	28800015 	stw	r2,0(r5)
41022c8c:	008001c4 	movi	r2,7
41022c90:	dc800e15 	stw	r18,56(sp)
41022c94:	147f1d16 	blt	r2,r17,4102290c <___vfprintf_internal_r+0xb90>
41022c98:	28c00204 	addi	r3,r5,8
41022c9c:	003db506 	br	41022374 <___vfprintf_internal_r+0x5f8>
41022ca0:	3c000017 	ldw	r16,0(r7)
41022ca4:	3c400117 	ldw	r17,4(r7)
41022ca8:	39800204 	addi	r6,r7,8
41022cac:	01000044 	movi	r4,1
41022cb0:	d9814015 	stw	r6,1280(sp)
41022cb4:	d8000405 	stb	zero,16(sp)
41022cb8:	003ebe06 	br	410227b4 <___vfprintf_internal_r+0xa38>
41022cbc:	3c000017 	ldw	r16,0(r7)
41022cc0:	3c400117 	ldw	r17,4(r7)
41022cc4:	38800204 	addi	r2,r7,8
41022cc8:	d8814015 	stw	r2,1280(sp)
41022ccc:	003eb706 	br	410227ac <___vfprintf_internal_r+0xa30>
41022cd0:	3c000017 	ldw	r16,0(r7)
41022cd4:	3c400117 	ldw	r17,4(r7)
41022cd8:	39000204 	addi	r4,r7,8
41022cdc:	d9014015 	stw	r4,1280(sp)
41022ce0:	0009883a 	mov	r4,zero
41022ce4:	d8000405 	stb	zero,16(sp)
41022ce8:	003eb206 	br	410227b4 <___vfprintf_internal_r+0xa38>
41022cec:	38c00017 	ldw	r3,0(r7)
41022cf0:	39c00104 	addi	r7,r7,4
41022cf4:	d8c14a15 	stw	r3,1320(sp)
41022cf8:	1800d10e 	bge	r3,zero,41023040 <___vfprintf_internal_r+0x12c4>
41022cfc:	00c7c83a 	sub	r3,zero,r3
41022d00:	d8c14a15 	stw	r3,1320(sp)
41022d04:	d9014c17 	ldw	r4,1328(sp)
41022d08:	b8c00007 	ldb	r3,0(r23)
41022d0c:	21000114 	ori	r4,r4,4
41022d10:	d9014c15 	stw	r4,1328(sp)
41022d14:	003c9806 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41022d18:	d9814c17 	ldw	r6,1328(sp)
41022d1c:	3080080c 	andi	r2,r6,32
41022d20:	1001f026 	beq	r2,zero,410234e4 <___vfprintf_internal_r+0x1768>
41022d24:	d9014b17 	ldw	r4,1324(sp)
41022d28:	38800017 	ldw	r2,0(r7)
41022d2c:	39c00104 	addi	r7,r7,4
41022d30:	d9c14015 	stw	r7,1280(sp)
41022d34:	2007d7fa 	srai	r3,r4,31
41022d38:	d9c14017 	ldw	r7,1280(sp)
41022d3c:	11000015 	stw	r4,0(r2)
41022d40:	10c00115 	stw	r3,4(r2)
41022d44:	003c6906 	br	41021eec <___vfprintf_internal_r+0x170>
41022d48:	b8c00007 	ldb	r3,0(r23)
41022d4c:	00801b04 	movi	r2,108
41022d50:	18824f26 	beq	r3,r2,41023690 <___vfprintf_internal_r+0x1914>
41022d54:	d9414c17 	ldw	r5,1328(sp)
41022d58:	29400414 	ori	r5,r5,16
41022d5c:	d9414c15 	stw	r5,1328(sp)
41022d60:	003c8506 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41022d64:	d9814c17 	ldw	r6,1328(sp)
41022d68:	b8c00007 	ldb	r3,0(r23)
41022d6c:	31800814 	ori	r6,r6,32
41022d70:	d9814c15 	stw	r6,1328(sp)
41022d74:	003c8006 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41022d78:	d8814c17 	ldw	r2,1328(sp)
41022d7c:	3c000017 	ldw	r16,0(r7)
41022d80:	00c01e04 	movi	r3,120
41022d84:	10800094 	ori	r2,r2,2
41022d88:	d8814c15 	stw	r2,1328(sp)
41022d8c:	39c00104 	addi	r7,r7,4
41022d90:	015040f4 	movhi	r5,16643
41022d94:	2977c704 	addi	r5,r5,-8420
41022d98:	00800c04 	movi	r2,48
41022d9c:	0023883a 	mov	r17,zero
41022da0:	01000084 	movi	r4,2
41022da4:	d9c14015 	stw	r7,1280(sp)
41022da8:	d8c14d15 	stw	r3,1332(sp)
41022dac:	d9414415 	stw	r5,1296(sp)
41022db0:	d8800445 	stb	r2,17(sp)
41022db4:	d8c00485 	stb	r3,18(sp)
41022db8:	d8000405 	stb	zero,16(sp)
41022dbc:	003e7d06 	br	410227b4 <___vfprintf_internal_r+0xa38>
41022dc0:	d8814c17 	ldw	r2,1328(sp)
41022dc4:	b8c00007 	ldb	r3,0(r23)
41022dc8:	10801014 	ori	r2,r2,64
41022dcc:	d8814c15 	stw	r2,1328(sp)
41022dd0:	003c6906 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41022dd4:	d9414c17 	ldw	r5,1328(sp)
41022dd8:	2880020c 	andi	r2,r5,8
41022ddc:	1001df26 	beq	r2,zero,4102355c <___vfprintf_internal_r+0x17e0>
41022de0:	39800017 	ldw	r6,0(r7)
41022de4:	38800204 	addi	r2,r7,8
41022de8:	d8814015 	stw	r2,1280(sp)
41022dec:	d9814215 	stw	r6,1288(sp)
41022df0:	39c00117 	ldw	r7,4(r7)
41022df4:	d9c14315 	stw	r7,1292(sp)
41022df8:	d9014217 	ldw	r4,1288(sp)
41022dfc:	d9414317 	ldw	r5,1292(sp)
41022e00:	10288680 	call	41028868 <__isinfd>
41022e04:	10021726 	beq	r2,zero,41023664 <___vfprintf_internal_r+0x18e8>
41022e08:	d9014217 	ldw	r4,1288(sp)
41022e0c:	d9414317 	ldw	r5,1292(sp)
41022e10:	000d883a 	mov	r6,zero
41022e14:	000f883a 	mov	r7,zero
41022e18:	102a9ec0 	call	4102a9ec <__ltdf2>
41022e1c:	1002ca16 	blt	r2,zero,41023948 <___vfprintf_internal_r+0x1bcc>
41022e20:	d9414d17 	ldw	r5,1332(sp)
41022e24:	008011c4 	movi	r2,71
41022e28:	11420a16 	blt	r2,r5,41023654 <___vfprintf_internal_r+0x18d8>
41022e2c:	019040f4 	movhi	r6,16643
41022e30:	31b7cc04 	addi	r6,r6,-8400
41022e34:	d9814115 	stw	r6,1284(sp)
41022e38:	d9014c17 	ldw	r4,1328(sp)
41022e3c:	00c000c4 	movi	r3,3
41022e40:	00bfdfc4 	movi	r2,-129
41022e44:	2088703a 	and	r4,r4,r2
41022e48:	180f883a 	mov	r7,r3
41022e4c:	d8c14515 	stw	r3,1300(sp)
41022e50:	d9014c15 	stw	r4,1328(sp)
41022e54:	d8014615 	stw	zero,1304(sp)
41022e58:	003e6a06 	br	41022804 <___vfprintf_internal_r+0xa88>
41022e5c:	38800017 	ldw	r2,0(r7)
41022e60:	00c00044 	movi	r3,1
41022e64:	39c00104 	addi	r7,r7,4
41022e68:	d9c14015 	stw	r7,1280(sp)
41022e6c:	d9000f04 	addi	r4,sp,60
41022e70:	180f883a 	mov	r7,r3
41022e74:	d8c14515 	stw	r3,1300(sp)
41022e78:	d9014115 	stw	r4,1284(sp)
41022e7c:	d8800f05 	stb	r2,60(sp)
41022e80:	d8000405 	stb	zero,16(sp)
41022e84:	003cac06 	br	41022138 <___vfprintf_internal_r+0x3bc>
41022e88:	015040f4 	movhi	r5,16643
41022e8c:	2977d204 	addi	r5,r5,-8376
41022e90:	d9414415 	stw	r5,1296(sp)
41022e94:	d9814c17 	ldw	r6,1328(sp)
41022e98:	3080080c 	andi	r2,r6,32
41022e9c:	1000f926 	beq	r2,zero,41023284 <___vfprintf_internal_r+0x1508>
41022ea0:	3c000017 	ldw	r16,0(r7)
41022ea4:	3c400117 	ldw	r17,4(r7)
41022ea8:	38800204 	addi	r2,r7,8
41022eac:	d8814015 	stw	r2,1280(sp)
41022eb0:	d9414c17 	ldw	r5,1328(sp)
41022eb4:	2880004c 	andi	r2,r5,1
41022eb8:	1005003a 	cmpeq	r2,r2,zero
41022ebc:	1000b31e 	bne	r2,zero,4102318c <___vfprintf_internal_r+0x1410>
41022ec0:	8444b03a 	or	r2,r16,r17
41022ec4:	1000b126 	beq	r2,zero,4102318c <___vfprintf_internal_r+0x1410>
41022ec8:	d9814d17 	ldw	r6,1332(sp)
41022ecc:	29400094 	ori	r5,r5,2
41022ed0:	00800c04 	movi	r2,48
41022ed4:	01000084 	movi	r4,2
41022ed8:	d9414c15 	stw	r5,1328(sp)
41022edc:	d8800445 	stb	r2,17(sp)
41022ee0:	d9800485 	stb	r6,18(sp)
41022ee4:	d8000405 	stb	zero,16(sp)
41022ee8:	003e3206 	br	410227b4 <___vfprintf_internal_r+0xa38>
41022eec:	019040f4 	movhi	r6,16643
41022ef0:	31b7c704 	addi	r6,r6,-8420
41022ef4:	d9814415 	stw	r6,1296(sp)
41022ef8:	003fe606 	br	41022e94 <___vfprintf_internal_r+0x1118>
41022efc:	00800ac4 	movi	r2,43
41022f00:	d8800405 	stb	r2,16(sp)
41022f04:	b8c00007 	ldb	r3,0(r23)
41022f08:	003c1b06 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41022f0c:	d8814c17 	ldw	r2,1328(sp)
41022f10:	b8c00007 	ldb	r3,0(r23)
41022f14:	10800054 	ori	r2,r2,1
41022f18:	d8814c15 	stw	r2,1328(sp)
41022f1c:	003c1606 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41022f20:	d8800407 	ldb	r2,16(sp)
41022f24:	1000461e 	bne	r2,zero,41023040 <___vfprintf_internal_r+0x12c4>
41022f28:	00800804 	movi	r2,32
41022f2c:	d8800405 	stb	r2,16(sp)
41022f30:	b8c00007 	ldb	r3,0(r23)
41022f34:	003c1006 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41022f38:	d9814c17 	ldw	r6,1328(sp)
41022f3c:	b8c00007 	ldb	r3,0(r23)
41022f40:	31800214 	ori	r6,r6,8
41022f44:	d9814c15 	stw	r6,1328(sp)
41022f48:	003c0b06 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41022f4c:	0007883a 	mov	r3,zero
41022f50:	01000244 	movi	r4,9
41022f54:	188002a4 	muli	r2,r3,10
41022f58:	b8c00007 	ldb	r3,0(r23)
41022f5c:	d9814d17 	ldw	r6,1332(sp)
41022f60:	bdc00044 	addi	r23,r23,1
41022f64:	d8c14d15 	stw	r3,1332(sp)
41022f68:	d9414d17 	ldw	r5,1332(sp)
41022f6c:	3085883a 	add	r2,r6,r2
41022f70:	10fff404 	addi	r3,r2,-48
41022f74:	28bff404 	addi	r2,r5,-48
41022f78:	20bff62e 	bgeu	r4,r2,41022f54 <___vfprintf_internal_r+0x11d8>
41022f7c:	d8c14a15 	stw	r3,1320(sp)
41022f80:	003bff06 	br	41021f80 <___vfprintf_internal_r+0x204>
41022f84:	d9414c17 	ldw	r5,1328(sp)
41022f88:	b8c00007 	ldb	r3,0(r23)
41022f8c:	29402014 	ori	r5,r5,128
41022f90:	d9414c15 	stw	r5,1328(sp)
41022f94:	003bf806 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41022f98:	b8c00007 	ldb	r3,0(r23)
41022f9c:	00800a84 	movi	r2,42
41022fa0:	bdc00044 	addi	r23,r23,1
41022fa4:	18831526 	beq	r3,r2,41023bfc <___vfprintf_internal_r+0x1e80>
41022fa8:	d8c14d15 	stw	r3,1332(sp)
41022fac:	18bff404 	addi	r2,r3,-48
41022fb0:	00c00244 	movi	r3,9
41022fb4:	18827836 	bltu	r3,r2,41023998 <___vfprintf_internal_r+0x1c1c>
41022fb8:	000d883a 	mov	r6,zero
41022fbc:	308002a4 	muli	r2,r6,10
41022fc0:	b9800007 	ldb	r6,0(r23)
41022fc4:	d9414d17 	ldw	r5,1332(sp)
41022fc8:	bdc00044 	addi	r23,r23,1
41022fcc:	d9814d15 	stw	r6,1332(sp)
41022fd0:	d9014d17 	ldw	r4,1332(sp)
41022fd4:	1145883a 	add	r2,r2,r5
41022fd8:	11bff404 	addi	r6,r2,-48
41022fdc:	20bff404 	addi	r2,r4,-48
41022fe0:	18bff62e 	bgeu	r3,r2,41022fbc <___vfprintf_internal_r+0x1240>
41022fe4:	3027883a 	mov	r19,r6
41022fe8:	303be50e 	bge	r6,zero,41021f80 <___vfprintf_internal_r+0x204>
41022fec:	04ffffc4 	movi	r19,-1
41022ff0:	003be306 	br	41021f80 <___vfprintf_internal_r+0x204>
41022ff4:	d8000405 	stb	zero,16(sp)
41022ff8:	39800017 	ldw	r6,0(r7)
41022ffc:	39c00104 	addi	r7,r7,4
41023000:	d9c14015 	stw	r7,1280(sp)
41023004:	d9814115 	stw	r6,1284(sp)
41023008:	3001c926 	beq	r6,zero,41023730 <___vfprintf_internal_r+0x19b4>
4102300c:	98000e16 	blt	r19,zero,41023048 <___vfprintf_internal_r+0x12cc>
41023010:	d9014117 	ldw	r4,1284(sp)
41023014:	000b883a 	mov	r5,zero
41023018:	980d883a 	mov	r6,r19
4102301c:	1026e380 	call	41026e38 <memchr>
41023020:	10025926 	beq	r2,zero,41023988 <___vfprintf_internal_r+0x1c0c>
41023024:	d8c14117 	ldw	r3,1284(sp)
41023028:	10cfc83a 	sub	r7,r2,r3
4102302c:	99c19e16 	blt	r19,r7,410236a8 <___vfprintf_internal_r+0x192c>
41023030:	d9c14515 	stw	r7,1300(sp)
41023034:	38000916 	blt	r7,zero,4102305c <___vfprintf_internal_r+0x12e0>
41023038:	d8014615 	stw	zero,1304(sp)
4102303c:	003df106 	br	41022804 <___vfprintf_internal_r+0xa88>
41023040:	b8c00007 	ldb	r3,0(r23)
41023044:	003bcc06 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41023048:	d9014117 	ldw	r4,1284(sp)
4102304c:	1021cb00 	call	41021cb0 <strlen>
41023050:	d8814515 	stw	r2,1300(sp)
41023054:	100f883a 	mov	r7,r2
41023058:	103ff70e 	bge	r2,zero,41023038 <___vfprintf_internal_r+0x12bc>
4102305c:	d8014515 	stw	zero,1300(sp)
41023060:	d8014615 	stw	zero,1304(sp)
41023064:	003de706 	br	41022804 <___vfprintf_internal_r+0xa88>
41023068:	20c03fcc 	andi	r3,r4,255
4102306c:	00800044 	movi	r2,1
41023070:	18802d26 	beq	r3,r2,41023128 <___vfprintf_internal_r+0x13ac>
41023074:	18800e36 	bltu	r3,r2,410230b0 <___vfprintf_internal_r+0x1334>
41023078:	00800084 	movi	r2,2
4102307c:	1880fa26 	beq	r3,r2,41023468 <___vfprintf_internal_r+0x16ec>
41023080:	011040f4 	movhi	r4,16643
41023084:	2137d704 	addi	r4,r4,-8356
41023088:	1021cb00 	call	41021cb0 <strlen>
4102308c:	100f883a 	mov	r7,r2
41023090:	dcc14515 	stw	r19,1300(sp)
41023094:	9880010e 	bge	r19,r2,4102309c <___vfprintf_internal_r+0x1320>
41023098:	d8814515 	stw	r2,1300(sp)
4102309c:	009040f4 	movhi	r2,16643
410230a0:	10b7d704 	addi	r2,r2,-8356
410230a4:	dcc14615 	stw	r19,1304(sp)
410230a8:	d8814115 	stw	r2,1284(sp)
410230ac:	003dd506 	br	41022804 <___vfprintf_internal_r+0xa88>
410230b0:	d9401904 	addi	r5,sp,100
410230b4:	dd000f04 	addi	r20,sp,60
410230b8:	d9414115 	stw	r5,1284(sp)
410230bc:	880a977a 	slli	r5,r17,29
410230c0:	d9814117 	ldw	r6,1284(sp)
410230c4:	8004d0fa 	srli	r2,r16,3
410230c8:	8806d0fa 	srli	r3,r17,3
410230cc:	810001cc 	andi	r4,r16,7
410230d0:	2884b03a 	or	r2,r5,r2
410230d4:	31bfffc4 	addi	r6,r6,-1
410230d8:	21000c04 	addi	r4,r4,48
410230dc:	d9814115 	stw	r6,1284(sp)
410230e0:	10cab03a 	or	r5,r2,r3
410230e4:	31000005 	stb	r4,0(r6)
410230e8:	1021883a 	mov	r16,r2
410230ec:	1823883a 	mov	r17,r3
410230f0:	283ff21e 	bne	r5,zero,410230bc <___vfprintf_internal_r+0x1340>
410230f4:	d8c14c17 	ldw	r3,1328(sp)
410230f8:	1880004c 	andi	r2,r3,1
410230fc:	1005003a 	cmpeq	r2,r2,zero
41023100:	103db91e 	bne	r2,zero,410227e8 <___vfprintf_internal_r+0xa6c>
41023104:	20803fcc 	andi	r2,r4,255
41023108:	1080201c 	xori	r2,r2,128
4102310c:	10bfe004 	addi	r2,r2,-128
41023110:	00c00c04 	movi	r3,48
41023114:	10fdb426 	beq	r2,r3,410227e8 <___vfprintf_internal_r+0xa6c>
41023118:	31bfffc4 	addi	r6,r6,-1
4102311c:	d9814115 	stw	r6,1284(sp)
41023120:	30c00005 	stb	r3,0(r6)
41023124:	003db006 	br	410227e8 <___vfprintf_internal_r+0xa6c>
41023128:	88800068 	cmpgeui	r2,r17,1
4102312c:	10002c1e 	bne	r2,zero,410231e0 <___vfprintf_internal_r+0x1464>
41023130:	8800021e 	bne	r17,zero,4102313c <___vfprintf_internal_r+0x13c0>
41023134:	00800244 	movi	r2,9
41023138:	14002936 	bltu	r2,r16,410231e0 <___vfprintf_internal_r+0x1464>
4102313c:	d90018c4 	addi	r4,sp,99
41023140:	dd000f04 	addi	r20,sp,60
41023144:	d9014115 	stw	r4,1284(sp)
41023148:	d9014117 	ldw	r4,1284(sp)
4102314c:	80800c04 	addi	r2,r16,48
41023150:	20800005 	stb	r2,0(r4)
41023154:	003da406 	br	410227e8 <___vfprintf_internal_r+0xa6c>
41023158:	dc400d17 	ldw	r17,52(sp)
4102315c:	071040f4 	movhi	fp,16643
41023160:	e737de84 	addi	fp,fp,-8326
41023164:	9425883a 	add	r18,r18,r16
41023168:	8c400044 	addi	r17,r17,1
4102316c:	008001c4 	movi	r2,7
41023170:	1f000015 	stw	fp,0(r3)
41023174:	1c000115 	stw	r16,4(r3)
41023178:	dc800e15 	stw	r18,56(sp)
4102317c:	dc400d15 	stw	r17,52(sp)
41023180:	147de216 	blt	r2,r17,4102290c <___vfprintf_internal_r+0xb90>
41023184:	18c00204 	addi	r3,r3,8
41023188:	003c7a06 	br	41022374 <___vfprintf_internal_r+0x5f8>
4102318c:	01000084 	movi	r4,2
41023190:	d8000405 	stb	zero,16(sp)
41023194:	003d8706 	br	410227b4 <___vfprintf_internal_r+0xa38>
41023198:	d9814c17 	ldw	r6,1328(sp)
4102319c:	30c4703a 	and	r2,r6,r3
410231a0:	1005003a 	cmpeq	r2,r2,zero
410231a4:	103cb926 	beq	r2,zero,4102248c <___vfprintf_internal_r+0x710>
410231a8:	d9014117 	ldw	r4,1284(sp)
410231ac:	94800044 	addi	r18,r18,1
410231b0:	8c400044 	addi	r17,r17,1
410231b4:	008001c4 	movi	r2,7
410231b8:	a9000015 	stw	r4,0(r21)
410231bc:	a8c00115 	stw	r3,4(r21)
410231c0:	dc800e15 	stw	r18,56(sp)
410231c4:	dc400d15 	stw	r17,52(sp)
410231c8:	147e6616 	blt	r2,r17,41022b64 <___vfprintf_internal_r+0xde8>
410231cc:	acc00204 	addi	r19,r21,8
410231d0:	003cd706 	br	41022530 <___vfprintf_internal_r+0x7b4>
410231d4:	071040f4 	movhi	fp,16643
410231d8:	e737de84 	addi	fp,fp,-8326
410231dc:	003c4f06 	br	4102231c <___vfprintf_internal_r+0x5a0>
410231e0:	dd000f04 	addi	r20,sp,60
410231e4:	dc801904 	addi	r18,sp,100
410231e8:	8009883a 	mov	r4,r16
410231ec:	880b883a 	mov	r5,r17
410231f0:	01800284 	movi	r6,10
410231f4:	000f883a 	mov	r7,zero
410231f8:	102970c0 	call	4102970c <__umoddi3>
410231fc:	12000c04 	addi	r8,r2,48
41023200:	94bfffc4 	addi	r18,r18,-1
41023204:	8009883a 	mov	r4,r16
41023208:	880b883a 	mov	r5,r17
4102320c:	01800284 	movi	r6,10
41023210:	000f883a 	mov	r7,zero
41023214:	92000005 	stb	r8,0(r18)
41023218:	10291300 	call	41029130 <__udivdi3>
4102321c:	1009883a 	mov	r4,r2
41023220:	1021883a 	mov	r16,r2
41023224:	18800068 	cmpgeui	r2,r3,1
41023228:	1823883a 	mov	r17,r3
4102322c:	103fee1e 	bne	r2,zero,410231e8 <___vfprintf_internal_r+0x146c>
41023230:	1800021e 	bne	r3,zero,4102323c <___vfprintf_internal_r+0x14c0>
41023234:	00800244 	movi	r2,9
41023238:	113feb36 	bltu	r2,r4,410231e8 <___vfprintf_internal_r+0x146c>
4102323c:	94bfffc4 	addi	r18,r18,-1
41023240:	dc814115 	stw	r18,1284(sp)
41023244:	003fc006 	br	41023148 <___vfprintf_internal_r+0x13cc>
41023248:	d9014c17 	ldw	r4,1328(sp)
4102324c:	2080004c 	andi	r2,r4,1
41023250:	10009a1e 	bne	r2,zero,410234bc <___vfprintf_internal_r+0x1740>
41023254:	d9401904 	addi	r5,sp,100
41023258:	dd000f04 	addi	r20,sp,60
4102325c:	d9414115 	stw	r5,1284(sp)
41023260:	003d6106 	br	410227e8 <___vfprintf_internal_r+0xa6c>
41023264:	d9014f17 	ldw	r4,1340(sp)
41023268:	b00b883a 	mov	r5,r22
4102326c:	d9800c04 	addi	r6,sp,48
41023270:	1021d240 	call	41021d24 <__sprint_r>
41023274:	103c791e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41023278:	dc800e17 	ldw	r18,56(sp)
4102327c:	d8c01904 	addi	r3,sp,100
41023280:	003cff06 	br	41022680 <___vfprintf_internal_r+0x904>
41023284:	d8c14c17 	ldw	r3,1328(sp)
41023288:	1880040c 	andi	r2,r3,16
4102328c:	1000711e 	bne	r2,zero,41023454 <___vfprintf_internal_r+0x16d8>
41023290:	d9014c17 	ldw	r4,1328(sp)
41023294:	2080100c 	andi	r2,r4,64
41023298:	10006e26 	beq	r2,zero,41023454 <___vfprintf_internal_r+0x16d8>
4102329c:	3c00000b 	ldhu	r16,0(r7)
410232a0:	0023883a 	mov	r17,zero
410232a4:	39c00104 	addi	r7,r7,4
410232a8:	d9c14015 	stw	r7,1280(sp)
410232ac:	003f0006 	br	41022eb0 <___vfprintf_internal_r+0x1134>
410232b0:	dc400d17 	ldw	r17,52(sp)
410232b4:	071040f4 	movhi	fp,16643
410232b8:	e737de84 	addi	fp,fp,-8326
410232bc:	9425883a 	add	r18,r18,r16
410232c0:	8c400044 	addi	r17,r17,1
410232c4:	008001c4 	movi	r2,7
410232c8:	1f000015 	stw	fp,0(r3)
410232cc:	1c000115 	stw	r16,4(r3)
410232d0:	dc800e15 	stw	r18,56(sp)
410232d4:	dc400d15 	stw	r17,52(sp)
410232d8:	147d7616 	blt	r2,r17,410228b4 <___vfprintf_internal_r+0xb38>
410232dc:	18c00204 	addi	r3,r3,8
410232e0:	003d7b06 	br	410228d0 <___vfprintf_internal_r+0xb54>
410232e4:	dc800e17 	ldw	r18,56(sp)
410232e8:	dc400d17 	ldw	r17,52(sp)
410232ec:	071040f4 	movhi	fp,16643
410232f0:	e737e284 	addi	fp,fp,-8310
410232f4:	003bc006 	br	410221f8 <___vfprintf_internal_r+0x47c>
410232f8:	d9014f17 	ldw	r4,1340(sp)
410232fc:	b00b883a 	mov	r5,r22
41023300:	d9800c04 	addi	r6,sp,48
41023304:	1021d240 	call	41021d24 <__sprint_r>
41023308:	103c541e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
4102330c:	dc800e17 	ldw	r18,56(sp)
41023310:	d8c01904 	addi	r3,sp,100
41023314:	003ce906 	br	410226bc <___vfprintf_internal_r+0x940>
41023318:	3c000017 	ldw	r16,0(r7)
4102331c:	0009883a 	mov	r4,zero
41023320:	39c00104 	addi	r7,r7,4
41023324:	0023883a 	mov	r17,zero
41023328:	d9c14015 	stw	r7,1280(sp)
4102332c:	d8000405 	stb	zero,16(sp)
41023330:	003d2006 	br	410227b4 <___vfprintf_internal_r+0xa38>
41023334:	38800017 	ldw	r2,0(r7)
41023338:	39c00104 	addi	r7,r7,4
4102333c:	d9c14015 	stw	r7,1280(sp)
41023340:	1023d7fa 	srai	r17,r2,31
41023344:	1021883a 	mov	r16,r2
41023348:	003d1806 	br	410227ac <___vfprintf_internal_r+0xa30>
4102334c:	3c000017 	ldw	r16,0(r7)
41023350:	01000044 	movi	r4,1
41023354:	39c00104 	addi	r7,r7,4
41023358:	0023883a 	mov	r17,zero
4102335c:	d9c14015 	stw	r7,1280(sp)
41023360:	d8000405 	stb	zero,16(sp)
41023364:	003d1306 	br	410227b4 <___vfprintf_internal_r+0xa38>
41023368:	009040f4 	movhi	r2,16643
4102336c:	10b7de04 	addi	r2,r2,-8328
41023370:	94800044 	addi	r18,r18,1
41023374:	8c400044 	addi	r17,r17,1
41023378:	a8800015 	stw	r2,0(r21)
4102337c:	00c00044 	movi	r3,1
41023380:	008001c4 	movi	r2,7
41023384:	a8c00115 	stw	r3,4(r21)
41023388:	dc800e15 	stw	r18,56(sp)
4102338c:	dc400d15 	stw	r17,52(sp)
41023390:	1440ca16 	blt	r2,r17,410236bc <___vfprintf_internal_r+0x1940>
41023394:	a8c00204 	addi	r3,r21,8
41023398:	2000061e 	bne	r4,zero,410233b4 <___vfprintf_internal_r+0x1638>
4102339c:	d9414717 	ldw	r5,1308(sp)
410233a0:	2800041e 	bne	r5,zero,410233b4 <___vfprintf_internal_r+0x1638>
410233a4:	d9814c17 	ldw	r6,1328(sp)
410233a8:	3080004c 	andi	r2,r6,1
410233ac:	1005003a 	cmpeq	r2,r2,zero
410233b0:	103bf01e 	bne	r2,zero,41022374 <___vfprintf_internal_r+0x5f8>
410233b4:	00800044 	movi	r2,1
410233b8:	dc400d17 	ldw	r17,52(sp)
410233bc:	18800115 	stw	r2,4(r3)
410233c0:	d8814917 	ldw	r2,1316(sp)
410233c4:	94800044 	addi	r18,r18,1
410233c8:	8c400044 	addi	r17,r17,1
410233cc:	18800015 	stw	r2,0(r3)
410233d0:	008001c4 	movi	r2,7
410233d4:	dc800e15 	stw	r18,56(sp)
410233d8:	dc400d15 	stw	r17,52(sp)
410233dc:	1440ca16 	blt	r2,r17,41023708 <___vfprintf_internal_r+0x198c>
410233e0:	18c00204 	addi	r3,r3,8
410233e4:	0121c83a 	sub	r16,zero,r4
410233e8:	0400500e 	bge	zero,r16,4102352c <___vfprintf_internal_r+0x17b0>
410233ec:	00800404 	movi	r2,16
410233f0:	1400800e 	bge	r2,r16,410235f4 <___vfprintf_internal_r+0x1878>
410233f4:	1027883a 	mov	r19,r2
410233f8:	071040f4 	movhi	fp,16643
410233fc:	e737de84 	addi	fp,fp,-8326
41023400:	050001c4 	movi	r20,7
41023404:	00000306 	br	41023414 <___vfprintf_internal_r+0x1698>
41023408:	18c00204 	addi	r3,r3,8
4102340c:	843ffc04 	addi	r16,r16,-16
41023410:	9c007a0e 	bge	r19,r16,410235fc <___vfprintf_internal_r+0x1880>
41023414:	94800404 	addi	r18,r18,16
41023418:	8c400044 	addi	r17,r17,1
4102341c:	1f000015 	stw	fp,0(r3)
41023420:	1cc00115 	stw	r19,4(r3)
41023424:	dc800e15 	stw	r18,56(sp)
41023428:	dc400d15 	stw	r17,52(sp)
4102342c:	a47ff60e 	bge	r20,r17,41023408 <___vfprintf_internal_r+0x168c>
41023430:	d9014f17 	ldw	r4,1340(sp)
41023434:	b00b883a 	mov	r5,r22
41023438:	d9800c04 	addi	r6,sp,48
4102343c:	1021d240 	call	41021d24 <__sprint_r>
41023440:	103c061e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41023444:	dc800e17 	ldw	r18,56(sp)
41023448:	dc400d17 	ldw	r17,52(sp)
4102344c:	d8c01904 	addi	r3,sp,100
41023450:	003fee06 	br	4102340c <___vfprintf_internal_r+0x1690>
41023454:	3c000017 	ldw	r16,0(r7)
41023458:	0023883a 	mov	r17,zero
4102345c:	39c00104 	addi	r7,r7,4
41023460:	d9c14015 	stw	r7,1280(sp)
41023464:	003e9206 	br	41022eb0 <___vfprintf_internal_r+0x1134>
41023468:	d9401904 	addi	r5,sp,100
4102346c:	dd000f04 	addi	r20,sp,60
41023470:	d9414115 	stw	r5,1284(sp)
41023474:	d9814417 	ldw	r6,1296(sp)
41023478:	880a973a 	slli	r5,r17,28
4102347c:	8004d13a 	srli	r2,r16,4
41023480:	810003cc 	andi	r4,r16,15
41023484:	3109883a 	add	r4,r6,r4
41023488:	2884b03a 	or	r2,r5,r2
4102348c:	21400003 	ldbu	r5,0(r4)
41023490:	d9014117 	ldw	r4,1284(sp)
41023494:	8806d13a 	srli	r3,r17,4
41023498:	1021883a 	mov	r16,r2
4102349c:	213fffc4 	addi	r4,r4,-1
410234a0:	d9014115 	stw	r4,1284(sp)
410234a4:	d9814117 	ldw	r6,1284(sp)
410234a8:	10c8b03a 	or	r4,r2,r3
410234ac:	1823883a 	mov	r17,r3
410234b0:	31400005 	stb	r5,0(r6)
410234b4:	203fef1e 	bne	r4,zero,41023474 <___vfprintf_internal_r+0x16f8>
410234b8:	003ccb06 	br	410227e8 <___vfprintf_internal_r+0xa6c>
410234bc:	00800c04 	movi	r2,48
410234c0:	d98018c4 	addi	r6,sp,99
410234c4:	dd000f04 	addi	r20,sp,60
410234c8:	d88018c5 	stb	r2,99(sp)
410234cc:	d9814115 	stw	r6,1284(sp)
410234d0:	003cc506 	br	410227e8 <___vfprintf_internal_r+0xa6c>
410234d4:	dc400d17 	ldw	r17,52(sp)
410234d8:	071040f4 	movhi	fp,16643
410234dc:	e737e284 	addi	fp,fp,-8310
410234e0:	003bc706 	br	41022400 <___vfprintf_internal_r+0x684>
410234e4:	d9414c17 	ldw	r5,1328(sp)
410234e8:	2880040c 	andi	r2,r5,16
410234ec:	10007c26 	beq	r2,zero,410236e0 <___vfprintf_internal_r+0x1964>
410234f0:	38800017 	ldw	r2,0(r7)
410234f4:	39c00104 	addi	r7,r7,4
410234f8:	d9c14015 	stw	r7,1280(sp)
410234fc:	d9814b17 	ldw	r6,1324(sp)
41023500:	d9c14017 	ldw	r7,1280(sp)
41023504:	11800015 	stw	r6,0(r2)
41023508:	003a7806 	br	41021eec <___vfprintf_internal_r+0x170>
4102350c:	d9014f17 	ldw	r4,1340(sp)
41023510:	b00b883a 	mov	r5,r22
41023514:	d9800c04 	addi	r6,sp,48
41023518:	1021d240 	call	41021d24 <__sprint_r>
4102351c:	103bcf1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41023520:	dc800e17 	ldw	r18,56(sp)
41023524:	dc400d17 	ldw	r17,52(sp)
41023528:	d8c01904 	addi	r3,sp,100
4102352c:	d9014717 	ldw	r4,1308(sp)
41023530:	d9414117 	ldw	r5,1284(sp)
41023534:	8c400044 	addi	r17,r17,1
41023538:	9125883a 	add	r18,r18,r4
4102353c:	008001c4 	movi	r2,7
41023540:	19400015 	stw	r5,0(r3)
41023544:	19000115 	stw	r4,4(r3)
41023548:	dc800e15 	stw	r18,56(sp)
4102354c:	dc400d15 	stw	r17,52(sp)
41023550:	147cee16 	blt	r2,r17,4102290c <___vfprintf_internal_r+0xb90>
41023554:	18c00204 	addi	r3,r3,8
41023558:	003b8606 	br	41022374 <___vfprintf_internal_r+0x5f8>
4102355c:	38c00017 	ldw	r3,0(r7)
41023560:	39000204 	addi	r4,r7,8
41023564:	d9014015 	stw	r4,1280(sp)
41023568:	d8c14215 	stw	r3,1288(sp)
4102356c:	39c00117 	ldw	r7,4(r7)
41023570:	d9c14315 	stw	r7,1292(sp)
41023574:	003e2006 	br	41022df8 <___vfprintf_internal_r+0x107c>
41023578:	0005883a 	mov	r2,zero
4102357c:	1409c83a 	sub	r4,r2,r16
41023580:	1105803a 	cmpltu	r2,r2,r4
41023584:	044bc83a 	sub	r5,zero,r17
41023588:	2885c83a 	sub	r2,r5,r2
4102358c:	2021883a 	mov	r16,r4
41023590:	1023883a 	mov	r17,r2
41023594:	01000044 	movi	r4,1
41023598:	00800b44 	movi	r2,45
4102359c:	d8800405 	stb	r2,16(sp)
410235a0:	003c8406 	br	410227b4 <___vfprintf_internal_r+0xa38>
410235a4:	d9014f17 	ldw	r4,1340(sp)
410235a8:	b00b883a 	mov	r5,r22
410235ac:	d9800c04 	addi	r6,sp,48
410235b0:	1021d240 	call	41021d24 <__sprint_r>
410235b4:	103ba91e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
410235b8:	dc800e17 	ldw	r18,56(sp)
410235bc:	dc400d17 	ldw	r17,52(sp)
410235c0:	d9000517 	ldw	r4,20(sp)
410235c4:	d9401904 	addi	r5,sp,100
410235c8:	003da706 	br	41022c68 <___vfprintf_internal_r+0xeec>
410235cc:	d9014f17 	ldw	r4,1340(sp)
410235d0:	b00b883a 	mov	r5,r22
410235d4:	d9800c04 	addi	r6,sp,48
410235d8:	1021d240 	call	41021d24 <__sprint_r>
410235dc:	103b9f1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
410235e0:	dc800e17 	ldw	r18,56(sp)
410235e4:	dc400d17 	ldw	r17,52(sp)
410235e8:	d9000517 	ldw	r4,20(sp)
410235ec:	d8c01904 	addi	r3,sp,100
410235f0:	003d9106 	br	41022c38 <___vfprintf_internal_r+0xebc>
410235f4:	071040f4 	movhi	fp,16643
410235f8:	e737de84 	addi	fp,fp,-8326
410235fc:	9425883a 	add	r18,r18,r16
41023600:	8c400044 	addi	r17,r17,1
41023604:	008001c4 	movi	r2,7
41023608:	1f000015 	stw	fp,0(r3)
4102360c:	1c000115 	stw	r16,4(r3)
41023610:	dc800e15 	stw	r18,56(sp)
41023614:	dc400d15 	stw	r17,52(sp)
41023618:	147fbc16 	blt	r2,r17,4102350c <___vfprintf_internal_r+0x1790>
4102361c:	18c00204 	addi	r3,r3,8
41023620:	003fc206 	br	4102352c <___vfprintf_internal_r+0x17b0>
41023624:	d9014f17 	ldw	r4,1340(sp)
41023628:	b00b883a 	mov	r5,r22
4102362c:	d9800c04 	addi	r6,sp,48
41023630:	1021d240 	call	41021d24 <__sprint_r>
41023634:	103b891e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41023638:	dc800e17 	ldw	r18,56(sp)
4102363c:	d9000517 	ldw	r4,20(sp)
41023640:	d8c01904 	addi	r3,sp,100
41023644:	003d0206 	br	41022a50 <___vfprintf_internal_r+0xcd4>
41023648:	071040f4 	movhi	fp,16643
4102364c:	e737de84 	addi	fp,fp,-8326
41023650:	003be406 	br	410225e4 <___vfprintf_internal_r+0x868>
41023654:	009040f4 	movhi	r2,16643
41023658:	10b7cd04 	addi	r2,r2,-8396
4102365c:	d8814115 	stw	r2,1284(sp)
41023660:	003df506 	br	41022e38 <___vfprintf_internal_r+0x10bc>
41023664:	d9014217 	ldw	r4,1288(sp)
41023668:	d9414317 	ldw	r5,1292(sp)
4102366c:	10288a80 	call	410288a8 <__isnand>
41023670:	10003926 	beq	r2,zero,41023758 <___vfprintf_internal_r+0x19dc>
41023674:	d9414d17 	ldw	r5,1332(sp)
41023678:	008011c4 	movi	r2,71
4102367c:	1140ce16 	blt	r2,r5,410239b8 <___vfprintf_internal_r+0x1c3c>
41023680:	019040f4 	movhi	r6,16643
41023684:	31b7ce04 	addi	r6,r6,-8392
41023688:	d9814115 	stw	r6,1284(sp)
4102368c:	003dea06 	br	41022e38 <___vfprintf_internal_r+0x10bc>
41023690:	d9014c17 	ldw	r4,1328(sp)
41023694:	bdc00044 	addi	r23,r23,1
41023698:	b8c00007 	ldb	r3,0(r23)
4102369c:	21000814 	ori	r4,r4,32
410236a0:	d9014c15 	stw	r4,1328(sp)
410236a4:	003a3406 	br	41021f78 <___vfprintf_internal_r+0x1fc>
410236a8:	dcc14515 	stw	r19,1300(sp)
410236ac:	98011016 	blt	r19,zero,41023af0 <___vfprintf_internal_r+0x1d74>
410236b0:	980f883a 	mov	r7,r19
410236b4:	d8014615 	stw	zero,1304(sp)
410236b8:	003c5206 	br	41022804 <___vfprintf_internal_r+0xa88>
410236bc:	d9014f17 	ldw	r4,1340(sp)
410236c0:	b00b883a 	mov	r5,r22
410236c4:	d9800c04 	addi	r6,sp,48
410236c8:	1021d240 	call	41021d24 <__sprint_r>
410236cc:	103b631e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
410236d0:	dc800e17 	ldw	r18,56(sp)
410236d4:	d9000517 	ldw	r4,20(sp)
410236d8:	d8c01904 	addi	r3,sp,100
410236dc:	003f2e06 	br	41023398 <___vfprintf_internal_r+0x161c>
410236e0:	d8c14c17 	ldw	r3,1328(sp)
410236e4:	1880100c 	andi	r2,r3,64
410236e8:	1000a026 	beq	r2,zero,4102396c <___vfprintf_internal_r+0x1bf0>
410236ec:	38800017 	ldw	r2,0(r7)
410236f0:	39c00104 	addi	r7,r7,4
410236f4:	d9c14015 	stw	r7,1280(sp)
410236f8:	d9014b17 	ldw	r4,1324(sp)
410236fc:	d9c14017 	ldw	r7,1280(sp)
41023700:	1100000d 	sth	r4,0(r2)
41023704:	0039f906 	br	41021eec <___vfprintf_internal_r+0x170>
41023708:	d9014f17 	ldw	r4,1340(sp)
4102370c:	b00b883a 	mov	r5,r22
41023710:	d9800c04 	addi	r6,sp,48
41023714:	1021d240 	call	41021d24 <__sprint_r>
41023718:	103b501e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
4102371c:	dc800e17 	ldw	r18,56(sp)
41023720:	dc400d17 	ldw	r17,52(sp)
41023724:	d9000517 	ldw	r4,20(sp)
41023728:	d8c01904 	addi	r3,sp,100
4102372c:	003f2d06 	br	410233e4 <___vfprintf_internal_r+0x1668>
41023730:	00800184 	movi	r2,6
41023734:	14c09a36 	bltu	r2,r19,410239a0 <___vfprintf_internal_r+0x1c24>
41023738:	dcc14515 	stw	r19,1300(sp)
4102373c:	9800010e 	bge	r19,zero,41023744 <___vfprintf_internal_r+0x19c8>
41023740:	d8014515 	stw	zero,1300(sp)
41023744:	009040f4 	movhi	r2,16643
41023748:	10b7d004 	addi	r2,r2,-8384
4102374c:	980f883a 	mov	r7,r19
41023750:	d8814115 	stw	r2,1284(sp)
41023754:	003a7806 	br	41022138 <___vfprintf_internal_r+0x3bc>
41023758:	00bfffc4 	movi	r2,-1
4102375c:	9880e226 	beq	r19,r2,41023ae8 <___vfprintf_internal_r+0x1d6c>
41023760:	d9414d17 	ldw	r5,1332(sp)
41023764:	008019c4 	movi	r2,103
41023768:	2880dc26 	beq	r5,r2,41023adc <___vfprintf_internal_r+0x1d60>
4102376c:	008011c4 	movi	r2,71
41023770:	2880da26 	beq	r5,r2,41023adc <___vfprintf_internal_r+0x1d60>
41023774:	d9414c17 	ldw	r5,1328(sp)
41023778:	d9014317 	ldw	r4,1292(sp)
4102377c:	d9814217 	ldw	r6,1288(sp)
41023780:	29404014 	ori	r5,r5,256
41023784:	d9414c15 	stw	r5,1328(sp)
41023788:	2000cc16 	blt	r4,zero,41023abc <___vfprintf_internal_r+0x1d40>
4102378c:	3021883a 	mov	r16,r6
41023790:	2023883a 	mov	r17,r4
41023794:	0039883a 	mov	fp,zero
41023798:	d9414d17 	ldw	r5,1332(sp)
4102379c:	00801984 	movi	r2,102
410237a0:	2880b726 	beq	r5,r2,41023a80 <___vfprintf_internal_r+0x1d04>
410237a4:	00801184 	movi	r2,70
410237a8:	2880b526 	beq	r5,r2,41023a80 <___vfprintf_internal_r+0x1d04>
410237ac:	00801944 	movi	r2,101
410237b0:	2880c826 	beq	r5,r2,41023ad4 <___vfprintf_internal_r+0x1d58>
410237b4:	00801144 	movi	r2,69
410237b8:	2880c626 	beq	r5,r2,41023ad4 <___vfprintf_internal_r+0x1d58>
410237bc:	9829883a 	mov	r20,r19
410237c0:	d9014f17 	ldw	r4,1340(sp)
410237c4:	d8800504 	addi	r2,sp,20
410237c8:	880d883a 	mov	r6,r17
410237cc:	d8800115 	stw	r2,4(sp)
410237d0:	d8c00604 	addi	r3,sp,24
410237d4:	d8800704 	addi	r2,sp,28
410237d8:	800b883a 	mov	r5,r16
410237dc:	01c00084 	movi	r7,2
410237e0:	d8c00215 	stw	r3,8(sp)
410237e4:	d8800315 	stw	r2,12(sp)
410237e8:	dd000015 	stw	r20,0(sp)
410237ec:	1023fa00 	call	41023fa0 <_dtoa_r>
410237f0:	d9814d17 	ldw	r6,1332(sp)
410237f4:	d8814115 	stw	r2,1284(sp)
410237f8:	008019c4 	movi	r2,103
410237fc:	30809526 	beq	r6,r2,41023a54 <___vfprintf_internal_r+0x1cd8>
41023800:	d8c14d17 	ldw	r3,1332(sp)
41023804:	008011c4 	movi	r2,71
41023808:	18809226 	beq	r3,r2,41023a54 <___vfprintf_internal_r+0x1cd8>
4102380c:	d9414117 	ldw	r5,1284(sp)
41023810:	d9814d17 	ldw	r6,1332(sp)
41023814:	00801984 	movi	r2,102
41023818:	2d25883a 	add	r18,r5,r20
4102381c:	30808626 	beq	r6,r2,41023a38 <___vfprintf_internal_r+0x1cbc>
41023820:	00801184 	movi	r2,70
41023824:	30808426 	beq	r6,r2,41023a38 <___vfprintf_internal_r+0x1cbc>
41023828:	000d883a 	mov	r6,zero
4102382c:	000f883a 	mov	r7,zero
41023830:	880b883a 	mov	r5,r17
41023834:	8009883a 	mov	r4,r16
41023838:	102a7cc0 	call	4102a7cc <__eqdf2>
4102383c:	1000751e 	bne	r2,zero,41023a14 <___vfprintf_internal_r+0x1c98>
41023840:	9005883a 	mov	r2,r18
41023844:	dc800715 	stw	r18,28(sp)
41023848:	d9014117 	ldw	r4,1284(sp)
4102384c:	d9414d17 	ldw	r5,1332(sp)
41023850:	00c019c4 	movi	r3,103
41023854:	1125c83a 	sub	r18,r2,r4
41023858:	28c06826 	beq	r5,r3,410239fc <___vfprintf_internal_r+0x1c80>
4102385c:	008011c4 	movi	r2,71
41023860:	28806626 	beq	r5,r2,410239fc <___vfprintf_internal_r+0x1c80>
41023864:	d9000517 	ldw	r4,20(sp)
41023868:	d8c14d17 	ldw	r3,1332(sp)
4102386c:	00801944 	movi	r2,101
41023870:	10c05516 	blt	r2,r3,410239c8 <___vfprintf_internal_r+0x1c4c>
41023874:	213fffc4 	addi	r4,r4,-1
41023878:	d9000515 	stw	r4,20(sp)
4102387c:	d8c00805 	stb	r3,32(sp)
41023880:	2021883a 	mov	r16,r4
41023884:	2000c116 	blt	r4,zero,41023b8c <___vfprintf_internal_r+0x1e10>
41023888:	00800ac4 	movi	r2,43
4102388c:	d8800845 	stb	r2,33(sp)
41023890:	00800244 	movi	r2,9
41023894:	1400af0e 	bge	r2,r16,41023b54 <___vfprintf_internal_r+0x1dd8>
41023898:	1027883a 	mov	r19,r2
4102389c:	dc400b84 	addi	r17,sp,46
410238a0:	8009883a 	mov	r4,r16
410238a4:	01400284 	movi	r5,10
410238a8:	10214940 	call	41021494 <__modsi3>
410238ac:	10800c04 	addi	r2,r2,48
410238b0:	8c7fffc4 	addi	r17,r17,-1
410238b4:	8009883a 	mov	r4,r16
410238b8:	01400284 	movi	r5,10
410238bc:	88800005 	stb	r2,0(r17)
410238c0:	10214340 	call	41021434 <__divsi3>
410238c4:	1021883a 	mov	r16,r2
410238c8:	98bff516 	blt	r19,r2,410238a0 <___vfprintf_internal_r+0x1b24>
410238cc:	10c00c04 	addi	r3,r2,48
410238d0:	d88009c4 	addi	r2,sp,39
410238d4:	108001c4 	addi	r2,r2,7
410238d8:	897fffc4 	addi	r5,r17,-1
410238dc:	88ffffc5 	stb	r3,-1(r17)
410238e0:	2880a72e 	bgeu	r5,r2,41023b80 <___vfprintf_internal_r+0x1e04>
410238e4:	1009883a 	mov	r4,r2
410238e8:	d9800804 	addi	r6,sp,32
410238ec:	d8c00884 	addi	r3,sp,34
410238f0:	28800003 	ldbu	r2,0(r5)
410238f4:	29400044 	addi	r5,r5,1
410238f8:	18800005 	stb	r2,0(r3)
410238fc:	18c00044 	addi	r3,r3,1
41023900:	293ffb36 	bltu	r5,r4,410238f0 <___vfprintf_internal_r+0x1b74>
41023904:	1987c83a 	sub	r3,r3,r6
41023908:	00800044 	movi	r2,1
4102390c:	d8c14815 	stw	r3,1312(sp)
41023910:	90cf883a 	add	r7,r18,r3
41023914:	1480960e 	bge	r2,r18,41023b70 <___vfprintf_internal_r+0x1df4>
41023918:	39c00044 	addi	r7,r7,1
4102391c:	d9c14515 	stw	r7,1300(sp)
41023920:	38003416 	blt	r7,zero,410239f4 <___vfprintf_internal_r+0x1c78>
41023924:	e0803fcc 	andi	r2,fp,255
41023928:	1080201c 	xori	r2,r2,128
4102392c:	10bfe004 	addi	r2,r2,-128
41023930:	10004e26 	beq	r2,zero,41023a6c <___vfprintf_internal_r+0x1cf0>
41023934:	00800b44 	movi	r2,45
41023938:	dc814715 	stw	r18,1308(sp)
4102393c:	d8014615 	stw	zero,1304(sp)
41023940:	d8800405 	stb	r2,16(sp)
41023944:	003bb106 	br	4102280c <___vfprintf_internal_r+0xa90>
41023948:	00800b44 	movi	r2,45
4102394c:	d8800405 	stb	r2,16(sp)
41023950:	003d3306 	br	41022e20 <___vfprintf_internal_r+0x10a4>
41023954:	d9014f17 	ldw	r4,1340(sp)
41023958:	b00b883a 	mov	r5,r22
4102395c:	d9800c04 	addi	r6,sp,48
41023960:	1021d240 	call	41021d24 <__sprint_r>
41023964:	103abd1e 	bne	r2,zero,4102245c <___vfprintf_internal_r+0x6e0>
41023968:	003abb06 	br	41022458 <___vfprintf_internal_r+0x6dc>
4102396c:	38800017 	ldw	r2,0(r7)
41023970:	39c00104 	addi	r7,r7,4
41023974:	d9c14015 	stw	r7,1280(sp)
41023978:	d9414b17 	ldw	r5,1324(sp)
4102397c:	d9c14017 	ldw	r7,1280(sp)
41023980:	11400015 	stw	r5,0(r2)
41023984:	00395906 	br	41021eec <___vfprintf_internal_r+0x170>
41023988:	980f883a 	mov	r7,r19
4102398c:	dcc14515 	stw	r19,1300(sp)
41023990:	d8014615 	stw	zero,1304(sp)
41023994:	003b9b06 	br	41022804 <___vfprintf_internal_r+0xa88>
41023998:	0027883a 	mov	r19,zero
4102399c:	00397806 	br	41021f80 <___vfprintf_internal_r+0x204>
410239a0:	00d040f4 	movhi	r3,16643
410239a4:	18f7d004 	addi	r3,r3,-8384
410239a8:	100f883a 	mov	r7,r2
410239ac:	d8814515 	stw	r2,1300(sp)
410239b0:	d8c14115 	stw	r3,1284(sp)
410239b4:	0039e006 	br	41022138 <___vfprintf_internal_r+0x3bc>
410239b8:	009040f4 	movhi	r2,16643
410239bc:	10b7cf04 	addi	r2,r2,-8388
410239c0:	d8814115 	stw	r2,1284(sp)
410239c4:	003d1c06 	br	41022e38 <___vfprintf_internal_r+0x10bc>
410239c8:	d9414d17 	ldw	r5,1332(sp)
410239cc:	00801984 	movi	r2,102
410239d0:	28804926 	beq	r5,r2,41023af8 <___vfprintf_internal_r+0x1d7c>
410239d4:	200f883a 	mov	r7,r4
410239d8:	24805716 	blt	r4,r18,41023b38 <___vfprintf_internal_r+0x1dbc>
410239dc:	d9414c17 	ldw	r5,1328(sp)
410239e0:	2880004c 	andi	r2,r5,1
410239e4:	10000126 	beq	r2,zero,410239ec <___vfprintf_internal_r+0x1c70>
410239e8:	21c00044 	addi	r7,r4,1
410239ec:	d9c14515 	stw	r7,1300(sp)
410239f0:	383fcc0e 	bge	r7,zero,41023924 <___vfprintf_internal_r+0x1ba8>
410239f4:	d8014515 	stw	zero,1300(sp)
410239f8:	003fca06 	br	41023924 <___vfprintf_internal_r+0x1ba8>
410239fc:	d9000517 	ldw	r4,20(sp)
41023a00:	00bfff04 	movi	r2,-4
41023a04:	1100480e 	bge	r2,r4,41023b28 <___vfprintf_internal_r+0x1dac>
41023a08:	99004716 	blt	r19,r4,41023b28 <___vfprintf_internal_r+0x1dac>
41023a0c:	d8c14d15 	stw	r3,1332(sp)
41023a10:	003ff006 	br	410239d4 <___vfprintf_internal_r+0x1c58>
41023a14:	d8800717 	ldw	r2,28(sp)
41023a18:	14bf8b2e 	bgeu	r2,r18,41023848 <___vfprintf_internal_r+0x1acc>
41023a1c:	9007883a 	mov	r3,r18
41023a20:	01000c04 	movi	r4,48
41023a24:	11000005 	stb	r4,0(r2)
41023a28:	10800044 	addi	r2,r2,1
41023a2c:	d8800715 	stw	r2,28(sp)
41023a30:	18bffc1e 	bne	r3,r2,41023a24 <___vfprintf_internal_r+0x1ca8>
41023a34:	003f8406 	br	41023848 <___vfprintf_internal_r+0x1acc>
41023a38:	d8814117 	ldw	r2,1284(sp)
41023a3c:	10c00007 	ldb	r3,0(r2)
41023a40:	00800c04 	movi	r2,48
41023a44:	18805b26 	beq	r3,r2,41023bb4 <___vfprintf_internal_r+0x1e38>
41023a48:	d9000517 	ldw	r4,20(sp)
41023a4c:	9125883a 	add	r18,r18,r4
41023a50:	003f7506 	br	41023828 <___vfprintf_internal_r+0x1aac>
41023a54:	d9014c17 	ldw	r4,1328(sp)
41023a58:	2080004c 	andi	r2,r4,1
41023a5c:	1005003a 	cmpeq	r2,r2,zero
41023a60:	103f6a26 	beq	r2,zero,4102380c <___vfprintf_internal_r+0x1a90>
41023a64:	d8800717 	ldw	r2,28(sp)
41023a68:	003f7706 	br	41023848 <___vfprintf_internal_r+0x1acc>
41023a6c:	d9c14515 	stw	r7,1300(sp)
41023a70:	38004d16 	blt	r7,zero,41023ba8 <___vfprintf_internal_r+0x1e2c>
41023a74:	dc814715 	stw	r18,1308(sp)
41023a78:	d8014615 	stw	zero,1304(sp)
41023a7c:	003b6106 	br	41022804 <___vfprintf_internal_r+0xa88>
41023a80:	d9014f17 	ldw	r4,1340(sp)
41023a84:	d8800504 	addi	r2,sp,20
41023a88:	d8800115 	stw	r2,4(sp)
41023a8c:	d8c00604 	addi	r3,sp,24
41023a90:	d8800704 	addi	r2,sp,28
41023a94:	800b883a 	mov	r5,r16
41023a98:	880d883a 	mov	r6,r17
41023a9c:	01c000c4 	movi	r7,3
41023aa0:	d8c00215 	stw	r3,8(sp)
41023aa4:	d8800315 	stw	r2,12(sp)
41023aa8:	dcc00015 	stw	r19,0(sp)
41023aac:	9829883a 	mov	r20,r19
41023ab0:	1023fa00 	call	41023fa0 <_dtoa_r>
41023ab4:	d8814115 	stw	r2,1284(sp)
41023ab8:	003f5106 	br	41023800 <___vfprintf_internal_r+0x1a84>
41023abc:	d8c14217 	ldw	r3,1288(sp)
41023ac0:	d9014317 	ldw	r4,1292(sp)
41023ac4:	07000b44 	movi	fp,45
41023ac8:	1821883a 	mov	r16,r3
41023acc:	2460003c 	xorhi	r17,r4,32768
41023ad0:	003f3106 	br	41023798 <___vfprintf_internal_r+0x1a1c>
41023ad4:	9d000044 	addi	r20,r19,1
41023ad8:	003f3906 	br	410237c0 <___vfprintf_internal_r+0x1a44>
41023adc:	983f251e 	bne	r19,zero,41023774 <___vfprintf_internal_r+0x19f8>
41023ae0:	04c00044 	movi	r19,1
41023ae4:	003f2306 	br	41023774 <___vfprintf_internal_r+0x19f8>
41023ae8:	04c00184 	movi	r19,6
41023aec:	003f2106 	br	41023774 <___vfprintf_internal_r+0x19f8>
41023af0:	d8014515 	stw	zero,1300(sp)
41023af4:	003eee06 	br	410236b0 <___vfprintf_internal_r+0x1934>
41023af8:	200f883a 	mov	r7,r4
41023afc:	0100370e 	bge	zero,r4,41023bdc <___vfprintf_internal_r+0x1e60>
41023b00:	9800031e 	bne	r19,zero,41023b10 <___vfprintf_internal_r+0x1d94>
41023b04:	d9814c17 	ldw	r6,1328(sp)
41023b08:	3080004c 	andi	r2,r6,1
41023b0c:	103fb726 	beq	r2,zero,410239ec <___vfprintf_internal_r+0x1c70>
41023b10:	20800044 	addi	r2,r4,1
41023b14:	98a7883a 	add	r19,r19,r2
41023b18:	dcc14515 	stw	r19,1300(sp)
41023b1c:	980f883a 	mov	r7,r19
41023b20:	983f800e 	bge	r19,zero,41023924 <___vfprintf_internal_r+0x1ba8>
41023b24:	003fb306 	br	410239f4 <___vfprintf_internal_r+0x1c78>
41023b28:	d9814d17 	ldw	r6,1332(sp)
41023b2c:	31bfff84 	addi	r6,r6,-2
41023b30:	d9814d15 	stw	r6,1332(sp)
41023b34:	003f4c06 	br	41023868 <___vfprintf_internal_r+0x1aec>
41023b38:	0100180e 	bge	zero,r4,41023b9c <___vfprintf_internal_r+0x1e20>
41023b3c:	00800044 	movi	r2,1
41023b40:	1485883a 	add	r2,r2,r18
41023b44:	d8814515 	stw	r2,1300(sp)
41023b48:	100f883a 	mov	r7,r2
41023b4c:	103f750e 	bge	r2,zero,41023924 <___vfprintf_internal_r+0x1ba8>
41023b50:	003fa806 	br	410239f4 <___vfprintf_internal_r+0x1c78>
41023b54:	80c00c04 	addi	r3,r16,48
41023b58:	00800c04 	movi	r2,48
41023b5c:	d8c008c5 	stb	r3,35(sp)
41023b60:	d9800804 	addi	r6,sp,32
41023b64:	d8c00904 	addi	r3,sp,36
41023b68:	d8800885 	stb	r2,34(sp)
41023b6c:	003f6506 	br	41023904 <___vfprintf_internal_r+0x1b88>
41023b70:	d9014c17 	ldw	r4,1328(sp)
41023b74:	2084703a 	and	r2,r4,r2
41023b78:	103f9c26 	beq	r2,zero,410239ec <___vfprintf_internal_r+0x1c70>
41023b7c:	003f6606 	br	41023918 <___vfprintf_internal_r+0x1b9c>
41023b80:	d9800804 	addi	r6,sp,32
41023b84:	d8c00884 	addi	r3,sp,34
41023b88:	003f5e06 	br	41023904 <___vfprintf_internal_r+0x1b88>
41023b8c:	00800b44 	movi	r2,45
41023b90:	0121c83a 	sub	r16,zero,r4
41023b94:	d8800845 	stb	r2,33(sp)
41023b98:	003f3d06 	br	41023890 <___vfprintf_internal_r+0x1b14>
41023b9c:	00800084 	movi	r2,2
41023ba0:	1105c83a 	sub	r2,r2,r4
41023ba4:	003fe606 	br	41023b40 <___vfprintf_internal_r+0x1dc4>
41023ba8:	d8014515 	stw	zero,1300(sp)
41023bac:	dc814715 	stw	r18,1308(sp)
41023bb0:	003fb106 	br	41023a78 <___vfprintf_internal_r+0x1cfc>
41023bb4:	000d883a 	mov	r6,zero
41023bb8:	000f883a 	mov	r7,zero
41023bbc:	8009883a 	mov	r4,r16
41023bc0:	880b883a 	mov	r5,r17
41023bc4:	102a8540 	call	4102a854 <__nedf2>
41023bc8:	103f9f26 	beq	r2,zero,41023a48 <___vfprintf_internal_r+0x1ccc>
41023bcc:	00800044 	movi	r2,1
41023bd0:	1509c83a 	sub	r4,r2,r20
41023bd4:	d9000515 	stw	r4,20(sp)
41023bd8:	003f9b06 	br	41023a48 <___vfprintf_internal_r+0x1ccc>
41023bdc:	98000d1e 	bne	r19,zero,41023c14 <___vfprintf_internal_r+0x1e98>
41023be0:	d8c14c17 	ldw	r3,1328(sp)
41023be4:	1880004c 	andi	r2,r3,1
41023be8:	10000a1e 	bne	r2,zero,41023c14 <___vfprintf_internal_r+0x1e98>
41023bec:	01000044 	movi	r4,1
41023bf0:	200f883a 	mov	r7,r4
41023bf4:	d9014515 	stw	r4,1300(sp)
41023bf8:	003f4a06 	br	41023924 <___vfprintf_internal_r+0x1ba8>
41023bfc:	3cc00017 	ldw	r19,0(r7)
41023c00:	39c00104 	addi	r7,r7,4
41023c04:	983d0e0e 	bge	r19,zero,41023040 <___vfprintf_internal_r+0x12c4>
41023c08:	b8c00007 	ldb	r3,0(r23)
41023c0c:	04ffffc4 	movi	r19,-1
41023c10:	0038d906 	br	41021f78 <___vfprintf_internal_r+0x1fc>
41023c14:	9cc00084 	addi	r19,r19,2
41023c18:	dcc14515 	stw	r19,1300(sp)
41023c1c:	980f883a 	mov	r7,r19
41023c20:	983f400e 	bge	r19,zero,41023924 <___vfprintf_internal_r+0x1ba8>
41023c24:	003f7306 	br	410239f4 <___vfprintf_internal_r+0x1c78>

41023c28 <__vfprintf_internal>:
41023c28:	009040f4 	movhi	r2,16643
41023c2c:	10bedc04 	addi	r2,r2,-1168
41023c30:	2013883a 	mov	r9,r4
41023c34:	11000017 	ldw	r4,0(r2)
41023c38:	2805883a 	mov	r2,r5
41023c3c:	300f883a 	mov	r7,r6
41023c40:	480b883a 	mov	r5,r9
41023c44:	100d883a 	mov	r6,r2
41023c48:	1021d7c1 	jmpi	41021d7c <___vfprintf_internal_r>

41023c4c <__swsetup_r>:
41023c4c:	009040f4 	movhi	r2,16643
41023c50:	10bedc04 	addi	r2,r2,-1168
41023c54:	10c00017 	ldw	r3,0(r2)
41023c58:	defffd04 	addi	sp,sp,-12
41023c5c:	dc400115 	stw	r17,4(sp)
41023c60:	dc000015 	stw	r16,0(sp)
41023c64:	dfc00215 	stw	ra,8(sp)
41023c68:	2023883a 	mov	r17,r4
41023c6c:	2821883a 	mov	r16,r5
41023c70:	18000226 	beq	r3,zero,41023c7c <__swsetup_r+0x30>
41023c74:	18800e17 	ldw	r2,56(r3)
41023c78:	10001f26 	beq	r2,zero,41023cf8 <__swsetup_r+0xac>
41023c7c:	8100030b 	ldhu	r4,12(r16)
41023c80:	2080020c 	andi	r2,r4,8
41023c84:	10002826 	beq	r2,zero,41023d28 <__swsetup_r+0xdc>
41023c88:	81400417 	ldw	r5,16(r16)
41023c8c:	28001d26 	beq	r5,zero,41023d04 <__swsetup_r+0xb8>
41023c90:	2080004c 	andi	r2,r4,1
41023c94:	1005003a 	cmpeq	r2,r2,zero
41023c98:	10000b26 	beq	r2,zero,41023cc8 <__swsetup_r+0x7c>
41023c9c:	2080008c 	andi	r2,r4,2
41023ca0:	10001226 	beq	r2,zero,41023cec <__swsetup_r+0xa0>
41023ca4:	0005883a 	mov	r2,zero
41023ca8:	80800215 	stw	r2,8(r16)
41023cac:	28000b26 	beq	r5,zero,41023cdc <__swsetup_r+0x90>
41023cb0:	0005883a 	mov	r2,zero
41023cb4:	dfc00217 	ldw	ra,8(sp)
41023cb8:	dc400117 	ldw	r17,4(sp)
41023cbc:	dc000017 	ldw	r16,0(sp)
41023cc0:	dec00304 	addi	sp,sp,12
41023cc4:	f800283a 	ret
41023cc8:	80800517 	ldw	r2,20(r16)
41023ccc:	80000215 	stw	zero,8(r16)
41023cd0:	0085c83a 	sub	r2,zero,r2
41023cd4:	80800615 	stw	r2,24(r16)
41023cd8:	283ff51e 	bne	r5,zero,41023cb0 <__swsetup_r+0x64>
41023cdc:	2080200c 	andi	r2,r4,128
41023ce0:	103ff326 	beq	r2,zero,41023cb0 <__swsetup_r+0x64>
41023ce4:	00bfffc4 	movi	r2,-1
41023ce8:	003ff206 	br	41023cb4 <__swsetup_r+0x68>
41023cec:	80800517 	ldw	r2,20(r16)
41023cf0:	80800215 	stw	r2,8(r16)
41023cf4:	003fed06 	br	41023cac <__swsetup_r+0x60>
41023cf8:	1809883a 	mov	r4,r3
41023cfc:	10257ec0 	call	410257ec <__sinit>
41023d00:	003fde06 	br	41023c7c <__swsetup_r+0x30>
41023d04:	20c0a00c 	andi	r3,r4,640
41023d08:	00808004 	movi	r2,512
41023d0c:	18bfe026 	beq	r3,r2,41023c90 <__swsetup_r+0x44>
41023d10:	8809883a 	mov	r4,r17
41023d14:	800b883a 	mov	r5,r16
41023d18:	10265640 	call	41026564 <__smakebuf_r>
41023d1c:	8100030b 	ldhu	r4,12(r16)
41023d20:	81400417 	ldw	r5,16(r16)
41023d24:	003fda06 	br	41023c90 <__swsetup_r+0x44>
41023d28:	2080040c 	andi	r2,r4,16
41023d2c:	103fed26 	beq	r2,zero,41023ce4 <__swsetup_r+0x98>
41023d30:	2080010c 	andi	r2,r4,4
41023d34:	10001226 	beq	r2,zero,41023d80 <__swsetup_r+0x134>
41023d38:	81400c17 	ldw	r5,48(r16)
41023d3c:	28000526 	beq	r5,zero,41023d54 <__swsetup_r+0x108>
41023d40:	80801004 	addi	r2,r16,64
41023d44:	28800226 	beq	r5,r2,41023d50 <__swsetup_r+0x104>
41023d48:	8809883a 	mov	r4,r17
41023d4c:	1025b700 	call	41025b70 <_free_r>
41023d50:	80000c15 	stw	zero,48(r16)
41023d54:	8080030b 	ldhu	r2,12(r16)
41023d58:	81400417 	ldw	r5,16(r16)
41023d5c:	80000115 	stw	zero,4(r16)
41023d60:	10bff6cc 	andi	r2,r2,65499
41023d64:	8080030d 	sth	r2,12(r16)
41023d68:	81400015 	stw	r5,0(r16)
41023d6c:	8080030b 	ldhu	r2,12(r16)
41023d70:	10800214 	ori	r2,r2,8
41023d74:	113fffcc 	andi	r4,r2,65535
41023d78:	8080030d 	sth	r2,12(r16)
41023d7c:	003fc306 	br	41023c8c <__swsetup_r+0x40>
41023d80:	81400417 	ldw	r5,16(r16)
41023d84:	003ff906 	br	41023d6c <__swsetup_r+0x120>

41023d88 <quorem>:
41023d88:	28c00417 	ldw	r3,16(r5)
41023d8c:	20800417 	ldw	r2,16(r4)
41023d90:	defff604 	addi	sp,sp,-40
41023d94:	ddc00715 	stw	r23,28(sp)
41023d98:	dd400515 	stw	r21,20(sp)
41023d9c:	dfc00915 	stw	ra,36(sp)
41023da0:	df000815 	stw	fp,32(sp)
41023da4:	dd800615 	stw	r22,24(sp)
41023da8:	dd000415 	stw	r20,16(sp)
41023dac:	dcc00315 	stw	r19,12(sp)
41023db0:	dc800215 	stw	r18,8(sp)
41023db4:	dc400115 	stw	r17,4(sp)
41023db8:	dc000015 	stw	r16,0(sp)
41023dbc:	202f883a 	mov	r23,r4
41023dc0:	282b883a 	mov	r21,r5
41023dc4:	10c07416 	blt	r2,r3,41023f98 <quorem+0x210>
41023dc8:	1c7fffc4 	addi	r17,r3,-1
41023dcc:	8c45883a 	add	r2,r17,r17
41023dd0:	1085883a 	add	r2,r2,r2
41023dd4:	2c000504 	addi	r16,r5,20
41023dd8:	24c00504 	addi	r19,r4,20
41023ddc:	14ed883a 	add	r22,r2,r19
41023de0:	80a5883a 	add	r18,r16,r2
41023de4:	b7000017 	ldw	fp,0(r22)
41023de8:	91400017 	ldw	r5,0(r18)
41023dec:	e009883a 	mov	r4,fp
41023df0:	29400044 	addi	r5,r5,1
41023df4:	10214f40 	call	410214f4 <__udivsi3>
41023df8:	1029883a 	mov	r20,r2
41023dfc:	10003c1e 	bne	r2,zero,41023ef0 <quorem+0x168>
41023e00:	a80b883a 	mov	r5,r21
41023e04:	b809883a 	mov	r4,r23
41023e08:	10271f00 	call	410271f0 <__mcmp>
41023e0c:	10002b16 	blt	r2,zero,41023ebc <quorem+0x134>
41023e10:	a5000044 	addi	r20,r20,1
41023e14:	980f883a 	mov	r7,r19
41023e18:	0011883a 	mov	r8,zero
41023e1c:	0009883a 	mov	r4,zero
41023e20:	81400017 	ldw	r5,0(r16)
41023e24:	38c00017 	ldw	r3,0(r7)
41023e28:	84000104 	addi	r16,r16,4
41023e2c:	28bfffcc 	andi	r2,r5,65535
41023e30:	2085883a 	add	r2,r4,r2
41023e34:	11bfffcc 	andi	r6,r2,65535
41023e38:	193fffcc 	andi	r4,r3,65535
41023e3c:	1004d43a 	srli	r2,r2,16
41023e40:	280ad43a 	srli	r5,r5,16
41023e44:	2189c83a 	sub	r4,r4,r6
41023e48:	2209883a 	add	r4,r4,r8
41023e4c:	1806d43a 	srli	r3,r3,16
41023e50:	288b883a 	add	r5,r5,r2
41023e54:	200dd43a 	srai	r6,r4,16
41023e58:	28bfffcc 	andi	r2,r5,65535
41023e5c:	1887c83a 	sub	r3,r3,r2
41023e60:	1987883a 	add	r3,r3,r6
41023e64:	3900000d 	sth	r4,0(r7)
41023e68:	38c0008d 	sth	r3,2(r7)
41023e6c:	2808d43a 	srli	r4,r5,16
41023e70:	39c00104 	addi	r7,r7,4
41023e74:	1811d43a 	srai	r8,r3,16
41023e78:	943fe92e 	bgeu	r18,r16,41023e20 <quorem+0x98>
41023e7c:	8c45883a 	add	r2,r17,r17
41023e80:	1085883a 	add	r2,r2,r2
41023e84:	9885883a 	add	r2,r19,r2
41023e88:	10c00017 	ldw	r3,0(r2)
41023e8c:	18000b1e 	bne	r3,zero,41023ebc <quorem+0x134>
41023e90:	113fff04 	addi	r4,r2,-4
41023e94:	9900082e 	bgeu	r19,r4,41023eb8 <quorem+0x130>
41023e98:	10bfff17 	ldw	r2,-4(r2)
41023e9c:	10000326 	beq	r2,zero,41023eac <quorem+0x124>
41023ea0:	00000506 	br	41023eb8 <quorem+0x130>
41023ea4:	20800017 	ldw	r2,0(r4)
41023ea8:	1000031e 	bne	r2,zero,41023eb8 <quorem+0x130>
41023eac:	213fff04 	addi	r4,r4,-4
41023eb0:	8c7fffc4 	addi	r17,r17,-1
41023eb4:	993ffb36 	bltu	r19,r4,41023ea4 <quorem+0x11c>
41023eb8:	bc400415 	stw	r17,16(r23)
41023ebc:	a005883a 	mov	r2,r20
41023ec0:	dfc00917 	ldw	ra,36(sp)
41023ec4:	df000817 	ldw	fp,32(sp)
41023ec8:	ddc00717 	ldw	r23,28(sp)
41023ecc:	dd800617 	ldw	r22,24(sp)
41023ed0:	dd400517 	ldw	r21,20(sp)
41023ed4:	dd000417 	ldw	r20,16(sp)
41023ed8:	dcc00317 	ldw	r19,12(sp)
41023edc:	dc800217 	ldw	r18,8(sp)
41023ee0:	dc400117 	ldw	r17,4(sp)
41023ee4:	dc000017 	ldw	r16,0(sp)
41023ee8:	dec00a04 	addi	sp,sp,40
41023eec:	f800283a 	ret
41023ef0:	980f883a 	mov	r7,r19
41023ef4:	8011883a 	mov	r8,r16
41023ef8:	0013883a 	mov	r9,zero
41023efc:	000d883a 	mov	r6,zero
41023f00:	40c00017 	ldw	r3,0(r8)
41023f04:	39000017 	ldw	r4,0(r7)
41023f08:	42000104 	addi	r8,r8,4
41023f0c:	18bfffcc 	andi	r2,r3,65535
41023f10:	a085383a 	mul	r2,r20,r2
41023f14:	1806d43a 	srli	r3,r3,16
41023f18:	217fffcc 	andi	r5,r4,65535
41023f1c:	3085883a 	add	r2,r6,r2
41023f20:	11bfffcc 	andi	r6,r2,65535
41023f24:	a0c7383a 	mul	r3,r20,r3
41023f28:	1004d43a 	srli	r2,r2,16
41023f2c:	298bc83a 	sub	r5,r5,r6
41023f30:	2a4b883a 	add	r5,r5,r9
41023f34:	2008d43a 	srli	r4,r4,16
41023f38:	1887883a 	add	r3,r3,r2
41023f3c:	280dd43a 	srai	r6,r5,16
41023f40:	18bfffcc 	andi	r2,r3,65535
41023f44:	2089c83a 	sub	r4,r4,r2
41023f48:	2189883a 	add	r4,r4,r6
41023f4c:	3900008d 	sth	r4,2(r7)
41023f50:	3940000d 	sth	r5,0(r7)
41023f54:	180cd43a 	srli	r6,r3,16
41023f58:	39c00104 	addi	r7,r7,4
41023f5c:	2013d43a 	srai	r9,r4,16
41023f60:	923fe72e 	bgeu	r18,r8,41023f00 <quorem+0x178>
41023f64:	e03fa61e 	bne	fp,zero,41023e00 <quorem+0x78>
41023f68:	b0ffff04 	addi	r3,r22,-4
41023f6c:	98c0082e 	bgeu	r19,r3,41023f90 <quorem+0x208>
41023f70:	b0bfff17 	ldw	r2,-4(r22)
41023f74:	10000326 	beq	r2,zero,41023f84 <quorem+0x1fc>
41023f78:	00000506 	br	41023f90 <quorem+0x208>
41023f7c:	18800017 	ldw	r2,0(r3)
41023f80:	1000031e 	bne	r2,zero,41023f90 <quorem+0x208>
41023f84:	18ffff04 	addi	r3,r3,-4
41023f88:	8c7fffc4 	addi	r17,r17,-1
41023f8c:	98fffb36 	bltu	r19,r3,41023f7c <quorem+0x1f4>
41023f90:	bc400415 	stw	r17,16(r23)
41023f94:	003f9a06 	br	41023e00 <quorem+0x78>
41023f98:	0005883a 	mov	r2,zero
41023f9c:	003fc806 	br	41023ec0 <quorem+0x138>

41023fa0 <_dtoa_r>:
41023fa0:	22001017 	ldw	r8,64(r4)
41023fa4:	deffda04 	addi	sp,sp,-152
41023fa8:	dd402115 	stw	r21,132(sp)
41023fac:	dd002015 	stw	r20,128(sp)
41023fb0:	dc801e15 	stw	r18,120(sp)
41023fb4:	dc401d15 	stw	r17,116(sp)
41023fb8:	dfc02515 	stw	ra,148(sp)
41023fbc:	df002415 	stw	fp,144(sp)
41023fc0:	ddc02315 	stw	r23,140(sp)
41023fc4:	dd802215 	stw	r22,136(sp)
41023fc8:	dcc01f15 	stw	r19,124(sp)
41023fcc:	dc001c15 	stw	r16,112(sp)
41023fd0:	d9001615 	stw	r4,88(sp)
41023fd4:	3023883a 	mov	r17,r6
41023fd8:	2829883a 	mov	r20,r5
41023fdc:	d9c01715 	stw	r7,92(sp)
41023fe0:	dc802817 	ldw	r18,160(sp)
41023fe4:	302b883a 	mov	r21,r6
41023fe8:	40000a26 	beq	r8,zero,41024014 <_dtoa_r+0x74>
41023fec:	20801117 	ldw	r2,68(r4)
41023ff0:	400b883a 	mov	r5,r8
41023ff4:	40800115 	stw	r2,4(r8)
41023ff8:	20c01117 	ldw	r3,68(r4)
41023ffc:	00800044 	movi	r2,1
41024000:	10c4983a 	sll	r2,r2,r3
41024004:	40800215 	stw	r2,8(r8)
41024008:	10270940 	call	41027094 <_Bfree>
4102400c:	d8c01617 	ldw	r3,88(sp)
41024010:	18001015 	stw	zero,64(r3)
41024014:	8800a316 	blt	r17,zero,410242a4 <_dtoa_r+0x304>
41024018:	90000015 	stw	zero,0(r18)
4102401c:	a8dffc2c 	andhi	r3,r21,32752
41024020:	009ffc34 	movhi	r2,32752
41024024:	18809126 	beq	r3,r2,4102426c <_dtoa_r+0x2cc>
41024028:	000d883a 	mov	r6,zero
4102402c:	000f883a 	mov	r7,zero
41024030:	a009883a 	mov	r4,r20
41024034:	a80b883a 	mov	r5,r21
41024038:	dd001215 	stw	r20,72(sp)
4102403c:	dd401315 	stw	r21,76(sp)
41024040:	102a8540 	call	4102a854 <__nedf2>
41024044:	1000171e 	bne	r2,zero,410240a4 <_dtoa_r+0x104>
41024048:	d9802717 	ldw	r6,156(sp)
4102404c:	00800044 	movi	r2,1
41024050:	30800015 	stw	r2,0(r6)
41024054:	d8802917 	ldw	r2,164(sp)
41024058:	10029b26 	beq	r2,zero,41024ac8 <_dtoa_r+0xb28>
4102405c:	d9002917 	ldw	r4,164(sp)
41024060:	009040f4 	movhi	r2,16643
41024064:	10b7de44 	addi	r2,r2,-8327
41024068:	10ffffc4 	addi	r3,r2,-1
4102406c:	20800015 	stw	r2,0(r4)
41024070:	1805883a 	mov	r2,r3
41024074:	dfc02517 	ldw	ra,148(sp)
41024078:	df002417 	ldw	fp,144(sp)
4102407c:	ddc02317 	ldw	r23,140(sp)
41024080:	dd802217 	ldw	r22,136(sp)
41024084:	dd402117 	ldw	r21,132(sp)
41024088:	dd002017 	ldw	r20,128(sp)
4102408c:	dcc01f17 	ldw	r19,124(sp)
41024090:	dc801e17 	ldw	r18,120(sp)
41024094:	dc401d17 	ldw	r17,116(sp)
41024098:	dc001c17 	ldw	r16,112(sp)
4102409c:	dec02604 	addi	sp,sp,152
410240a0:	f800283a 	ret
410240a4:	d9001617 	ldw	r4,88(sp)
410240a8:	d9401217 	ldw	r5,72(sp)
410240ac:	d8800104 	addi	r2,sp,4
410240b0:	a80d883a 	mov	r6,r21
410240b4:	d9c00204 	addi	r7,sp,8
410240b8:	d8800015 	stw	r2,0(sp)
410240bc:	10276d00 	call	410276d0 <__d2b>
410240c0:	d8800715 	stw	r2,28(sp)
410240c4:	a804d53a 	srli	r2,r21,20
410240c8:	1101ffcc 	andi	r4,r2,2047
410240cc:	20008626 	beq	r4,zero,410242e8 <_dtoa_r+0x348>
410240d0:	d8c01217 	ldw	r3,72(sp)
410240d4:	00800434 	movhi	r2,16
410240d8:	10bfffc4 	addi	r2,r2,-1
410240dc:	ddc00117 	ldw	r23,4(sp)
410240e0:	a884703a 	and	r2,r21,r2
410240e4:	1811883a 	mov	r8,r3
410240e8:	124ffc34 	orhi	r9,r2,16368
410240ec:	25bf0044 	addi	r22,r4,-1023
410240f0:	d8000815 	stw	zero,32(sp)
410240f4:	0005883a 	mov	r2,zero
410240f8:	00cffe34 	movhi	r3,16376
410240fc:	480b883a 	mov	r5,r9
41024100:	4009883a 	mov	r4,r8
41024104:	180f883a 	mov	r7,r3
41024108:	100d883a 	mov	r6,r2
4102410c:	102a0cc0 	call	4102a0cc <__subdf3>
41024110:	0218dbf4 	movhi	r8,25455
41024114:	4210d844 	addi	r8,r8,17249
41024118:	024ff4f4 	movhi	r9,16339
4102411c:	4a61e9c4 	addi	r9,r9,-30809
41024120:	480f883a 	mov	r7,r9
41024124:	400d883a 	mov	r6,r8
41024128:	180b883a 	mov	r5,r3
4102412c:	1009883a 	mov	r4,r2
41024130:	102a1c00 	call	4102a1c0 <__muldf3>
41024134:	0222d874 	movhi	r8,35681
41024138:	42322cc4 	addi	r8,r8,-14157
4102413c:	024ff1f4 	movhi	r9,16327
41024140:	4a628a04 	addi	r9,r9,-30168
41024144:	480f883a 	mov	r7,r9
41024148:	400d883a 	mov	r6,r8
4102414c:	180b883a 	mov	r5,r3
41024150:	1009883a 	mov	r4,r2
41024154:	102a14c0 	call	4102a14c <__adddf3>
41024158:	b009883a 	mov	r4,r22
4102415c:	1021883a 	mov	r16,r2
41024160:	1823883a 	mov	r17,r3
41024164:	102aa740 	call	4102aa74 <__floatsidf>
41024168:	021427f4 	movhi	r8,20639
4102416c:	421e7ec4 	addi	r8,r8,31227
41024170:	024ff4f4 	movhi	r9,16339
41024174:	4a5104c4 	addi	r9,r9,17427
41024178:	480f883a 	mov	r7,r9
4102417c:	400d883a 	mov	r6,r8
41024180:	180b883a 	mov	r5,r3
41024184:	1009883a 	mov	r4,r2
41024188:	102a1c00 	call	4102a1c0 <__muldf3>
4102418c:	180f883a 	mov	r7,r3
41024190:	880b883a 	mov	r5,r17
41024194:	100d883a 	mov	r6,r2
41024198:	8009883a 	mov	r4,r16
4102419c:	102a14c0 	call	4102a14c <__adddf3>
410241a0:	1009883a 	mov	r4,r2
410241a4:	180b883a 	mov	r5,r3
410241a8:	1021883a 	mov	r16,r2
410241ac:	1823883a 	mov	r17,r3
410241b0:	102ab6c0 	call	4102ab6c <__fixdfsi>
410241b4:	000d883a 	mov	r6,zero
410241b8:	000f883a 	mov	r7,zero
410241bc:	8009883a 	mov	r4,r16
410241c0:	880b883a 	mov	r5,r17
410241c4:	d8800d15 	stw	r2,52(sp)
410241c8:	102a9ec0 	call	4102a9ec <__ltdf2>
410241cc:	10031716 	blt	r2,zero,41024e2c <_dtoa_r+0xe8c>
410241d0:	d8c00d17 	ldw	r3,52(sp)
410241d4:	00800584 	movi	r2,22
410241d8:	10c1482e 	bgeu	r2,r3,410246fc <_dtoa_r+0x75c>
410241dc:	01000044 	movi	r4,1
410241e0:	d9000c15 	stw	r4,48(sp)
410241e4:	bd85c83a 	sub	r2,r23,r22
410241e8:	11bfffc4 	addi	r6,r2,-1
410241ec:	30030b16 	blt	r6,zero,41024e1c <_dtoa_r+0xe7c>
410241f0:	d9800a15 	stw	r6,40(sp)
410241f4:	d8001115 	stw	zero,68(sp)
410241f8:	d8c00d17 	ldw	r3,52(sp)
410241fc:	1802ff16 	blt	r3,zero,41024dfc <_dtoa_r+0xe5c>
41024200:	d9000a17 	ldw	r4,40(sp)
41024204:	d8c00915 	stw	r3,36(sp)
41024208:	d8001015 	stw	zero,64(sp)
4102420c:	20c9883a 	add	r4,r4,r3
41024210:	d9000a15 	stw	r4,40(sp)
41024214:	d9001717 	ldw	r4,92(sp)
41024218:	00800244 	movi	r2,9
4102421c:	11004636 	bltu	r2,r4,41024338 <_dtoa_r+0x398>
41024220:	00800144 	movi	r2,5
41024224:	11020416 	blt	r2,r4,41024a38 <_dtoa_r+0xa98>
41024228:	04400044 	movi	r17,1
4102422c:	d8c01717 	ldw	r3,92(sp)
41024230:	00800144 	movi	r2,5
41024234:	10c1ed36 	bltu	r2,r3,410249ec <_dtoa_r+0xa4c>
41024238:	18c5883a 	add	r2,r3,r3
4102423c:	1085883a 	add	r2,r2,r2
41024240:	00d040b4 	movhi	r3,16642
41024244:	18d09504 	addi	r3,r3,16980
41024248:	10c5883a 	add	r2,r2,r3
4102424c:	11000017 	ldw	r4,0(r2)
41024250:	2000683a 	jmp	r4
41024254:	41024340 	call	44102434 <__alt_data_end+0x30c3034>
41024258:	41024340 	call	44102434 <__alt_data_end+0x30c3034>
4102425c:	41024d40 	call	441024d4 <__alt_data_end+0x30c30d4>
41024260:	41024d18 	cmpnei	r4,r8,2356
41024264:	41024d5c 	xori	r4,r8,2357
41024268:	41024d68 	cmpgeui	r4,r8,2357
4102426c:	d9002717 	ldw	r4,156(sp)
41024270:	0089c3c4 	movi	r2,9999
41024274:	20800015 	stw	r2,0(r4)
41024278:	a0001026 	beq	r20,zero,410242bc <_dtoa_r+0x31c>
4102427c:	00d040f4 	movhi	r3,16643
41024280:	18f7ea04 	addi	r3,r3,-8280
41024284:	d9802917 	ldw	r6,164(sp)
41024288:	303f7926 	beq	r6,zero,41024070 <_dtoa_r+0xd0>
4102428c:	188000c7 	ldb	r2,3(r3)
41024290:	190000c4 	addi	r4,r3,3
41024294:	1000101e 	bne	r2,zero,410242d8 <_dtoa_r+0x338>
41024298:	d8802917 	ldw	r2,164(sp)
4102429c:	11000015 	stw	r4,0(r2)
410242a0:	003f7306 	br	41024070 <_dtoa_r+0xd0>
410242a4:	00a00034 	movhi	r2,32768
410242a8:	10bfffc4 	addi	r2,r2,-1
410242ac:	00c00044 	movi	r3,1
410242b0:	88aa703a 	and	r21,r17,r2
410242b4:	90c00015 	stw	r3,0(r18)
410242b8:	003f5806 	br	4102401c <_dtoa_r+0x7c>
410242bc:	00800434 	movhi	r2,16
410242c0:	10bfffc4 	addi	r2,r2,-1
410242c4:	a884703a 	and	r2,r21,r2
410242c8:	103fec1e 	bne	r2,zero,4102427c <_dtoa_r+0x2dc>
410242cc:	00d040f4 	movhi	r3,16643
410242d0:	18f7e704 	addi	r3,r3,-8292
410242d4:	003feb06 	br	41024284 <_dtoa_r+0x2e4>
410242d8:	d8802917 	ldw	r2,164(sp)
410242dc:	19000204 	addi	r4,r3,8
410242e0:	11000015 	stw	r4,0(r2)
410242e4:	003f6206 	br	41024070 <_dtoa_r+0xd0>
410242e8:	ddc00117 	ldw	r23,4(sp)
410242ec:	d8800217 	ldw	r2,8(sp)
410242f0:	01000804 	movi	r4,32
410242f4:	b8c10c84 	addi	r3,r23,1074
410242f8:	18a3883a 	add	r17,r3,r2
410242fc:	2441b80e 	bge	r4,r17,410249e0 <_dtoa_r+0xa40>
41024300:	00c01004 	movi	r3,64
41024304:	1c47c83a 	sub	r3,r3,r17
41024308:	88bff804 	addi	r2,r17,-32
4102430c:	a8c6983a 	sll	r3,r21,r3
41024310:	a084d83a 	srl	r2,r20,r2
41024314:	1888b03a 	or	r4,r3,r2
41024318:	102ac440 	call	4102ac44 <__floatunsidf>
4102431c:	1011883a 	mov	r8,r2
41024320:	00bf8434 	movhi	r2,65040
41024324:	01000044 	movi	r4,1
41024328:	10d3883a 	add	r9,r2,r3
4102432c:	8dbef344 	addi	r22,r17,-1075
41024330:	d9000815 	stw	r4,32(sp)
41024334:	003f6f06 	br	410240f4 <_dtoa_r+0x154>
41024338:	d8001715 	stw	zero,92(sp)
4102433c:	04400044 	movi	r17,1
41024340:	00bfffc4 	movi	r2,-1
41024344:	00c00044 	movi	r3,1
41024348:	d8800e15 	stw	r2,56(sp)
4102434c:	d8002615 	stw	zero,152(sp)
41024350:	d8800f15 	stw	r2,60(sp)
41024354:	d8c00b15 	stw	r3,44(sp)
41024358:	1021883a 	mov	r16,r2
4102435c:	d8801617 	ldw	r2,88(sp)
41024360:	10001115 	stw	zero,68(r2)
41024364:	d8801617 	ldw	r2,88(sp)
41024368:	11401117 	ldw	r5,68(r2)
4102436c:	1009883a 	mov	r4,r2
41024370:	10276140 	call	41027614 <_Balloc>
41024374:	d8c01617 	ldw	r3,88(sp)
41024378:	d8800515 	stw	r2,20(sp)
4102437c:	18801015 	stw	r2,64(r3)
41024380:	00800384 	movi	r2,14
41024384:	14006836 	bltu	r2,r16,41024528 <_dtoa_r+0x588>
41024388:	8805003a 	cmpeq	r2,r17,zero
4102438c:	1000661e 	bne	r2,zero,41024528 <_dtoa_r+0x588>
41024390:	d9000d17 	ldw	r4,52(sp)
41024394:	0102300e 	bge	zero,r4,41024c58 <_dtoa_r+0xcb8>
41024398:	208003cc 	andi	r2,r4,15
4102439c:	100490fa 	slli	r2,r2,3
410243a0:	2025d13a 	srai	r18,r4,4
410243a4:	00d040f4 	movhi	r3,16643
410243a8:	18f7fc04 	addi	r3,r3,-8208
410243ac:	10c5883a 	add	r2,r2,r3
410243b0:	90c0040c 	andi	r3,r18,16
410243b4:	14000017 	ldw	r16,0(r2)
410243b8:	14400117 	ldw	r17,4(r2)
410243bc:	18036a1e 	bne	r3,zero,41025168 <_dtoa_r+0x11c8>
410243c0:	05800084 	movi	r22,2
410243c4:	90001026 	beq	r18,zero,41024408 <_dtoa_r+0x468>
410243c8:	04d040f4 	movhi	r19,16643
410243cc:	9cf82e04 	addi	r19,r19,-8008
410243d0:	9080004c 	andi	r2,r18,1
410243d4:	1005003a 	cmpeq	r2,r2,zero
410243d8:	1000081e 	bne	r2,zero,410243fc <_dtoa_r+0x45c>
410243dc:	99800017 	ldw	r6,0(r19)
410243e0:	99c00117 	ldw	r7,4(r19)
410243e4:	880b883a 	mov	r5,r17
410243e8:	8009883a 	mov	r4,r16
410243ec:	102a1c00 	call	4102a1c0 <__muldf3>
410243f0:	1021883a 	mov	r16,r2
410243f4:	b5800044 	addi	r22,r22,1
410243f8:	1823883a 	mov	r17,r3
410243fc:	9025d07a 	srai	r18,r18,1
41024400:	9cc00204 	addi	r19,r19,8
41024404:	903ff21e 	bne	r18,zero,410243d0 <_dtoa_r+0x430>
41024408:	a80b883a 	mov	r5,r21
4102440c:	a009883a 	mov	r4,r20
41024410:	880f883a 	mov	r7,r17
41024414:	800d883a 	mov	r6,r16
41024418:	102a5740 	call	4102a574 <__divdf3>
4102441c:	1029883a 	mov	r20,r2
41024420:	182b883a 	mov	r21,r3
41024424:	d8c00c17 	ldw	r3,48(sp)
41024428:	1805003a 	cmpeq	r2,r3,zero
4102442c:	1000081e 	bne	r2,zero,41024450 <_dtoa_r+0x4b0>
41024430:	0005883a 	mov	r2,zero
41024434:	00cffc34 	movhi	r3,16368
41024438:	180f883a 	mov	r7,r3
4102443c:	a009883a 	mov	r4,r20
41024440:	a80b883a 	mov	r5,r21
41024444:	100d883a 	mov	r6,r2
41024448:	102a9ec0 	call	4102a9ec <__ltdf2>
4102444c:	1003fe16 	blt	r2,zero,41025448 <_dtoa_r+0x14a8>
41024450:	b009883a 	mov	r4,r22
41024454:	102aa740 	call	4102aa74 <__floatsidf>
41024458:	180b883a 	mov	r5,r3
4102445c:	1009883a 	mov	r4,r2
41024460:	a00d883a 	mov	r6,r20
41024464:	a80f883a 	mov	r7,r21
41024468:	102a1c00 	call	4102a1c0 <__muldf3>
4102446c:	0011883a 	mov	r8,zero
41024470:	02500734 	movhi	r9,16412
41024474:	1009883a 	mov	r4,r2
41024478:	180b883a 	mov	r5,r3
4102447c:	480f883a 	mov	r7,r9
41024480:	400d883a 	mov	r6,r8
41024484:	102a14c0 	call	4102a14c <__adddf3>
41024488:	d9000f17 	ldw	r4,60(sp)
4102448c:	102d883a 	mov	r22,r2
41024490:	00bf3034 	movhi	r2,64704
41024494:	18b9883a 	add	fp,r3,r2
41024498:	e02f883a 	mov	r23,fp
4102449c:	20028f1e 	bne	r4,zero,41024edc <_dtoa_r+0xf3c>
410244a0:	0005883a 	mov	r2,zero
410244a4:	00d00534 	movhi	r3,16404
410244a8:	a009883a 	mov	r4,r20
410244ac:	a80b883a 	mov	r5,r21
410244b0:	180f883a 	mov	r7,r3
410244b4:	100d883a 	mov	r6,r2
410244b8:	102a0cc0 	call	4102a0cc <__subdf3>
410244bc:	1009883a 	mov	r4,r2
410244c0:	e00f883a 	mov	r7,fp
410244c4:	180b883a 	mov	r5,r3
410244c8:	b00d883a 	mov	r6,r22
410244cc:	1025883a 	mov	r18,r2
410244d0:	1827883a 	mov	r19,r3
410244d4:	102a8dc0 	call	4102a8dc <__gtdf2>
410244d8:	00834f16 	blt	zero,r2,41025218 <_dtoa_r+0x1278>
410244dc:	e0e0003c 	xorhi	r3,fp,32768
410244e0:	9009883a 	mov	r4,r18
410244e4:	980b883a 	mov	r5,r19
410244e8:	180f883a 	mov	r7,r3
410244ec:	b00d883a 	mov	r6,r22
410244f0:	102a9ec0 	call	4102a9ec <__ltdf2>
410244f4:	1000080e 	bge	r2,zero,41024518 <_dtoa_r+0x578>
410244f8:	0027883a 	mov	r19,zero
410244fc:	0025883a 	mov	r18,zero
41024500:	d8802617 	ldw	r2,152(sp)
41024504:	df000517 	ldw	fp,20(sp)
41024508:	d8000615 	stw	zero,24(sp)
4102450c:	0084303a 	nor	r2,zero,r2
41024510:	d8800d15 	stw	r2,52(sp)
41024514:	00019b06 	br	41024b84 <_dtoa_r+0xbe4>
41024518:	d9801217 	ldw	r6,72(sp)
4102451c:	d8801317 	ldw	r2,76(sp)
41024520:	3029883a 	mov	r20,r6
41024524:	102b883a 	mov	r21,r2
41024528:	d8c00217 	ldw	r3,8(sp)
4102452c:	18008516 	blt	r3,zero,41024744 <_dtoa_r+0x7a4>
41024530:	d9000d17 	ldw	r4,52(sp)
41024534:	00800384 	movi	r2,14
41024538:	11008216 	blt	r2,r4,41024744 <_dtoa_r+0x7a4>
4102453c:	200490fa 	slli	r2,r4,3
41024540:	d9802617 	ldw	r6,152(sp)
41024544:	00d040f4 	movhi	r3,16643
41024548:	18f7fc04 	addi	r3,r3,-8208
4102454c:	10c5883a 	add	r2,r2,r3
41024550:	14800017 	ldw	r18,0(r2)
41024554:	14c00117 	ldw	r19,4(r2)
41024558:	30031e16 	blt	r6,zero,410251d4 <_dtoa_r+0x1234>
4102455c:	d9000517 	ldw	r4,20(sp)
41024560:	d8c00f17 	ldw	r3,60(sp)
41024564:	a823883a 	mov	r17,r21
41024568:	a021883a 	mov	r16,r20
4102456c:	192b883a 	add	r21,r3,r4
41024570:	2039883a 	mov	fp,r4
41024574:	00000f06 	br	410245b4 <_dtoa_r+0x614>
41024578:	0005883a 	mov	r2,zero
4102457c:	00d00934 	movhi	r3,16420
41024580:	5009883a 	mov	r4,r10
41024584:	580b883a 	mov	r5,r11
41024588:	180f883a 	mov	r7,r3
4102458c:	100d883a 	mov	r6,r2
41024590:	102a1c00 	call	4102a1c0 <__muldf3>
41024594:	180b883a 	mov	r5,r3
41024598:	000d883a 	mov	r6,zero
4102459c:	000f883a 	mov	r7,zero
410245a0:	1009883a 	mov	r4,r2
410245a4:	1021883a 	mov	r16,r2
410245a8:	1823883a 	mov	r17,r3
410245ac:	102a8540 	call	4102a854 <__nedf2>
410245b0:	10004526 	beq	r2,zero,410246c8 <_dtoa_r+0x728>
410245b4:	900d883a 	mov	r6,r18
410245b8:	980f883a 	mov	r7,r19
410245bc:	8009883a 	mov	r4,r16
410245c0:	880b883a 	mov	r5,r17
410245c4:	102a5740 	call	4102a574 <__divdf3>
410245c8:	180b883a 	mov	r5,r3
410245cc:	1009883a 	mov	r4,r2
410245d0:	102ab6c0 	call	4102ab6c <__fixdfsi>
410245d4:	1009883a 	mov	r4,r2
410245d8:	1029883a 	mov	r20,r2
410245dc:	102aa740 	call	4102aa74 <__floatsidf>
410245e0:	180f883a 	mov	r7,r3
410245e4:	9009883a 	mov	r4,r18
410245e8:	980b883a 	mov	r5,r19
410245ec:	100d883a 	mov	r6,r2
410245f0:	102a1c00 	call	4102a1c0 <__muldf3>
410245f4:	180f883a 	mov	r7,r3
410245f8:	880b883a 	mov	r5,r17
410245fc:	8009883a 	mov	r4,r16
41024600:	100d883a 	mov	r6,r2
41024604:	102a0cc0 	call	4102a0cc <__subdf3>
41024608:	1015883a 	mov	r10,r2
4102460c:	a0800c04 	addi	r2,r20,48
41024610:	e0800005 	stb	r2,0(fp)
41024614:	e7000044 	addi	fp,fp,1
41024618:	1817883a 	mov	r11,r3
4102461c:	e57fd61e 	bne	fp,r21,41024578 <_dtoa_r+0x5d8>
41024620:	500d883a 	mov	r6,r10
41024624:	180f883a 	mov	r7,r3
41024628:	5009883a 	mov	r4,r10
4102462c:	180b883a 	mov	r5,r3
41024630:	102a14c0 	call	4102a14c <__adddf3>
41024634:	100d883a 	mov	r6,r2
41024638:	9009883a 	mov	r4,r18
4102463c:	980b883a 	mov	r5,r19
41024640:	180f883a 	mov	r7,r3
41024644:	1021883a 	mov	r16,r2
41024648:	1823883a 	mov	r17,r3
4102464c:	102a9ec0 	call	4102a9ec <__ltdf2>
41024650:	10000816 	blt	r2,zero,41024674 <_dtoa_r+0x6d4>
41024654:	980b883a 	mov	r5,r19
41024658:	800d883a 	mov	r6,r16
4102465c:	880f883a 	mov	r7,r17
41024660:	9009883a 	mov	r4,r18
41024664:	102a7cc0 	call	4102a7cc <__eqdf2>
41024668:	1000171e 	bne	r2,zero,410246c8 <_dtoa_r+0x728>
4102466c:	a080004c 	andi	r2,r20,1
41024670:	10001526 	beq	r2,zero,410246c8 <_dtoa_r+0x728>
41024674:	d8800d17 	ldw	r2,52(sp)
41024678:	d8800415 	stw	r2,16(sp)
4102467c:	e009883a 	mov	r4,fp
41024680:	213fffc4 	addi	r4,r4,-1
41024684:	20c00007 	ldb	r3,0(r4)
41024688:	00800e44 	movi	r2,57
4102468c:	1880081e 	bne	r3,r2,410246b0 <_dtoa_r+0x710>
41024690:	d8800517 	ldw	r2,20(sp)
41024694:	113ffa1e 	bne	r2,r4,41024680 <_dtoa_r+0x6e0>
41024698:	d8c00417 	ldw	r3,16(sp)
4102469c:	d9800517 	ldw	r6,20(sp)
410246a0:	00800c04 	movi	r2,48
410246a4:	18c00044 	addi	r3,r3,1
410246a8:	d8c00415 	stw	r3,16(sp)
410246ac:	30800005 	stb	r2,0(r6)
410246b0:	20800003 	ldbu	r2,0(r4)
410246b4:	d8c00417 	ldw	r3,16(sp)
410246b8:	27000044 	addi	fp,r4,1
410246bc:	10800044 	addi	r2,r2,1
410246c0:	d8c00d15 	stw	r3,52(sp)
410246c4:	20800005 	stb	r2,0(r4)
410246c8:	d9001617 	ldw	r4,88(sp)
410246cc:	d9400717 	ldw	r5,28(sp)
410246d0:	10270940 	call	41027094 <_Bfree>
410246d4:	e0000005 	stb	zero,0(fp)
410246d8:	d9800d17 	ldw	r6,52(sp)
410246dc:	d8c02717 	ldw	r3,156(sp)
410246e0:	d9002917 	ldw	r4,164(sp)
410246e4:	30800044 	addi	r2,r6,1
410246e8:	18800015 	stw	r2,0(r3)
410246ec:	20029c26 	beq	r4,zero,41025160 <_dtoa_r+0x11c0>
410246f0:	d8c00517 	ldw	r3,20(sp)
410246f4:	27000015 	stw	fp,0(r4)
410246f8:	003e5d06 	br	41024070 <_dtoa_r+0xd0>
410246fc:	d9800d17 	ldw	r6,52(sp)
41024700:	00d040f4 	movhi	r3,16643
41024704:	18f7fc04 	addi	r3,r3,-8208
41024708:	d9001217 	ldw	r4,72(sp)
4102470c:	300490fa 	slli	r2,r6,3
41024710:	d9401317 	ldw	r5,76(sp)
41024714:	10c5883a 	add	r2,r2,r3
41024718:	12000017 	ldw	r8,0(r2)
4102471c:	12400117 	ldw	r9,4(r2)
41024720:	400d883a 	mov	r6,r8
41024724:	480f883a 	mov	r7,r9
41024728:	102a9ec0 	call	4102a9ec <__ltdf2>
4102472c:	1000030e 	bge	r2,zero,4102473c <_dtoa_r+0x79c>
41024730:	d8800d17 	ldw	r2,52(sp)
41024734:	10bfffc4 	addi	r2,r2,-1
41024738:	d8800d15 	stw	r2,52(sp)
4102473c:	d8000c15 	stw	zero,48(sp)
41024740:	003ea806 	br	410241e4 <_dtoa_r+0x244>
41024744:	d9000b17 	ldw	r4,44(sp)
41024748:	202cc03a 	cmpne	r22,r4,zero
4102474c:	b000c71e 	bne	r22,zero,41024a6c <_dtoa_r+0xacc>
41024750:	dc001117 	ldw	r16,68(sp)
41024754:	dc801017 	ldw	r18,64(sp)
41024758:	0027883a 	mov	r19,zero
4102475c:	04000b0e 	bge	zero,r16,4102478c <_dtoa_r+0x7ec>
41024760:	d8c00a17 	ldw	r3,40(sp)
41024764:	00c0090e 	bge	zero,r3,4102478c <_dtoa_r+0x7ec>
41024768:	8005883a 	mov	r2,r16
4102476c:	1c011316 	blt	r3,r16,41024bbc <_dtoa_r+0xc1c>
41024770:	d9000a17 	ldw	r4,40(sp)
41024774:	d9801117 	ldw	r6,68(sp)
41024778:	80a1c83a 	sub	r16,r16,r2
4102477c:	2089c83a 	sub	r4,r4,r2
41024780:	308dc83a 	sub	r6,r6,r2
41024784:	d9000a15 	stw	r4,40(sp)
41024788:	d9801115 	stw	r6,68(sp)
4102478c:	d8801017 	ldw	r2,64(sp)
41024790:	0080150e 	bge	zero,r2,410247e8 <_dtoa_r+0x848>
41024794:	d8c00b17 	ldw	r3,44(sp)
41024798:	1805003a 	cmpeq	r2,r3,zero
4102479c:	1001c91e 	bne	r2,zero,41024ec4 <_dtoa_r+0xf24>
410247a0:	04800e0e 	bge	zero,r18,410247dc <_dtoa_r+0x83c>
410247a4:	d9001617 	ldw	r4,88(sp)
410247a8:	980b883a 	mov	r5,r19
410247ac:	900d883a 	mov	r6,r18
410247b0:	1027e480 	call	41027e48 <__pow5mult>
410247b4:	d9001617 	ldw	r4,88(sp)
410247b8:	d9800717 	ldw	r6,28(sp)
410247bc:	100b883a 	mov	r5,r2
410247c0:	1027883a 	mov	r19,r2
410247c4:	1027b240 	call	41027b24 <__multiply>
410247c8:	d9001617 	ldw	r4,88(sp)
410247cc:	d9400717 	ldw	r5,28(sp)
410247d0:	1023883a 	mov	r17,r2
410247d4:	10270940 	call	41027094 <_Bfree>
410247d8:	dc400715 	stw	r17,28(sp)
410247dc:	d9001017 	ldw	r4,64(sp)
410247e0:	248dc83a 	sub	r6,r4,r18
410247e4:	30010e1e 	bne	r6,zero,41024c20 <_dtoa_r+0xc80>
410247e8:	d9001617 	ldw	r4,88(sp)
410247ec:	04400044 	movi	r17,1
410247f0:	880b883a 	mov	r5,r17
410247f4:	1027d0c0 	call	41027d0c <__i2b>
410247f8:	d9800917 	ldw	r6,36(sp)
410247fc:	1025883a 	mov	r18,r2
41024800:	0180040e 	bge	zero,r6,41024814 <_dtoa_r+0x874>
41024804:	d9001617 	ldw	r4,88(sp)
41024808:	100b883a 	mov	r5,r2
4102480c:	1027e480 	call	41027e48 <__pow5mult>
41024810:	1025883a 	mov	r18,r2
41024814:	d8801717 	ldw	r2,92(sp)
41024818:	8880f30e 	bge	r17,r2,41024be8 <_dtoa_r+0xc48>
4102481c:	0023883a 	mov	r17,zero
41024820:	d9800917 	ldw	r6,36(sp)
41024824:	30019e1e 	bne	r6,zero,41024ea0 <_dtoa_r+0xf00>
41024828:	00c00044 	movi	r3,1
4102482c:	d9000a17 	ldw	r4,40(sp)
41024830:	20c5883a 	add	r2,r4,r3
41024834:	10c007cc 	andi	r3,r2,31
41024838:	1800841e 	bne	r3,zero,41024a4c <_dtoa_r+0xaac>
4102483c:	00800704 	movi	r2,28
41024840:	d9000a17 	ldw	r4,40(sp)
41024844:	d9801117 	ldw	r6,68(sp)
41024848:	80a1883a 	add	r16,r16,r2
4102484c:	2089883a 	add	r4,r4,r2
41024850:	308d883a 	add	r6,r6,r2
41024854:	d9000a15 	stw	r4,40(sp)
41024858:	d9801115 	stw	r6,68(sp)
4102485c:	d8801117 	ldw	r2,68(sp)
41024860:	0080050e 	bge	zero,r2,41024878 <_dtoa_r+0x8d8>
41024864:	d9400717 	ldw	r5,28(sp)
41024868:	d9001617 	ldw	r4,88(sp)
4102486c:	100d883a 	mov	r6,r2
41024870:	10279d80 	call	410279d8 <__lshift>
41024874:	d8800715 	stw	r2,28(sp)
41024878:	d8c00a17 	ldw	r3,40(sp)
4102487c:	00c0050e 	bge	zero,r3,41024894 <_dtoa_r+0x8f4>
41024880:	d9001617 	ldw	r4,88(sp)
41024884:	900b883a 	mov	r5,r18
41024888:	180d883a 	mov	r6,r3
4102488c:	10279d80 	call	410279d8 <__lshift>
41024890:	1025883a 	mov	r18,r2
41024894:	d9000c17 	ldw	r4,48(sp)
41024898:	2005003a 	cmpeq	r2,r4,zero
4102489c:	10016f26 	beq	r2,zero,41024e5c <_dtoa_r+0xebc>
410248a0:	d9000f17 	ldw	r4,60(sp)
410248a4:	0102170e 	bge	zero,r4,41025104 <_dtoa_r+0x1164>
410248a8:	d9800b17 	ldw	r6,44(sp)
410248ac:	3005003a 	cmpeq	r2,r6,zero
410248b0:	1000881e 	bne	r2,zero,41024ad4 <_dtoa_r+0xb34>
410248b4:	0400050e 	bge	zero,r16,410248cc <_dtoa_r+0x92c>
410248b8:	d9001617 	ldw	r4,88(sp)
410248bc:	980b883a 	mov	r5,r19
410248c0:	800d883a 	mov	r6,r16
410248c4:	10279d80 	call	410279d8 <__lshift>
410248c8:	1027883a 	mov	r19,r2
410248cc:	8804c03a 	cmpne	r2,r17,zero
410248d0:	1002541e 	bne	r2,zero,41025224 <_dtoa_r+0x1284>
410248d4:	980b883a 	mov	r5,r19
410248d8:	dd800517 	ldw	r22,20(sp)
410248dc:	dcc00615 	stw	r19,24(sp)
410248e0:	a700004c 	andi	fp,r20,1
410248e4:	2827883a 	mov	r19,r5
410248e8:	d9000717 	ldw	r4,28(sp)
410248ec:	900b883a 	mov	r5,r18
410248f0:	1023d880 	call	41023d88 <quorem>
410248f4:	d9000717 	ldw	r4,28(sp)
410248f8:	d9400617 	ldw	r5,24(sp)
410248fc:	1023883a 	mov	r17,r2
41024900:	8dc00c04 	addi	r23,r17,48
41024904:	10271f00 	call	410271f0 <__mcmp>
41024908:	d9001617 	ldw	r4,88(sp)
4102490c:	900b883a 	mov	r5,r18
41024910:	980d883a 	mov	r6,r19
41024914:	1029883a 	mov	r20,r2
41024918:	102784c0 	call	4102784c <__mdiff>
4102491c:	102b883a 	mov	r21,r2
41024920:	10800317 	ldw	r2,12(r2)
41024924:	1001281e 	bne	r2,zero,41024dc8 <_dtoa_r+0xe28>
41024928:	d9000717 	ldw	r4,28(sp)
4102492c:	a80b883a 	mov	r5,r21
41024930:	10271f00 	call	410271f0 <__mcmp>
41024934:	d9001617 	ldw	r4,88(sp)
41024938:	1021883a 	mov	r16,r2
4102493c:	a80b883a 	mov	r5,r21
41024940:	10270940 	call	41027094 <_Bfree>
41024944:	8000041e 	bne	r16,zero,41024958 <_dtoa_r+0x9b8>
41024948:	d8801717 	ldw	r2,92(sp)
4102494c:	1000021e 	bne	r2,zero,41024958 <_dtoa_r+0x9b8>
41024950:	e004c03a 	cmpne	r2,fp,zero
41024954:	10011726 	beq	r2,zero,41024db4 <_dtoa_r+0xe14>
41024958:	a0010616 	blt	r20,zero,41024d74 <_dtoa_r+0xdd4>
4102495c:	a000041e 	bne	r20,zero,41024970 <_dtoa_r+0x9d0>
41024960:	d8c01717 	ldw	r3,92(sp)
41024964:	1800021e 	bne	r3,zero,41024970 <_dtoa_r+0x9d0>
41024968:	e004c03a 	cmpne	r2,fp,zero
4102496c:	10010126 	beq	r2,zero,41024d74 <_dtoa_r+0xdd4>
41024970:	04023d16 	blt	zero,r16,41025268 <_dtoa_r+0x12c8>
41024974:	b5c00005 	stb	r23,0(r22)
41024978:	d9800517 	ldw	r6,20(sp)
4102497c:	d9000f17 	ldw	r4,60(sp)
41024980:	b5800044 	addi	r22,r22,1
41024984:	3105883a 	add	r2,r6,r4
41024988:	b0806526 	beq	r22,r2,41024b20 <_dtoa_r+0xb80>
4102498c:	d9400717 	ldw	r5,28(sp)
41024990:	d9001617 	ldw	r4,88(sp)
41024994:	01800284 	movi	r6,10
41024998:	000f883a 	mov	r7,zero
4102499c:	1027d480 	call	41027d48 <__multadd>
410249a0:	d8800715 	stw	r2,28(sp)
410249a4:	d8800617 	ldw	r2,24(sp)
410249a8:	14c10c26 	beq	r2,r19,41024ddc <_dtoa_r+0xe3c>
410249ac:	d9400617 	ldw	r5,24(sp)
410249b0:	d9001617 	ldw	r4,88(sp)
410249b4:	01800284 	movi	r6,10
410249b8:	000f883a 	mov	r7,zero
410249bc:	1027d480 	call	41027d48 <__multadd>
410249c0:	d9001617 	ldw	r4,88(sp)
410249c4:	980b883a 	mov	r5,r19
410249c8:	01800284 	movi	r6,10
410249cc:	000f883a 	mov	r7,zero
410249d0:	d8800615 	stw	r2,24(sp)
410249d4:	1027d480 	call	41027d48 <__multadd>
410249d8:	1027883a 	mov	r19,r2
410249dc:	003fc206 	br	410248e8 <_dtoa_r+0x948>
410249e0:	2445c83a 	sub	r2,r4,r17
410249e4:	a088983a 	sll	r4,r20,r2
410249e8:	003e4b06 	br	41024318 <_dtoa_r+0x378>
410249ec:	01bfffc4 	movi	r6,-1
410249f0:	00800044 	movi	r2,1
410249f4:	d9800e15 	stw	r6,56(sp)
410249f8:	d9800f15 	stw	r6,60(sp)
410249fc:	d8800b15 	stw	r2,44(sp)
41024a00:	d8c01617 	ldw	r3,88(sp)
41024a04:	008005c4 	movi	r2,23
41024a08:	18001115 	stw	zero,68(r3)
41024a0c:	1580082e 	bgeu	r2,r22,41024a30 <_dtoa_r+0xa90>
41024a10:	00c00104 	movi	r3,4
41024a14:	0009883a 	mov	r4,zero
41024a18:	18c7883a 	add	r3,r3,r3
41024a1c:	18800504 	addi	r2,r3,20
41024a20:	21000044 	addi	r4,r4,1
41024a24:	b0bffc2e 	bgeu	r22,r2,41024a18 <_dtoa_r+0xa78>
41024a28:	d9801617 	ldw	r6,88(sp)
41024a2c:	31001115 	stw	r4,68(r6)
41024a30:	dc000f17 	ldw	r16,60(sp)
41024a34:	003e4b06 	br	41024364 <_dtoa_r+0x3c4>
41024a38:	d9801717 	ldw	r6,92(sp)
41024a3c:	0023883a 	mov	r17,zero
41024a40:	31bfff04 	addi	r6,r6,-4
41024a44:	d9801715 	stw	r6,92(sp)
41024a48:	003df806 	br	4102422c <_dtoa_r+0x28c>
41024a4c:	00800804 	movi	r2,32
41024a50:	10c9c83a 	sub	r4,r2,r3
41024a54:	00c00104 	movi	r3,4
41024a58:	19005a16 	blt	r3,r4,41024bc4 <_dtoa_r+0xc24>
41024a5c:	008000c4 	movi	r2,3
41024a60:	113f7e16 	blt	r2,r4,4102485c <_dtoa_r+0x8bc>
41024a64:	20800704 	addi	r2,r4,28
41024a68:	003f7506 	br	41024840 <_dtoa_r+0x8a0>
41024a6c:	d9801717 	ldw	r6,92(sp)
41024a70:	00800044 	movi	r2,1
41024a74:	1180a10e 	bge	r2,r6,41024cfc <_dtoa_r+0xd5c>
41024a78:	d9800f17 	ldw	r6,60(sp)
41024a7c:	d8c01017 	ldw	r3,64(sp)
41024a80:	30bfffc4 	addi	r2,r6,-1
41024a84:	1881c616 	blt	r3,r2,410251a0 <_dtoa_r+0x1200>
41024a88:	18a5c83a 	sub	r18,r3,r2
41024a8c:	d8800f17 	ldw	r2,60(sp)
41024a90:	10026216 	blt	r2,zero,4102541c <_dtoa_r+0x147c>
41024a94:	dc001117 	ldw	r16,68(sp)
41024a98:	1007883a 	mov	r3,r2
41024a9c:	d9800a17 	ldw	r6,40(sp)
41024aa0:	d8801117 	ldw	r2,68(sp)
41024aa4:	d9001617 	ldw	r4,88(sp)
41024aa8:	30cd883a 	add	r6,r6,r3
41024aac:	10c5883a 	add	r2,r2,r3
41024ab0:	01400044 	movi	r5,1
41024ab4:	d9800a15 	stw	r6,40(sp)
41024ab8:	d8801115 	stw	r2,68(sp)
41024abc:	1027d0c0 	call	41027d0c <__i2b>
41024ac0:	1027883a 	mov	r19,r2
41024ac4:	003f2506 	br	4102475c <_dtoa_r+0x7bc>
41024ac8:	00d040f4 	movhi	r3,16643
41024acc:	18f7de04 	addi	r3,r3,-8328
41024ad0:	003d6706 	br	41024070 <_dtoa_r+0xd0>
41024ad4:	dd800517 	ldw	r22,20(sp)
41024ad8:	04000044 	movi	r16,1
41024adc:	00000706 	br	41024afc <_dtoa_r+0xb5c>
41024ae0:	d9400717 	ldw	r5,28(sp)
41024ae4:	d9001617 	ldw	r4,88(sp)
41024ae8:	01800284 	movi	r6,10
41024aec:	000f883a 	mov	r7,zero
41024af0:	1027d480 	call	41027d48 <__multadd>
41024af4:	d8800715 	stw	r2,28(sp)
41024af8:	84000044 	addi	r16,r16,1
41024afc:	d9000717 	ldw	r4,28(sp)
41024b00:	900b883a 	mov	r5,r18
41024b04:	1023d880 	call	41023d88 <quorem>
41024b08:	15c00c04 	addi	r23,r2,48
41024b0c:	b5c00005 	stb	r23,0(r22)
41024b10:	d8c00f17 	ldw	r3,60(sp)
41024b14:	b5800044 	addi	r22,r22,1
41024b18:	80fff116 	blt	r16,r3,41024ae0 <_dtoa_r+0xb40>
41024b1c:	d8000615 	stw	zero,24(sp)
41024b20:	d9400717 	ldw	r5,28(sp)
41024b24:	d9001617 	ldw	r4,88(sp)
41024b28:	01800044 	movi	r6,1
41024b2c:	10279d80 	call	410279d8 <__lshift>
41024b30:	1009883a 	mov	r4,r2
41024b34:	900b883a 	mov	r5,r18
41024b38:	d8800715 	stw	r2,28(sp)
41024b3c:	10271f00 	call	410271f0 <__mcmp>
41024b40:	00803c0e 	bge	zero,r2,41024c34 <_dtoa_r+0xc94>
41024b44:	b009883a 	mov	r4,r22
41024b48:	213fffc4 	addi	r4,r4,-1
41024b4c:	21400003 	ldbu	r5,0(r4)
41024b50:	00800e44 	movi	r2,57
41024b54:	28c03fcc 	andi	r3,r5,255
41024b58:	18c0201c 	xori	r3,r3,128
41024b5c:	18ffe004 	addi	r3,r3,-128
41024b60:	1881981e 	bne	r3,r2,410251c4 <_dtoa_r+0x1224>
41024b64:	d9800517 	ldw	r6,20(sp)
41024b68:	21bff71e 	bne	r4,r6,41024b48 <_dtoa_r+0xba8>
41024b6c:	d8800d17 	ldw	r2,52(sp)
41024b70:	37000044 	addi	fp,r6,1
41024b74:	10800044 	addi	r2,r2,1
41024b78:	d8800d15 	stw	r2,52(sp)
41024b7c:	00800c44 	movi	r2,49
41024b80:	30800005 	stb	r2,0(r6)
41024b84:	d9001617 	ldw	r4,88(sp)
41024b88:	900b883a 	mov	r5,r18
41024b8c:	10270940 	call	41027094 <_Bfree>
41024b90:	983ecd26 	beq	r19,zero,410246c8 <_dtoa_r+0x728>
41024b94:	d8c00617 	ldw	r3,24(sp)
41024b98:	18000426 	beq	r3,zero,41024bac <_dtoa_r+0xc0c>
41024b9c:	1cc00326 	beq	r3,r19,41024bac <_dtoa_r+0xc0c>
41024ba0:	d9001617 	ldw	r4,88(sp)
41024ba4:	180b883a 	mov	r5,r3
41024ba8:	10270940 	call	41027094 <_Bfree>
41024bac:	d9001617 	ldw	r4,88(sp)
41024bb0:	980b883a 	mov	r5,r19
41024bb4:	10270940 	call	41027094 <_Bfree>
41024bb8:	003ec306 	br	410246c8 <_dtoa_r+0x728>
41024bbc:	1805883a 	mov	r2,r3
41024bc0:	003eeb06 	br	41024770 <_dtoa_r+0x7d0>
41024bc4:	d9800a17 	ldw	r6,40(sp)
41024bc8:	d8c01117 	ldw	r3,68(sp)
41024bcc:	20bfff04 	addi	r2,r4,-4
41024bd0:	308d883a 	add	r6,r6,r2
41024bd4:	1887883a 	add	r3,r3,r2
41024bd8:	80a1883a 	add	r16,r16,r2
41024bdc:	d9800a15 	stw	r6,40(sp)
41024be0:	d8c01115 	stw	r3,68(sp)
41024be4:	003f1d06 	br	4102485c <_dtoa_r+0x8bc>
41024be8:	a03f0c1e 	bne	r20,zero,4102481c <_dtoa_r+0x87c>
41024bec:	00800434 	movhi	r2,16
41024bf0:	10bfffc4 	addi	r2,r2,-1
41024bf4:	a884703a 	and	r2,r21,r2
41024bf8:	103f081e 	bne	r2,zero,4102481c <_dtoa_r+0x87c>
41024bfc:	a89ffc2c 	andhi	r2,r21,32752
41024c00:	103f0626 	beq	r2,zero,4102481c <_dtoa_r+0x87c>
41024c04:	d8c01117 	ldw	r3,68(sp)
41024c08:	d9000a17 	ldw	r4,40(sp)
41024c0c:	18c00044 	addi	r3,r3,1
41024c10:	21000044 	addi	r4,r4,1
41024c14:	d8c01115 	stw	r3,68(sp)
41024c18:	d9000a15 	stw	r4,40(sp)
41024c1c:	003f0006 	br	41024820 <_dtoa_r+0x880>
41024c20:	d9400717 	ldw	r5,28(sp)
41024c24:	d9001617 	ldw	r4,88(sp)
41024c28:	1027e480 	call	41027e48 <__pow5mult>
41024c2c:	d8800715 	stw	r2,28(sp)
41024c30:	003eed06 	br	410247e8 <_dtoa_r+0x848>
41024c34:	1000021e 	bne	r2,zero,41024c40 <_dtoa_r+0xca0>
41024c38:	b880004c 	andi	r2,r23,1
41024c3c:	103fc11e 	bne	r2,zero,41024b44 <_dtoa_r+0xba4>
41024c40:	b5bfffc4 	addi	r22,r22,-1
41024c44:	b0c00007 	ldb	r3,0(r22)
41024c48:	00800c04 	movi	r2,48
41024c4c:	18bffc26 	beq	r3,r2,41024c40 <_dtoa_r+0xca0>
41024c50:	b7000044 	addi	fp,r22,1
41024c54:	003fcb06 	br	41024b84 <_dtoa_r+0xbe4>
41024c58:	d9800d17 	ldw	r6,52(sp)
41024c5c:	018fc83a 	sub	r7,zero,r6
41024c60:	3801f726 	beq	r7,zero,41025440 <_dtoa_r+0x14a0>
41024c64:	398003cc 	andi	r6,r7,15
41024c68:	300c90fa 	slli	r6,r6,3
41024c6c:	015040f4 	movhi	r5,16643
41024c70:	2977fc04 	addi	r5,r5,-8208
41024c74:	d9001217 	ldw	r4,72(sp)
41024c78:	314d883a 	add	r6,r6,r5
41024c7c:	30c00117 	ldw	r3,4(r6)
41024c80:	30800017 	ldw	r2,0(r6)
41024c84:	d9401317 	ldw	r5,76(sp)
41024c88:	3821d13a 	srai	r16,r7,4
41024c8c:	100d883a 	mov	r6,r2
41024c90:	180f883a 	mov	r7,r3
41024c94:	102a1c00 	call	4102a1c0 <__muldf3>
41024c98:	1011883a 	mov	r8,r2
41024c9c:	1813883a 	mov	r9,r3
41024ca0:	1029883a 	mov	r20,r2
41024ca4:	182b883a 	mov	r21,r3
41024ca8:	8001e526 	beq	r16,zero,41025440 <_dtoa_r+0x14a0>
41024cac:	05800084 	movi	r22,2
41024cb0:	045040f4 	movhi	r17,16643
41024cb4:	8c782e04 	addi	r17,r17,-8008
41024cb8:	8080004c 	andi	r2,r16,1
41024cbc:	1005003a 	cmpeq	r2,r2,zero
41024cc0:	1000081e 	bne	r2,zero,41024ce4 <_dtoa_r+0xd44>
41024cc4:	89800017 	ldw	r6,0(r17)
41024cc8:	89c00117 	ldw	r7,4(r17)
41024ccc:	480b883a 	mov	r5,r9
41024cd0:	4009883a 	mov	r4,r8
41024cd4:	102a1c00 	call	4102a1c0 <__muldf3>
41024cd8:	1011883a 	mov	r8,r2
41024cdc:	b5800044 	addi	r22,r22,1
41024ce0:	1813883a 	mov	r9,r3
41024ce4:	8021d07a 	srai	r16,r16,1
41024ce8:	8c400204 	addi	r17,r17,8
41024cec:	803ff21e 	bne	r16,zero,41024cb8 <_dtoa_r+0xd18>
41024cf0:	4029883a 	mov	r20,r8
41024cf4:	482b883a 	mov	r21,r9
41024cf8:	003dca06 	br	41024424 <_dtoa_r+0x484>
41024cfc:	d9000817 	ldw	r4,32(sp)
41024d00:	2005003a 	cmpeq	r2,r4,zero
41024d04:	1001f61e 	bne	r2,zero,410254e0 <_dtoa_r+0x1540>
41024d08:	dc001117 	ldw	r16,68(sp)
41024d0c:	dc801017 	ldw	r18,64(sp)
41024d10:	18c10cc4 	addi	r3,r3,1075
41024d14:	003f6106 	br	41024a9c <_dtoa_r+0xafc>
41024d18:	d8000b15 	stw	zero,44(sp)
41024d1c:	d9802617 	ldw	r6,152(sp)
41024d20:	d8c00d17 	ldw	r3,52(sp)
41024d24:	30800044 	addi	r2,r6,1
41024d28:	18ad883a 	add	r22,r3,r2
41024d2c:	b13fffc4 	addi	r4,r22,-1
41024d30:	d9000e15 	stw	r4,56(sp)
41024d34:	0581f60e 	bge	zero,r22,41025510 <_dtoa_r+0x1570>
41024d38:	dd800f15 	stw	r22,60(sp)
41024d3c:	003f3006 	br	41024a00 <_dtoa_r+0xa60>
41024d40:	d8000b15 	stw	zero,44(sp)
41024d44:	d9002617 	ldw	r4,152(sp)
41024d48:	0101eb0e 	bge	zero,r4,410254f8 <_dtoa_r+0x1558>
41024d4c:	202d883a 	mov	r22,r4
41024d50:	d9000e15 	stw	r4,56(sp)
41024d54:	d9000f15 	stw	r4,60(sp)
41024d58:	003f2906 	br	41024a00 <_dtoa_r+0xa60>
41024d5c:	01800044 	movi	r6,1
41024d60:	d9800b15 	stw	r6,44(sp)
41024d64:	003ff706 	br	41024d44 <_dtoa_r+0xda4>
41024d68:	01000044 	movi	r4,1
41024d6c:	d9000b15 	stw	r4,44(sp)
41024d70:	003fea06 	br	41024d1c <_dtoa_r+0xd7c>
41024d74:	04000c0e 	bge	zero,r16,41024da8 <_dtoa_r+0xe08>
41024d78:	d9400717 	ldw	r5,28(sp)
41024d7c:	d9001617 	ldw	r4,88(sp)
41024d80:	01800044 	movi	r6,1
41024d84:	10279d80 	call	410279d8 <__lshift>
41024d88:	1009883a 	mov	r4,r2
41024d8c:	900b883a 	mov	r5,r18
41024d90:	d8800715 	stw	r2,28(sp)
41024d94:	10271f00 	call	410271f0 <__mcmp>
41024d98:	0081e00e 	bge	zero,r2,4102551c <_dtoa_r+0x157c>
41024d9c:	bdc00044 	addi	r23,r23,1
41024da0:	00800e84 	movi	r2,58
41024da4:	b881a226 	beq	r23,r2,41025430 <_dtoa_r+0x1490>
41024da8:	b7000044 	addi	fp,r22,1
41024dac:	b5c00005 	stb	r23,0(r22)
41024db0:	003f7406 	br	41024b84 <_dtoa_r+0xbe4>
41024db4:	00800e44 	movi	r2,57
41024db8:	b8819d26 	beq	r23,r2,41025430 <_dtoa_r+0x1490>
41024dbc:	053ffa0e 	bge	zero,r20,41024da8 <_dtoa_r+0xe08>
41024dc0:	8dc00c44 	addi	r23,r17,49
41024dc4:	003ff806 	br	41024da8 <_dtoa_r+0xe08>
41024dc8:	d9001617 	ldw	r4,88(sp)
41024dcc:	a80b883a 	mov	r5,r21
41024dd0:	04000044 	movi	r16,1
41024dd4:	10270940 	call	41027094 <_Bfree>
41024dd8:	003edf06 	br	41024958 <_dtoa_r+0x9b8>
41024ddc:	d9001617 	ldw	r4,88(sp)
41024de0:	980b883a 	mov	r5,r19
41024de4:	01800284 	movi	r6,10
41024de8:	000f883a 	mov	r7,zero
41024dec:	1027d480 	call	41027d48 <__multadd>
41024df0:	1027883a 	mov	r19,r2
41024df4:	d8800615 	stw	r2,24(sp)
41024df8:	003ebb06 	br	410248e8 <_dtoa_r+0x948>
41024dfc:	d9801117 	ldw	r6,68(sp)
41024e00:	d8800d17 	ldw	r2,52(sp)
41024e04:	d8000915 	stw	zero,36(sp)
41024e08:	308dc83a 	sub	r6,r6,r2
41024e0c:	0087c83a 	sub	r3,zero,r2
41024e10:	d9801115 	stw	r6,68(sp)
41024e14:	d8c01015 	stw	r3,64(sp)
41024e18:	003cfe06 	br	41024214 <_dtoa_r+0x274>
41024e1c:	018dc83a 	sub	r6,zero,r6
41024e20:	d9801115 	stw	r6,68(sp)
41024e24:	d8000a15 	stw	zero,40(sp)
41024e28:	003cf306 	br	410241f8 <_dtoa_r+0x258>
41024e2c:	d9000d17 	ldw	r4,52(sp)
41024e30:	102aa740 	call	4102aa74 <__floatsidf>
41024e34:	880b883a 	mov	r5,r17
41024e38:	8009883a 	mov	r4,r16
41024e3c:	180f883a 	mov	r7,r3
41024e40:	100d883a 	mov	r6,r2
41024e44:	102a8540 	call	4102a854 <__nedf2>
41024e48:	103ce126 	beq	r2,zero,410241d0 <_dtoa_r+0x230>
41024e4c:	d9800d17 	ldw	r6,52(sp)
41024e50:	31bfffc4 	addi	r6,r6,-1
41024e54:	d9800d15 	stw	r6,52(sp)
41024e58:	003cdd06 	br	410241d0 <_dtoa_r+0x230>
41024e5c:	d9000717 	ldw	r4,28(sp)
41024e60:	900b883a 	mov	r5,r18
41024e64:	10271f00 	call	410271f0 <__mcmp>
41024e68:	103e8d0e 	bge	r2,zero,410248a0 <_dtoa_r+0x900>
41024e6c:	d9400717 	ldw	r5,28(sp)
41024e70:	d9001617 	ldw	r4,88(sp)
41024e74:	01800284 	movi	r6,10
41024e78:	000f883a 	mov	r7,zero
41024e7c:	1027d480 	call	41027d48 <__multadd>
41024e80:	d9800d17 	ldw	r6,52(sp)
41024e84:	d8800715 	stw	r2,28(sp)
41024e88:	31bfffc4 	addi	r6,r6,-1
41024e8c:	d9800d15 	stw	r6,52(sp)
41024e90:	b001a71e 	bne	r22,zero,41025530 <_dtoa_r+0x1590>
41024e94:	d8800e17 	ldw	r2,56(sp)
41024e98:	d8800f15 	stw	r2,60(sp)
41024e9c:	003e8006 	br	410248a0 <_dtoa_r+0x900>
41024ea0:	90800417 	ldw	r2,16(r18)
41024ea4:	1085883a 	add	r2,r2,r2
41024ea8:	1085883a 	add	r2,r2,r2
41024eac:	1485883a 	add	r2,r2,r18
41024eb0:	11000417 	ldw	r4,16(r2)
41024eb4:	10270bc0 	call	410270bc <__hi0bits>
41024eb8:	00c00804 	movi	r3,32
41024ebc:	1887c83a 	sub	r3,r3,r2
41024ec0:	003e5a06 	br	4102482c <_dtoa_r+0x88c>
41024ec4:	d9400717 	ldw	r5,28(sp)
41024ec8:	d9801017 	ldw	r6,64(sp)
41024ecc:	d9001617 	ldw	r4,88(sp)
41024ed0:	1027e480 	call	41027e48 <__pow5mult>
41024ed4:	d8800715 	stw	r2,28(sp)
41024ed8:	003e4306 	br	410247e8 <_dtoa_r+0x848>
41024edc:	d9800f17 	ldw	r6,60(sp)
41024ee0:	d8800d17 	ldw	r2,52(sp)
41024ee4:	d9800315 	stw	r6,12(sp)
41024ee8:	d8800415 	stw	r2,16(sp)
41024eec:	d8c00b17 	ldw	r3,44(sp)
41024ef0:	1805003a 	cmpeq	r2,r3,zero
41024ef4:	1000e21e 	bne	r2,zero,41025280 <_dtoa_r+0x12e0>
41024ef8:	d9000317 	ldw	r4,12(sp)
41024efc:	0005883a 	mov	r2,zero
41024f00:	00cff834 	movhi	r3,16352
41024f04:	200c90fa 	slli	r6,r4,3
41024f08:	011040f4 	movhi	r4,16643
41024f0c:	2137fc04 	addi	r4,r4,-8208
41024f10:	180b883a 	mov	r5,r3
41024f14:	310d883a 	add	r6,r6,r4
41024f18:	327fff17 	ldw	r9,-4(r6)
41024f1c:	323ffe17 	ldw	r8,-8(r6)
41024f20:	1009883a 	mov	r4,r2
41024f24:	480f883a 	mov	r7,r9
41024f28:	400d883a 	mov	r6,r8
41024f2c:	102a5740 	call	4102a574 <__divdf3>
41024f30:	180b883a 	mov	r5,r3
41024f34:	b00d883a 	mov	r6,r22
41024f38:	b80f883a 	mov	r7,r23
41024f3c:	1009883a 	mov	r4,r2
41024f40:	102a0cc0 	call	4102a0cc <__subdf3>
41024f44:	a80b883a 	mov	r5,r21
41024f48:	a009883a 	mov	r4,r20
41024f4c:	d8c01915 	stw	r3,100(sp)
41024f50:	d8801815 	stw	r2,96(sp)
41024f54:	102ab6c0 	call	4102ab6c <__fixdfsi>
41024f58:	1009883a 	mov	r4,r2
41024f5c:	1027883a 	mov	r19,r2
41024f60:	102aa740 	call	4102aa74 <__floatsidf>
41024f64:	a80b883a 	mov	r5,r21
41024f68:	a009883a 	mov	r4,r20
41024f6c:	180f883a 	mov	r7,r3
41024f70:	100d883a 	mov	r6,r2
41024f74:	102a0cc0 	call	4102a0cc <__subdf3>
41024f78:	d9801817 	ldw	r6,96(sp)
41024f7c:	1823883a 	mov	r17,r3
41024f80:	d8801415 	stw	r2,80(sp)
41024f84:	302d883a 	mov	r22,r6
41024f88:	d9800517 	ldw	r6,20(sp)
41024f8c:	9cc00c04 	addi	r19,r19,48
41024f90:	dc401515 	stw	r17,84(sp)
41024f94:	d8c01917 	ldw	r3,100(sp)
41024f98:	34c00005 	stb	r19,0(r6)
41024f9c:	d8800517 	ldw	r2,20(sp)
41024fa0:	d9401917 	ldw	r5,100(sp)
41024fa4:	d9801417 	ldw	r6,80(sp)
41024fa8:	b009883a 	mov	r4,r22
41024fac:	880f883a 	mov	r7,r17
41024fb0:	182f883a 	mov	r23,r3
41024fb4:	17000044 	addi	fp,r2,1
41024fb8:	102a8dc0 	call	4102a8dc <__gtdf2>
41024fbc:	00804e16 	blt	zero,r2,410250f8 <_dtoa_r+0x1158>
41024fc0:	d9801417 	ldw	r6,80(sp)
41024fc4:	0005883a 	mov	r2,zero
41024fc8:	00cffc34 	movhi	r3,16368
41024fcc:	180b883a 	mov	r5,r3
41024fd0:	880f883a 	mov	r7,r17
41024fd4:	1009883a 	mov	r4,r2
41024fd8:	102a0cc0 	call	4102a0cc <__subdf3>
41024fdc:	d9401917 	ldw	r5,100(sp)
41024fe0:	180f883a 	mov	r7,r3
41024fe4:	b009883a 	mov	r4,r22
41024fe8:	100d883a 	mov	r6,r2
41024fec:	102a8dc0 	call	4102a8dc <__gtdf2>
41024ff0:	00bda216 	blt	zero,r2,4102467c <_dtoa_r+0x6dc>
41024ff4:	d8c00317 	ldw	r3,12(sp)
41024ff8:	00800044 	movi	r2,1
41024ffc:	10c01216 	blt	r2,r3,41025048 <_dtoa_r+0x10a8>
41025000:	003d4506 	br	41024518 <_dtoa_r+0x578>
41025004:	d9801417 	ldw	r6,80(sp)
41025008:	0005883a 	mov	r2,zero
4102500c:	00cffc34 	movhi	r3,16368
41025010:	180b883a 	mov	r5,r3
41025014:	880f883a 	mov	r7,r17
41025018:	1009883a 	mov	r4,r2
4102501c:	102a0cc0 	call	4102a0cc <__subdf3>
41025020:	d9c01b17 	ldw	r7,108(sp)
41025024:	180b883a 	mov	r5,r3
41025028:	1009883a 	mov	r4,r2
4102502c:	b00d883a 	mov	r6,r22
41025030:	102a9ec0 	call	4102a9ec <__ltdf2>
41025034:	103d9116 	blt	r2,zero,4102467c <_dtoa_r+0x6dc>
41025038:	d9800517 	ldw	r6,20(sp)
4102503c:	d9000317 	ldw	r4,12(sp)
41025040:	3105883a 	add	r2,r6,r4
41025044:	e0bd3426 	beq	fp,r2,41024518 <_dtoa_r+0x578>
41025048:	04500934 	movhi	r17,16420
4102504c:	0021883a 	mov	r16,zero
41025050:	b80b883a 	mov	r5,r23
41025054:	b009883a 	mov	r4,r22
41025058:	800d883a 	mov	r6,r16
4102505c:	880f883a 	mov	r7,r17
41025060:	102a1c00 	call	4102a1c0 <__muldf3>
41025064:	d9401517 	ldw	r5,84(sp)
41025068:	d9001417 	ldw	r4,80(sp)
4102506c:	880f883a 	mov	r7,r17
41025070:	000d883a 	mov	r6,zero
41025074:	d8801a15 	stw	r2,104(sp)
41025078:	d8c01b15 	stw	r3,108(sp)
4102507c:	102a1c00 	call	4102a1c0 <__muldf3>
41025080:	180b883a 	mov	r5,r3
41025084:	1009883a 	mov	r4,r2
41025088:	1823883a 	mov	r17,r3
4102508c:	1021883a 	mov	r16,r2
41025090:	102ab6c0 	call	4102ab6c <__fixdfsi>
41025094:	1009883a 	mov	r4,r2
41025098:	102b883a 	mov	r21,r2
4102509c:	102aa740 	call	4102aa74 <__floatsidf>
410250a0:	880b883a 	mov	r5,r17
410250a4:	8009883a 	mov	r4,r16
410250a8:	180f883a 	mov	r7,r3
410250ac:	100d883a 	mov	r6,r2
410250b0:	102a0cc0 	call	4102a0cc <__subdf3>
410250b4:	1021883a 	mov	r16,r2
410250b8:	d9001b17 	ldw	r4,108(sp)
410250bc:	1823883a 	mov	r17,r3
410250c0:	dc001415 	stw	r16,80(sp)
410250c4:	ad400c04 	addi	r21,r21,48
410250c8:	dc401515 	stw	r17,84(sp)
410250cc:	d8801a17 	ldw	r2,104(sp)
410250d0:	e5400005 	stb	r21,0(fp)
410250d4:	202f883a 	mov	r23,r4
410250d8:	d9c01b17 	ldw	r7,108(sp)
410250dc:	d9001417 	ldw	r4,80(sp)
410250e0:	880b883a 	mov	r5,r17
410250e4:	100d883a 	mov	r6,r2
410250e8:	102d883a 	mov	r22,r2
410250ec:	e7000044 	addi	fp,fp,1
410250f0:	102a9ec0 	call	4102a9ec <__ltdf2>
410250f4:	103fc30e 	bge	r2,zero,41025004 <_dtoa_r+0x1064>
410250f8:	d9000417 	ldw	r4,16(sp)
410250fc:	d9000d15 	stw	r4,52(sp)
41025100:	003d7106 	br	410246c8 <_dtoa_r+0x728>
41025104:	d9801717 	ldw	r6,92(sp)
41025108:	00800084 	movi	r2,2
4102510c:	11bde60e 	bge	r2,r6,410248a8 <_dtoa_r+0x908>
41025110:	203cfb1e 	bne	r4,zero,41024500 <_dtoa_r+0x560>
41025114:	d9001617 	ldw	r4,88(sp)
41025118:	900b883a 	mov	r5,r18
4102511c:	01800144 	movi	r6,5
41025120:	000f883a 	mov	r7,zero
41025124:	1027d480 	call	41027d48 <__multadd>
41025128:	d9000717 	ldw	r4,28(sp)
4102512c:	100b883a 	mov	r5,r2
41025130:	1025883a 	mov	r18,r2
41025134:	10271f00 	call	410271f0 <__mcmp>
41025138:	00bcf10e 	bge	zero,r2,41024500 <_dtoa_r+0x560>
4102513c:	d8c00d17 	ldw	r3,52(sp)
41025140:	d9000517 	ldw	r4,20(sp)
41025144:	d8000615 	stw	zero,24(sp)
41025148:	18c00044 	addi	r3,r3,1
4102514c:	d8c00d15 	stw	r3,52(sp)
41025150:	00800c44 	movi	r2,49
41025154:	27000044 	addi	fp,r4,1
41025158:	20800005 	stb	r2,0(r4)
4102515c:	003e8906 	br	41024b84 <_dtoa_r+0xbe4>
41025160:	d8c00517 	ldw	r3,20(sp)
41025164:	003bc206 	br	41024070 <_dtoa_r+0xd0>
41025168:	019040f4 	movhi	r6,16643
4102516c:	31b82e04 	addi	r6,r6,-8008
41025170:	30c00917 	ldw	r3,36(r6)
41025174:	30800817 	ldw	r2,32(r6)
41025178:	d9001217 	ldw	r4,72(sp)
4102517c:	d9401317 	ldw	r5,76(sp)
41025180:	180f883a 	mov	r7,r3
41025184:	100d883a 	mov	r6,r2
41025188:	102a5740 	call	4102a574 <__divdf3>
4102518c:	948003cc 	andi	r18,r18,15
41025190:	058000c4 	movi	r22,3
41025194:	1029883a 	mov	r20,r2
41025198:	182b883a 	mov	r21,r3
4102519c:	003c8906 	br	410243c4 <_dtoa_r+0x424>
410251a0:	d9001017 	ldw	r4,64(sp)
410251a4:	d9800917 	ldw	r6,36(sp)
410251a8:	0025883a 	mov	r18,zero
410251ac:	1105c83a 	sub	r2,r2,r4
410251b0:	2089883a 	add	r4,r4,r2
410251b4:	308d883a 	add	r6,r6,r2
410251b8:	d9001015 	stw	r4,64(sp)
410251bc:	d9800915 	stw	r6,36(sp)
410251c0:	003e3206 	br	41024a8c <_dtoa_r+0xaec>
410251c4:	28800044 	addi	r2,r5,1
410251c8:	27000044 	addi	fp,r4,1
410251cc:	20800005 	stb	r2,0(r4)
410251d0:	003e6c06 	br	41024b84 <_dtoa_r+0xbe4>
410251d4:	d8800f17 	ldw	r2,60(sp)
410251d8:	00bce016 	blt	zero,r2,4102455c <_dtoa_r+0x5bc>
410251dc:	d9800f17 	ldw	r6,60(sp)
410251e0:	303cc51e 	bne	r6,zero,410244f8 <_dtoa_r+0x558>
410251e4:	0005883a 	mov	r2,zero
410251e8:	00d00534 	movhi	r3,16404
410251ec:	980b883a 	mov	r5,r19
410251f0:	180f883a 	mov	r7,r3
410251f4:	9009883a 	mov	r4,r18
410251f8:	100d883a 	mov	r6,r2
410251fc:	102a1c00 	call	4102a1c0 <__muldf3>
41025200:	180b883a 	mov	r5,r3
41025204:	a80f883a 	mov	r7,r21
41025208:	1009883a 	mov	r4,r2
4102520c:	a00d883a 	mov	r6,r20
41025210:	102a9640 	call	4102a964 <__gedf2>
41025214:	103cb80e 	bge	r2,zero,410244f8 <_dtoa_r+0x558>
41025218:	0027883a 	mov	r19,zero
4102521c:	0025883a 	mov	r18,zero
41025220:	003fc606 	br	4102513c <_dtoa_r+0x119c>
41025224:	99400117 	ldw	r5,4(r19)
41025228:	d9001617 	ldw	r4,88(sp)
4102522c:	10276140 	call	41027614 <_Balloc>
41025230:	99800417 	ldw	r6,16(r19)
41025234:	11000304 	addi	r4,r2,12
41025238:	99400304 	addi	r5,r19,12
4102523c:	318d883a 	add	r6,r6,r6
41025240:	318d883a 	add	r6,r6,r6
41025244:	31800204 	addi	r6,r6,8
41025248:	1023883a 	mov	r17,r2
4102524c:	1021ac00 	call	41021ac0 <memcpy>
41025250:	d9001617 	ldw	r4,88(sp)
41025254:	880b883a 	mov	r5,r17
41025258:	01800044 	movi	r6,1
4102525c:	10279d80 	call	410279d8 <__lshift>
41025260:	100b883a 	mov	r5,r2
41025264:	003d9c06 	br	410248d8 <_dtoa_r+0x938>
41025268:	00800e44 	movi	r2,57
4102526c:	b8807026 	beq	r23,r2,41025430 <_dtoa_r+0x1490>
41025270:	b8800044 	addi	r2,r23,1
41025274:	b7000044 	addi	fp,r22,1
41025278:	b0800005 	stb	r2,0(r22)
4102527c:	003e4106 	br	41024b84 <_dtoa_r+0xbe4>
41025280:	d8800317 	ldw	r2,12(sp)
41025284:	019040f4 	movhi	r6,16643
41025288:	31b7fc04 	addi	r6,r6,-8208
4102528c:	b009883a 	mov	r4,r22
41025290:	100e90fa 	slli	r7,r2,3
41025294:	b80b883a 	mov	r5,r23
41025298:	398f883a 	add	r7,r7,r6
4102529c:	38bffe17 	ldw	r2,-8(r7)
410252a0:	d9800517 	ldw	r6,20(sp)
410252a4:	38ffff17 	ldw	r3,-4(r7)
410252a8:	37000044 	addi	fp,r6,1
410252ac:	180f883a 	mov	r7,r3
410252b0:	100d883a 	mov	r6,r2
410252b4:	102a1c00 	call	4102a1c0 <__muldf3>
410252b8:	a80b883a 	mov	r5,r21
410252bc:	a009883a 	mov	r4,r20
410252c0:	182f883a 	mov	r23,r3
410252c4:	102d883a 	mov	r22,r2
410252c8:	102ab6c0 	call	4102ab6c <__fixdfsi>
410252cc:	1009883a 	mov	r4,r2
410252d0:	1027883a 	mov	r19,r2
410252d4:	102aa740 	call	4102aa74 <__floatsidf>
410252d8:	a80b883a 	mov	r5,r21
410252dc:	a009883a 	mov	r4,r20
410252e0:	180f883a 	mov	r7,r3
410252e4:	100d883a 	mov	r6,r2
410252e8:	102a0cc0 	call	4102a0cc <__subdf3>
410252ec:	180b883a 	mov	r5,r3
410252f0:	d8c00517 	ldw	r3,20(sp)
410252f4:	9cc00c04 	addi	r19,r19,48
410252f8:	1009883a 	mov	r4,r2
410252fc:	1cc00005 	stb	r19,0(r3)
41025300:	2021883a 	mov	r16,r4
41025304:	d9000317 	ldw	r4,12(sp)
41025308:	00800044 	movi	r2,1
4102530c:	2823883a 	mov	r17,r5
41025310:	20802226 	beq	r4,r2,4102539c <_dtoa_r+0x13fc>
41025314:	1029883a 	mov	r20,r2
41025318:	0005883a 	mov	r2,zero
4102531c:	00d00934 	movhi	r3,16420
41025320:	180f883a 	mov	r7,r3
41025324:	100d883a 	mov	r6,r2
41025328:	880b883a 	mov	r5,r17
4102532c:	8009883a 	mov	r4,r16
41025330:	102a1c00 	call	4102a1c0 <__muldf3>
41025334:	180b883a 	mov	r5,r3
41025338:	1009883a 	mov	r4,r2
4102533c:	1823883a 	mov	r17,r3
41025340:	1021883a 	mov	r16,r2
41025344:	102ab6c0 	call	4102ab6c <__fixdfsi>
41025348:	1009883a 	mov	r4,r2
4102534c:	102b883a 	mov	r21,r2
41025350:	102aa740 	call	4102aa74 <__floatsidf>
41025354:	880b883a 	mov	r5,r17
41025358:	8009883a 	mov	r4,r16
4102535c:	180f883a 	mov	r7,r3
41025360:	100d883a 	mov	r6,r2
41025364:	102a0cc0 	call	4102a0cc <__subdf3>
41025368:	180b883a 	mov	r5,r3
4102536c:	d8c00517 	ldw	r3,20(sp)
41025370:	1009883a 	mov	r4,r2
41025374:	ad400c04 	addi	r21,r21,48
41025378:	1d05883a 	add	r2,r3,r20
4102537c:	15400005 	stb	r21,0(r2)
41025380:	2021883a 	mov	r16,r4
41025384:	d9000317 	ldw	r4,12(sp)
41025388:	a5000044 	addi	r20,r20,1
4102538c:	2823883a 	mov	r17,r5
41025390:	a13fe11e 	bne	r20,r4,41025318 <_dtoa_r+0x1378>
41025394:	e505883a 	add	r2,fp,r20
41025398:	173fffc4 	addi	fp,r2,-1
4102539c:	0025883a 	mov	r18,zero
410253a0:	04cff834 	movhi	r19,16352
410253a4:	b009883a 	mov	r4,r22
410253a8:	b80b883a 	mov	r5,r23
410253ac:	900d883a 	mov	r6,r18
410253b0:	980f883a 	mov	r7,r19
410253b4:	102a14c0 	call	4102a14c <__adddf3>
410253b8:	180b883a 	mov	r5,r3
410253bc:	1009883a 	mov	r4,r2
410253c0:	800d883a 	mov	r6,r16
410253c4:	880f883a 	mov	r7,r17
410253c8:	102a9ec0 	call	4102a9ec <__ltdf2>
410253cc:	103cab16 	blt	r2,zero,4102467c <_dtoa_r+0x6dc>
410253d0:	0009883a 	mov	r4,zero
410253d4:	980b883a 	mov	r5,r19
410253d8:	b80f883a 	mov	r7,r23
410253dc:	b00d883a 	mov	r6,r22
410253e0:	102a0cc0 	call	4102a0cc <__subdf3>
410253e4:	180b883a 	mov	r5,r3
410253e8:	880f883a 	mov	r7,r17
410253ec:	1009883a 	mov	r4,r2
410253f0:	800d883a 	mov	r6,r16
410253f4:	102a8dc0 	call	4102a8dc <__gtdf2>
410253f8:	00bc470e 	bge	zero,r2,41024518 <_dtoa_r+0x578>
410253fc:	00c00c04 	movi	r3,48
41025400:	e73fffc4 	addi	fp,fp,-1
41025404:	e0800007 	ldb	r2,0(fp)
41025408:	10fffd26 	beq	r2,r3,41025400 <_dtoa_r+0x1460>
4102540c:	d9800417 	ldw	r6,16(sp)
41025410:	e7000044 	addi	fp,fp,1
41025414:	d9800d15 	stw	r6,52(sp)
41025418:	003cab06 	br	410246c8 <_dtoa_r+0x728>
4102541c:	d8c00f17 	ldw	r3,60(sp)
41025420:	d9001117 	ldw	r4,68(sp)
41025424:	20e1c83a 	sub	r16,r4,r3
41025428:	0007883a 	mov	r3,zero
4102542c:	003d9b06 	br	41024a9c <_dtoa_r+0xafc>
41025430:	00800e44 	movi	r2,57
41025434:	b0800005 	stb	r2,0(r22)
41025438:	b5800044 	addi	r22,r22,1
4102543c:	003dc106 	br	41024b44 <_dtoa_r+0xba4>
41025440:	05800084 	movi	r22,2
41025444:	003bf706 	br	41024424 <_dtoa_r+0x484>
41025448:	d9000f17 	ldw	r4,60(sp)
4102544c:	013c000e 	bge	zero,r4,41024450 <_dtoa_r+0x4b0>
41025450:	d9800e17 	ldw	r6,56(sp)
41025454:	01bc300e 	bge	zero,r6,41024518 <_dtoa_r+0x578>
41025458:	0005883a 	mov	r2,zero
4102545c:	00d00934 	movhi	r3,16420
41025460:	a80b883a 	mov	r5,r21
41025464:	180f883a 	mov	r7,r3
41025468:	a009883a 	mov	r4,r20
4102546c:	100d883a 	mov	r6,r2
41025470:	102a1c00 	call	4102a1c0 <__muldf3>
41025474:	b1000044 	addi	r4,r22,1
41025478:	1021883a 	mov	r16,r2
4102547c:	1823883a 	mov	r17,r3
41025480:	102aa740 	call	4102aa74 <__floatsidf>
41025484:	880b883a 	mov	r5,r17
41025488:	8009883a 	mov	r4,r16
4102548c:	180f883a 	mov	r7,r3
41025490:	100d883a 	mov	r6,r2
41025494:	102a1c00 	call	4102a1c0 <__muldf3>
41025498:	0011883a 	mov	r8,zero
4102549c:	02500734 	movhi	r9,16412
410254a0:	180b883a 	mov	r5,r3
410254a4:	480f883a 	mov	r7,r9
410254a8:	1009883a 	mov	r4,r2
410254ac:	400d883a 	mov	r6,r8
410254b0:	102a14c0 	call	4102a14c <__adddf3>
410254b4:	102d883a 	mov	r22,r2
410254b8:	00bf3034 	movhi	r2,64704
410254bc:	10ef883a 	add	r23,r2,r3
410254c0:	d8800d17 	ldw	r2,52(sp)
410254c4:	d8c00e17 	ldw	r3,56(sp)
410254c8:	8029883a 	mov	r20,r16
410254cc:	10bfffc4 	addi	r2,r2,-1
410254d0:	882b883a 	mov	r21,r17
410254d4:	d8800415 	stw	r2,16(sp)
410254d8:	d8c00315 	stw	r3,12(sp)
410254dc:	003e8306 	br	41024eec <_dtoa_r+0xf4c>
410254e0:	d8800117 	ldw	r2,4(sp)
410254e4:	dc001117 	ldw	r16,68(sp)
410254e8:	dc801017 	ldw	r18,64(sp)
410254ec:	00c00d84 	movi	r3,54
410254f0:	1887c83a 	sub	r3,r3,r2
410254f4:	003d6906 	br	41024a9c <_dtoa_r+0xafc>
410254f8:	01800044 	movi	r6,1
410254fc:	3021883a 	mov	r16,r6
41025500:	d9800f15 	stw	r6,60(sp)
41025504:	d9802615 	stw	r6,152(sp)
41025508:	d9800e15 	stw	r6,56(sp)
4102550c:	003b9306 	br	4102435c <_dtoa_r+0x3bc>
41025510:	b021883a 	mov	r16,r22
41025514:	dd800f15 	stw	r22,60(sp)
41025518:	003b9006 	br	4102435c <_dtoa_r+0x3bc>
4102551c:	103e221e 	bne	r2,zero,41024da8 <_dtoa_r+0xe08>
41025520:	b880004c 	andi	r2,r23,1
41025524:	1005003a 	cmpeq	r2,r2,zero
41025528:	103e1f1e 	bne	r2,zero,41024da8 <_dtoa_r+0xe08>
4102552c:	003e1b06 	br	41024d9c <_dtoa_r+0xdfc>
41025530:	d9001617 	ldw	r4,88(sp)
41025534:	980b883a 	mov	r5,r19
41025538:	01800284 	movi	r6,10
4102553c:	000f883a 	mov	r7,zero
41025540:	1027d480 	call	41027d48 <__multadd>
41025544:	d8c00e17 	ldw	r3,56(sp)
41025548:	1027883a 	mov	r19,r2
4102554c:	d8c00f15 	stw	r3,60(sp)
41025550:	003cd306 	br	410248a0 <_dtoa_r+0x900>

41025554 <_fflush_r>:
41025554:	defffb04 	addi	sp,sp,-20
41025558:	dcc00315 	stw	r19,12(sp)
4102555c:	dc800215 	stw	r18,8(sp)
41025560:	dfc00415 	stw	ra,16(sp)
41025564:	dc400115 	stw	r17,4(sp)
41025568:	dc000015 	stw	r16,0(sp)
4102556c:	2027883a 	mov	r19,r4
41025570:	2825883a 	mov	r18,r5
41025574:	20000226 	beq	r4,zero,41025580 <_fflush_r+0x2c>
41025578:	20800e17 	ldw	r2,56(r4)
4102557c:	10005626 	beq	r2,zero,410256d8 <_fflush_r+0x184>
41025580:	9100030b 	ldhu	r4,12(r18)
41025584:	20ffffcc 	andi	r3,r4,65535
41025588:	18e0001c 	xori	r3,r3,32768
4102558c:	18e00004 	addi	r3,r3,-32768
41025590:	1880020c 	andi	r2,r3,8
41025594:	1000261e 	bne	r2,zero,41025630 <_fflush_r+0xdc>
41025598:	90c00117 	ldw	r3,4(r18)
4102559c:	20820014 	ori	r2,r4,2048
410255a0:	9080030d 	sth	r2,12(r18)
410255a4:	1009883a 	mov	r4,r2
410255a8:	00c0400e 	bge	zero,r3,410256ac <_fflush_r+0x158>
410255ac:	92000a17 	ldw	r8,40(r18)
410255b0:	40004026 	beq	r8,zero,410256b4 <_fflush_r+0x160>
410255b4:	2084000c 	andi	r2,r4,4096
410255b8:	10005326 	beq	r2,zero,41025708 <_fflush_r+0x1b4>
410255bc:	94001417 	ldw	r16,80(r18)
410255c0:	9080030b 	ldhu	r2,12(r18)
410255c4:	1080010c 	andi	r2,r2,4
410255c8:	1000481e 	bne	r2,zero,410256ec <_fflush_r+0x198>
410255cc:	91400717 	ldw	r5,28(r18)
410255d0:	9809883a 	mov	r4,r19
410255d4:	800d883a 	mov	r6,r16
410255d8:	000f883a 	mov	r7,zero
410255dc:	403ee83a 	callr	r8
410255e0:	8080261e 	bne	r16,r2,4102567c <_fflush_r+0x128>
410255e4:	9080030b 	ldhu	r2,12(r18)
410255e8:	91000417 	ldw	r4,16(r18)
410255ec:	90000115 	stw	zero,4(r18)
410255f0:	10bdffcc 	andi	r2,r2,63487
410255f4:	10ffffcc 	andi	r3,r2,65535
410255f8:	18c4000c 	andi	r3,r3,4096
410255fc:	9080030d 	sth	r2,12(r18)
41025600:	91000015 	stw	r4,0(r18)
41025604:	18002b26 	beq	r3,zero,410256b4 <_fflush_r+0x160>
41025608:	0007883a 	mov	r3,zero
4102560c:	1805883a 	mov	r2,r3
41025610:	94001415 	stw	r16,80(r18)
41025614:	dfc00417 	ldw	ra,16(sp)
41025618:	dcc00317 	ldw	r19,12(sp)
4102561c:	dc800217 	ldw	r18,8(sp)
41025620:	dc400117 	ldw	r17,4(sp)
41025624:	dc000017 	ldw	r16,0(sp)
41025628:	dec00504 	addi	sp,sp,20
4102562c:	f800283a 	ret
41025630:	94400417 	ldw	r17,16(r18)
41025634:	88001f26 	beq	r17,zero,410256b4 <_fflush_r+0x160>
41025638:	90800017 	ldw	r2,0(r18)
4102563c:	18c000cc 	andi	r3,r3,3
41025640:	94400015 	stw	r17,0(r18)
41025644:	1461c83a 	sub	r16,r2,r17
41025648:	18002526 	beq	r3,zero,410256e0 <_fflush_r+0x18c>
4102564c:	0005883a 	mov	r2,zero
41025650:	90800215 	stw	r2,8(r18)
41025654:	0400170e 	bge	zero,r16,410256b4 <_fflush_r+0x160>
41025658:	90c00917 	ldw	r3,36(r18)
4102565c:	91400717 	ldw	r5,28(r18)
41025660:	880d883a 	mov	r6,r17
41025664:	800f883a 	mov	r7,r16
41025668:	9809883a 	mov	r4,r19
4102566c:	183ee83a 	callr	r3
41025670:	88a3883a 	add	r17,r17,r2
41025674:	80a1c83a 	sub	r16,r16,r2
41025678:	00bff616 	blt	zero,r2,41025654 <_fflush_r+0x100>
4102567c:	9080030b 	ldhu	r2,12(r18)
41025680:	00ffffc4 	movi	r3,-1
41025684:	10801014 	ori	r2,r2,64
41025688:	9080030d 	sth	r2,12(r18)
4102568c:	1805883a 	mov	r2,r3
41025690:	dfc00417 	ldw	ra,16(sp)
41025694:	dcc00317 	ldw	r19,12(sp)
41025698:	dc800217 	ldw	r18,8(sp)
4102569c:	dc400117 	ldw	r17,4(sp)
410256a0:	dc000017 	ldw	r16,0(sp)
410256a4:	dec00504 	addi	sp,sp,20
410256a8:	f800283a 	ret
410256ac:	90800f17 	ldw	r2,60(r18)
410256b0:	00bfbe16 	blt	zero,r2,410255ac <_fflush_r+0x58>
410256b4:	0007883a 	mov	r3,zero
410256b8:	1805883a 	mov	r2,r3
410256bc:	dfc00417 	ldw	ra,16(sp)
410256c0:	dcc00317 	ldw	r19,12(sp)
410256c4:	dc800217 	ldw	r18,8(sp)
410256c8:	dc400117 	ldw	r17,4(sp)
410256cc:	dc000017 	ldw	r16,0(sp)
410256d0:	dec00504 	addi	sp,sp,20
410256d4:	f800283a 	ret
410256d8:	10257ec0 	call	410257ec <__sinit>
410256dc:	003fa806 	br	41025580 <_fflush_r+0x2c>
410256e0:	90800517 	ldw	r2,20(r18)
410256e4:	90800215 	stw	r2,8(r18)
410256e8:	003fda06 	br	41025654 <_fflush_r+0x100>
410256ec:	90800117 	ldw	r2,4(r18)
410256f0:	90c00c17 	ldw	r3,48(r18)
410256f4:	80a1c83a 	sub	r16,r16,r2
410256f8:	183fb426 	beq	r3,zero,410255cc <_fflush_r+0x78>
410256fc:	90800f17 	ldw	r2,60(r18)
41025700:	80a1c83a 	sub	r16,r16,r2
41025704:	003fb106 	br	410255cc <_fflush_r+0x78>
41025708:	91400717 	ldw	r5,28(r18)
4102570c:	9809883a 	mov	r4,r19
41025710:	000d883a 	mov	r6,zero
41025714:	01c00044 	movi	r7,1
41025718:	403ee83a 	callr	r8
4102571c:	1021883a 	mov	r16,r2
41025720:	00bfffc4 	movi	r2,-1
41025724:	80800226 	beq	r16,r2,41025730 <_fflush_r+0x1dc>
41025728:	92000a17 	ldw	r8,40(r18)
4102572c:	003fa406 	br	410255c0 <_fflush_r+0x6c>
41025730:	98c00017 	ldw	r3,0(r19)
41025734:	00800744 	movi	r2,29
41025738:	18bfde26 	beq	r3,r2,410256b4 <_fflush_r+0x160>
4102573c:	9080030b 	ldhu	r2,12(r18)
41025740:	8007883a 	mov	r3,r16
41025744:	10801014 	ori	r2,r2,64
41025748:	9080030d 	sth	r2,12(r18)
4102574c:	003fcf06 	br	4102568c <_fflush_r+0x138>

41025750 <fflush>:
41025750:	015040b4 	movhi	r5,16642
41025754:	29555504 	addi	r5,r5,21844
41025758:	2007883a 	mov	r3,r4
4102575c:	20000526 	beq	r4,zero,41025774 <fflush+0x24>
41025760:	009040f4 	movhi	r2,16643
41025764:	10bedc04 	addi	r2,r2,-1168
41025768:	11000017 	ldw	r4,0(r2)
4102576c:	180b883a 	mov	r5,r3
41025770:	10255541 	jmpi	41025554 <_fflush_r>
41025774:	009040f4 	movhi	r2,16643
41025778:	10bedd04 	addi	r2,r2,-1164
4102577c:	11000017 	ldw	r4,0(r2)
41025780:	10263201 	jmpi	41026320 <_fwalk_reent>

41025784 <std>:
41025784:	009040f4 	movhi	r2,16643
41025788:	10a25204 	addi	r2,r2,-30392
4102578c:	20800b15 	stw	r2,44(r4)
41025790:	009040f4 	movhi	r2,16643
41025794:	10a28d04 	addi	r2,r2,-30156
41025798:	20800815 	stw	r2,32(r4)
4102579c:	00d040f4 	movhi	r3,16643
410257a0:	18e26e04 	addi	r3,r3,-30280
410257a4:	009040f4 	movhi	r2,16643
410257a8:	10a25404 	addi	r2,r2,-30384
410257ac:	2140030d 	sth	r5,12(r4)
410257b0:	2180038d 	sth	r6,14(r4)
410257b4:	20c00915 	stw	r3,36(r4)
410257b8:	20800a15 	stw	r2,40(r4)
410257bc:	20000015 	stw	zero,0(r4)
410257c0:	20000115 	stw	zero,4(r4)
410257c4:	20000215 	stw	zero,8(r4)
410257c8:	20000415 	stw	zero,16(r4)
410257cc:	20000515 	stw	zero,20(r4)
410257d0:	20000615 	stw	zero,24(r4)
410257d4:	21000715 	stw	r4,28(r4)
410257d8:	f800283a 	ret

410257dc <__sfp_lock_acquire>:
410257dc:	f800283a 	ret

410257e0 <__sfp_lock_release>:
410257e0:	f800283a 	ret

410257e4 <__sinit_lock_acquire>:
410257e4:	f800283a 	ret

410257e8 <__sinit_lock_release>:
410257e8:	f800283a 	ret

410257ec <__sinit>:
410257ec:	20800e17 	ldw	r2,56(r4)
410257f0:	defffd04 	addi	sp,sp,-12
410257f4:	dc400115 	stw	r17,4(sp)
410257f8:	dc000015 	stw	r16,0(sp)
410257fc:	dfc00215 	stw	ra,8(sp)
41025800:	04400044 	movi	r17,1
41025804:	01400104 	movi	r5,4
41025808:	000d883a 	mov	r6,zero
4102580c:	2021883a 	mov	r16,r4
41025810:	2200bb04 	addi	r8,r4,748
41025814:	200f883a 	mov	r7,r4
41025818:	10000526 	beq	r2,zero,41025830 <__sinit+0x44>
4102581c:	dfc00217 	ldw	ra,8(sp)
41025820:	dc400117 	ldw	r17,4(sp)
41025824:	dc000017 	ldw	r16,0(sp)
41025828:	dec00304 	addi	sp,sp,12
4102582c:	f800283a 	ret
41025830:	21000117 	ldw	r4,4(r4)
41025834:	009040b4 	movhi	r2,16642
41025838:	10963404 	addi	r2,r2,22736
4102583c:	00c000c4 	movi	r3,3
41025840:	80800f15 	stw	r2,60(r16)
41025844:	80c0b915 	stw	r3,740(r16)
41025848:	8200ba15 	stw	r8,744(r16)
4102584c:	84400e15 	stw	r17,56(r16)
41025850:	8000b815 	stw	zero,736(r16)
41025854:	10257840 	call	41025784 <std>
41025858:	81000217 	ldw	r4,8(r16)
4102585c:	880d883a 	mov	r6,r17
41025860:	800f883a 	mov	r7,r16
41025864:	01400284 	movi	r5,10
41025868:	10257840 	call	41025784 <std>
4102586c:	81000317 	ldw	r4,12(r16)
41025870:	800f883a 	mov	r7,r16
41025874:	01400484 	movi	r5,18
41025878:	01800084 	movi	r6,2
4102587c:	dfc00217 	ldw	ra,8(sp)
41025880:	dc400117 	ldw	r17,4(sp)
41025884:	dc000017 	ldw	r16,0(sp)
41025888:	dec00304 	addi	sp,sp,12
4102588c:	10257841 	jmpi	41025784 <std>

41025890 <__fp_lock>:
41025890:	0005883a 	mov	r2,zero
41025894:	f800283a 	ret

41025898 <__fp_unlock>:
41025898:	0005883a 	mov	r2,zero
4102589c:	f800283a 	ret

410258a0 <__fp_unlock_all>:
410258a0:	009040f4 	movhi	r2,16643
410258a4:	10bedc04 	addi	r2,r2,-1168
410258a8:	11000017 	ldw	r4,0(r2)
410258ac:	015040b4 	movhi	r5,16642
410258b0:	29562604 	addi	r5,r5,22680
410258b4:	10263e81 	jmpi	410263e8 <_fwalk>

410258b8 <__fp_lock_all>:
410258b8:	009040f4 	movhi	r2,16643
410258bc:	10bedc04 	addi	r2,r2,-1168
410258c0:	11000017 	ldw	r4,0(r2)
410258c4:	015040b4 	movhi	r5,16642
410258c8:	29562404 	addi	r5,r5,22672
410258cc:	10263e81 	jmpi	410263e8 <_fwalk>

410258d0 <_cleanup_r>:
410258d0:	015040f4 	movhi	r5,16643
410258d4:	2963d204 	addi	r5,r5,-28856
410258d8:	10263e81 	jmpi	410263e8 <_fwalk>

410258dc <_cleanup>:
410258dc:	009040f4 	movhi	r2,16643
410258e0:	10bedd04 	addi	r2,r2,-1164
410258e4:	11000017 	ldw	r4,0(r2)
410258e8:	10258d01 	jmpi	410258d0 <_cleanup_r>

410258ec <__sfmoreglue>:
410258ec:	defffc04 	addi	sp,sp,-16
410258f0:	dc400115 	stw	r17,4(sp)
410258f4:	2c401724 	muli	r17,r5,92
410258f8:	dc800215 	stw	r18,8(sp)
410258fc:	2825883a 	mov	r18,r5
41025900:	89400304 	addi	r5,r17,12
41025904:	dc000015 	stw	r16,0(sp)
41025908:	dfc00315 	stw	ra,12(sp)
4102590c:	10266f80 	call	410266f8 <_malloc_r>
41025910:	0021883a 	mov	r16,zero
41025914:	880d883a 	mov	r6,r17
41025918:	000b883a 	mov	r5,zero
4102591c:	10000626 	beq	r2,zero,41025938 <__sfmoreglue+0x4c>
41025920:	11000304 	addi	r4,r2,12
41025924:	14800115 	stw	r18,4(r2)
41025928:	10000015 	stw	zero,0(r2)
4102592c:	11000215 	stw	r4,8(r2)
41025930:	1021883a 	mov	r16,r2
41025934:	1026ffc0 	call	41026ffc <memset>
41025938:	8005883a 	mov	r2,r16
4102593c:	dfc00317 	ldw	ra,12(sp)
41025940:	dc800217 	ldw	r18,8(sp)
41025944:	dc400117 	ldw	r17,4(sp)
41025948:	dc000017 	ldw	r16,0(sp)
4102594c:	dec00404 	addi	sp,sp,16
41025950:	f800283a 	ret

41025954 <__sfp>:
41025954:	defffd04 	addi	sp,sp,-12
41025958:	009040f4 	movhi	r2,16643
4102595c:	10bedd04 	addi	r2,r2,-1164
41025960:	dc000015 	stw	r16,0(sp)
41025964:	14000017 	ldw	r16,0(r2)
41025968:	dc400115 	stw	r17,4(sp)
4102596c:	dfc00215 	stw	ra,8(sp)
41025970:	80800e17 	ldw	r2,56(r16)
41025974:	2023883a 	mov	r17,r4
41025978:	10002626 	beq	r2,zero,41025a14 <__sfp+0xc0>
4102597c:	8400b804 	addi	r16,r16,736
41025980:	80800117 	ldw	r2,4(r16)
41025984:	81000217 	ldw	r4,8(r16)
41025988:	10ffffc4 	addi	r3,r2,-1
4102598c:	18000916 	blt	r3,zero,410259b4 <__sfp+0x60>
41025990:	2080030f 	ldh	r2,12(r4)
41025994:	10000b26 	beq	r2,zero,410259c4 <__sfp+0x70>
41025998:	017fffc4 	movi	r5,-1
4102599c:	00000206 	br	410259a8 <__sfp+0x54>
410259a0:	2080030f 	ldh	r2,12(r4)
410259a4:	10000726 	beq	r2,zero,410259c4 <__sfp+0x70>
410259a8:	18ffffc4 	addi	r3,r3,-1
410259ac:	21001704 	addi	r4,r4,92
410259b0:	197ffb1e 	bne	r3,r5,410259a0 <__sfp+0x4c>
410259b4:	80800017 	ldw	r2,0(r16)
410259b8:	10001926 	beq	r2,zero,41025a20 <__sfp+0xcc>
410259bc:	1021883a 	mov	r16,r2
410259c0:	003fef06 	br	41025980 <__sfp+0x2c>
410259c4:	00bfffc4 	movi	r2,-1
410259c8:	00c00044 	movi	r3,1
410259cc:	2080038d 	sth	r2,14(r4)
410259d0:	20c0030d 	sth	r3,12(r4)
410259d4:	20000015 	stw	zero,0(r4)
410259d8:	20000215 	stw	zero,8(r4)
410259dc:	20000115 	stw	zero,4(r4)
410259e0:	20000415 	stw	zero,16(r4)
410259e4:	20000515 	stw	zero,20(r4)
410259e8:	20000615 	stw	zero,24(r4)
410259ec:	20000c15 	stw	zero,48(r4)
410259f0:	20000d15 	stw	zero,52(r4)
410259f4:	20001115 	stw	zero,68(r4)
410259f8:	20001215 	stw	zero,72(r4)
410259fc:	2005883a 	mov	r2,r4
41025a00:	dfc00217 	ldw	ra,8(sp)
41025a04:	dc400117 	ldw	r17,4(sp)
41025a08:	dc000017 	ldw	r16,0(sp)
41025a0c:	dec00304 	addi	sp,sp,12
41025a10:	f800283a 	ret
41025a14:	8009883a 	mov	r4,r16
41025a18:	10257ec0 	call	410257ec <__sinit>
41025a1c:	003fd706 	br	4102597c <__sfp+0x28>
41025a20:	8809883a 	mov	r4,r17
41025a24:	01400104 	movi	r5,4
41025a28:	10258ec0 	call	410258ec <__sfmoreglue>
41025a2c:	80800015 	stw	r2,0(r16)
41025a30:	103fe21e 	bne	r2,zero,410259bc <__sfp+0x68>
41025a34:	00800304 	movi	r2,12
41025a38:	0009883a 	mov	r4,zero
41025a3c:	88800015 	stw	r2,0(r17)
41025a40:	003fee06 	br	410259fc <__sfp+0xa8>

41025a44 <_malloc_trim_r>:
41025a44:	defffb04 	addi	sp,sp,-20
41025a48:	dcc00315 	stw	r19,12(sp)
41025a4c:	04d040f4 	movhi	r19,16643
41025a50:	9cf95804 	addi	r19,r19,-6816
41025a54:	dc800215 	stw	r18,8(sp)
41025a58:	dc400115 	stw	r17,4(sp)
41025a5c:	dc000015 	stw	r16,0(sp)
41025a60:	2823883a 	mov	r17,r5
41025a64:	2025883a 	mov	r18,r4
41025a68:	dfc00415 	stw	ra,16(sp)
41025a6c:	102b6a00 	call	4102b6a0 <__malloc_lock>
41025a70:	98800217 	ldw	r2,8(r19)
41025a74:	9009883a 	mov	r4,r18
41025a78:	000b883a 	mov	r5,zero
41025a7c:	10c00117 	ldw	r3,4(r2)
41025a80:	00bfff04 	movi	r2,-4
41025a84:	18a0703a 	and	r16,r3,r2
41025a88:	8463c83a 	sub	r17,r16,r17
41025a8c:	8c43fbc4 	addi	r17,r17,4079
41025a90:	8822d33a 	srli	r17,r17,12
41025a94:	0083ffc4 	movi	r2,4095
41025a98:	8c7fffc4 	addi	r17,r17,-1
41025a9c:	8822933a 	slli	r17,r17,12
41025aa0:	1440060e 	bge	r2,r17,41025abc <_malloc_trim_r+0x78>
41025aa4:	10288d80 	call	410288d8 <_sbrk_r>
41025aa8:	98c00217 	ldw	r3,8(r19)
41025aac:	9009883a 	mov	r4,r18
41025ab0:	044bc83a 	sub	r5,zero,r17
41025ab4:	80c7883a 	add	r3,r16,r3
41025ab8:	10c00926 	beq	r2,r3,41025ae0 <_malloc_trim_r+0x9c>
41025abc:	102b6c00 	call	4102b6c0 <__malloc_unlock>
41025ac0:	0005883a 	mov	r2,zero
41025ac4:	dfc00417 	ldw	ra,16(sp)
41025ac8:	dcc00317 	ldw	r19,12(sp)
41025acc:	dc800217 	ldw	r18,8(sp)
41025ad0:	dc400117 	ldw	r17,4(sp)
41025ad4:	dc000017 	ldw	r16,0(sp)
41025ad8:	dec00504 	addi	sp,sp,20
41025adc:	f800283a 	ret
41025ae0:	9009883a 	mov	r4,r18
41025ae4:	10288d80 	call	410288d8 <_sbrk_r>
41025ae8:	844dc83a 	sub	r6,r16,r17
41025aec:	00ffffc4 	movi	r3,-1
41025af0:	9009883a 	mov	r4,r18
41025af4:	000b883a 	mov	r5,zero
41025af8:	01d040f4 	movhi	r7,16643
41025afc:	39c59004 	addi	r7,r7,5696
41025b00:	31800054 	ori	r6,r6,1
41025b04:	10c00926 	beq	r2,r3,41025b2c <_malloc_trim_r+0xe8>
41025b08:	38800017 	ldw	r2,0(r7)
41025b0c:	98c00217 	ldw	r3,8(r19)
41025b10:	9009883a 	mov	r4,r18
41025b14:	1445c83a 	sub	r2,r2,r17
41025b18:	38800015 	stw	r2,0(r7)
41025b1c:	19800115 	stw	r6,4(r3)
41025b20:	102b6c00 	call	4102b6c0 <__malloc_unlock>
41025b24:	00800044 	movi	r2,1
41025b28:	003fe606 	br	41025ac4 <_malloc_trim_r+0x80>
41025b2c:	10288d80 	call	410288d8 <_sbrk_r>
41025b30:	99800217 	ldw	r6,8(r19)
41025b34:	100f883a 	mov	r7,r2
41025b38:	9009883a 	mov	r4,r18
41025b3c:	1187c83a 	sub	r3,r2,r6
41025b40:	008003c4 	movi	r2,15
41025b44:	19400054 	ori	r5,r3,1
41025b48:	10ffdc0e 	bge	r2,r3,41025abc <_malloc_trim_r+0x78>
41025b4c:	009040f4 	movhi	r2,16643
41025b50:	10bee104 	addi	r2,r2,-1148
41025b54:	10c00017 	ldw	r3,0(r2)
41025b58:	009040f4 	movhi	r2,16643
41025b5c:	10859004 	addi	r2,r2,5696
41025b60:	31400115 	stw	r5,4(r6)
41025b64:	38c7c83a 	sub	r3,r7,r3
41025b68:	10c00015 	stw	r3,0(r2)
41025b6c:	003fd306 	br	41025abc <_malloc_trim_r+0x78>

41025b70 <_free_r>:
41025b70:	defffd04 	addi	sp,sp,-12
41025b74:	dc400115 	stw	r17,4(sp)
41025b78:	dc000015 	stw	r16,0(sp)
41025b7c:	dfc00215 	stw	ra,8(sp)
41025b80:	2821883a 	mov	r16,r5
41025b84:	2023883a 	mov	r17,r4
41025b88:	28005a26 	beq	r5,zero,41025cf4 <_free_r+0x184>
41025b8c:	102b6a00 	call	4102b6a0 <__malloc_lock>
41025b90:	823ffe04 	addi	r8,r16,-8
41025b94:	41400117 	ldw	r5,4(r8)
41025b98:	00bfff84 	movi	r2,-2
41025b9c:	029040f4 	movhi	r10,16643
41025ba0:	52b95804 	addi	r10,r10,-6816
41025ba4:	288e703a 	and	r7,r5,r2
41025ba8:	41cd883a 	add	r6,r8,r7
41025bac:	30c00117 	ldw	r3,4(r6)
41025bb0:	51000217 	ldw	r4,8(r10)
41025bb4:	00bfff04 	movi	r2,-4
41025bb8:	1892703a 	and	r9,r3,r2
41025bbc:	5017883a 	mov	r11,r10
41025bc0:	31006726 	beq	r6,r4,41025d60 <_free_r+0x1f0>
41025bc4:	2880004c 	andi	r2,r5,1
41025bc8:	1005003a 	cmpeq	r2,r2,zero
41025bcc:	32400115 	stw	r9,4(r6)
41025bd0:	10001a1e 	bne	r2,zero,41025c3c <_free_r+0xcc>
41025bd4:	000b883a 	mov	r5,zero
41025bd8:	3247883a 	add	r3,r6,r9
41025bdc:	18800117 	ldw	r2,4(r3)
41025be0:	1080004c 	andi	r2,r2,1
41025be4:	1000231e 	bne	r2,zero,41025c74 <_free_r+0x104>
41025be8:	280ac03a 	cmpne	r5,r5,zero
41025bec:	3a4f883a 	add	r7,r7,r9
41025bf0:	2800451e 	bne	r5,zero,41025d08 <_free_r+0x198>
41025bf4:	31000217 	ldw	r4,8(r6)
41025bf8:	009040f4 	movhi	r2,16643
41025bfc:	10b95a04 	addi	r2,r2,-6808
41025c00:	20807b26 	beq	r4,r2,41025df0 <_free_r+0x280>
41025c04:	30800317 	ldw	r2,12(r6)
41025c08:	3a07883a 	add	r3,r7,r8
41025c0c:	19c00015 	stw	r7,0(r3)
41025c10:	11000215 	stw	r4,8(r2)
41025c14:	20800315 	stw	r2,12(r4)
41025c18:	38800054 	ori	r2,r7,1
41025c1c:	40800115 	stw	r2,4(r8)
41025c20:	28001a26 	beq	r5,zero,41025c8c <_free_r+0x11c>
41025c24:	8809883a 	mov	r4,r17
41025c28:	dfc00217 	ldw	ra,8(sp)
41025c2c:	dc400117 	ldw	r17,4(sp)
41025c30:	dc000017 	ldw	r16,0(sp)
41025c34:	dec00304 	addi	sp,sp,12
41025c38:	102b6c01 	jmpi	4102b6c0 <__malloc_unlock>
41025c3c:	80bffe17 	ldw	r2,-8(r16)
41025c40:	50c00204 	addi	r3,r10,8
41025c44:	4091c83a 	sub	r8,r8,r2
41025c48:	41000217 	ldw	r4,8(r8)
41025c4c:	388f883a 	add	r7,r7,r2
41025c50:	20c06126 	beq	r4,r3,41025dd8 <_free_r+0x268>
41025c54:	40800317 	ldw	r2,12(r8)
41025c58:	3247883a 	add	r3,r6,r9
41025c5c:	000b883a 	mov	r5,zero
41025c60:	11000215 	stw	r4,8(r2)
41025c64:	20800315 	stw	r2,12(r4)
41025c68:	18800117 	ldw	r2,4(r3)
41025c6c:	1080004c 	andi	r2,r2,1
41025c70:	103fdd26 	beq	r2,zero,41025be8 <_free_r+0x78>
41025c74:	38800054 	ori	r2,r7,1
41025c78:	3a07883a 	add	r3,r7,r8
41025c7c:	280ac03a 	cmpne	r5,r5,zero
41025c80:	40800115 	stw	r2,4(r8)
41025c84:	19c00015 	stw	r7,0(r3)
41025c88:	283fe61e 	bne	r5,zero,41025c24 <_free_r+0xb4>
41025c8c:	00807fc4 	movi	r2,511
41025c90:	11c01f2e 	bgeu	r2,r7,41025d10 <_free_r+0x1a0>
41025c94:	3806d27a 	srli	r3,r7,9
41025c98:	1800481e 	bne	r3,zero,41025dbc <_free_r+0x24c>
41025c9c:	3804d0fa 	srli	r2,r7,3
41025ca0:	100690fa 	slli	r3,r2,3
41025ca4:	1acd883a 	add	r6,r3,r11
41025ca8:	31400217 	ldw	r5,8(r6)
41025cac:	31405926 	beq	r6,r5,41025e14 <_free_r+0x2a4>
41025cb0:	28800117 	ldw	r2,4(r5)
41025cb4:	00ffff04 	movi	r3,-4
41025cb8:	10c4703a 	and	r2,r2,r3
41025cbc:	3880022e 	bgeu	r7,r2,41025cc8 <_free_r+0x158>
41025cc0:	29400217 	ldw	r5,8(r5)
41025cc4:	317ffa1e 	bne	r6,r5,41025cb0 <_free_r+0x140>
41025cc8:	29800317 	ldw	r6,12(r5)
41025ccc:	41800315 	stw	r6,12(r8)
41025cd0:	41400215 	stw	r5,8(r8)
41025cd4:	8809883a 	mov	r4,r17
41025cd8:	2a000315 	stw	r8,12(r5)
41025cdc:	32000215 	stw	r8,8(r6)
41025ce0:	dfc00217 	ldw	ra,8(sp)
41025ce4:	dc400117 	ldw	r17,4(sp)
41025ce8:	dc000017 	ldw	r16,0(sp)
41025cec:	dec00304 	addi	sp,sp,12
41025cf0:	102b6c01 	jmpi	4102b6c0 <__malloc_unlock>
41025cf4:	dfc00217 	ldw	ra,8(sp)
41025cf8:	dc400117 	ldw	r17,4(sp)
41025cfc:	dc000017 	ldw	r16,0(sp)
41025d00:	dec00304 	addi	sp,sp,12
41025d04:	f800283a 	ret
41025d08:	31000217 	ldw	r4,8(r6)
41025d0c:	003fbd06 	br	41025c04 <_free_r+0x94>
41025d10:	3806d0fa 	srli	r3,r7,3
41025d14:	00800044 	movi	r2,1
41025d18:	51400117 	ldw	r5,4(r10)
41025d1c:	180890fa 	slli	r4,r3,3
41025d20:	1807d0ba 	srai	r3,r3,2
41025d24:	22c9883a 	add	r4,r4,r11
41025d28:	21800217 	ldw	r6,8(r4)
41025d2c:	10c4983a 	sll	r2,r2,r3
41025d30:	41000315 	stw	r4,12(r8)
41025d34:	41800215 	stw	r6,8(r8)
41025d38:	288ab03a 	or	r5,r5,r2
41025d3c:	22000215 	stw	r8,8(r4)
41025d40:	8809883a 	mov	r4,r17
41025d44:	51400115 	stw	r5,4(r10)
41025d48:	32000315 	stw	r8,12(r6)
41025d4c:	dfc00217 	ldw	ra,8(sp)
41025d50:	dc400117 	ldw	r17,4(sp)
41025d54:	dc000017 	ldw	r16,0(sp)
41025d58:	dec00304 	addi	sp,sp,12
41025d5c:	102b6c01 	jmpi	4102b6c0 <__malloc_unlock>
41025d60:	2880004c 	andi	r2,r5,1
41025d64:	3a4d883a 	add	r6,r7,r9
41025d68:	1000071e 	bne	r2,zero,41025d88 <_free_r+0x218>
41025d6c:	80bffe17 	ldw	r2,-8(r16)
41025d70:	4091c83a 	sub	r8,r8,r2
41025d74:	41000317 	ldw	r4,12(r8)
41025d78:	40c00217 	ldw	r3,8(r8)
41025d7c:	308d883a 	add	r6,r6,r2
41025d80:	20c00215 	stw	r3,8(r4)
41025d84:	19000315 	stw	r4,12(r3)
41025d88:	009040f4 	movhi	r2,16643
41025d8c:	10bee004 	addi	r2,r2,-1152
41025d90:	11000017 	ldw	r4,0(r2)
41025d94:	30c00054 	ori	r3,r6,1
41025d98:	52000215 	stw	r8,8(r10)
41025d9c:	40c00115 	stw	r3,4(r8)
41025da0:	313fa036 	bltu	r6,r4,41025c24 <_free_r+0xb4>
41025da4:	009040f4 	movhi	r2,16643
41025da8:	10858604 	addi	r2,r2,5656
41025dac:	11400017 	ldw	r5,0(r2)
41025db0:	8809883a 	mov	r4,r17
41025db4:	1025a440 	call	41025a44 <_malloc_trim_r>
41025db8:	003f9a06 	br	41025c24 <_free_r+0xb4>
41025dbc:	00800104 	movi	r2,4
41025dc0:	10c0072e 	bgeu	r2,r3,41025de0 <_free_r+0x270>
41025dc4:	00800504 	movi	r2,20
41025dc8:	10c01936 	bltu	r2,r3,41025e30 <_free_r+0x2c0>
41025dcc:	188016c4 	addi	r2,r3,91
41025dd0:	100690fa 	slli	r3,r2,3
41025dd4:	003fb306 	br	41025ca4 <_free_r+0x134>
41025dd8:	01400044 	movi	r5,1
41025ddc:	003f7e06 	br	41025bd8 <_free_r+0x68>
41025de0:	3804d1ba 	srli	r2,r7,6
41025de4:	10800e04 	addi	r2,r2,56
41025de8:	100690fa 	slli	r3,r2,3
41025dec:	003fad06 	br	41025ca4 <_free_r+0x134>
41025df0:	22000315 	stw	r8,12(r4)
41025df4:	22000215 	stw	r8,8(r4)
41025df8:	3a05883a 	add	r2,r7,r8
41025dfc:	38c00054 	ori	r3,r7,1
41025e00:	11c00015 	stw	r7,0(r2)
41025e04:	41000215 	stw	r4,8(r8)
41025e08:	40c00115 	stw	r3,4(r8)
41025e0c:	41000315 	stw	r4,12(r8)
41025e10:	003f8406 	br	41025c24 <_free_r+0xb4>
41025e14:	1005d0ba 	srai	r2,r2,2
41025e18:	00c00044 	movi	r3,1
41025e1c:	51000117 	ldw	r4,4(r10)
41025e20:	1886983a 	sll	r3,r3,r2
41025e24:	20c8b03a 	or	r4,r4,r3
41025e28:	51000115 	stw	r4,4(r10)
41025e2c:	003fa706 	br	41025ccc <_free_r+0x15c>
41025e30:	00801504 	movi	r2,84
41025e34:	10c00436 	bltu	r2,r3,41025e48 <_free_r+0x2d8>
41025e38:	3804d33a 	srli	r2,r7,12
41025e3c:	10801b84 	addi	r2,r2,110
41025e40:	100690fa 	slli	r3,r2,3
41025e44:	003f9706 	br	41025ca4 <_free_r+0x134>
41025e48:	00805504 	movi	r2,340
41025e4c:	10c00436 	bltu	r2,r3,41025e60 <_free_r+0x2f0>
41025e50:	3804d3fa 	srli	r2,r7,15
41025e54:	10801dc4 	addi	r2,r2,119
41025e58:	100690fa 	slli	r3,r2,3
41025e5c:	003f9106 	br	41025ca4 <_free_r+0x134>
41025e60:	00815504 	movi	r2,1364
41025e64:	10c0032e 	bgeu	r2,r3,41025e74 <_free_r+0x304>
41025e68:	00801f84 	movi	r2,126
41025e6c:	00c0fc04 	movi	r3,1008
41025e70:	003f8c06 	br	41025ca4 <_free_r+0x134>
41025e74:	3804d4ba 	srli	r2,r7,18
41025e78:	10801f04 	addi	r2,r2,124
41025e7c:	100690fa 	slli	r3,r2,3
41025e80:	003f8806 	br	41025ca4 <_free_r+0x134>

41025e84 <__sfvwrite_r>:
41025e84:	30800217 	ldw	r2,8(r6)
41025e88:	defff504 	addi	sp,sp,-44
41025e8c:	df000915 	stw	fp,36(sp)
41025e90:	dd800715 	stw	r22,28(sp)
41025e94:	dc800315 	stw	r18,12(sp)
41025e98:	dfc00a15 	stw	ra,40(sp)
41025e9c:	ddc00815 	stw	r23,32(sp)
41025ea0:	dd400615 	stw	r21,24(sp)
41025ea4:	dd000515 	stw	r20,20(sp)
41025ea8:	dcc00415 	stw	r19,16(sp)
41025eac:	dc400215 	stw	r17,8(sp)
41025eb0:	dc000115 	stw	r16,4(sp)
41025eb4:	302d883a 	mov	r22,r6
41025eb8:	2039883a 	mov	fp,r4
41025ebc:	2825883a 	mov	r18,r5
41025ec0:	10001c26 	beq	r2,zero,41025f34 <__sfvwrite_r+0xb0>
41025ec4:	29c0030b 	ldhu	r7,12(r5)
41025ec8:	3880020c 	andi	r2,r7,8
41025ecc:	10002726 	beq	r2,zero,41025f6c <__sfvwrite_r+0xe8>
41025ed0:	28800417 	ldw	r2,16(r5)
41025ed4:	10002526 	beq	r2,zero,41025f6c <__sfvwrite_r+0xe8>
41025ed8:	3880008c 	andi	r2,r7,2
41025edc:	b5400017 	ldw	r21,0(r22)
41025ee0:	10002826 	beq	r2,zero,41025f84 <__sfvwrite_r+0x100>
41025ee4:	0021883a 	mov	r16,zero
41025ee8:	0023883a 	mov	r17,zero
41025eec:	880d883a 	mov	r6,r17
41025ef0:	e009883a 	mov	r4,fp
41025ef4:	00810004 	movi	r2,1024
41025ef8:	80006e26 	beq	r16,zero,410260b4 <__sfvwrite_r+0x230>
41025efc:	800f883a 	mov	r7,r16
41025f00:	91400717 	ldw	r5,28(r18)
41025f04:	1400012e 	bgeu	r2,r16,41025f0c <__sfvwrite_r+0x88>
41025f08:	100f883a 	mov	r7,r2
41025f0c:	90c00917 	ldw	r3,36(r18)
41025f10:	183ee83a 	callr	r3
41025f14:	1007883a 	mov	r3,r2
41025f18:	80a1c83a 	sub	r16,r16,r2
41025f1c:	88a3883a 	add	r17,r17,r2
41025f20:	00806d0e 	bge	zero,r2,410260d8 <__sfvwrite_r+0x254>
41025f24:	b0800217 	ldw	r2,8(r22)
41025f28:	10c5c83a 	sub	r2,r2,r3
41025f2c:	b0800215 	stw	r2,8(r22)
41025f30:	103fee1e 	bne	r2,zero,41025eec <__sfvwrite_r+0x68>
41025f34:	0009883a 	mov	r4,zero
41025f38:	2005883a 	mov	r2,r4
41025f3c:	dfc00a17 	ldw	ra,40(sp)
41025f40:	df000917 	ldw	fp,36(sp)
41025f44:	ddc00817 	ldw	r23,32(sp)
41025f48:	dd800717 	ldw	r22,28(sp)
41025f4c:	dd400617 	ldw	r21,24(sp)
41025f50:	dd000517 	ldw	r20,20(sp)
41025f54:	dcc00417 	ldw	r19,16(sp)
41025f58:	dc800317 	ldw	r18,12(sp)
41025f5c:	dc400217 	ldw	r17,8(sp)
41025f60:	dc000117 	ldw	r16,4(sp)
41025f64:	dec00b04 	addi	sp,sp,44
41025f68:	f800283a 	ret
41025f6c:	1023c4c0 	call	41023c4c <__swsetup_r>
41025f70:	1000e41e 	bne	r2,zero,41026304 <__sfvwrite_r+0x480>
41025f74:	91c0030b 	ldhu	r7,12(r18)
41025f78:	b5400017 	ldw	r21,0(r22)
41025f7c:	3880008c 	andi	r2,r7,2
41025f80:	103fd81e 	bne	r2,zero,41025ee4 <__sfvwrite_r+0x60>
41025f84:	3880004c 	andi	r2,r7,1
41025f88:	1005003a 	cmpeq	r2,r2,zero
41025f8c:	10005726 	beq	r2,zero,410260ec <__sfvwrite_r+0x268>
41025f90:	0029883a 	mov	r20,zero
41025f94:	002f883a 	mov	r23,zero
41025f98:	a0004226 	beq	r20,zero,410260a4 <__sfvwrite_r+0x220>
41025f9c:	3880800c 	andi	r2,r7,512
41025fa0:	94000217 	ldw	r16,8(r18)
41025fa4:	10008b26 	beq	r2,zero,410261d4 <__sfvwrite_r+0x350>
41025fa8:	800d883a 	mov	r6,r16
41025fac:	a400a536 	bltu	r20,r16,41026244 <__sfvwrite_r+0x3c0>
41025fb0:	3881200c 	andi	r2,r7,1152
41025fb4:	10002726 	beq	r2,zero,41026054 <__sfvwrite_r+0x1d0>
41025fb8:	90800517 	ldw	r2,20(r18)
41025fbc:	92000417 	ldw	r8,16(r18)
41025fc0:	91400017 	ldw	r5,0(r18)
41025fc4:	1087883a 	add	r3,r2,r2
41025fc8:	1887883a 	add	r3,r3,r2
41025fcc:	1808d7fa 	srli	r4,r3,31
41025fd0:	2a21c83a 	sub	r16,r5,r8
41025fd4:	80800044 	addi	r2,r16,1
41025fd8:	20c9883a 	add	r4,r4,r3
41025fdc:	2027d07a 	srai	r19,r4,1
41025fe0:	a085883a 	add	r2,r20,r2
41025fe4:	980d883a 	mov	r6,r19
41025fe8:	9880022e 	bgeu	r19,r2,41025ff4 <__sfvwrite_r+0x170>
41025fec:	1027883a 	mov	r19,r2
41025ff0:	100d883a 	mov	r6,r2
41025ff4:	3881000c 	andi	r2,r7,1024
41025ff8:	1000b826 	beq	r2,zero,410262dc <__sfvwrite_r+0x458>
41025ffc:	300b883a 	mov	r5,r6
41026000:	e009883a 	mov	r4,fp
41026004:	10266f80 	call	410266f8 <_malloc_r>
41026008:	10003126 	beq	r2,zero,410260d0 <__sfvwrite_r+0x24c>
4102600c:	91400417 	ldw	r5,16(r18)
41026010:	1009883a 	mov	r4,r2
41026014:	800d883a 	mov	r6,r16
41026018:	1023883a 	mov	r17,r2
4102601c:	1021ac00 	call	41021ac0 <memcpy>
41026020:	90c0030b 	ldhu	r3,12(r18)
41026024:	00beffc4 	movi	r2,-1025
41026028:	1886703a 	and	r3,r3,r2
4102602c:	18c02014 	ori	r3,r3,128
41026030:	90c0030d 	sth	r3,12(r18)
41026034:	9c07c83a 	sub	r3,r19,r16
41026038:	8c05883a 	add	r2,r17,r16
4102603c:	a00d883a 	mov	r6,r20
41026040:	a021883a 	mov	r16,r20
41026044:	90800015 	stw	r2,0(r18)
41026048:	90c00215 	stw	r3,8(r18)
4102604c:	94400415 	stw	r17,16(r18)
41026050:	94c00515 	stw	r19,20(r18)
41026054:	91000017 	ldw	r4,0(r18)
41026058:	b80b883a 	mov	r5,r23
4102605c:	a023883a 	mov	r17,r20
41026060:	1026f1c0 	call	41026f1c <memmove>
41026064:	90c00217 	ldw	r3,8(r18)
41026068:	90800017 	ldw	r2,0(r18)
4102606c:	a027883a 	mov	r19,r20
41026070:	1c07c83a 	sub	r3,r3,r16
41026074:	1405883a 	add	r2,r2,r16
41026078:	90c00215 	stw	r3,8(r18)
4102607c:	a021883a 	mov	r16,r20
41026080:	90800015 	stw	r2,0(r18)
41026084:	b0800217 	ldw	r2,8(r22)
41026088:	1405c83a 	sub	r2,r2,r16
4102608c:	b0800215 	stw	r2,8(r22)
41026090:	103fa826 	beq	r2,zero,41025f34 <__sfvwrite_r+0xb0>
41026094:	a469c83a 	sub	r20,r20,r17
41026098:	91c0030b 	ldhu	r7,12(r18)
4102609c:	bcef883a 	add	r23,r23,r19
410260a0:	a03fbe1e 	bne	r20,zero,41025f9c <__sfvwrite_r+0x118>
410260a4:	adc00017 	ldw	r23,0(r21)
410260a8:	ad000117 	ldw	r20,4(r21)
410260ac:	ad400204 	addi	r21,r21,8
410260b0:	003fb906 	br	41025f98 <__sfvwrite_r+0x114>
410260b4:	ac400017 	ldw	r17,0(r21)
410260b8:	ac000117 	ldw	r16,4(r21)
410260bc:	ad400204 	addi	r21,r21,8
410260c0:	003f8a06 	br	41025eec <__sfvwrite_r+0x68>
410260c4:	91400417 	ldw	r5,16(r18)
410260c8:	e009883a 	mov	r4,fp
410260cc:	1025b700 	call	41025b70 <_free_r>
410260d0:	00800304 	movi	r2,12
410260d4:	e0800015 	stw	r2,0(fp)
410260d8:	9080030b 	ldhu	r2,12(r18)
410260dc:	013fffc4 	movi	r4,-1
410260e0:	10801014 	ori	r2,r2,64
410260e4:	9080030d 	sth	r2,12(r18)
410260e8:	003f9306 	br	41025f38 <__sfvwrite_r+0xb4>
410260ec:	0027883a 	mov	r19,zero
410260f0:	002f883a 	mov	r23,zero
410260f4:	d8000015 	stw	zero,0(sp)
410260f8:	0029883a 	mov	r20,zero
410260fc:	98001e26 	beq	r19,zero,41026178 <__sfvwrite_r+0x2f4>
41026100:	d8c00017 	ldw	r3,0(sp)
41026104:	1804c03a 	cmpne	r2,r3,zero
41026108:	10005e26 	beq	r2,zero,41026284 <__sfvwrite_r+0x400>
4102610c:	9821883a 	mov	r16,r19
41026110:	a4c0012e 	bgeu	r20,r19,41026118 <__sfvwrite_r+0x294>
41026114:	a021883a 	mov	r16,r20
41026118:	91000017 	ldw	r4,0(r18)
4102611c:	90800417 	ldw	r2,16(r18)
41026120:	91800217 	ldw	r6,8(r18)
41026124:	91c00517 	ldw	r7,20(r18)
41026128:	1100022e 	bgeu	r2,r4,41026134 <__sfvwrite_r+0x2b0>
4102612c:	31e3883a 	add	r17,r6,r7
41026130:	8c001616 	blt	r17,r16,4102618c <__sfvwrite_r+0x308>
41026134:	81c03816 	blt	r16,r7,41026218 <__sfvwrite_r+0x394>
41026138:	90c00917 	ldw	r3,36(r18)
4102613c:	91400717 	ldw	r5,28(r18)
41026140:	e009883a 	mov	r4,fp
41026144:	b80d883a 	mov	r6,r23
41026148:	183ee83a 	callr	r3
4102614c:	1023883a 	mov	r17,r2
41026150:	00bfe10e 	bge	zero,r2,410260d8 <__sfvwrite_r+0x254>
41026154:	a469c83a 	sub	r20,r20,r17
41026158:	a0001826 	beq	r20,zero,410261bc <__sfvwrite_r+0x338>
4102615c:	b0800217 	ldw	r2,8(r22)
41026160:	1445c83a 	sub	r2,r2,r17
41026164:	b0800215 	stw	r2,8(r22)
41026168:	103f7226 	beq	r2,zero,41025f34 <__sfvwrite_r+0xb0>
4102616c:	9c67c83a 	sub	r19,r19,r17
41026170:	bc6f883a 	add	r23,r23,r17
41026174:	983fe21e 	bne	r19,zero,41026100 <__sfvwrite_r+0x27c>
41026178:	adc00017 	ldw	r23,0(r21)
4102617c:	acc00117 	ldw	r19,4(r21)
41026180:	ad400204 	addi	r21,r21,8
41026184:	d8000015 	stw	zero,0(sp)
41026188:	003fdc06 	br	410260fc <__sfvwrite_r+0x278>
4102618c:	b80b883a 	mov	r5,r23
41026190:	880d883a 	mov	r6,r17
41026194:	1026f1c0 	call	41026f1c <memmove>
41026198:	90c00017 	ldw	r3,0(r18)
4102619c:	e009883a 	mov	r4,fp
410261a0:	900b883a 	mov	r5,r18
410261a4:	1c47883a 	add	r3,r3,r17
410261a8:	90c00015 	stw	r3,0(r18)
410261ac:	10255540 	call	41025554 <_fflush_r>
410261b0:	103fc91e 	bne	r2,zero,410260d8 <__sfvwrite_r+0x254>
410261b4:	a469c83a 	sub	r20,r20,r17
410261b8:	a03fe81e 	bne	r20,zero,4102615c <__sfvwrite_r+0x2d8>
410261bc:	e009883a 	mov	r4,fp
410261c0:	900b883a 	mov	r5,r18
410261c4:	10255540 	call	41025554 <_fflush_r>
410261c8:	103fc31e 	bne	r2,zero,410260d8 <__sfvwrite_r+0x254>
410261cc:	d8000015 	stw	zero,0(sp)
410261d0:	003fe206 	br	4102615c <__sfvwrite_r+0x2d8>
410261d4:	91000017 	ldw	r4,0(r18)
410261d8:	90800417 	ldw	r2,16(r18)
410261dc:	1100022e 	bgeu	r2,r4,410261e8 <__sfvwrite_r+0x364>
410261e0:	8023883a 	mov	r17,r16
410261e4:	85003136 	bltu	r16,r20,410262ac <__sfvwrite_r+0x428>
410261e8:	91c00517 	ldw	r7,20(r18)
410261ec:	a1c01836 	bltu	r20,r7,41026250 <__sfvwrite_r+0x3cc>
410261f0:	90c00917 	ldw	r3,36(r18)
410261f4:	91400717 	ldw	r5,28(r18)
410261f8:	e009883a 	mov	r4,fp
410261fc:	b80d883a 	mov	r6,r23
41026200:	183ee83a 	callr	r3
41026204:	1021883a 	mov	r16,r2
41026208:	00bfb30e 	bge	zero,r2,410260d8 <__sfvwrite_r+0x254>
4102620c:	1023883a 	mov	r17,r2
41026210:	1027883a 	mov	r19,r2
41026214:	003f9b06 	br	41026084 <__sfvwrite_r+0x200>
41026218:	b80b883a 	mov	r5,r23
4102621c:	800d883a 	mov	r6,r16
41026220:	1026f1c0 	call	41026f1c <memmove>
41026224:	90c00217 	ldw	r3,8(r18)
41026228:	90800017 	ldw	r2,0(r18)
4102622c:	8023883a 	mov	r17,r16
41026230:	1c07c83a 	sub	r3,r3,r16
41026234:	1405883a 	add	r2,r2,r16
41026238:	90c00215 	stw	r3,8(r18)
4102623c:	90800015 	stw	r2,0(r18)
41026240:	003fc406 	br	41026154 <__sfvwrite_r+0x2d0>
41026244:	a00d883a 	mov	r6,r20
41026248:	a021883a 	mov	r16,r20
4102624c:	003f8106 	br	41026054 <__sfvwrite_r+0x1d0>
41026250:	b80b883a 	mov	r5,r23
41026254:	a00d883a 	mov	r6,r20
41026258:	1026f1c0 	call	41026f1c <memmove>
4102625c:	90c00217 	ldw	r3,8(r18)
41026260:	90800017 	ldw	r2,0(r18)
41026264:	a021883a 	mov	r16,r20
41026268:	1d07c83a 	sub	r3,r3,r20
4102626c:	1505883a 	add	r2,r2,r20
41026270:	a023883a 	mov	r17,r20
41026274:	a027883a 	mov	r19,r20
41026278:	90c00215 	stw	r3,8(r18)
4102627c:	90800015 	stw	r2,0(r18)
41026280:	003f8006 	br	41026084 <__sfvwrite_r+0x200>
41026284:	b809883a 	mov	r4,r23
41026288:	01400284 	movi	r5,10
4102628c:	980d883a 	mov	r6,r19
41026290:	1026e380 	call	41026e38 <memchr>
41026294:	10001726 	beq	r2,zero,410262f4 <__sfvwrite_r+0x470>
41026298:	15c5c83a 	sub	r2,r2,r23
4102629c:	15000044 	addi	r20,r2,1
410262a0:	00800044 	movi	r2,1
410262a4:	d8800015 	stw	r2,0(sp)
410262a8:	003f9806 	br	4102610c <__sfvwrite_r+0x288>
410262ac:	b80b883a 	mov	r5,r23
410262b0:	800d883a 	mov	r6,r16
410262b4:	1026f1c0 	call	41026f1c <memmove>
410262b8:	90c00017 	ldw	r3,0(r18)
410262bc:	e009883a 	mov	r4,fp
410262c0:	900b883a 	mov	r5,r18
410262c4:	1c07883a 	add	r3,r3,r16
410262c8:	90c00015 	stw	r3,0(r18)
410262cc:	8027883a 	mov	r19,r16
410262d0:	10255540 	call	41025554 <_fflush_r>
410262d4:	103f6b26 	beq	r2,zero,41026084 <__sfvwrite_r+0x200>
410262d8:	003f7f06 	br	410260d8 <__sfvwrite_r+0x254>
410262dc:	400b883a 	mov	r5,r8
410262e0:	e009883a 	mov	r4,fp
410262e4:	10282740 	call	41028274 <_realloc_r>
410262e8:	103f7626 	beq	r2,zero,410260c4 <__sfvwrite_r+0x240>
410262ec:	1023883a 	mov	r17,r2
410262f0:	003f5006 	br	41026034 <__sfvwrite_r+0x1b0>
410262f4:	00c00044 	movi	r3,1
410262f8:	9d000044 	addi	r20,r19,1
410262fc:	d8c00015 	stw	r3,0(sp)
41026300:	003f8206 	br	4102610c <__sfvwrite_r+0x288>
41026304:	9080030b 	ldhu	r2,12(r18)
41026308:	00c00244 	movi	r3,9
4102630c:	013fffc4 	movi	r4,-1
41026310:	10801014 	ori	r2,r2,64
41026314:	9080030d 	sth	r2,12(r18)
41026318:	e0c00015 	stw	r3,0(fp)
4102631c:	003f0606 	br	41025f38 <__sfvwrite_r+0xb4>

41026320 <_fwalk_reent>:
41026320:	defff704 	addi	sp,sp,-36
41026324:	dcc00315 	stw	r19,12(sp)
41026328:	24c0b804 	addi	r19,r4,736
4102632c:	dd800615 	stw	r22,24(sp)
41026330:	dd400515 	stw	r21,20(sp)
41026334:	dfc00815 	stw	ra,32(sp)
41026338:	ddc00715 	stw	r23,28(sp)
4102633c:	dd000415 	stw	r20,16(sp)
41026340:	dc800215 	stw	r18,8(sp)
41026344:	dc400115 	stw	r17,4(sp)
41026348:	dc000015 	stw	r16,0(sp)
4102634c:	202b883a 	mov	r21,r4
41026350:	282d883a 	mov	r22,r5
41026354:	10257dc0 	call	410257dc <__sfp_lock_acquire>
41026358:	98002126 	beq	r19,zero,410263e0 <_fwalk_reent+0xc0>
4102635c:	002f883a 	mov	r23,zero
41026360:	9c800117 	ldw	r18,4(r19)
41026364:	9c000217 	ldw	r16,8(r19)
41026368:	90bfffc4 	addi	r2,r18,-1
4102636c:	10000d16 	blt	r2,zero,410263a4 <_fwalk_reent+0x84>
41026370:	0023883a 	mov	r17,zero
41026374:	053fffc4 	movi	r20,-1
41026378:	8080030f 	ldh	r2,12(r16)
4102637c:	8c400044 	addi	r17,r17,1
41026380:	10000626 	beq	r2,zero,4102639c <_fwalk_reent+0x7c>
41026384:	8080038f 	ldh	r2,14(r16)
41026388:	800b883a 	mov	r5,r16
4102638c:	a809883a 	mov	r4,r21
41026390:	15000226 	beq	r2,r20,4102639c <_fwalk_reent+0x7c>
41026394:	b03ee83a 	callr	r22
41026398:	b8aeb03a 	or	r23,r23,r2
4102639c:	84001704 	addi	r16,r16,92
410263a0:	947ff51e 	bne	r18,r17,41026378 <_fwalk_reent+0x58>
410263a4:	9cc00017 	ldw	r19,0(r19)
410263a8:	983fed1e 	bne	r19,zero,41026360 <_fwalk_reent+0x40>
410263ac:	10257e00 	call	410257e0 <__sfp_lock_release>
410263b0:	b805883a 	mov	r2,r23
410263b4:	dfc00817 	ldw	ra,32(sp)
410263b8:	ddc00717 	ldw	r23,28(sp)
410263bc:	dd800617 	ldw	r22,24(sp)
410263c0:	dd400517 	ldw	r21,20(sp)
410263c4:	dd000417 	ldw	r20,16(sp)
410263c8:	dcc00317 	ldw	r19,12(sp)
410263cc:	dc800217 	ldw	r18,8(sp)
410263d0:	dc400117 	ldw	r17,4(sp)
410263d4:	dc000017 	ldw	r16,0(sp)
410263d8:	dec00904 	addi	sp,sp,36
410263dc:	f800283a 	ret
410263e0:	002f883a 	mov	r23,zero
410263e4:	003ff106 	br	410263ac <_fwalk_reent+0x8c>

410263e8 <_fwalk>:
410263e8:	defff804 	addi	sp,sp,-32
410263ec:	dcc00315 	stw	r19,12(sp)
410263f0:	24c0b804 	addi	r19,r4,736
410263f4:	dd400515 	stw	r21,20(sp)
410263f8:	dfc00715 	stw	ra,28(sp)
410263fc:	dd800615 	stw	r22,24(sp)
41026400:	dd000415 	stw	r20,16(sp)
41026404:	dc800215 	stw	r18,8(sp)
41026408:	dc400115 	stw	r17,4(sp)
4102640c:	dc000015 	stw	r16,0(sp)
41026410:	282b883a 	mov	r21,r5
41026414:	10257dc0 	call	410257dc <__sfp_lock_acquire>
41026418:	98001f26 	beq	r19,zero,41026498 <_fwalk+0xb0>
4102641c:	002d883a 	mov	r22,zero
41026420:	9c800117 	ldw	r18,4(r19)
41026424:	9c000217 	ldw	r16,8(r19)
41026428:	90bfffc4 	addi	r2,r18,-1
4102642c:	10000c16 	blt	r2,zero,41026460 <_fwalk+0x78>
41026430:	0023883a 	mov	r17,zero
41026434:	053fffc4 	movi	r20,-1
41026438:	8080030f 	ldh	r2,12(r16)
4102643c:	8c400044 	addi	r17,r17,1
41026440:	10000526 	beq	r2,zero,41026458 <_fwalk+0x70>
41026444:	8080038f 	ldh	r2,14(r16)
41026448:	8009883a 	mov	r4,r16
4102644c:	15000226 	beq	r2,r20,41026458 <_fwalk+0x70>
41026450:	a83ee83a 	callr	r21
41026454:	b0acb03a 	or	r22,r22,r2
41026458:	84001704 	addi	r16,r16,92
4102645c:	947ff61e 	bne	r18,r17,41026438 <_fwalk+0x50>
41026460:	9cc00017 	ldw	r19,0(r19)
41026464:	983fee1e 	bne	r19,zero,41026420 <_fwalk+0x38>
41026468:	10257e00 	call	410257e0 <__sfp_lock_release>
4102646c:	b005883a 	mov	r2,r22
41026470:	dfc00717 	ldw	ra,28(sp)
41026474:	dd800617 	ldw	r22,24(sp)
41026478:	dd400517 	ldw	r21,20(sp)
4102647c:	dd000417 	ldw	r20,16(sp)
41026480:	dcc00317 	ldw	r19,12(sp)
41026484:	dc800217 	ldw	r18,8(sp)
41026488:	dc400117 	ldw	r17,4(sp)
4102648c:	dc000017 	ldw	r16,0(sp)
41026490:	dec00804 	addi	sp,sp,32
41026494:	f800283a 	ret
41026498:	002d883a 	mov	r22,zero
4102649c:	003ff206 	br	41026468 <_fwalk+0x80>

410264a0 <__locale_charset>:
410264a0:	d0a00317 	ldw	r2,-32756(gp)
410264a4:	f800283a 	ret

410264a8 <_localeconv_r>:
410264a8:	009040f4 	movhi	r2,16643
410264ac:	10b7f004 	addi	r2,r2,-8256
410264b0:	f800283a 	ret

410264b4 <localeconv>:
410264b4:	009040f4 	movhi	r2,16643
410264b8:	10bedc04 	addi	r2,r2,-1168
410264bc:	11000017 	ldw	r4,0(r2)
410264c0:	10264a81 	jmpi	410264a8 <_localeconv_r>

410264c4 <_setlocale_r>:
410264c4:	defffc04 	addi	sp,sp,-16
410264c8:	00d040f4 	movhi	r3,16643
410264cc:	18f7eb04 	addi	r3,r3,-8276
410264d0:	dc800215 	stw	r18,8(sp)
410264d4:	dc400115 	stw	r17,4(sp)
410264d8:	dc000015 	stw	r16,0(sp)
410264dc:	2023883a 	mov	r17,r4
410264e0:	2825883a 	mov	r18,r5
410264e4:	dfc00315 	stw	ra,12(sp)
410264e8:	3021883a 	mov	r16,r6
410264ec:	3009883a 	mov	r4,r6
410264f0:	180b883a 	mov	r5,r3
410264f4:	30000926 	beq	r6,zero,4102651c <_setlocale_r+0x58>
410264f8:	1028a940 	call	41028a94 <strcmp>
410264fc:	8009883a 	mov	r4,r16
41026500:	015040f4 	movhi	r5,16643
41026504:	2977d604 	addi	r5,r5,-8360
41026508:	10000b1e 	bne	r2,zero,41026538 <_setlocale_r+0x74>
4102650c:	8c000d15 	stw	r16,52(r17)
41026510:	8c800c15 	stw	r18,48(r17)
41026514:	00d040f4 	movhi	r3,16643
41026518:	18f7eb04 	addi	r3,r3,-8276
4102651c:	1805883a 	mov	r2,r3
41026520:	dfc00317 	ldw	ra,12(sp)
41026524:	dc800217 	ldw	r18,8(sp)
41026528:	dc400117 	ldw	r17,4(sp)
4102652c:	dc000017 	ldw	r16,0(sp)
41026530:	dec00404 	addi	sp,sp,16
41026534:	f800283a 	ret
41026538:	1028a940 	call	41028a94 <strcmp>
4102653c:	0007883a 	mov	r3,zero
41026540:	103ff226 	beq	r2,zero,4102650c <_setlocale_r+0x48>
41026544:	003ff506 	br	4102651c <_setlocale_r+0x58>

41026548 <setlocale>:
41026548:	019040f4 	movhi	r6,16643
4102654c:	31bedc04 	addi	r6,r6,-1168
41026550:	2007883a 	mov	r3,r4
41026554:	31000017 	ldw	r4,0(r6)
41026558:	280d883a 	mov	r6,r5
4102655c:	180b883a 	mov	r5,r3
41026560:	10264c41 	jmpi	410264c4 <_setlocale_r>

41026564 <__smakebuf_r>:
41026564:	2880030b 	ldhu	r2,12(r5)
41026568:	deffed04 	addi	sp,sp,-76
4102656c:	dc401015 	stw	r17,64(sp)
41026570:	1080008c 	andi	r2,r2,2
41026574:	dc000f15 	stw	r16,60(sp)
41026578:	dfc01215 	stw	ra,72(sp)
4102657c:	dc801115 	stw	r18,68(sp)
41026580:	2821883a 	mov	r16,r5
41026584:	2023883a 	mov	r17,r4
41026588:	10000b26 	beq	r2,zero,410265b8 <__smakebuf_r+0x54>
4102658c:	28c010c4 	addi	r3,r5,67
41026590:	00800044 	movi	r2,1
41026594:	28800515 	stw	r2,20(r5)
41026598:	28c00415 	stw	r3,16(r5)
4102659c:	28c00015 	stw	r3,0(r5)
410265a0:	dfc01217 	ldw	ra,72(sp)
410265a4:	dc801117 	ldw	r18,68(sp)
410265a8:	dc401017 	ldw	r17,64(sp)
410265ac:	dc000f17 	ldw	r16,60(sp)
410265b0:	dec01304 	addi	sp,sp,76
410265b4:	f800283a 	ret
410265b8:	2940038f 	ldh	r5,14(r5)
410265bc:	28002116 	blt	r5,zero,41026644 <__smakebuf_r+0xe0>
410265c0:	d80d883a 	mov	r6,sp
410265c4:	1028f5c0 	call	41028f5c <_fstat_r>
410265c8:	10001e16 	blt	r2,zero,41026644 <__smakebuf_r+0xe0>
410265cc:	d8800117 	ldw	r2,4(sp)
410265d0:	00e00014 	movui	r3,32768
410265d4:	113c000c 	andi	r4,r2,61440
410265d8:	20c03126 	beq	r4,r3,410266a0 <__smakebuf_r+0x13c>
410265dc:	8080030b 	ldhu	r2,12(r16)
410265e0:	00c80004 	movi	r3,8192
410265e4:	10820014 	ori	r2,r2,2048
410265e8:	8080030d 	sth	r2,12(r16)
410265ec:	20c01e26 	beq	r4,r3,41026668 <__smakebuf_r+0x104>
410265f0:	04810004 	movi	r18,1024
410265f4:	8809883a 	mov	r4,r17
410265f8:	900b883a 	mov	r5,r18
410265fc:	10266f80 	call	410266f8 <_malloc_r>
41026600:	1009883a 	mov	r4,r2
41026604:	10003126 	beq	r2,zero,410266cc <__smakebuf_r+0x168>
41026608:	80c0030b 	ldhu	r3,12(r16)
4102660c:	009040b4 	movhi	r2,16642
41026610:	10963404 	addi	r2,r2,22736
41026614:	88800f15 	stw	r2,60(r17)
41026618:	18c02014 	ori	r3,r3,128
4102661c:	84800515 	stw	r18,20(r16)
41026620:	80c0030d 	sth	r3,12(r16)
41026624:	81000415 	stw	r4,16(r16)
41026628:	81000015 	stw	r4,0(r16)
4102662c:	dfc01217 	ldw	ra,72(sp)
41026630:	dc801117 	ldw	r18,68(sp)
41026634:	dc401017 	ldw	r17,64(sp)
41026638:	dc000f17 	ldw	r16,60(sp)
4102663c:	dec01304 	addi	sp,sp,76
41026640:	f800283a 	ret
41026644:	80c0030b 	ldhu	r3,12(r16)
41026648:	1880200c 	andi	r2,r3,128
4102664c:	10000426 	beq	r2,zero,41026660 <__smakebuf_r+0xfc>
41026650:	04801004 	movi	r18,64
41026654:	18820014 	ori	r2,r3,2048
41026658:	8080030d 	sth	r2,12(r16)
4102665c:	003fe506 	br	410265f4 <__smakebuf_r+0x90>
41026660:	04810004 	movi	r18,1024
41026664:	003ffb06 	br	41026654 <__smakebuf_r+0xf0>
41026668:	8140038f 	ldh	r5,14(r16)
4102666c:	8809883a 	mov	r4,r17
41026670:	1028fd00 	call	41028fd0 <_isatty_r>
41026674:	103fde26 	beq	r2,zero,410265f0 <__smakebuf_r+0x8c>
41026678:	8080030b 	ldhu	r2,12(r16)
4102667c:	80c010c4 	addi	r3,r16,67
41026680:	04810004 	movi	r18,1024
41026684:	10800054 	ori	r2,r2,1
41026688:	8080030d 	sth	r2,12(r16)
4102668c:	00800044 	movi	r2,1
41026690:	80c00415 	stw	r3,16(r16)
41026694:	80800515 	stw	r2,20(r16)
41026698:	80c00015 	stw	r3,0(r16)
4102669c:	003fd506 	br	410265f4 <__smakebuf_r+0x90>
410266a0:	80c00a17 	ldw	r3,40(r16)
410266a4:	009040f4 	movhi	r2,16643
410266a8:	10a25404 	addi	r2,r2,-30384
410266ac:	18bfcb1e 	bne	r3,r2,410265dc <__smakebuf_r+0x78>
410266b0:	8080030b 	ldhu	r2,12(r16)
410266b4:	00c10004 	movi	r3,1024
410266b8:	1825883a 	mov	r18,r3
410266bc:	10c4b03a 	or	r2,r2,r3
410266c0:	8080030d 	sth	r2,12(r16)
410266c4:	80c01315 	stw	r3,76(r16)
410266c8:	003fca06 	br	410265f4 <__smakebuf_r+0x90>
410266cc:	8100030b 	ldhu	r4,12(r16)
410266d0:	2080800c 	andi	r2,r4,512
410266d4:	103fb21e 	bne	r2,zero,410265a0 <__smakebuf_r+0x3c>
410266d8:	80c010c4 	addi	r3,r16,67
410266dc:	21000094 	ori	r4,r4,2
410266e0:	00800044 	movi	r2,1
410266e4:	80800515 	stw	r2,20(r16)
410266e8:	8100030d 	sth	r4,12(r16)
410266ec:	80c00415 	stw	r3,16(r16)
410266f0:	80c00015 	stw	r3,0(r16)
410266f4:	003faa06 	br	410265a0 <__smakebuf_r+0x3c>

410266f8 <_malloc_r>:
410266f8:	defff604 	addi	sp,sp,-40
410266fc:	28c002c4 	addi	r3,r5,11
41026700:	00800584 	movi	r2,22
41026704:	dc800215 	stw	r18,8(sp)
41026708:	dfc00915 	stw	ra,36(sp)
4102670c:	df000815 	stw	fp,32(sp)
41026710:	ddc00715 	stw	r23,28(sp)
41026714:	dd800615 	stw	r22,24(sp)
41026718:	dd400515 	stw	r21,20(sp)
4102671c:	dd000415 	stw	r20,16(sp)
41026720:	dcc00315 	stw	r19,12(sp)
41026724:	dc400115 	stw	r17,4(sp)
41026728:	dc000015 	stw	r16,0(sp)
4102672c:	2025883a 	mov	r18,r4
41026730:	10c01236 	bltu	r2,r3,4102677c <_malloc_r+0x84>
41026734:	04400404 	movi	r17,16
41026738:	8940142e 	bgeu	r17,r5,4102678c <_malloc_r+0x94>
4102673c:	00800304 	movi	r2,12
41026740:	0007883a 	mov	r3,zero
41026744:	90800015 	stw	r2,0(r18)
41026748:	1805883a 	mov	r2,r3
4102674c:	dfc00917 	ldw	ra,36(sp)
41026750:	df000817 	ldw	fp,32(sp)
41026754:	ddc00717 	ldw	r23,28(sp)
41026758:	dd800617 	ldw	r22,24(sp)
4102675c:	dd400517 	ldw	r21,20(sp)
41026760:	dd000417 	ldw	r20,16(sp)
41026764:	dcc00317 	ldw	r19,12(sp)
41026768:	dc800217 	ldw	r18,8(sp)
4102676c:	dc400117 	ldw	r17,4(sp)
41026770:	dc000017 	ldw	r16,0(sp)
41026774:	dec00a04 	addi	sp,sp,40
41026778:	f800283a 	ret
4102677c:	00bffe04 	movi	r2,-8
41026780:	18a2703a 	and	r17,r3,r2
41026784:	883fed16 	blt	r17,zero,4102673c <_malloc_r+0x44>
41026788:	897fec36 	bltu	r17,r5,4102673c <_malloc_r+0x44>
4102678c:	9009883a 	mov	r4,r18
41026790:	102b6a00 	call	4102b6a0 <__malloc_lock>
41026794:	00807dc4 	movi	r2,503
41026798:	14402b2e 	bgeu	r2,r17,41026848 <_malloc_r+0x150>
4102679c:	8806d27a 	srli	r3,r17,9
410267a0:	18003f1e 	bne	r3,zero,410268a0 <_malloc_r+0x1a8>
410267a4:	880cd0fa 	srli	r6,r17,3
410267a8:	300490fa 	slli	r2,r6,3
410267ac:	02d040f4 	movhi	r11,16643
410267b0:	5af95804 	addi	r11,r11,-6816
410267b4:	12cb883a 	add	r5,r2,r11
410267b8:	2c000317 	ldw	r16,12(r5)
410267bc:	580f883a 	mov	r7,r11
410267c0:	2c00041e 	bne	r5,r16,410267d4 <_malloc_r+0xdc>
410267c4:	00000a06 	br	410267f0 <_malloc_r+0xf8>
410267c8:	1800860e 	bge	r3,zero,410269e4 <_malloc_r+0x2ec>
410267cc:	84000317 	ldw	r16,12(r16)
410267d0:	2c000726 	beq	r5,r16,410267f0 <_malloc_r+0xf8>
410267d4:	80800117 	ldw	r2,4(r16)
410267d8:	00ffff04 	movi	r3,-4
410267dc:	10c8703a 	and	r4,r2,r3
410267e0:	2447c83a 	sub	r3,r4,r17
410267e4:	008003c4 	movi	r2,15
410267e8:	10fff70e 	bge	r2,r3,410267c8 <_malloc_r+0xd0>
410267ec:	31bfffc4 	addi	r6,r6,-1
410267f0:	32400044 	addi	r9,r6,1
410267f4:	029040f4 	movhi	r10,16643
410267f8:	52b95a04 	addi	r10,r10,-6808
410267fc:	54000217 	ldw	r16,8(r10)
41026800:	8280a026 	beq	r16,r10,41026a84 <_malloc_r+0x38c>
41026804:	80800117 	ldw	r2,4(r16)
41026808:	00ffff04 	movi	r3,-4
4102680c:	10ca703a 	and	r5,r2,r3
41026810:	2c4dc83a 	sub	r6,r5,r17
41026814:	008003c4 	movi	r2,15
41026818:	11808316 	blt	r2,r6,41026a28 <_malloc_r+0x330>
4102681c:	52800315 	stw	r10,12(r10)
41026820:	52800215 	stw	r10,8(r10)
41026824:	30002916 	blt	r6,zero,410268cc <_malloc_r+0x1d4>
41026828:	8147883a 	add	r3,r16,r5
4102682c:	18800117 	ldw	r2,4(r3)
41026830:	9009883a 	mov	r4,r18
41026834:	10800054 	ori	r2,r2,1
41026838:	18800115 	stw	r2,4(r3)
4102683c:	102b6c00 	call	4102b6c0 <__malloc_unlock>
41026840:	80c00204 	addi	r3,r16,8
41026844:	003fc006 	br	41026748 <_malloc_r+0x50>
41026848:	02d040f4 	movhi	r11,16643
4102684c:	5af95804 	addi	r11,r11,-6816
41026850:	8ac5883a 	add	r2,r17,r11
41026854:	14000317 	ldw	r16,12(r2)
41026858:	580f883a 	mov	r7,r11
4102685c:	8806d0fa 	srli	r3,r17,3
41026860:	14006c26 	beq	r2,r16,41026a14 <_malloc_r+0x31c>
41026864:	80c00117 	ldw	r3,4(r16)
41026868:	00bfff04 	movi	r2,-4
4102686c:	81800317 	ldw	r6,12(r16)
41026870:	1886703a 	and	r3,r3,r2
41026874:	80c7883a 	add	r3,r16,r3
41026878:	18800117 	ldw	r2,4(r3)
4102687c:	81400217 	ldw	r5,8(r16)
41026880:	9009883a 	mov	r4,r18
41026884:	10800054 	ori	r2,r2,1
41026888:	18800115 	stw	r2,4(r3)
4102688c:	31400215 	stw	r5,8(r6)
41026890:	29800315 	stw	r6,12(r5)
41026894:	102b6c00 	call	4102b6c0 <__malloc_unlock>
41026898:	80c00204 	addi	r3,r16,8
4102689c:	003faa06 	br	41026748 <_malloc_r+0x50>
410268a0:	00800104 	movi	r2,4
410268a4:	10c0052e 	bgeu	r2,r3,410268bc <_malloc_r+0x1c4>
410268a8:	00800504 	movi	r2,20
410268ac:	10c07836 	bltu	r2,r3,41026a90 <_malloc_r+0x398>
410268b0:	198016c4 	addi	r6,r3,91
410268b4:	300490fa 	slli	r2,r6,3
410268b8:	003fbc06 	br	410267ac <_malloc_r+0xb4>
410268bc:	8804d1ba 	srli	r2,r17,6
410268c0:	11800e04 	addi	r6,r2,56
410268c4:	300490fa 	slli	r2,r6,3
410268c8:	003fb806 	br	410267ac <_malloc_r+0xb4>
410268cc:	00807fc4 	movi	r2,511
410268d0:	1140bb36 	bltu	r2,r5,41026bc0 <_malloc_r+0x4c8>
410268d4:	2806d0fa 	srli	r3,r5,3
410268d8:	573ffe04 	addi	fp,r10,-8
410268dc:	00800044 	movi	r2,1
410268e0:	180890fa 	slli	r4,r3,3
410268e4:	1807d0ba 	srai	r3,r3,2
410268e8:	e1c00117 	ldw	r7,4(fp)
410268ec:	5909883a 	add	r4,r11,r4
410268f0:	21400217 	ldw	r5,8(r4)
410268f4:	10c4983a 	sll	r2,r2,r3
410268f8:	81000315 	stw	r4,12(r16)
410268fc:	81400215 	stw	r5,8(r16)
41026900:	388eb03a 	or	r7,r7,r2
41026904:	2c000315 	stw	r16,12(r5)
41026908:	24000215 	stw	r16,8(r4)
4102690c:	e1c00115 	stw	r7,4(fp)
41026910:	4807883a 	mov	r3,r9
41026914:	4800cd16 	blt	r9,zero,41026c4c <_malloc_r+0x554>
41026918:	1807d0ba 	srai	r3,r3,2
4102691c:	00800044 	movi	r2,1
41026920:	10c8983a 	sll	r4,r2,r3
41026924:	39004436 	bltu	r7,r4,41026a38 <_malloc_r+0x340>
41026928:	21c4703a 	and	r2,r4,r7
4102692c:	10000a1e 	bne	r2,zero,41026958 <_malloc_r+0x260>
41026930:	2109883a 	add	r4,r4,r4
41026934:	00bfff04 	movi	r2,-4
41026938:	4884703a 	and	r2,r9,r2
4102693c:	3906703a 	and	r3,r7,r4
41026940:	12400104 	addi	r9,r2,4
41026944:	1800041e 	bne	r3,zero,41026958 <_malloc_r+0x260>
41026948:	2109883a 	add	r4,r4,r4
4102694c:	3904703a 	and	r2,r7,r4
41026950:	4a400104 	addi	r9,r9,4
41026954:	103ffc26 	beq	r2,zero,41026948 <_malloc_r+0x250>
41026958:	480490fa 	slli	r2,r9,3
4102695c:	4819883a 	mov	r12,r9
41026960:	023fff04 	movi	r8,-4
41026964:	589b883a 	add	r13,r11,r2
41026968:	6807883a 	mov	r3,r13
4102696c:	014003c4 	movi	r5,15
41026970:	1c000317 	ldw	r16,12(r3)
41026974:	1c00041e 	bne	r3,r16,41026988 <_malloc_r+0x290>
41026978:	0000a706 	br	41026c18 <_malloc_r+0x520>
4102697c:	3000ab0e 	bge	r6,zero,41026c2c <_malloc_r+0x534>
41026980:	84000317 	ldw	r16,12(r16)
41026984:	1c00a426 	beq	r3,r16,41026c18 <_malloc_r+0x520>
41026988:	80800117 	ldw	r2,4(r16)
4102698c:	1204703a 	and	r2,r2,r8
41026990:	144dc83a 	sub	r6,r2,r17
41026994:	29bff90e 	bge	r5,r6,4102697c <_malloc_r+0x284>
41026998:	81000317 	ldw	r4,12(r16)
4102699c:	80c00217 	ldw	r3,8(r16)
410269a0:	89400054 	ori	r5,r17,1
410269a4:	8445883a 	add	r2,r16,r17
410269a8:	20c00215 	stw	r3,8(r4)
410269ac:	19000315 	stw	r4,12(r3)
410269b0:	81400115 	stw	r5,4(r16)
410269b4:	1187883a 	add	r3,r2,r6
410269b8:	31000054 	ori	r4,r6,1
410269bc:	50800315 	stw	r2,12(r10)
410269c0:	50800215 	stw	r2,8(r10)
410269c4:	19800015 	stw	r6,0(r3)
410269c8:	11000115 	stw	r4,4(r2)
410269cc:	12800215 	stw	r10,8(r2)
410269d0:	12800315 	stw	r10,12(r2)
410269d4:	9009883a 	mov	r4,r18
410269d8:	102b6c00 	call	4102b6c0 <__malloc_unlock>
410269dc:	80c00204 	addi	r3,r16,8
410269e0:	003f5906 	br	41026748 <_malloc_r+0x50>
410269e4:	8109883a 	add	r4,r16,r4
410269e8:	20800117 	ldw	r2,4(r4)
410269ec:	80c00217 	ldw	r3,8(r16)
410269f0:	81400317 	ldw	r5,12(r16)
410269f4:	10800054 	ori	r2,r2,1
410269f8:	20800115 	stw	r2,4(r4)
410269fc:	28c00215 	stw	r3,8(r5)
41026a00:	19400315 	stw	r5,12(r3)
41026a04:	9009883a 	mov	r4,r18
41026a08:	102b6c00 	call	4102b6c0 <__malloc_unlock>
41026a0c:	80c00204 	addi	r3,r16,8
41026a10:	003f4d06 	br	41026748 <_malloc_r+0x50>
41026a14:	80800204 	addi	r2,r16,8
41026a18:	14000317 	ldw	r16,12(r2)
41026a1c:	143f911e 	bne	r2,r16,41026864 <_malloc_r+0x16c>
41026a20:	1a400084 	addi	r9,r3,2
41026a24:	003f7306 	br	410267f4 <_malloc_r+0xfc>
41026a28:	88c00054 	ori	r3,r17,1
41026a2c:	8445883a 	add	r2,r16,r17
41026a30:	80c00115 	stw	r3,4(r16)
41026a34:	003fdf06 	br	410269b4 <_malloc_r+0x2bc>
41026a38:	e4000217 	ldw	r16,8(fp)
41026a3c:	00bfff04 	movi	r2,-4
41026a40:	80c00117 	ldw	r3,4(r16)
41026a44:	802d883a 	mov	r22,r16
41026a48:	18aa703a 	and	r21,r3,r2
41026a4c:	ac401636 	bltu	r21,r17,41026aa8 <_malloc_r+0x3b0>
41026a50:	ac49c83a 	sub	r4,r21,r17
41026a54:	008003c4 	movi	r2,15
41026a58:	1100130e 	bge	r2,r4,41026aa8 <_malloc_r+0x3b0>
41026a5c:	88800054 	ori	r2,r17,1
41026a60:	8447883a 	add	r3,r16,r17
41026a64:	80800115 	stw	r2,4(r16)
41026a68:	20800054 	ori	r2,r4,1
41026a6c:	18800115 	stw	r2,4(r3)
41026a70:	e0c00215 	stw	r3,8(fp)
41026a74:	9009883a 	mov	r4,r18
41026a78:	102b6c00 	call	4102b6c0 <__malloc_unlock>
41026a7c:	80c00204 	addi	r3,r16,8
41026a80:	003f3106 	br	41026748 <_malloc_r+0x50>
41026a84:	39c00117 	ldw	r7,4(r7)
41026a88:	573ffe04 	addi	fp,r10,-8
41026a8c:	003fa006 	br	41026910 <_malloc_r+0x218>
41026a90:	00801504 	movi	r2,84
41026a94:	10c06736 	bltu	r2,r3,41026c34 <_malloc_r+0x53c>
41026a98:	8804d33a 	srli	r2,r17,12
41026a9c:	11801b84 	addi	r6,r2,110
41026aa0:	300490fa 	slli	r2,r6,3
41026aa4:	003f4106 	br	410267ac <_malloc_r+0xb4>
41026aa8:	d0a6aa17 	ldw	r2,-25944(gp)
41026aac:	d0e00517 	ldw	r3,-32748(gp)
41026ab0:	053fffc4 	movi	r20,-1
41026ab4:	10800404 	addi	r2,r2,16
41026ab8:	88a7883a 	add	r19,r17,r2
41026abc:	1d000326 	beq	r3,r20,41026acc <_malloc_r+0x3d4>
41026ac0:	98c3ffc4 	addi	r3,r19,4095
41026ac4:	00bc0004 	movi	r2,-4096
41026ac8:	18a6703a 	and	r19,r3,r2
41026acc:	9009883a 	mov	r4,r18
41026ad0:	980b883a 	mov	r5,r19
41026ad4:	10288d80 	call	410288d8 <_sbrk_r>
41026ad8:	1009883a 	mov	r4,r2
41026adc:	15000426 	beq	r2,r20,41026af0 <_malloc_r+0x3f8>
41026ae0:	854b883a 	add	r5,r16,r21
41026ae4:	1029883a 	mov	r20,r2
41026ae8:	11405a2e 	bgeu	r2,r5,41026c54 <_malloc_r+0x55c>
41026aec:	87000c26 	beq	r16,fp,41026b20 <_malloc_r+0x428>
41026af0:	e4000217 	ldw	r16,8(fp)
41026af4:	80c00117 	ldw	r3,4(r16)
41026af8:	00bfff04 	movi	r2,-4
41026afc:	1884703a 	and	r2,r3,r2
41026b00:	14400336 	bltu	r2,r17,41026b10 <_malloc_r+0x418>
41026b04:	1449c83a 	sub	r4,r2,r17
41026b08:	008003c4 	movi	r2,15
41026b0c:	113fd316 	blt	r2,r4,41026a5c <_malloc_r+0x364>
41026b10:	9009883a 	mov	r4,r18
41026b14:	102b6c00 	call	4102b6c0 <__malloc_unlock>
41026b18:	0007883a 	mov	r3,zero
41026b1c:	003f0a06 	br	41026748 <_malloc_r+0x50>
41026b20:	05d040f4 	movhi	r23,16643
41026b24:	bdc59004 	addi	r23,r23,5696
41026b28:	b8800017 	ldw	r2,0(r23)
41026b2c:	988d883a 	add	r6,r19,r2
41026b30:	b9800015 	stw	r6,0(r23)
41026b34:	d0e00517 	ldw	r3,-32748(gp)
41026b38:	00bfffc4 	movi	r2,-1
41026b3c:	18808e26 	beq	r3,r2,41026d78 <_malloc_r+0x680>
41026b40:	2145c83a 	sub	r2,r4,r5
41026b44:	3085883a 	add	r2,r6,r2
41026b48:	b8800015 	stw	r2,0(r23)
41026b4c:	20c001cc 	andi	r3,r4,7
41026b50:	18005f1e 	bne	r3,zero,41026cd0 <_malloc_r+0x5d8>
41026b54:	000b883a 	mov	r5,zero
41026b58:	a4c5883a 	add	r2,r20,r19
41026b5c:	1083ffcc 	andi	r2,r2,4095
41026b60:	00c40004 	movi	r3,4096
41026b64:	1887c83a 	sub	r3,r3,r2
41026b68:	28e7883a 	add	r19,r5,r3
41026b6c:	9009883a 	mov	r4,r18
41026b70:	980b883a 	mov	r5,r19
41026b74:	10288d80 	call	410288d8 <_sbrk_r>
41026b78:	1007883a 	mov	r3,r2
41026b7c:	00bfffc4 	movi	r2,-1
41026b80:	18807a26 	beq	r3,r2,41026d6c <_malloc_r+0x674>
41026b84:	1d05c83a 	sub	r2,r3,r20
41026b88:	9885883a 	add	r2,r19,r2
41026b8c:	10c00054 	ori	r3,r2,1
41026b90:	b8800017 	ldw	r2,0(r23)
41026b94:	a021883a 	mov	r16,r20
41026b98:	a0c00115 	stw	r3,4(r20)
41026b9c:	9885883a 	add	r2,r19,r2
41026ba0:	b8800015 	stw	r2,0(r23)
41026ba4:	e5000215 	stw	r20,8(fp)
41026ba8:	b7003626 	beq	r22,fp,41026c84 <_malloc_r+0x58c>
41026bac:	018003c4 	movi	r6,15
41026bb0:	35404b36 	bltu	r6,r21,41026ce0 <_malloc_r+0x5e8>
41026bb4:	00800044 	movi	r2,1
41026bb8:	a0800115 	stw	r2,4(r20)
41026bbc:	003fcd06 	br	41026af4 <_malloc_r+0x3fc>
41026bc0:	2808d27a 	srli	r4,r5,9
41026bc4:	2000371e 	bne	r4,zero,41026ca4 <_malloc_r+0x5ac>
41026bc8:	2808d0fa 	srli	r4,r5,3
41026bcc:	200690fa 	slli	r3,r4,3
41026bd0:	1ad1883a 	add	r8,r3,r11
41026bd4:	41800217 	ldw	r6,8(r8)
41026bd8:	41805b26 	beq	r8,r6,41026d48 <_malloc_r+0x650>
41026bdc:	30800117 	ldw	r2,4(r6)
41026be0:	00ffff04 	movi	r3,-4
41026be4:	10c4703a 	and	r2,r2,r3
41026be8:	2880022e 	bgeu	r5,r2,41026bf4 <_malloc_r+0x4fc>
41026bec:	31800217 	ldw	r6,8(r6)
41026bf0:	41bffa1e 	bne	r8,r6,41026bdc <_malloc_r+0x4e4>
41026bf4:	32000317 	ldw	r8,12(r6)
41026bf8:	39c00117 	ldw	r7,4(r7)
41026bfc:	82000315 	stw	r8,12(r16)
41026c00:	81800215 	stw	r6,8(r16)
41026c04:	071040f4 	movhi	fp,16643
41026c08:	e7395804 	addi	fp,fp,-6816
41026c0c:	34000315 	stw	r16,12(r6)
41026c10:	44000215 	stw	r16,8(r8)
41026c14:	003f3e06 	br	41026910 <_malloc_r+0x218>
41026c18:	63000044 	addi	r12,r12,1
41026c1c:	608000cc 	andi	r2,r12,3
41026c20:	10005d26 	beq	r2,zero,41026d98 <_malloc_r+0x6a0>
41026c24:	18c00204 	addi	r3,r3,8
41026c28:	003f5106 	br	41026970 <_malloc_r+0x278>
41026c2c:	8089883a 	add	r4,r16,r2
41026c30:	003f6d06 	br	410269e8 <_malloc_r+0x2f0>
41026c34:	00805504 	movi	r2,340
41026c38:	10c02036 	bltu	r2,r3,41026cbc <_malloc_r+0x5c4>
41026c3c:	8804d3fa 	srli	r2,r17,15
41026c40:	11801dc4 	addi	r6,r2,119
41026c44:	300490fa 	slli	r2,r6,3
41026c48:	003ed806 	br	410267ac <_malloc_r+0xb4>
41026c4c:	48c000c4 	addi	r3,r9,3
41026c50:	003f3106 	br	41026918 <_malloc_r+0x220>
41026c54:	05d040f4 	movhi	r23,16643
41026c58:	bdc59004 	addi	r23,r23,5696
41026c5c:	b8800017 	ldw	r2,0(r23)
41026c60:	988d883a 	add	r6,r19,r2
41026c64:	b9800015 	stw	r6,0(r23)
41026c68:	293fb21e 	bne	r5,r4,41026b34 <_malloc_r+0x43c>
41026c6c:	2083ffcc 	andi	r2,r4,4095
41026c70:	103fb01e 	bne	r2,zero,41026b34 <_malloc_r+0x43c>
41026c74:	e4000217 	ldw	r16,8(fp)
41026c78:	9d45883a 	add	r2,r19,r21
41026c7c:	10800054 	ori	r2,r2,1
41026c80:	80800115 	stw	r2,4(r16)
41026c84:	b8c00017 	ldw	r3,0(r23)
41026c88:	d0a6ab17 	ldw	r2,-25940(gp)
41026c8c:	10c0012e 	bgeu	r2,r3,41026c94 <_malloc_r+0x59c>
41026c90:	d0e6ab15 	stw	r3,-25940(gp)
41026c94:	d0a6ac17 	ldw	r2,-25936(gp)
41026c98:	10ff962e 	bgeu	r2,r3,41026af4 <_malloc_r+0x3fc>
41026c9c:	d0e6ac15 	stw	r3,-25936(gp)
41026ca0:	003f9406 	br	41026af4 <_malloc_r+0x3fc>
41026ca4:	00800104 	movi	r2,4
41026ca8:	11001e36 	bltu	r2,r4,41026d24 <_malloc_r+0x62c>
41026cac:	2804d1ba 	srli	r2,r5,6
41026cb0:	11000e04 	addi	r4,r2,56
41026cb4:	200690fa 	slli	r3,r4,3
41026cb8:	003fc506 	br	41026bd0 <_malloc_r+0x4d8>
41026cbc:	00815504 	movi	r2,1364
41026cc0:	10c01d2e 	bgeu	r2,r3,41026d38 <_malloc_r+0x640>
41026cc4:	01801f84 	movi	r6,126
41026cc8:	0080fc04 	movi	r2,1008
41026ccc:	003eb706 	br	410267ac <_malloc_r+0xb4>
41026cd0:	00800204 	movi	r2,8
41026cd4:	10cbc83a 	sub	r5,r2,r3
41026cd8:	2169883a 	add	r20,r4,r5
41026cdc:	003f9e06 	br	41026b58 <_malloc_r+0x460>
41026ce0:	00bffe04 	movi	r2,-8
41026ce4:	a93ffd04 	addi	r4,r21,-12
41026ce8:	2088703a 	and	r4,r4,r2
41026cec:	b10b883a 	add	r5,r22,r4
41026cf0:	00c00144 	movi	r3,5
41026cf4:	28c00215 	stw	r3,8(r5)
41026cf8:	28c00115 	stw	r3,4(r5)
41026cfc:	b0800117 	ldw	r2,4(r22)
41026d00:	1080004c 	andi	r2,r2,1
41026d04:	2084b03a 	or	r2,r4,r2
41026d08:	b0800115 	stw	r2,4(r22)
41026d0c:	313fdd2e 	bgeu	r6,r4,41026c84 <_malloc_r+0x58c>
41026d10:	b1400204 	addi	r5,r22,8
41026d14:	9009883a 	mov	r4,r18
41026d18:	1025b700 	call	41025b70 <_free_r>
41026d1c:	e4000217 	ldw	r16,8(fp)
41026d20:	003fd806 	br	41026c84 <_malloc_r+0x58c>
41026d24:	00800504 	movi	r2,20
41026d28:	11001536 	bltu	r2,r4,41026d80 <_malloc_r+0x688>
41026d2c:	210016c4 	addi	r4,r4,91
41026d30:	200690fa 	slli	r3,r4,3
41026d34:	003fa606 	br	41026bd0 <_malloc_r+0x4d8>
41026d38:	8804d4ba 	srli	r2,r17,18
41026d3c:	11801f04 	addi	r6,r2,124
41026d40:	300490fa 	slli	r2,r6,3
41026d44:	003e9906 	br	410267ac <_malloc_r+0xb4>
41026d48:	2009d0ba 	srai	r4,r4,2
41026d4c:	015040f4 	movhi	r5,16643
41026d50:	29795804 	addi	r5,r5,-6816
41026d54:	00c00044 	movi	r3,1
41026d58:	28800117 	ldw	r2,4(r5)
41026d5c:	1906983a 	sll	r3,r3,r4
41026d60:	10c4b03a 	or	r2,r2,r3
41026d64:	28800115 	stw	r2,4(r5)
41026d68:	003fa306 	br	41026bf8 <_malloc_r+0x500>
41026d6c:	0027883a 	mov	r19,zero
41026d70:	00c00044 	movi	r3,1
41026d74:	003f8606 	br	41026b90 <_malloc_r+0x498>
41026d78:	d1200515 	stw	r4,-32748(gp)
41026d7c:	003f7306 	br	41026b4c <_malloc_r+0x454>
41026d80:	00801504 	movi	r2,84
41026d84:	11001936 	bltu	r2,r4,41026dec <_malloc_r+0x6f4>
41026d88:	2804d33a 	srli	r2,r5,12
41026d8c:	11001b84 	addi	r4,r2,110
41026d90:	200690fa 	slli	r3,r4,3
41026d94:	003f8e06 	br	41026bd0 <_malloc_r+0x4d8>
41026d98:	480b883a 	mov	r5,r9
41026d9c:	6807883a 	mov	r3,r13
41026da0:	288000cc 	andi	r2,r5,3
41026da4:	18fffe04 	addi	r3,r3,-8
41026da8:	297fffc4 	addi	r5,r5,-1
41026dac:	10001526 	beq	r2,zero,41026e04 <_malloc_r+0x70c>
41026db0:	18800217 	ldw	r2,8(r3)
41026db4:	10fffa26 	beq	r2,r3,41026da0 <_malloc_r+0x6a8>
41026db8:	2109883a 	add	r4,r4,r4
41026dbc:	393f1e36 	bltu	r7,r4,41026a38 <_malloc_r+0x340>
41026dc0:	203f1d26 	beq	r4,zero,41026a38 <_malloc_r+0x340>
41026dc4:	21c4703a 	and	r2,r4,r7
41026dc8:	10000226 	beq	r2,zero,41026dd4 <_malloc_r+0x6dc>
41026dcc:	6013883a 	mov	r9,r12
41026dd0:	003ee106 	br	41026958 <_malloc_r+0x260>
41026dd4:	2109883a 	add	r4,r4,r4
41026dd8:	3904703a 	and	r2,r7,r4
41026ddc:	63000104 	addi	r12,r12,4
41026de0:	103ffc26 	beq	r2,zero,41026dd4 <_malloc_r+0x6dc>
41026de4:	6013883a 	mov	r9,r12
41026de8:	003edb06 	br	41026958 <_malloc_r+0x260>
41026dec:	00805504 	movi	r2,340
41026df0:	11000836 	bltu	r2,r4,41026e14 <_malloc_r+0x71c>
41026df4:	2804d3fa 	srli	r2,r5,15
41026df8:	11001dc4 	addi	r4,r2,119
41026dfc:	200690fa 	slli	r3,r4,3
41026e00:	003f7306 	br	41026bd0 <_malloc_r+0x4d8>
41026e04:	0104303a 	nor	r2,zero,r4
41026e08:	388e703a 	and	r7,r7,r2
41026e0c:	e1c00115 	stw	r7,4(fp)
41026e10:	003fe906 	br	41026db8 <_malloc_r+0x6c0>
41026e14:	00815504 	movi	r2,1364
41026e18:	1100032e 	bgeu	r2,r4,41026e28 <_malloc_r+0x730>
41026e1c:	01001f84 	movi	r4,126
41026e20:	00c0fc04 	movi	r3,1008
41026e24:	003f6a06 	br	41026bd0 <_malloc_r+0x4d8>
41026e28:	2804d4ba 	srli	r2,r5,18
41026e2c:	11001f04 	addi	r4,r2,124
41026e30:	200690fa 	slli	r3,r4,3
41026e34:	003f6606 	br	41026bd0 <_malloc_r+0x4d8>

41026e38 <memchr>:
41026e38:	008000c4 	movi	r2,3
41026e3c:	29403fcc 	andi	r5,r5,255
41026e40:	2007883a 	mov	r3,r4
41026e44:	1180022e 	bgeu	r2,r6,41026e50 <memchr+0x18>
41026e48:	2084703a 	and	r2,r4,r2
41026e4c:	10000b26 	beq	r2,zero,41026e7c <memchr+0x44>
41026e50:	313fffc4 	addi	r4,r6,-1
41026e54:	3000051e 	bne	r6,zero,41026e6c <memchr+0x34>
41026e58:	00002c06 	br	41026f0c <memchr+0xd4>
41026e5c:	213fffc4 	addi	r4,r4,-1
41026e60:	00bfffc4 	movi	r2,-1
41026e64:	18c00044 	addi	r3,r3,1
41026e68:	20802826 	beq	r4,r2,41026f0c <memchr+0xd4>
41026e6c:	18800003 	ldbu	r2,0(r3)
41026e70:	28bffa1e 	bne	r5,r2,41026e5c <memchr+0x24>
41026e74:	1805883a 	mov	r2,r3
41026e78:	f800283a 	ret
41026e7c:	0011883a 	mov	r8,zero
41026e80:	0007883a 	mov	r3,zero
41026e84:	01c00104 	movi	r7,4
41026e88:	4004923a 	slli	r2,r8,8
41026e8c:	18c00044 	addi	r3,r3,1
41026e90:	1151883a 	add	r8,r2,r5
41026e94:	19fffc1e 	bne	r3,r7,41026e88 <memchr+0x50>
41026e98:	02bfbff4 	movhi	r10,65279
41026e9c:	52bfbfc4 	addi	r10,r10,-257
41026ea0:	02602074 	movhi	r9,32897
41026ea4:	4a602004 	addi	r9,r9,-32640
41026ea8:	02c000c4 	movi	r11,3
41026eac:	20800017 	ldw	r2,0(r4)
41026eb0:	31bfff04 	addi	r6,r6,-4
41026eb4:	200f883a 	mov	r7,r4
41026eb8:	1204f03a 	xor	r2,r2,r8
41026ebc:	1287883a 	add	r3,r2,r10
41026ec0:	1a46703a 	and	r3,r3,r9
41026ec4:	0084303a 	nor	r2,zero,r2
41026ec8:	10c4703a 	and	r2,r2,r3
41026ecc:	10000b26 	beq	r2,zero,41026efc <memchr+0xc4>
41026ed0:	20800003 	ldbu	r2,0(r4)
41026ed4:	28800f26 	beq	r5,r2,41026f14 <memchr+0xdc>
41026ed8:	20800043 	ldbu	r2,1(r4)
41026edc:	21c00044 	addi	r7,r4,1
41026ee0:	28800c26 	beq	r5,r2,41026f14 <memchr+0xdc>
41026ee4:	20800083 	ldbu	r2,2(r4)
41026ee8:	21c00084 	addi	r7,r4,2
41026eec:	28800926 	beq	r5,r2,41026f14 <memchr+0xdc>
41026ef0:	208000c3 	ldbu	r2,3(r4)
41026ef4:	21c000c4 	addi	r7,r4,3
41026ef8:	28800626 	beq	r5,r2,41026f14 <memchr+0xdc>
41026efc:	21000104 	addi	r4,r4,4
41026f00:	59bfea36 	bltu	r11,r6,41026eac <memchr+0x74>
41026f04:	2007883a 	mov	r3,r4
41026f08:	003fd106 	br	41026e50 <memchr+0x18>
41026f0c:	0005883a 	mov	r2,zero
41026f10:	f800283a 	ret
41026f14:	3805883a 	mov	r2,r7
41026f18:	f800283a 	ret

41026f1c <memmove>:
41026f1c:	2807883a 	mov	r3,r5
41026f20:	2011883a 	mov	r8,r4
41026f24:	29000c2e 	bgeu	r5,r4,41026f58 <memmove+0x3c>
41026f28:	298f883a 	add	r7,r5,r6
41026f2c:	21c00a2e 	bgeu	r4,r7,41026f58 <memmove+0x3c>
41026f30:	30000726 	beq	r6,zero,41026f50 <memmove+0x34>
41026f34:	2187883a 	add	r3,r4,r6
41026f38:	198dc83a 	sub	r6,r3,r6
41026f3c:	39ffffc4 	addi	r7,r7,-1
41026f40:	38800003 	ldbu	r2,0(r7)
41026f44:	18ffffc4 	addi	r3,r3,-1
41026f48:	18800005 	stb	r2,0(r3)
41026f4c:	19bffb1e 	bne	r3,r6,41026f3c <memmove+0x20>
41026f50:	2005883a 	mov	r2,r4
41026f54:	f800283a 	ret
41026f58:	01c003c4 	movi	r7,15
41026f5c:	39800a36 	bltu	r7,r6,41026f88 <memmove+0x6c>
41026f60:	303ffb26 	beq	r6,zero,41026f50 <memmove+0x34>
41026f64:	400f883a 	mov	r7,r8
41026f68:	320d883a 	add	r6,r6,r8
41026f6c:	28800003 	ldbu	r2,0(r5)
41026f70:	29400044 	addi	r5,r5,1
41026f74:	38800005 	stb	r2,0(r7)
41026f78:	39c00044 	addi	r7,r7,1
41026f7c:	39bffb1e 	bne	r7,r6,41026f6c <memmove+0x50>
41026f80:	2005883a 	mov	r2,r4
41026f84:	f800283a 	ret
41026f88:	1904b03a 	or	r2,r3,r4
41026f8c:	108000cc 	andi	r2,r2,3
41026f90:	103ff31e 	bne	r2,zero,41026f60 <memmove+0x44>
41026f94:	3811883a 	mov	r8,r7
41026f98:	180b883a 	mov	r5,r3
41026f9c:	200f883a 	mov	r7,r4
41026fa0:	28c00017 	ldw	r3,0(r5)
41026fa4:	31bffc04 	addi	r6,r6,-16
41026fa8:	38c00015 	stw	r3,0(r7)
41026fac:	28800117 	ldw	r2,4(r5)
41026fb0:	38800115 	stw	r2,4(r7)
41026fb4:	28c00217 	ldw	r3,8(r5)
41026fb8:	38c00215 	stw	r3,8(r7)
41026fbc:	28800317 	ldw	r2,12(r5)
41026fc0:	29400404 	addi	r5,r5,16
41026fc4:	38800315 	stw	r2,12(r7)
41026fc8:	39c00404 	addi	r7,r7,16
41026fcc:	41bff436 	bltu	r8,r6,41026fa0 <memmove+0x84>
41026fd0:	008000c4 	movi	r2,3
41026fd4:	1180072e 	bgeu	r2,r6,41026ff4 <memmove+0xd8>
41026fd8:	1007883a 	mov	r3,r2
41026fdc:	28800017 	ldw	r2,0(r5)
41026fe0:	31bfff04 	addi	r6,r6,-4
41026fe4:	29400104 	addi	r5,r5,4
41026fe8:	38800015 	stw	r2,0(r7)
41026fec:	39c00104 	addi	r7,r7,4
41026ff0:	19bffa36 	bltu	r3,r6,41026fdc <memmove+0xc0>
41026ff4:	3811883a 	mov	r8,r7
41026ff8:	003fd906 	br	41026f60 <memmove+0x44>

41026ffc <memset>:
41026ffc:	008000c4 	movi	r2,3
41027000:	29403fcc 	andi	r5,r5,255
41027004:	2007883a 	mov	r3,r4
41027008:	1180022e 	bgeu	r2,r6,41027014 <memset+0x18>
4102700c:	2084703a 	and	r2,r4,r2
41027010:	10000826 	beq	r2,zero,41027034 <memset+0x38>
41027014:	30000526 	beq	r6,zero,4102702c <memset+0x30>
41027018:	2805883a 	mov	r2,r5
4102701c:	30cd883a 	add	r6,r6,r3
41027020:	18800005 	stb	r2,0(r3)
41027024:	18c00044 	addi	r3,r3,1
41027028:	19bffd1e 	bne	r3,r6,41027020 <memset+0x24>
4102702c:	2005883a 	mov	r2,r4
41027030:	f800283a 	ret
41027034:	2804923a 	slli	r2,r5,8
41027038:	020003c4 	movi	r8,15
4102703c:	200f883a 	mov	r7,r4
41027040:	2884b03a 	or	r2,r5,r2
41027044:	1006943a 	slli	r3,r2,16
41027048:	10c6b03a 	or	r3,r2,r3
4102704c:	41800a2e 	bgeu	r8,r6,41027078 <memset+0x7c>
41027050:	4005883a 	mov	r2,r8
41027054:	31bffc04 	addi	r6,r6,-16
41027058:	38c00015 	stw	r3,0(r7)
4102705c:	38c00115 	stw	r3,4(r7)
41027060:	38c00215 	stw	r3,8(r7)
41027064:	38c00315 	stw	r3,12(r7)
41027068:	39c00404 	addi	r7,r7,16
4102706c:	11bff936 	bltu	r2,r6,41027054 <memset+0x58>
41027070:	008000c4 	movi	r2,3
41027074:	1180052e 	bgeu	r2,r6,4102708c <memset+0x90>
41027078:	31bfff04 	addi	r6,r6,-4
4102707c:	008000c4 	movi	r2,3
41027080:	38c00015 	stw	r3,0(r7)
41027084:	39c00104 	addi	r7,r7,4
41027088:	11bffb36 	bltu	r2,r6,41027078 <memset+0x7c>
4102708c:	3807883a 	mov	r3,r7
41027090:	003fe006 	br	41027014 <memset+0x18>

41027094 <_Bfree>:
41027094:	28000826 	beq	r5,zero,410270b8 <_Bfree+0x24>
41027098:	28800117 	ldw	r2,4(r5)
4102709c:	21001317 	ldw	r4,76(r4)
410270a0:	1085883a 	add	r2,r2,r2
410270a4:	1085883a 	add	r2,r2,r2
410270a8:	1105883a 	add	r2,r2,r4
410270ac:	10c00017 	ldw	r3,0(r2)
410270b0:	28c00015 	stw	r3,0(r5)
410270b4:	11400015 	stw	r5,0(r2)
410270b8:	f800283a 	ret

410270bc <__hi0bits>:
410270bc:	20bfffec 	andhi	r2,r4,65535
410270c0:	10001426 	beq	r2,zero,41027114 <__hi0bits+0x58>
410270c4:	0007883a 	mov	r3,zero
410270c8:	20bfc02c 	andhi	r2,r4,65280
410270cc:	1000021e 	bne	r2,zero,410270d8 <__hi0bits+0x1c>
410270d0:	2008923a 	slli	r4,r4,8
410270d4:	18c00204 	addi	r3,r3,8
410270d8:	20bc002c 	andhi	r2,r4,61440
410270dc:	1000021e 	bne	r2,zero,410270e8 <__hi0bits+0x2c>
410270e0:	2008913a 	slli	r4,r4,4
410270e4:	18c00104 	addi	r3,r3,4
410270e8:	20b0002c 	andhi	r2,r4,49152
410270ec:	1000031e 	bne	r2,zero,410270fc <__hi0bits+0x40>
410270f0:	2105883a 	add	r2,r4,r4
410270f4:	18c00084 	addi	r3,r3,2
410270f8:	1089883a 	add	r4,r2,r2
410270fc:	20000316 	blt	r4,zero,4102710c <__hi0bits+0x50>
41027100:	2090002c 	andhi	r2,r4,16384
41027104:	10000626 	beq	r2,zero,41027120 <__hi0bits+0x64>
41027108:	18c00044 	addi	r3,r3,1
4102710c:	1805883a 	mov	r2,r3
41027110:	f800283a 	ret
41027114:	2008943a 	slli	r4,r4,16
41027118:	00c00404 	movi	r3,16
4102711c:	003fea06 	br	410270c8 <__hi0bits+0xc>
41027120:	00c00804 	movi	r3,32
41027124:	1805883a 	mov	r2,r3
41027128:	f800283a 	ret

4102712c <__lo0bits>:
4102712c:	20c00017 	ldw	r3,0(r4)
41027130:	188001cc 	andi	r2,r3,7
41027134:	10000a26 	beq	r2,zero,41027160 <__lo0bits+0x34>
41027138:	1880004c 	andi	r2,r3,1
4102713c:	1005003a 	cmpeq	r2,r2,zero
41027140:	10002126 	beq	r2,zero,410271c8 <__lo0bits+0x9c>
41027144:	1880008c 	andi	r2,r3,2
41027148:	1000251e 	bne	r2,zero,410271e0 <__lo0bits+0xb4>
4102714c:	1804d0ba 	srli	r2,r3,2
41027150:	01400084 	movi	r5,2
41027154:	20800015 	stw	r2,0(r4)
41027158:	2805883a 	mov	r2,r5
4102715c:	f800283a 	ret
41027160:	18bfffcc 	andi	r2,r3,65535
41027164:	10001526 	beq	r2,zero,410271bc <__lo0bits+0x90>
41027168:	000b883a 	mov	r5,zero
4102716c:	18803fcc 	andi	r2,r3,255
41027170:	1000021e 	bne	r2,zero,4102717c <__lo0bits+0x50>
41027174:	1806d23a 	srli	r3,r3,8
41027178:	29400204 	addi	r5,r5,8
4102717c:	188003cc 	andi	r2,r3,15
41027180:	1000021e 	bne	r2,zero,4102718c <__lo0bits+0x60>
41027184:	1806d13a 	srli	r3,r3,4
41027188:	29400104 	addi	r5,r5,4
4102718c:	188000cc 	andi	r2,r3,3
41027190:	1000021e 	bne	r2,zero,4102719c <__lo0bits+0x70>
41027194:	1806d0ba 	srli	r3,r3,2
41027198:	29400084 	addi	r5,r5,2
4102719c:	1880004c 	andi	r2,r3,1
410271a0:	1000031e 	bne	r2,zero,410271b0 <__lo0bits+0x84>
410271a4:	1806d07a 	srli	r3,r3,1
410271a8:	18000a26 	beq	r3,zero,410271d4 <__lo0bits+0xa8>
410271ac:	29400044 	addi	r5,r5,1
410271b0:	2805883a 	mov	r2,r5
410271b4:	20c00015 	stw	r3,0(r4)
410271b8:	f800283a 	ret
410271bc:	1806d43a 	srli	r3,r3,16
410271c0:	01400404 	movi	r5,16
410271c4:	003fe906 	br	4102716c <__lo0bits+0x40>
410271c8:	000b883a 	mov	r5,zero
410271cc:	2805883a 	mov	r2,r5
410271d0:	f800283a 	ret
410271d4:	01400804 	movi	r5,32
410271d8:	2805883a 	mov	r2,r5
410271dc:	f800283a 	ret
410271e0:	1804d07a 	srli	r2,r3,1
410271e4:	01400044 	movi	r5,1
410271e8:	20800015 	stw	r2,0(r4)
410271ec:	003fda06 	br	41027158 <__lo0bits+0x2c>

410271f0 <__mcmp>:
410271f0:	20800417 	ldw	r2,16(r4)
410271f4:	28c00417 	ldw	r3,16(r5)
410271f8:	10cfc83a 	sub	r7,r2,r3
410271fc:	38000c1e 	bne	r7,zero,41027230 <__mcmp+0x40>
41027200:	18c5883a 	add	r2,r3,r3
41027204:	1085883a 	add	r2,r2,r2
41027208:	10c00504 	addi	r3,r2,20
4102720c:	21000504 	addi	r4,r4,20
41027210:	28cb883a 	add	r5,r5,r3
41027214:	2085883a 	add	r2,r4,r2
41027218:	10bfff04 	addi	r2,r2,-4
4102721c:	297fff04 	addi	r5,r5,-4
41027220:	11800017 	ldw	r6,0(r2)
41027224:	28c00017 	ldw	r3,0(r5)
41027228:	30c0031e 	bne	r6,r3,41027238 <__mcmp+0x48>
4102722c:	20bffa36 	bltu	r4,r2,41027218 <__mcmp+0x28>
41027230:	3805883a 	mov	r2,r7
41027234:	f800283a 	ret
41027238:	30c00336 	bltu	r6,r3,41027248 <__mcmp+0x58>
4102723c:	01c00044 	movi	r7,1
41027240:	3805883a 	mov	r2,r7
41027244:	f800283a 	ret
41027248:	01ffffc4 	movi	r7,-1
4102724c:	003ff806 	br	41027230 <__mcmp+0x40>

41027250 <__ulp>:
41027250:	295ffc2c 	andhi	r5,r5,32752
41027254:	013f3034 	movhi	r4,64704
41027258:	290b883a 	add	r5,r5,r4
4102725c:	0145c83a 	sub	r2,zero,r5
41027260:	1007d53a 	srai	r3,r2,20
41027264:	000d883a 	mov	r6,zero
41027268:	0140040e 	bge	zero,r5,4102727c <__ulp+0x2c>
4102726c:	280f883a 	mov	r7,r5
41027270:	3807883a 	mov	r3,r7
41027274:	3005883a 	mov	r2,r6
41027278:	f800283a 	ret
4102727c:	008004c4 	movi	r2,19
41027280:	193ffb04 	addi	r4,r3,-20
41027284:	10c00c0e 	bge	r2,r3,410272b8 <__ulp+0x68>
41027288:	008007c4 	movi	r2,31
4102728c:	1107c83a 	sub	r3,r2,r4
41027290:	00800784 	movi	r2,30
41027294:	01400044 	movi	r5,1
41027298:	11000216 	blt	r2,r4,410272a4 <__ulp+0x54>
4102729c:	00800044 	movi	r2,1
410272a0:	10ca983a 	sll	r5,r2,r3
410272a4:	000f883a 	mov	r7,zero
410272a8:	280d883a 	mov	r6,r5
410272ac:	3807883a 	mov	r3,r7
410272b0:	3005883a 	mov	r2,r6
410272b4:	f800283a 	ret
410272b8:	00800234 	movhi	r2,8
410272bc:	10cfd83a 	sra	r7,r2,r3
410272c0:	000d883a 	mov	r6,zero
410272c4:	3005883a 	mov	r2,r6
410272c8:	3807883a 	mov	r3,r7
410272cc:	f800283a 	ret

410272d0 <__b2d>:
410272d0:	20800417 	ldw	r2,16(r4)
410272d4:	defff904 	addi	sp,sp,-28
410272d8:	dd000415 	stw	r20,16(sp)
410272dc:	1085883a 	add	r2,r2,r2
410272e0:	25000504 	addi	r20,r4,20
410272e4:	1085883a 	add	r2,r2,r2
410272e8:	dc000015 	stw	r16,0(sp)
410272ec:	a0a1883a 	add	r16,r20,r2
410272f0:	dd400515 	stw	r21,20(sp)
410272f4:	857fff17 	ldw	r21,-4(r16)
410272f8:	dc400115 	stw	r17,4(sp)
410272fc:	dfc00615 	stw	ra,24(sp)
41027300:	a809883a 	mov	r4,r21
41027304:	2823883a 	mov	r17,r5
41027308:	dcc00315 	stw	r19,12(sp)
4102730c:	dc800215 	stw	r18,8(sp)
41027310:	10270bc0 	call	410270bc <__hi0bits>
41027314:	100b883a 	mov	r5,r2
41027318:	00800804 	movi	r2,32
4102731c:	1145c83a 	sub	r2,r2,r5
41027320:	88800015 	stw	r2,0(r17)
41027324:	00800284 	movi	r2,10
41027328:	80ffff04 	addi	r3,r16,-4
4102732c:	11401416 	blt	r2,r5,41027380 <__b2d+0xb0>
41027330:	008002c4 	movi	r2,11
41027334:	1149c83a 	sub	r4,r2,r5
41027338:	a0c02736 	bltu	r20,r3,410273d8 <__b2d+0x108>
4102733c:	000d883a 	mov	r6,zero
41027340:	28800544 	addi	r2,r5,21
41027344:	a906d83a 	srl	r3,r21,r4
41027348:	a884983a 	sll	r2,r21,r2
4102734c:	1ccffc34 	orhi	r19,r3,16368
41027350:	11a4b03a 	or	r18,r2,r6
41027354:	9005883a 	mov	r2,r18
41027358:	9807883a 	mov	r3,r19
4102735c:	dfc00617 	ldw	ra,24(sp)
41027360:	dd400517 	ldw	r21,20(sp)
41027364:	dd000417 	ldw	r20,16(sp)
41027368:	dcc00317 	ldw	r19,12(sp)
4102736c:	dc800217 	ldw	r18,8(sp)
41027370:	dc400117 	ldw	r17,4(sp)
41027374:	dc000017 	ldw	r16,0(sp)
41027378:	dec00704 	addi	sp,sp,28
4102737c:	f800283a 	ret
41027380:	a0c00e36 	bltu	r20,r3,410273bc <__b2d+0xec>
41027384:	293ffd44 	addi	r4,r5,-11
41027388:	000d883a 	mov	r6,zero
4102738c:	20000f26 	beq	r4,zero,410273cc <__b2d+0xfc>
41027390:	00800804 	movi	r2,32
41027394:	110bc83a 	sub	r5,r2,r4
41027398:	a0c01236 	bltu	r20,r3,410273e4 <__b2d+0x114>
4102739c:	000f883a 	mov	r7,zero
410273a0:	a904983a 	sll	r2,r21,r4
410273a4:	3146d83a 	srl	r3,r6,r5
410273a8:	3108983a 	sll	r4,r6,r4
410273ac:	108ffc34 	orhi	r2,r2,16368
410273b0:	18a6b03a 	or	r19,r3,r2
410273b4:	3924b03a 	or	r18,r7,r4
410273b8:	003fe606 	br	41027354 <__b2d+0x84>
410273bc:	293ffd44 	addi	r4,r5,-11
410273c0:	81bffe17 	ldw	r6,-8(r16)
410273c4:	80fffe04 	addi	r3,r16,-8
410273c8:	203ff11e 	bne	r4,zero,41027390 <__b2d+0xc0>
410273cc:	accffc34 	orhi	r19,r21,16368
410273d0:	3025883a 	mov	r18,r6
410273d4:	003fdf06 	br	41027354 <__b2d+0x84>
410273d8:	18bfff17 	ldw	r2,-4(r3)
410273dc:	110cd83a 	srl	r6,r2,r4
410273e0:	003fd706 	br	41027340 <__b2d+0x70>
410273e4:	18bfff17 	ldw	r2,-4(r3)
410273e8:	114ed83a 	srl	r7,r2,r5
410273ec:	003fec06 	br	410273a0 <__b2d+0xd0>

410273f0 <__ratio>:
410273f0:	defff904 	addi	sp,sp,-28
410273f4:	dc400215 	stw	r17,8(sp)
410273f8:	2823883a 	mov	r17,r5
410273fc:	d80b883a 	mov	r5,sp
41027400:	dfc00615 	stw	ra,24(sp)
41027404:	dd000515 	stw	r20,20(sp)
41027408:	dcc00415 	stw	r19,16(sp)
4102740c:	dc800315 	stw	r18,12(sp)
41027410:	2025883a 	mov	r18,r4
41027414:	10272d00 	call	410272d0 <__b2d>
41027418:	8809883a 	mov	r4,r17
4102741c:	d9400104 	addi	r5,sp,4
41027420:	1027883a 	mov	r19,r2
41027424:	1829883a 	mov	r20,r3
41027428:	10272d00 	call	410272d0 <__b2d>
4102742c:	89000417 	ldw	r4,16(r17)
41027430:	91c00417 	ldw	r7,16(r18)
41027434:	d9800117 	ldw	r6,4(sp)
41027438:	180b883a 	mov	r5,r3
4102743c:	390fc83a 	sub	r7,r7,r4
41027440:	1009883a 	mov	r4,r2
41027444:	d8800017 	ldw	r2,0(sp)
41027448:	380e917a 	slli	r7,r7,5
4102744c:	2011883a 	mov	r8,r4
41027450:	1185c83a 	sub	r2,r2,r6
41027454:	11c5883a 	add	r2,r2,r7
41027458:	1006953a 	slli	r3,r2,20
4102745c:	2813883a 	mov	r9,r5
41027460:	00800d0e 	bge	zero,r2,41027498 <__ratio+0xa8>
41027464:	1d29883a 	add	r20,r3,r20
41027468:	a00b883a 	mov	r5,r20
4102746c:	480f883a 	mov	r7,r9
41027470:	9809883a 	mov	r4,r19
41027474:	400d883a 	mov	r6,r8
41027478:	102a5740 	call	4102a574 <__divdf3>
4102747c:	dfc00617 	ldw	ra,24(sp)
41027480:	dd000517 	ldw	r20,20(sp)
41027484:	dcc00417 	ldw	r19,16(sp)
41027488:	dc800317 	ldw	r18,12(sp)
4102748c:	dc400217 	ldw	r17,8(sp)
41027490:	dec00704 	addi	sp,sp,28
41027494:	f800283a 	ret
41027498:	28d3c83a 	sub	r9,r5,r3
4102749c:	003ff206 	br	41027468 <__ratio+0x78>

410274a0 <_mprec_log10>:
410274a0:	defffe04 	addi	sp,sp,-8
410274a4:	008005c4 	movi	r2,23
410274a8:	dc000015 	stw	r16,0(sp)
410274ac:	dfc00115 	stw	ra,4(sp)
410274b0:	2021883a 	mov	r16,r4
410274b4:	11000c16 	blt	r2,r4,410274e8 <_mprec_log10+0x48>
410274b8:	200490fa 	slli	r2,r4,3
410274bc:	00d040f4 	movhi	r3,16643
410274c0:	18f7fc04 	addi	r3,r3,-8208
410274c4:	10c5883a 	add	r2,r2,r3
410274c8:	12400117 	ldw	r9,4(r2)
410274cc:	12000017 	ldw	r8,0(r2)
410274d0:	4807883a 	mov	r3,r9
410274d4:	4005883a 	mov	r2,r8
410274d8:	dfc00117 	ldw	ra,4(sp)
410274dc:	dc000017 	ldw	r16,0(sp)
410274e0:	dec00204 	addi	sp,sp,8
410274e4:	f800283a 	ret
410274e8:	0011883a 	mov	r8,zero
410274ec:	024ffc34 	movhi	r9,16368
410274f0:	0005883a 	mov	r2,zero
410274f4:	00d00934 	movhi	r3,16420
410274f8:	480b883a 	mov	r5,r9
410274fc:	4009883a 	mov	r4,r8
41027500:	180f883a 	mov	r7,r3
41027504:	100d883a 	mov	r6,r2
41027508:	102a1c00 	call	4102a1c0 <__muldf3>
4102750c:	843fffc4 	addi	r16,r16,-1
41027510:	1011883a 	mov	r8,r2
41027514:	1813883a 	mov	r9,r3
41027518:	803ff51e 	bne	r16,zero,410274f0 <_mprec_log10+0x50>
4102751c:	4005883a 	mov	r2,r8
41027520:	4807883a 	mov	r3,r9
41027524:	dfc00117 	ldw	ra,4(sp)
41027528:	dc000017 	ldw	r16,0(sp)
4102752c:	dec00204 	addi	sp,sp,8
41027530:	f800283a 	ret

41027534 <__copybits>:
41027534:	297fffc4 	addi	r5,r5,-1
41027538:	30800417 	ldw	r2,16(r6)
4102753c:	280bd17a 	srai	r5,r5,5
41027540:	31800504 	addi	r6,r6,20
41027544:	1085883a 	add	r2,r2,r2
41027548:	294b883a 	add	r5,r5,r5
4102754c:	294b883a 	add	r5,r5,r5
41027550:	1085883a 	add	r2,r2,r2
41027554:	290b883a 	add	r5,r5,r4
41027558:	3087883a 	add	r3,r6,r2
4102755c:	29400104 	addi	r5,r5,4
41027560:	30c0052e 	bgeu	r6,r3,41027578 <__copybits+0x44>
41027564:	30800017 	ldw	r2,0(r6)
41027568:	31800104 	addi	r6,r6,4
4102756c:	20800015 	stw	r2,0(r4)
41027570:	21000104 	addi	r4,r4,4
41027574:	30fffb36 	bltu	r6,r3,41027564 <__copybits+0x30>
41027578:	2140032e 	bgeu	r4,r5,41027588 <__copybits+0x54>
4102757c:	20000015 	stw	zero,0(r4)
41027580:	21000104 	addi	r4,r4,4
41027584:	217ffd36 	bltu	r4,r5,4102757c <__copybits+0x48>
41027588:	f800283a 	ret

4102758c <__any_on>:
4102758c:	20800417 	ldw	r2,16(r4)
41027590:	2807d17a 	srai	r3,r5,5
41027594:	21000504 	addi	r4,r4,20
41027598:	10c00d0e 	bge	r2,r3,410275d0 <__any_on+0x44>
4102759c:	1085883a 	add	r2,r2,r2
410275a0:	1085883a 	add	r2,r2,r2
410275a4:	208d883a 	add	r6,r4,r2
410275a8:	2180182e 	bgeu	r4,r6,4102760c <__any_on+0x80>
410275ac:	30bfff17 	ldw	r2,-4(r6)
410275b0:	30ffff04 	addi	r3,r6,-4
410275b4:	1000041e 	bne	r2,zero,410275c8 <__any_on+0x3c>
410275b8:	20c0142e 	bgeu	r4,r3,4102760c <__any_on+0x80>
410275bc:	18ffff04 	addi	r3,r3,-4
410275c0:	18800017 	ldw	r2,0(r3)
410275c4:	103ffc26 	beq	r2,zero,410275b8 <__any_on+0x2c>
410275c8:	00800044 	movi	r2,1
410275cc:	f800283a 	ret
410275d0:	18800a0e 	bge	r3,r2,410275fc <__any_on+0x70>
410275d4:	294007cc 	andi	r5,r5,31
410275d8:	28000826 	beq	r5,zero,410275fc <__any_on+0x70>
410275dc:	18c5883a 	add	r2,r3,r3
410275e0:	1085883a 	add	r2,r2,r2
410275e4:	208d883a 	add	r6,r4,r2
410275e8:	30c00017 	ldw	r3,0(r6)
410275ec:	1944d83a 	srl	r2,r3,r5
410275f0:	1144983a 	sll	r2,r2,r5
410275f4:	18bff41e 	bne	r3,r2,410275c8 <__any_on+0x3c>
410275f8:	003feb06 	br	410275a8 <__any_on+0x1c>
410275fc:	18c5883a 	add	r2,r3,r3
41027600:	1085883a 	add	r2,r2,r2
41027604:	208d883a 	add	r6,r4,r2
41027608:	003fe706 	br	410275a8 <__any_on+0x1c>
4102760c:	0005883a 	mov	r2,zero
41027610:	f800283a 	ret

41027614 <_Balloc>:
41027614:	20c01317 	ldw	r3,76(r4)
41027618:	defffb04 	addi	sp,sp,-20
4102761c:	dcc00315 	stw	r19,12(sp)
41027620:	dc800215 	stw	r18,8(sp)
41027624:	dfc00415 	stw	ra,16(sp)
41027628:	2825883a 	mov	r18,r5
4102762c:	dc400115 	stw	r17,4(sp)
41027630:	dc000015 	stw	r16,0(sp)
41027634:	2027883a 	mov	r19,r4
41027638:	01800404 	movi	r6,16
4102763c:	01400104 	movi	r5,4
41027640:	18001726 	beq	r3,zero,410276a0 <_Balloc+0x8c>
41027644:	01400044 	movi	r5,1
41027648:	9485883a 	add	r2,r18,r18
4102764c:	2ca2983a 	sll	r17,r5,r18
41027650:	1085883a 	add	r2,r2,r2
41027654:	10c7883a 	add	r3,r2,r3
41027658:	1c000017 	ldw	r16,0(r3)
4102765c:	8c4d883a 	add	r6,r17,r17
41027660:	318d883a 	add	r6,r6,r6
41027664:	9809883a 	mov	r4,r19
41027668:	31800504 	addi	r6,r6,20
4102766c:	80001226 	beq	r16,zero,410276b8 <_Balloc+0xa4>
41027670:	80800017 	ldw	r2,0(r16)
41027674:	18800015 	stw	r2,0(r3)
41027678:	80000415 	stw	zero,16(r16)
4102767c:	80000315 	stw	zero,12(r16)
41027680:	8005883a 	mov	r2,r16
41027684:	dfc00417 	ldw	ra,16(sp)
41027688:	dcc00317 	ldw	r19,12(sp)
4102768c:	dc800217 	ldw	r18,8(sp)
41027690:	dc400117 	ldw	r17,4(sp)
41027694:	dc000017 	ldw	r16,0(sp)
41027698:	dec00504 	addi	sp,sp,20
4102769c:	f800283a 	ret
410276a0:	1028d140 	call	41028d14 <_calloc_r>
410276a4:	1007883a 	mov	r3,r2
410276a8:	0021883a 	mov	r16,zero
410276ac:	98801315 	stw	r2,76(r19)
410276b0:	103fe41e 	bne	r2,zero,41027644 <_Balloc+0x30>
410276b4:	003ff206 	br	41027680 <_Balloc+0x6c>
410276b8:	1028d140 	call	41028d14 <_calloc_r>
410276bc:	103ff026 	beq	r2,zero,41027680 <_Balloc+0x6c>
410276c0:	1021883a 	mov	r16,r2
410276c4:	14800115 	stw	r18,4(r2)
410276c8:	14400215 	stw	r17,8(r2)
410276cc:	003fea06 	br	41027678 <_Balloc+0x64>

410276d0 <__d2b>:
410276d0:	defff504 	addi	sp,sp,-44
410276d4:	dcc00515 	stw	r19,20(sp)
410276d8:	04c00044 	movi	r19,1
410276dc:	dc000215 	stw	r16,8(sp)
410276e0:	2821883a 	mov	r16,r5
410276e4:	980b883a 	mov	r5,r19
410276e8:	ddc00915 	stw	r23,36(sp)
410276ec:	dd800815 	stw	r22,32(sp)
410276f0:	dd400715 	stw	r21,28(sp)
410276f4:	dd000615 	stw	r20,24(sp)
410276f8:	dc800415 	stw	r18,16(sp)
410276fc:	dc400315 	stw	r17,12(sp)
41027700:	dfc00a15 	stw	ra,40(sp)
41027704:	3023883a 	mov	r17,r6
41027708:	382d883a 	mov	r22,r7
4102770c:	ddc00b17 	ldw	r23,44(sp)
41027710:	10276140 	call	41027614 <_Balloc>
41027714:	1025883a 	mov	r18,r2
41027718:	00a00034 	movhi	r2,32768
4102771c:	10bfffc4 	addi	r2,r2,-1
41027720:	8888703a 	and	r4,r17,r2
41027724:	202ad53a 	srli	r21,r4,20
41027728:	00800434 	movhi	r2,16
4102772c:	10bfffc4 	addi	r2,r2,-1
41027730:	8886703a 	and	r3,r17,r2
41027734:	a829003a 	cmpeq	r20,r21,zero
41027738:	800b883a 	mov	r5,r16
4102773c:	d8c00115 	stw	r3,4(sp)
41027740:	94000504 	addi	r16,r18,20
41027744:	a000021e 	bne	r20,zero,41027750 <__d2b+0x80>
41027748:	18c00434 	orhi	r3,r3,16
4102774c:	d8c00115 	stw	r3,4(sp)
41027750:	28002726 	beq	r5,zero,410277f0 <__d2b+0x120>
41027754:	d809883a 	mov	r4,sp
41027758:	d9400015 	stw	r5,0(sp)
4102775c:	102712c0 	call	4102712c <__lo0bits>
41027760:	100d883a 	mov	r6,r2
41027764:	10003526 	beq	r2,zero,4102783c <__d2b+0x16c>
41027768:	d8c00117 	ldw	r3,4(sp)
4102776c:	00800804 	movi	r2,32
41027770:	1185c83a 	sub	r2,r2,r6
41027774:	d9000017 	ldw	r4,0(sp)
41027778:	1886983a 	sll	r3,r3,r2
4102777c:	1906b03a 	or	r3,r3,r4
41027780:	90c00515 	stw	r3,20(r18)
41027784:	d8c00117 	ldw	r3,4(sp)
41027788:	1986d83a 	srl	r3,r3,r6
4102778c:	d8c00115 	stw	r3,4(sp)
41027790:	180b003a 	cmpeq	r5,r3,zero
41027794:	00800084 	movi	r2,2
41027798:	114bc83a 	sub	r5,r2,r5
4102779c:	80c00115 	stw	r3,4(r16)
410277a0:	91400415 	stw	r5,16(r18)
410277a4:	a0001a1e 	bne	r20,zero,41027810 <__d2b+0x140>
410277a8:	3545883a 	add	r2,r6,r21
410277ac:	10bef344 	addi	r2,r2,-1075
410277b0:	00c00d44 	movi	r3,53
410277b4:	b0800015 	stw	r2,0(r22)
410277b8:	1987c83a 	sub	r3,r3,r6
410277bc:	b8c00015 	stw	r3,0(r23)
410277c0:	9005883a 	mov	r2,r18
410277c4:	dfc00a17 	ldw	ra,40(sp)
410277c8:	ddc00917 	ldw	r23,36(sp)
410277cc:	dd800817 	ldw	r22,32(sp)
410277d0:	dd400717 	ldw	r21,28(sp)
410277d4:	dd000617 	ldw	r20,24(sp)
410277d8:	dcc00517 	ldw	r19,20(sp)
410277dc:	dc800417 	ldw	r18,16(sp)
410277e0:	dc400317 	ldw	r17,12(sp)
410277e4:	dc000217 	ldw	r16,8(sp)
410277e8:	dec00b04 	addi	sp,sp,44
410277ec:	f800283a 	ret
410277f0:	d9000104 	addi	r4,sp,4
410277f4:	102712c0 	call	4102712c <__lo0bits>
410277f8:	11800804 	addi	r6,r2,32
410277fc:	d8800117 	ldw	r2,4(sp)
41027800:	94c00415 	stw	r19,16(r18)
41027804:	980b883a 	mov	r5,r19
41027808:	90800515 	stw	r2,20(r18)
4102780c:	a03fe626 	beq	r20,zero,410277a8 <__d2b+0xd8>
41027810:	2945883a 	add	r2,r5,r5
41027814:	1085883a 	add	r2,r2,r2
41027818:	1405883a 	add	r2,r2,r16
4102781c:	113fff17 	ldw	r4,-4(r2)
41027820:	30fef384 	addi	r3,r6,-1074
41027824:	2820917a 	slli	r16,r5,5
41027828:	b0c00015 	stw	r3,0(r22)
4102782c:	10270bc0 	call	410270bc <__hi0bits>
41027830:	80a1c83a 	sub	r16,r16,r2
41027834:	bc000015 	stw	r16,0(r23)
41027838:	003fe106 	br	410277c0 <__d2b+0xf0>
4102783c:	d8800017 	ldw	r2,0(sp)
41027840:	90800515 	stw	r2,20(r18)
41027844:	d8c00117 	ldw	r3,4(sp)
41027848:	003fd106 	br	41027790 <__d2b+0xc0>

4102784c <__mdiff>:
4102784c:	defffb04 	addi	sp,sp,-20
41027850:	dc000015 	stw	r16,0(sp)
41027854:	2821883a 	mov	r16,r5
41027858:	dc800215 	stw	r18,8(sp)
4102785c:	300b883a 	mov	r5,r6
41027860:	2025883a 	mov	r18,r4
41027864:	8009883a 	mov	r4,r16
41027868:	dc400115 	stw	r17,4(sp)
4102786c:	dfc00415 	stw	ra,16(sp)
41027870:	dcc00315 	stw	r19,12(sp)
41027874:	3023883a 	mov	r17,r6
41027878:	10271f00 	call	410271f0 <__mcmp>
4102787c:	10004226 	beq	r2,zero,41027988 <__mdiff+0x13c>
41027880:	10005016 	blt	r2,zero,410279c4 <__mdiff+0x178>
41027884:	0027883a 	mov	r19,zero
41027888:	81400117 	ldw	r5,4(r16)
4102788c:	9009883a 	mov	r4,r18
41027890:	10276140 	call	41027614 <_Balloc>
41027894:	1019883a 	mov	r12,r2
41027898:	82800417 	ldw	r10,16(r16)
4102789c:	88800417 	ldw	r2,16(r17)
410278a0:	81800504 	addi	r6,r16,20
410278a4:	5287883a 	add	r3,r10,r10
410278a8:	1085883a 	add	r2,r2,r2
410278ac:	18c7883a 	add	r3,r3,r3
410278b0:	1085883a 	add	r2,r2,r2
410278b4:	8a000504 	addi	r8,r17,20
410278b8:	64c00315 	stw	r19,12(r12)
410278bc:	30db883a 	add	r13,r6,r3
410278c0:	4097883a 	add	r11,r8,r2
410278c4:	61c00504 	addi	r7,r12,20
410278c8:	0013883a 	mov	r9,zero
410278cc:	31000017 	ldw	r4,0(r6)
410278d0:	41400017 	ldw	r5,0(r8)
410278d4:	42000104 	addi	r8,r8,4
410278d8:	20bfffcc 	andi	r2,r4,65535
410278dc:	28ffffcc 	andi	r3,r5,65535
410278e0:	10c5c83a 	sub	r2,r2,r3
410278e4:	1245883a 	add	r2,r2,r9
410278e8:	2008d43a 	srli	r4,r4,16
410278ec:	280ad43a 	srli	r5,r5,16
410278f0:	1007d43a 	srai	r3,r2,16
410278f4:	3880000d 	sth	r2,0(r7)
410278f8:	2149c83a 	sub	r4,r4,r5
410278fc:	20c9883a 	add	r4,r4,r3
41027900:	3900008d 	sth	r4,2(r7)
41027904:	31800104 	addi	r6,r6,4
41027908:	39c00104 	addi	r7,r7,4
4102790c:	2013d43a 	srai	r9,r4,16
41027910:	42ffee36 	bltu	r8,r11,410278cc <__mdiff+0x80>
41027914:	33400c2e 	bgeu	r6,r13,41027948 <__mdiff+0xfc>
41027918:	30800017 	ldw	r2,0(r6)
4102791c:	31800104 	addi	r6,r6,4
41027920:	10ffffcc 	andi	r3,r2,65535
41027924:	1a47883a 	add	r3,r3,r9
41027928:	1004d43a 	srli	r2,r2,16
4102792c:	1809d43a 	srai	r4,r3,16
41027930:	38c0000d 	sth	r3,0(r7)
41027934:	1105883a 	add	r2,r2,r4
41027938:	3880008d 	sth	r2,2(r7)
4102793c:	1013d43a 	srai	r9,r2,16
41027940:	39c00104 	addi	r7,r7,4
41027944:	337ff436 	bltu	r6,r13,41027918 <__mdiff+0xcc>
41027948:	38bfff17 	ldw	r2,-4(r7)
4102794c:	38ffff04 	addi	r3,r7,-4
41027950:	1000041e 	bne	r2,zero,41027964 <__mdiff+0x118>
41027954:	18ffff04 	addi	r3,r3,-4
41027958:	18800017 	ldw	r2,0(r3)
4102795c:	52bfffc4 	addi	r10,r10,-1
41027960:	103ffc26 	beq	r2,zero,41027954 <__mdiff+0x108>
41027964:	6005883a 	mov	r2,r12
41027968:	62800415 	stw	r10,16(r12)
4102796c:	dfc00417 	ldw	ra,16(sp)
41027970:	dcc00317 	ldw	r19,12(sp)
41027974:	dc800217 	ldw	r18,8(sp)
41027978:	dc400117 	ldw	r17,4(sp)
4102797c:	dc000017 	ldw	r16,0(sp)
41027980:	dec00504 	addi	sp,sp,20
41027984:	f800283a 	ret
41027988:	9009883a 	mov	r4,r18
4102798c:	000b883a 	mov	r5,zero
41027990:	10276140 	call	41027614 <_Balloc>
41027994:	1019883a 	mov	r12,r2
41027998:	00800044 	movi	r2,1
4102799c:	60800415 	stw	r2,16(r12)
410279a0:	6005883a 	mov	r2,r12
410279a4:	60000515 	stw	zero,20(r12)
410279a8:	dfc00417 	ldw	ra,16(sp)
410279ac:	dcc00317 	ldw	r19,12(sp)
410279b0:	dc800217 	ldw	r18,8(sp)
410279b4:	dc400117 	ldw	r17,4(sp)
410279b8:	dc000017 	ldw	r16,0(sp)
410279bc:	dec00504 	addi	sp,sp,20
410279c0:	f800283a 	ret
410279c4:	880d883a 	mov	r6,r17
410279c8:	04c00044 	movi	r19,1
410279cc:	8023883a 	mov	r17,r16
410279d0:	3021883a 	mov	r16,r6
410279d4:	003fac06 	br	41027888 <__mdiff+0x3c>

410279d8 <__lshift>:
410279d8:	defff904 	addi	sp,sp,-28
410279dc:	28800417 	ldw	r2,16(r5)
410279e0:	dc000015 	stw	r16,0(sp)
410279e4:	3021d17a 	srai	r16,r6,5
410279e8:	28c00217 	ldw	r3,8(r5)
410279ec:	10800044 	addi	r2,r2,1
410279f0:	dc400115 	stw	r17,4(sp)
410279f4:	80a3883a 	add	r17,r16,r2
410279f8:	dd400515 	stw	r21,20(sp)
410279fc:	dd000415 	stw	r20,16(sp)
41027a00:	dc800215 	stw	r18,8(sp)
41027a04:	dfc00615 	stw	ra,24(sp)
41027a08:	2825883a 	mov	r18,r5
41027a0c:	dcc00315 	stw	r19,12(sp)
41027a10:	3029883a 	mov	r20,r6
41027a14:	202b883a 	mov	r21,r4
41027a18:	29400117 	ldw	r5,4(r5)
41027a1c:	1c40030e 	bge	r3,r17,41027a2c <__lshift+0x54>
41027a20:	18c7883a 	add	r3,r3,r3
41027a24:	29400044 	addi	r5,r5,1
41027a28:	1c7ffd16 	blt	r3,r17,41027a20 <__lshift+0x48>
41027a2c:	a809883a 	mov	r4,r21
41027a30:	10276140 	call	41027614 <_Balloc>
41027a34:	1027883a 	mov	r19,r2
41027a38:	11400504 	addi	r5,r2,20
41027a3c:	0400090e 	bge	zero,r16,41027a64 <__lshift+0x8c>
41027a40:	2805883a 	mov	r2,r5
41027a44:	0007883a 	mov	r3,zero
41027a48:	18c00044 	addi	r3,r3,1
41027a4c:	10000015 	stw	zero,0(r2)
41027a50:	10800104 	addi	r2,r2,4
41027a54:	80fffc1e 	bne	r16,r3,41027a48 <__lshift+0x70>
41027a58:	8405883a 	add	r2,r16,r16
41027a5c:	1085883a 	add	r2,r2,r2
41027a60:	288b883a 	add	r5,r5,r2
41027a64:	90800417 	ldw	r2,16(r18)
41027a68:	91000504 	addi	r4,r18,20
41027a6c:	a18007cc 	andi	r6,r20,31
41027a70:	1085883a 	add	r2,r2,r2
41027a74:	1085883a 	add	r2,r2,r2
41027a78:	208f883a 	add	r7,r4,r2
41027a7c:	30001e26 	beq	r6,zero,41027af8 <__lshift+0x120>
41027a80:	00800804 	movi	r2,32
41027a84:	1191c83a 	sub	r8,r2,r6
41027a88:	0007883a 	mov	r3,zero
41027a8c:	20800017 	ldw	r2,0(r4)
41027a90:	1184983a 	sll	r2,r2,r6
41027a94:	1884b03a 	or	r2,r3,r2
41027a98:	28800015 	stw	r2,0(r5)
41027a9c:	20c00017 	ldw	r3,0(r4)
41027aa0:	21000104 	addi	r4,r4,4
41027aa4:	29400104 	addi	r5,r5,4
41027aa8:	1a06d83a 	srl	r3,r3,r8
41027aac:	21fff736 	bltu	r4,r7,41027a8c <__lshift+0xb4>
41027ab0:	28c00015 	stw	r3,0(r5)
41027ab4:	18000126 	beq	r3,zero,41027abc <__lshift+0xe4>
41027ab8:	8c400044 	addi	r17,r17,1
41027abc:	88bfffc4 	addi	r2,r17,-1
41027ac0:	98800415 	stw	r2,16(r19)
41027ac4:	a809883a 	mov	r4,r21
41027ac8:	900b883a 	mov	r5,r18
41027acc:	10270940 	call	41027094 <_Bfree>
41027ad0:	9805883a 	mov	r2,r19
41027ad4:	dfc00617 	ldw	ra,24(sp)
41027ad8:	dd400517 	ldw	r21,20(sp)
41027adc:	dd000417 	ldw	r20,16(sp)
41027ae0:	dcc00317 	ldw	r19,12(sp)
41027ae4:	dc800217 	ldw	r18,8(sp)
41027ae8:	dc400117 	ldw	r17,4(sp)
41027aec:	dc000017 	ldw	r16,0(sp)
41027af0:	dec00704 	addi	sp,sp,28
41027af4:	f800283a 	ret
41027af8:	20800017 	ldw	r2,0(r4)
41027afc:	21000104 	addi	r4,r4,4
41027b00:	28800015 	stw	r2,0(r5)
41027b04:	29400104 	addi	r5,r5,4
41027b08:	21ffec2e 	bgeu	r4,r7,41027abc <__lshift+0xe4>
41027b0c:	20800017 	ldw	r2,0(r4)
41027b10:	21000104 	addi	r4,r4,4
41027b14:	28800015 	stw	r2,0(r5)
41027b18:	29400104 	addi	r5,r5,4
41027b1c:	21fff636 	bltu	r4,r7,41027af8 <__lshift+0x120>
41027b20:	003fe606 	br	41027abc <__lshift+0xe4>

41027b24 <__multiply>:
41027b24:	defff904 	addi	sp,sp,-28
41027b28:	dcc00315 	stw	r19,12(sp)
41027b2c:	dc800215 	stw	r18,8(sp)
41027b30:	2cc00417 	ldw	r19,16(r5)
41027b34:	34800417 	ldw	r18,16(r6)
41027b38:	dd000415 	stw	r20,16(sp)
41027b3c:	dc400115 	stw	r17,4(sp)
41027b40:	dfc00615 	stw	ra,24(sp)
41027b44:	dd400515 	stw	r21,20(sp)
41027b48:	dc000015 	stw	r16,0(sp)
41027b4c:	2823883a 	mov	r17,r5
41027b50:	3029883a 	mov	r20,r6
41027b54:	9c80040e 	bge	r19,r18,41027b68 <__multiply+0x44>
41027b58:	9027883a 	mov	r19,r18
41027b5c:	2c800417 	ldw	r18,16(r5)
41027b60:	2829883a 	mov	r20,r5
41027b64:	3023883a 	mov	r17,r6
41027b68:	88800217 	ldw	r2,8(r17)
41027b6c:	9ca1883a 	add	r16,r19,r18
41027b70:	89400117 	ldw	r5,4(r17)
41027b74:	1400010e 	bge	r2,r16,41027b7c <__multiply+0x58>
41027b78:	29400044 	addi	r5,r5,1
41027b7c:	10276140 	call	41027614 <_Balloc>
41027b80:	102b883a 	mov	r21,r2
41027b84:	8405883a 	add	r2,r16,r16
41027b88:	1085883a 	add	r2,r2,r2
41027b8c:	a9000504 	addi	r4,r21,20
41027b90:	209d883a 	add	r14,r4,r2
41027b94:	2380042e 	bgeu	r4,r14,41027ba8 <__multiply+0x84>
41027b98:	2005883a 	mov	r2,r4
41027b9c:	10000015 	stw	zero,0(r2)
41027ba0:	10800104 	addi	r2,r2,4
41027ba4:	13bffd36 	bltu	r2,r14,41027b9c <__multiply+0x78>
41027ba8:	9485883a 	add	r2,r18,r18
41027bac:	9cc7883a 	add	r3,r19,r19
41027bb0:	a1800504 	addi	r6,r20,20
41027bb4:	1085883a 	add	r2,r2,r2
41027bb8:	8b400504 	addi	r13,r17,20
41027bbc:	18c7883a 	add	r3,r3,r3
41027bc0:	309f883a 	add	r15,r6,r2
41027bc4:	68d7883a 	add	r11,r13,r3
41027bc8:	33c03b2e 	bgeu	r6,r15,41027cb8 <__multiply+0x194>
41027bcc:	2019883a 	mov	r12,r4
41027bd0:	30800017 	ldw	r2,0(r6)
41027bd4:	127fffcc 	andi	r9,r2,65535
41027bd8:	48001826 	beq	r9,zero,41027c3c <__multiply+0x118>
41027bdc:	6811883a 	mov	r8,r13
41027be0:	600f883a 	mov	r7,r12
41027be4:	0015883a 	mov	r10,zero
41027be8:	40c00017 	ldw	r3,0(r8)
41027bec:	39400017 	ldw	r5,0(r7)
41027bf0:	42000104 	addi	r8,r8,4
41027bf4:	193fffcc 	andi	r4,r3,65535
41027bf8:	4909383a 	mul	r4,r9,r4
41027bfc:	1806d43a 	srli	r3,r3,16
41027c00:	28bfffcc 	andi	r2,r5,65535
41027c04:	5085883a 	add	r2,r10,r2
41027c08:	2089883a 	add	r4,r4,r2
41027c0c:	48c7383a 	mul	r3,r9,r3
41027c10:	280ad43a 	srli	r5,r5,16
41027c14:	2004d43a 	srli	r2,r4,16
41027c18:	3900000d 	sth	r4,0(r7)
41027c1c:	1947883a 	add	r3,r3,r5
41027c20:	10c5883a 	add	r2,r2,r3
41027c24:	3880008d 	sth	r2,2(r7)
41027c28:	1014d43a 	srli	r10,r2,16
41027c2c:	39c00104 	addi	r7,r7,4
41027c30:	42ffed36 	bltu	r8,r11,41027be8 <__multiply+0xc4>
41027c34:	3a800015 	stw	r10,0(r7)
41027c38:	30800017 	ldw	r2,0(r6)
41027c3c:	1012d43a 	srli	r9,r2,16
41027c40:	48001926 	beq	r9,zero,41027ca8 <__multiply+0x184>
41027c44:	60800017 	ldw	r2,0(r12)
41027c48:	6811883a 	mov	r8,r13
41027c4c:	600f883a 	mov	r7,r12
41027c50:	0015883a 	mov	r10,zero
41027c54:	100b883a 	mov	r5,r2
41027c58:	41000017 	ldw	r4,0(r8)
41027c5c:	2806d43a 	srli	r3,r5,16
41027c60:	3880000d 	sth	r2,0(r7)
41027c64:	20bfffcc 	andi	r2,r4,65535
41027c68:	4885383a 	mul	r2,r9,r2
41027c6c:	50c7883a 	add	r3,r10,r3
41027c70:	2008d43a 	srli	r4,r4,16
41027c74:	10c5883a 	add	r2,r2,r3
41027c78:	3880008d 	sth	r2,2(r7)
41027c7c:	39c00104 	addi	r7,r7,4
41027c80:	39400017 	ldw	r5,0(r7)
41027c84:	4909383a 	mul	r4,r9,r4
41027c88:	1004d43a 	srli	r2,r2,16
41027c8c:	28ffffcc 	andi	r3,r5,65535
41027c90:	20c9883a 	add	r4,r4,r3
41027c94:	1105883a 	add	r2,r2,r4
41027c98:	42000104 	addi	r8,r8,4
41027c9c:	1014d43a 	srli	r10,r2,16
41027ca0:	42ffed36 	bltu	r8,r11,41027c58 <__multiply+0x134>
41027ca4:	38800015 	stw	r2,0(r7)
41027ca8:	31800104 	addi	r6,r6,4
41027cac:	33c0022e 	bgeu	r6,r15,41027cb8 <__multiply+0x194>
41027cb0:	63000104 	addi	r12,r12,4
41027cb4:	003fc606 	br	41027bd0 <__multiply+0xac>
41027cb8:	0400090e 	bge	zero,r16,41027ce0 <__multiply+0x1bc>
41027cbc:	70bfff17 	ldw	r2,-4(r14)
41027cc0:	70ffff04 	addi	r3,r14,-4
41027cc4:	10000326 	beq	r2,zero,41027cd4 <__multiply+0x1b0>
41027cc8:	00000506 	br	41027ce0 <__multiply+0x1bc>
41027ccc:	18800017 	ldw	r2,0(r3)
41027cd0:	1000031e 	bne	r2,zero,41027ce0 <__multiply+0x1bc>
41027cd4:	843fffc4 	addi	r16,r16,-1
41027cd8:	18ffff04 	addi	r3,r3,-4
41027cdc:	803ffb1e 	bne	r16,zero,41027ccc <__multiply+0x1a8>
41027ce0:	a805883a 	mov	r2,r21
41027ce4:	ac000415 	stw	r16,16(r21)
41027ce8:	dfc00617 	ldw	ra,24(sp)
41027cec:	dd400517 	ldw	r21,20(sp)
41027cf0:	dd000417 	ldw	r20,16(sp)
41027cf4:	dcc00317 	ldw	r19,12(sp)
41027cf8:	dc800217 	ldw	r18,8(sp)
41027cfc:	dc400117 	ldw	r17,4(sp)
41027d00:	dc000017 	ldw	r16,0(sp)
41027d04:	dec00704 	addi	sp,sp,28
41027d08:	f800283a 	ret

41027d0c <__i2b>:
41027d0c:	defffd04 	addi	sp,sp,-12
41027d10:	dc000015 	stw	r16,0(sp)
41027d14:	04000044 	movi	r16,1
41027d18:	dc800115 	stw	r18,4(sp)
41027d1c:	2825883a 	mov	r18,r5
41027d20:	800b883a 	mov	r5,r16
41027d24:	dfc00215 	stw	ra,8(sp)
41027d28:	10276140 	call	41027614 <_Balloc>
41027d2c:	14000415 	stw	r16,16(r2)
41027d30:	14800515 	stw	r18,20(r2)
41027d34:	dfc00217 	ldw	ra,8(sp)
41027d38:	dc800117 	ldw	r18,4(sp)
41027d3c:	dc000017 	ldw	r16,0(sp)
41027d40:	dec00304 	addi	sp,sp,12
41027d44:	f800283a 	ret

41027d48 <__multadd>:
41027d48:	defffa04 	addi	sp,sp,-24
41027d4c:	dc800215 	stw	r18,8(sp)
41027d50:	2c800417 	ldw	r18,16(r5)
41027d54:	dd000415 	stw	r20,16(sp)
41027d58:	dcc00315 	stw	r19,12(sp)
41027d5c:	dc000015 	stw	r16,0(sp)
41027d60:	dfc00515 	stw	ra,20(sp)
41027d64:	3821883a 	mov	r16,r7
41027d68:	dc400115 	stw	r17,4(sp)
41027d6c:	2827883a 	mov	r19,r5
41027d70:	2029883a 	mov	r20,r4
41027d74:	2a000504 	addi	r8,r5,20
41027d78:	000f883a 	mov	r7,zero
41027d7c:	40800017 	ldw	r2,0(r8)
41027d80:	39c00044 	addi	r7,r7,1
41027d84:	10ffffcc 	andi	r3,r2,65535
41027d88:	1987383a 	mul	r3,r3,r6
41027d8c:	1004d43a 	srli	r2,r2,16
41027d90:	1c07883a 	add	r3,r3,r16
41027d94:	180ad43a 	srli	r5,r3,16
41027d98:	1185383a 	mul	r2,r2,r6
41027d9c:	18ffffcc 	andi	r3,r3,65535
41027da0:	1145883a 	add	r2,r2,r5
41027da4:	1008943a 	slli	r4,r2,16
41027da8:	1020d43a 	srli	r16,r2,16
41027dac:	20c9883a 	add	r4,r4,r3
41027db0:	41000015 	stw	r4,0(r8)
41027db4:	42000104 	addi	r8,r8,4
41027db8:	3cbff016 	blt	r7,r18,41027d7c <__multadd+0x34>
41027dbc:	80000826 	beq	r16,zero,41027de0 <__multadd+0x98>
41027dc0:	98800217 	ldw	r2,8(r19)
41027dc4:	90800f0e 	bge	r18,r2,41027e04 <__multadd+0xbc>
41027dc8:	9485883a 	add	r2,r18,r18
41027dcc:	1085883a 	add	r2,r2,r2
41027dd0:	14c5883a 	add	r2,r2,r19
41027dd4:	90c00044 	addi	r3,r18,1
41027dd8:	14000515 	stw	r16,20(r2)
41027ddc:	98c00415 	stw	r3,16(r19)
41027de0:	9805883a 	mov	r2,r19
41027de4:	dfc00517 	ldw	ra,20(sp)
41027de8:	dd000417 	ldw	r20,16(sp)
41027dec:	dcc00317 	ldw	r19,12(sp)
41027df0:	dc800217 	ldw	r18,8(sp)
41027df4:	dc400117 	ldw	r17,4(sp)
41027df8:	dc000017 	ldw	r16,0(sp)
41027dfc:	dec00604 	addi	sp,sp,24
41027e00:	f800283a 	ret
41027e04:	99400117 	ldw	r5,4(r19)
41027e08:	a009883a 	mov	r4,r20
41027e0c:	29400044 	addi	r5,r5,1
41027e10:	10276140 	call	41027614 <_Balloc>
41027e14:	99800417 	ldw	r6,16(r19)
41027e18:	99400304 	addi	r5,r19,12
41027e1c:	11000304 	addi	r4,r2,12
41027e20:	318d883a 	add	r6,r6,r6
41027e24:	318d883a 	add	r6,r6,r6
41027e28:	31800204 	addi	r6,r6,8
41027e2c:	1023883a 	mov	r17,r2
41027e30:	1021ac00 	call	41021ac0 <memcpy>
41027e34:	980b883a 	mov	r5,r19
41027e38:	a009883a 	mov	r4,r20
41027e3c:	10270940 	call	41027094 <_Bfree>
41027e40:	8827883a 	mov	r19,r17
41027e44:	003fe006 	br	41027dc8 <__multadd+0x80>

41027e48 <__pow5mult>:
41027e48:	defffa04 	addi	sp,sp,-24
41027e4c:	308000cc 	andi	r2,r6,3
41027e50:	dd000415 	stw	r20,16(sp)
41027e54:	dcc00315 	stw	r19,12(sp)
41027e58:	dc000015 	stw	r16,0(sp)
41027e5c:	dfc00515 	stw	ra,20(sp)
41027e60:	dc800215 	stw	r18,8(sp)
41027e64:	dc400115 	stw	r17,4(sp)
41027e68:	3021883a 	mov	r16,r6
41027e6c:	2027883a 	mov	r19,r4
41027e70:	2829883a 	mov	r20,r5
41027e74:	10002b1e 	bne	r2,zero,41027f24 <__pow5mult+0xdc>
41027e78:	8025d0ba 	srai	r18,r16,2
41027e7c:	90001b26 	beq	r18,zero,41027eec <__pow5mult+0xa4>
41027e80:	9c001217 	ldw	r16,72(r19)
41027e84:	8000081e 	bne	r16,zero,41027ea8 <__pow5mult+0x60>
41027e88:	00003006 	br	41027f4c <__pow5mult+0x104>
41027e8c:	800b883a 	mov	r5,r16
41027e90:	800d883a 	mov	r6,r16
41027e94:	9809883a 	mov	r4,r19
41027e98:	90001426 	beq	r18,zero,41027eec <__pow5mult+0xa4>
41027e9c:	80800017 	ldw	r2,0(r16)
41027ea0:	10001b26 	beq	r2,zero,41027f10 <__pow5mult+0xc8>
41027ea4:	1021883a 	mov	r16,r2
41027ea8:	9080004c 	andi	r2,r18,1
41027eac:	1005003a 	cmpeq	r2,r2,zero
41027eb0:	9025d07a 	srai	r18,r18,1
41027eb4:	800d883a 	mov	r6,r16
41027eb8:	9809883a 	mov	r4,r19
41027ebc:	a00b883a 	mov	r5,r20
41027ec0:	103ff21e 	bne	r2,zero,41027e8c <__pow5mult+0x44>
41027ec4:	1027b240 	call	41027b24 <__multiply>
41027ec8:	a00b883a 	mov	r5,r20
41027ecc:	9809883a 	mov	r4,r19
41027ed0:	1023883a 	mov	r17,r2
41027ed4:	10270940 	call	41027094 <_Bfree>
41027ed8:	8829883a 	mov	r20,r17
41027edc:	800b883a 	mov	r5,r16
41027ee0:	800d883a 	mov	r6,r16
41027ee4:	9809883a 	mov	r4,r19
41027ee8:	903fec1e 	bne	r18,zero,41027e9c <__pow5mult+0x54>
41027eec:	a005883a 	mov	r2,r20
41027ef0:	dfc00517 	ldw	ra,20(sp)
41027ef4:	dd000417 	ldw	r20,16(sp)
41027ef8:	dcc00317 	ldw	r19,12(sp)
41027efc:	dc800217 	ldw	r18,8(sp)
41027f00:	dc400117 	ldw	r17,4(sp)
41027f04:	dc000017 	ldw	r16,0(sp)
41027f08:	dec00604 	addi	sp,sp,24
41027f0c:	f800283a 	ret
41027f10:	1027b240 	call	41027b24 <__multiply>
41027f14:	80800015 	stw	r2,0(r16)
41027f18:	1021883a 	mov	r16,r2
41027f1c:	10000015 	stw	zero,0(r2)
41027f20:	003fe106 	br	41027ea8 <__pow5mult+0x60>
41027f24:	1085883a 	add	r2,r2,r2
41027f28:	00d040f4 	movhi	r3,16643
41027f2c:	18f84204 	addi	r3,r3,-7928
41027f30:	1085883a 	add	r2,r2,r2
41027f34:	10c5883a 	add	r2,r2,r3
41027f38:	11bfff17 	ldw	r6,-4(r2)
41027f3c:	000f883a 	mov	r7,zero
41027f40:	1027d480 	call	41027d48 <__multadd>
41027f44:	1029883a 	mov	r20,r2
41027f48:	003fcb06 	br	41027e78 <__pow5mult+0x30>
41027f4c:	9809883a 	mov	r4,r19
41027f50:	01409c44 	movi	r5,625
41027f54:	1027d0c0 	call	41027d0c <__i2b>
41027f58:	98801215 	stw	r2,72(r19)
41027f5c:	1021883a 	mov	r16,r2
41027f60:	10000015 	stw	zero,0(r2)
41027f64:	003fd006 	br	41027ea8 <__pow5mult+0x60>

41027f68 <__s2b>:
41027f68:	defff904 	addi	sp,sp,-28
41027f6c:	dcc00315 	stw	r19,12(sp)
41027f70:	dc800215 	stw	r18,8(sp)
41027f74:	2827883a 	mov	r19,r5
41027f78:	2025883a 	mov	r18,r4
41027f7c:	01400244 	movi	r5,9
41027f80:	39000204 	addi	r4,r7,8
41027f84:	dd000415 	stw	r20,16(sp)
41027f88:	dc400115 	stw	r17,4(sp)
41027f8c:	dfc00615 	stw	ra,24(sp)
41027f90:	dd400515 	stw	r21,20(sp)
41027f94:	dc000015 	stw	r16,0(sp)
41027f98:	3829883a 	mov	r20,r7
41027f9c:	3023883a 	mov	r17,r6
41027fa0:	10214340 	call	41021434 <__divsi3>
41027fa4:	00c00044 	movi	r3,1
41027fa8:	1880350e 	bge	r3,r2,41028080 <__s2b+0x118>
41027fac:	000b883a 	mov	r5,zero
41027fb0:	18c7883a 	add	r3,r3,r3
41027fb4:	29400044 	addi	r5,r5,1
41027fb8:	18bffd16 	blt	r3,r2,41027fb0 <__s2b+0x48>
41027fbc:	9009883a 	mov	r4,r18
41027fc0:	10276140 	call	41027614 <_Balloc>
41027fc4:	1011883a 	mov	r8,r2
41027fc8:	d8800717 	ldw	r2,28(sp)
41027fcc:	00c00044 	movi	r3,1
41027fd0:	01800244 	movi	r6,9
41027fd4:	40800515 	stw	r2,20(r8)
41027fd8:	40c00415 	stw	r3,16(r8)
41027fdc:	3440260e 	bge	r6,r17,41028078 <__s2b+0x110>
41027fe0:	3021883a 	mov	r16,r6
41027fe4:	99ab883a 	add	r21,r19,r6
41027fe8:	9c05883a 	add	r2,r19,r16
41027fec:	11c00007 	ldb	r7,0(r2)
41027ff0:	400b883a 	mov	r5,r8
41027ff4:	9009883a 	mov	r4,r18
41027ff8:	39fff404 	addi	r7,r7,-48
41027ffc:	01800284 	movi	r6,10
41028000:	1027d480 	call	41027d48 <__multadd>
41028004:	84000044 	addi	r16,r16,1
41028008:	1011883a 	mov	r8,r2
4102800c:	8c3ff61e 	bne	r17,r16,41027fe8 <__s2b+0x80>
41028010:	ac45883a 	add	r2,r21,r17
41028014:	117ffe04 	addi	r5,r2,-8
41028018:	880d883a 	mov	r6,r17
4102801c:	35000c0e 	bge	r6,r20,41028050 <__s2b+0xe8>
41028020:	a185c83a 	sub	r2,r20,r6
41028024:	2821883a 	mov	r16,r5
41028028:	28a3883a 	add	r17,r5,r2
4102802c:	81c00007 	ldb	r7,0(r16)
41028030:	400b883a 	mov	r5,r8
41028034:	9009883a 	mov	r4,r18
41028038:	39fff404 	addi	r7,r7,-48
4102803c:	01800284 	movi	r6,10
41028040:	1027d480 	call	41027d48 <__multadd>
41028044:	84000044 	addi	r16,r16,1
41028048:	1011883a 	mov	r8,r2
4102804c:	847ff71e 	bne	r16,r17,4102802c <__s2b+0xc4>
41028050:	4005883a 	mov	r2,r8
41028054:	dfc00617 	ldw	ra,24(sp)
41028058:	dd400517 	ldw	r21,20(sp)
4102805c:	dd000417 	ldw	r20,16(sp)
41028060:	dcc00317 	ldw	r19,12(sp)
41028064:	dc800217 	ldw	r18,8(sp)
41028068:	dc400117 	ldw	r17,4(sp)
4102806c:	dc000017 	ldw	r16,0(sp)
41028070:	dec00704 	addi	sp,sp,28
41028074:	f800283a 	ret
41028078:	99400284 	addi	r5,r19,10
4102807c:	003fe706 	br	4102801c <__s2b+0xb4>
41028080:	000b883a 	mov	r5,zero
41028084:	003fcd06 	br	41027fbc <__s2b+0x54>

41028088 <putc>:
41028088:	defffc04 	addi	sp,sp,-16
4102808c:	dc800215 	stw	r18,8(sp)
41028090:	049040f4 	movhi	r18,16643
41028094:	94bedc04 	addi	r18,r18,-1168
41028098:	90c00017 	ldw	r3,0(r18)
4102809c:	dc400115 	stw	r17,4(sp)
410280a0:	dc000015 	stw	r16,0(sp)
410280a4:	dfc00315 	stw	ra,12(sp)
410280a8:	2023883a 	mov	r17,r4
410280ac:	2821883a 	mov	r16,r5
410280b0:	18000226 	beq	r3,zero,410280bc <putc+0x34>
410280b4:	18800e17 	ldw	r2,56(r3)
410280b8:	10001126 	beq	r2,zero,41028100 <putc+0x78>
410280bc:	80800217 	ldw	r2,8(r16)
410280c0:	10ffffc4 	addi	r3,r2,-1
410280c4:	80c00215 	stw	r3,8(r16)
410280c8:	18001316 	blt	r3,zero,41028118 <putc+0x90>
410280cc:	80800017 	ldw	r2,0(r16)
410280d0:	14400005 	stb	r17,0(r2)
410280d4:	80c00017 	ldw	r3,0(r16)
410280d8:	18800044 	addi	r2,r3,1
410280dc:	18c00003 	ldbu	r3,0(r3)
410280e0:	80800015 	stw	r2,0(r16)
410280e4:	1805883a 	mov	r2,r3
410280e8:	dfc00317 	ldw	ra,12(sp)
410280ec:	dc800217 	ldw	r18,8(sp)
410280f0:	dc400117 	ldw	r17,4(sp)
410280f4:	dc000017 	ldw	r16,0(sp)
410280f8:	dec00404 	addi	sp,sp,16
410280fc:	f800283a 	ret
41028100:	1809883a 	mov	r4,r3
41028104:	10257ec0 	call	410257ec <__sinit>
41028108:	80800217 	ldw	r2,8(r16)
4102810c:	10ffffc4 	addi	r3,r2,-1
41028110:	80c00215 	stw	r3,8(r16)
41028114:	183fed0e 	bge	r3,zero,410280cc <putc+0x44>
41028118:	80800617 	ldw	r2,24(r16)
4102811c:	18800f16 	blt	r3,r2,4102815c <putc+0xd4>
41028120:	80800017 	ldw	r2,0(r16)
41028124:	14400005 	stb	r17,0(r2)
41028128:	81000017 	ldw	r4,0(r16)
4102812c:	00800284 	movi	r2,10
41028130:	20c00003 	ldbu	r3,0(r4)
41028134:	18801226 	beq	r3,r2,41028180 <putc+0xf8>
41028138:	20800044 	addi	r2,r4,1
4102813c:	80800015 	stw	r2,0(r16)
41028140:	1805883a 	mov	r2,r3
41028144:	dfc00317 	ldw	ra,12(sp)
41028148:	dc800217 	ldw	r18,8(sp)
4102814c:	dc400117 	ldw	r17,4(sp)
41028150:	dc000017 	ldw	r16,0(sp)
41028154:	dec00404 	addi	sp,sp,16
41028158:	f800283a 	ret
4102815c:	91000017 	ldw	r4,0(r18)
41028160:	880b883a 	mov	r5,r17
41028164:	800d883a 	mov	r6,r16
41028168:	dfc00317 	ldw	ra,12(sp)
4102816c:	dc800217 	ldw	r18,8(sp)
41028170:	dc400117 	ldw	r17,4(sp)
41028174:	dc000017 	ldw	r16,0(sp)
41028178:	dec00404 	addi	sp,sp,16
4102817c:	1028b501 	jmpi	41028b50 <__swbuf_r>
41028180:	91000017 	ldw	r4,0(r18)
41028184:	180b883a 	mov	r5,r3
41028188:	003ff606 	br	41028164 <putc+0xdc>

4102818c <_putc_r>:
4102818c:	defffc04 	addi	sp,sp,-16
41028190:	dc400215 	stw	r17,8(sp)
41028194:	dc000115 	stw	r16,4(sp)
41028198:	dfc00315 	stw	ra,12(sp)
4102819c:	2021883a 	mov	r16,r4
410281a0:	2823883a 	mov	r17,r5
410281a4:	20000226 	beq	r4,zero,410281b0 <_putc_r+0x24>
410281a8:	20800e17 	ldw	r2,56(r4)
410281ac:	10001026 	beq	r2,zero,410281f0 <_putc_r+0x64>
410281b0:	30800217 	ldw	r2,8(r6)
410281b4:	10ffffc4 	addi	r3,r2,-1
410281b8:	30c00215 	stw	r3,8(r6)
410281bc:	18001316 	blt	r3,zero,4102820c <_putc_r+0x80>
410281c0:	30800017 	ldw	r2,0(r6)
410281c4:	14400005 	stb	r17,0(r2)
410281c8:	30c00017 	ldw	r3,0(r6)
410281cc:	18800044 	addi	r2,r3,1
410281d0:	18c00003 	ldbu	r3,0(r3)
410281d4:	30800015 	stw	r2,0(r6)
410281d8:	1805883a 	mov	r2,r3
410281dc:	dfc00317 	ldw	ra,12(sp)
410281e0:	dc400217 	ldw	r17,8(sp)
410281e4:	dc000117 	ldw	r16,4(sp)
410281e8:	dec00404 	addi	sp,sp,16
410281ec:	f800283a 	ret
410281f0:	d9800015 	stw	r6,0(sp)
410281f4:	10257ec0 	call	410257ec <__sinit>
410281f8:	d9800017 	ldw	r6,0(sp)
410281fc:	30800217 	ldw	r2,8(r6)
41028200:	10ffffc4 	addi	r3,r2,-1
41028204:	30c00215 	stw	r3,8(r6)
41028208:	183fed0e 	bge	r3,zero,410281c0 <_putc_r+0x34>
4102820c:	30800617 	ldw	r2,24(r6)
41028210:	18800e16 	blt	r3,r2,4102824c <_putc_r+0xc0>
41028214:	30800017 	ldw	r2,0(r6)
41028218:	14400005 	stb	r17,0(r2)
4102821c:	31000017 	ldw	r4,0(r6)
41028220:	00800284 	movi	r2,10
41028224:	20c00003 	ldbu	r3,0(r4)
41028228:	18800f26 	beq	r3,r2,41028268 <_putc_r+0xdc>
4102822c:	20800044 	addi	r2,r4,1
41028230:	30800015 	stw	r2,0(r6)
41028234:	1805883a 	mov	r2,r3
41028238:	dfc00317 	ldw	ra,12(sp)
4102823c:	dc400217 	ldw	r17,8(sp)
41028240:	dc000117 	ldw	r16,4(sp)
41028244:	dec00404 	addi	sp,sp,16
41028248:	f800283a 	ret
4102824c:	8009883a 	mov	r4,r16
41028250:	880b883a 	mov	r5,r17
41028254:	dfc00317 	ldw	ra,12(sp)
41028258:	dc400217 	ldw	r17,8(sp)
4102825c:	dc000117 	ldw	r16,4(sp)
41028260:	dec00404 	addi	sp,sp,16
41028264:	1028b501 	jmpi	41028b50 <__swbuf_r>
41028268:	8009883a 	mov	r4,r16
4102826c:	180b883a 	mov	r5,r3
41028270:	003ff806 	br	41028254 <_putc_r+0xc8>

41028274 <_realloc_r>:
41028274:	defff404 	addi	sp,sp,-48
41028278:	dd800815 	stw	r22,32(sp)
4102827c:	dc800415 	stw	r18,16(sp)
41028280:	dc400315 	stw	r17,12(sp)
41028284:	dfc00b15 	stw	ra,44(sp)
41028288:	df000a15 	stw	fp,40(sp)
4102828c:	ddc00915 	stw	r23,36(sp)
41028290:	dd400715 	stw	r21,28(sp)
41028294:	dd000615 	stw	r20,24(sp)
41028298:	dcc00515 	stw	r19,20(sp)
4102829c:	dc000215 	stw	r16,8(sp)
410282a0:	2825883a 	mov	r18,r5
410282a4:	3023883a 	mov	r17,r6
410282a8:	202d883a 	mov	r22,r4
410282ac:	2800c926 	beq	r5,zero,410285d4 <_realloc_r+0x360>
410282b0:	102b6a00 	call	4102b6a0 <__malloc_lock>
410282b4:	943ffe04 	addi	r16,r18,-8
410282b8:	88c002c4 	addi	r3,r17,11
410282bc:	00800584 	movi	r2,22
410282c0:	82000117 	ldw	r8,4(r16)
410282c4:	10c01b2e 	bgeu	r2,r3,41028334 <_realloc_r+0xc0>
410282c8:	00bffe04 	movi	r2,-8
410282cc:	188e703a 	and	r7,r3,r2
410282d0:	3839883a 	mov	fp,r7
410282d4:	38001a16 	blt	r7,zero,41028340 <_realloc_r+0xcc>
410282d8:	e4401936 	bltu	fp,r17,41028340 <_realloc_r+0xcc>
410282dc:	013fff04 	movi	r4,-4
410282e0:	4126703a 	and	r19,r8,r4
410282e4:	99c02616 	blt	r19,r7,41028380 <_realloc_r+0x10c>
410282e8:	802b883a 	mov	r21,r16
410282ec:	9829883a 	mov	r20,r19
410282f0:	84000204 	addi	r16,r16,8
410282f4:	a80f883a 	mov	r7,r21
410282f8:	a70dc83a 	sub	r6,r20,fp
410282fc:	008003c4 	movi	r2,15
41028300:	1180c136 	bltu	r2,r6,41028608 <_realloc_r+0x394>
41028304:	38800117 	ldw	r2,4(r7)
41028308:	a549883a 	add	r4,r20,r21
4102830c:	1080004c 	andi	r2,r2,1
41028310:	a084b03a 	or	r2,r20,r2
41028314:	38800115 	stw	r2,4(r7)
41028318:	20c00117 	ldw	r3,4(r4)
4102831c:	18c00054 	ori	r3,r3,1
41028320:	20c00115 	stw	r3,4(r4)
41028324:	b009883a 	mov	r4,r22
41028328:	102b6c00 	call	4102b6c0 <__malloc_unlock>
4102832c:	8023883a 	mov	r17,r16
41028330:	00000606 	br	4102834c <_realloc_r+0xd8>
41028334:	01c00404 	movi	r7,16
41028338:	3839883a 	mov	fp,r7
4102833c:	e47fe72e 	bgeu	fp,r17,410282dc <_realloc_r+0x68>
41028340:	00800304 	movi	r2,12
41028344:	0023883a 	mov	r17,zero
41028348:	b0800015 	stw	r2,0(r22)
4102834c:	8805883a 	mov	r2,r17
41028350:	dfc00b17 	ldw	ra,44(sp)
41028354:	df000a17 	ldw	fp,40(sp)
41028358:	ddc00917 	ldw	r23,36(sp)
4102835c:	dd800817 	ldw	r22,32(sp)
41028360:	dd400717 	ldw	r21,28(sp)
41028364:	dd000617 	ldw	r20,24(sp)
41028368:	dcc00517 	ldw	r19,20(sp)
4102836c:	dc800417 	ldw	r18,16(sp)
41028370:	dc400317 	ldw	r17,12(sp)
41028374:	dc000217 	ldw	r16,8(sp)
41028378:	dec00c04 	addi	sp,sp,48
4102837c:	f800283a 	ret
41028380:	009040f4 	movhi	r2,16643
41028384:	10b95804 	addi	r2,r2,-6816
41028388:	12400217 	ldw	r9,8(r2)
4102838c:	84cd883a 	add	r6,r16,r19
41028390:	802b883a 	mov	r21,r16
41028394:	3240b926 	beq	r6,r9,4102867c <_realloc_r+0x408>
41028398:	31400117 	ldw	r5,4(r6)
4102839c:	00bfff84 	movi	r2,-2
410283a0:	2884703a 	and	r2,r5,r2
410283a4:	1185883a 	add	r2,r2,r6
410283a8:	10c00117 	ldw	r3,4(r2)
410283ac:	18c0004c 	andi	r3,r3,1
410283b0:	1807003a 	cmpeq	r3,r3,zero
410283b4:	1800a326 	beq	r3,zero,41028644 <_realloc_r+0x3d0>
410283b8:	2908703a 	and	r4,r5,r4
410283bc:	9929883a 	add	r20,r19,r4
410283c0:	a1c0a30e 	bge	r20,r7,41028650 <_realloc_r+0x3dc>
410283c4:	4080004c 	andi	r2,r8,1
410283c8:	1000551e 	bne	r2,zero,41028520 <_realloc_r+0x2ac>
410283cc:	80800017 	ldw	r2,0(r16)
410283d0:	80afc83a 	sub	r23,r16,r2
410283d4:	b8c00117 	ldw	r3,4(r23)
410283d8:	00bfff04 	movi	r2,-4
410283dc:	1884703a 	and	r2,r3,r2
410283e0:	30002e26 	beq	r6,zero,4102849c <_realloc_r+0x228>
410283e4:	3240b926 	beq	r6,r9,410286cc <_realloc_r+0x458>
410283e8:	98a9883a 	add	r20,r19,r2
410283ec:	2509883a 	add	r4,r4,r20
410283f0:	d9000015 	stw	r4,0(sp)
410283f4:	21c02a16 	blt	r4,r7,410284a0 <_realloc_r+0x22c>
410283f8:	30800317 	ldw	r2,12(r6)
410283fc:	30c00217 	ldw	r3,8(r6)
41028400:	01400904 	movi	r5,36
41028404:	99bfff04 	addi	r6,r19,-4
41028408:	18800315 	stw	r2,12(r3)
4102840c:	10c00215 	stw	r3,8(r2)
41028410:	b9000317 	ldw	r4,12(r23)
41028414:	b8800217 	ldw	r2,8(r23)
41028418:	b82b883a 	mov	r21,r23
4102841c:	bc000204 	addi	r16,r23,8
41028420:	20800215 	stw	r2,8(r4)
41028424:	11000315 	stw	r4,12(r2)
41028428:	2980e436 	bltu	r5,r6,410287bc <_realloc_r+0x548>
4102842c:	008004c4 	movi	r2,19
41028430:	9009883a 	mov	r4,r18
41028434:	8011883a 	mov	r8,r16
41028438:	11800f2e 	bgeu	r2,r6,41028478 <_realloc_r+0x204>
4102843c:	90800017 	ldw	r2,0(r18)
41028440:	ba000404 	addi	r8,r23,16
41028444:	91000204 	addi	r4,r18,8
41028448:	b8800215 	stw	r2,8(r23)
4102844c:	90c00117 	ldw	r3,4(r18)
41028450:	008006c4 	movi	r2,27
41028454:	b8c00315 	stw	r3,12(r23)
41028458:	1180072e 	bgeu	r2,r6,41028478 <_realloc_r+0x204>
4102845c:	90c00217 	ldw	r3,8(r18)
41028460:	ba000604 	addi	r8,r23,24
41028464:	91000404 	addi	r4,r18,16
41028468:	b8c00415 	stw	r3,16(r23)
4102846c:	90800317 	ldw	r2,12(r18)
41028470:	b8800515 	stw	r2,20(r23)
41028474:	3140e726 	beq	r6,r5,41028814 <_realloc_r+0x5a0>
41028478:	20800017 	ldw	r2,0(r4)
4102847c:	dd000017 	ldw	r20,0(sp)
41028480:	b80f883a 	mov	r7,r23
41028484:	40800015 	stw	r2,0(r8)
41028488:	20c00117 	ldw	r3,4(r4)
4102848c:	40c00115 	stw	r3,4(r8)
41028490:	20800217 	ldw	r2,8(r4)
41028494:	40800215 	stw	r2,8(r8)
41028498:	003f9706 	br	410282f8 <_realloc_r+0x84>
4102849c:	98a9883a 	add	r20,r19,r2
410284a0:	a1c01f16 	blt	r20,r7,41028520 <_realloc_r+0x2ac>
410284a4:	b8c00317 	ldw	r3,12(r23)
410284a8:	b8800217 	ldw	r2,8(r23)
410284ac:	99bfff04 	addi	r6,r19,-4
410284b0:	01400904 	movi	r5,36
410284b4:	b82b883a 	mov	r21,r23
410284b8:	18800215 	stw	r2,8(r3)
410284bc:	10c00315 	stw	r3,12(r2)
410284c0:	bc000204 	addi	r16,r23,8
410284c4:	2980c336 	bltu	r5,r6,410287d4 <_realloc_r+0x560>
410284c8:	008004c4 	movi	r2,19
410284cc:	9009883a 	mov	r4,r18
410284d0:	8011883a 	mov	r8,r16
410284d4:	11800f2e 	bgeu	r2,r6,41028514 <_realloc_r+0x2a0>
410284d8:	90800017 	ldw	r2,0(r18)
410284dc:	ba000404 	addi	r8,r23,16
410284e0:	91000204 	addi	r4,r18,8
410284e4:	b8800215 	stw	r2,8(r23)
410284e8:	90c00117 	ldw	r3,4(r18)
410284ec:	008006c4 	movi	r2,27
410284f0:	b8c00315 	stw	r3,12(r23)
410284f4:	1180072e 	bgeu	r2,r6,41028514 <_realloc_r+0x2a0>
410284f8:	90c00217 	ldw	r3,8(r18)
410284fc:	ba000604 	addi	r8,r23,24
41028500:	91000404 	addi	r4,r18,16
41028504:	b8c00415 	stw	r3,16(r23)
41028508:	90800317 	ldw	r2,12(r18)
4102850c:	b8800515 	stw	r2,20(r23)
41028510:	3140c726 	beq	r6,r5,41028830 <_realloc_r+0x5bc>
41028514:	20800017 	ldw	r2,0(r4)
41028518:	b80f883a 	mov	r7,r23
4102851c:	003fd906 	br	41028484 <_realloc_r+0x210>
41028520:	880b883a 	mov	r5,r17
41028524:	b009883a 	mov	r4,r22
41028528:	10266f80 	call	410266f8 <_malloc_r>
4102852c:	1023883a 	mov	r17,r2
41028530:	10002526 	beq	r2,zero,410285c8 <_realloc_r+0x354>
41028534:	80800117 	ldw	r2,4(r16)
41028538:	00ffff84 	movi	r3,-2
4102853c:	893ffe04 	addi	r4,r17,-8
41028540:	10c4703a 	and	r2,r2,r3
41028544:	8085883a 	add	r2,r16,r2
41028548:	20809526 	beq	r4,r2,410287a0 <_realloc_r+0x52c>
4102854c:	99bfff04 	addi	r6,r19,-4
41028550:	01c00904 	movi	r7,36
41028554:	39804536 	bltu	r7,r6,4102866c <_realloc_r+0x3f8>
41028558:	008004c4 	movi	r2,19
4102855c:	9009883a 	mov	r4,r18
41028560:	880b883a 	mov	r5,r17
41028564:	11800f2e 	bgeu	r2,r6,410285a4 <_realloc_r+0x330>
41028568:	90800017 	ldw	r2,0(r18)
4102856c:	89400204 	addi	r5,r17,8
41028570:	91000204 	addi	r4,r18,8
41028574:	88800015 	stw	r2,0(r17)
41028578:	90c00117 	ldw	r3,4(r18)
4102857c:	008006c4 	movi	r2,27
41028580:	88c00115 	stw	r3,4(r17)
41028584:	1180072e 	bgeu	r2,r6,410285a4 <_realloc_r+0x330>
41028588:	90c00217 	ldw	r3,8(r18)
4102858c:	89400404 	addi	r5,r17,16
41028590:	91000404 	addi	r4,r18,16
41028594:	88c00215 	stw	r3,8(r17)
41028598:	90800317 	ldw	r2,12(r18)
4102859c:	88800315 	stw	r2,12(r17)
410285a0:	31c09126 	beq	r6,r7,410287e8 <_realloc_r+0x574>
410285a4:	20800017 	ldw	r2,0(r4)
410285a8:	28800015 	stw	r2,0(r5)
410285ac:	20c00117 	ldw	r3,4(r4)
410285b0:	28c00115 	stw	r3,4(r5)
410285b4:	20800217 	ldw	r2,8(r4)
410285b8:	28800215 	stw	r2,8(r5)
410285bc:	900b883a 	mov	r5,r18
410285c0:	b009883a 	mov	r4,r22
410285c4:	1025b700 	call	41025b70 <_free_r>
410285c8:	b009883a 	mov	r4,r22
410285cc:	102b6c00 	call	4102b6c0 <__malloc_unlock>
410285d0:	003f5e06 	br	4102834c <_realloc_r+0xd8>
410285d4:	300b883a 	mov	r5,r6
410285d8:	dfc00b17 	ldw	ra,44(sp)
410285dc:	df000a17 	ldw	fp,40(sp)
410285e0:	ddc00917 	ldw	r23,36(sp)
410285e4:	dd800817 	ldw	r22,32(sp)
410285e8:	dd400717 	ldw	r21,28(sp)
410285ec:	dd000617 	ldw	r20,24(sp)
410285f0:	dcc00517 	ldw	r19,20(sp)
410285f4:	dc800417 	ldw	r18,16(sp)
410285f8:	dc400317 	ldw	r17,12(sp)
410285fc:	dc000217 	ldw	r16,8(sp)
41028600:	dec00c04 	addi	sp,sp,48
41028604:	10266f81 	jmpi	410266f8 <_malloc_r>
41028608:	38800117 	ldw	r2,4(r7)
4102860c:	e54b883a 	add	r5,fp,r21
41028610:	31000054 	ori	r4,r6,1
41028614:	1080004c 	andi	r2,r2,1
41028618:	1704b03a 	or	r2,r2,fp
4102861c:	38800115 	stw	r2,4(r7)
41028620:	29000115 	stw	r4,4(r5)
41028624:	2987883a 	add	r3,r5,r6
41028628:	18800117 	ldw	r2,4(r3)
4102862c:	29400204 	addi	r5,r5,8
41028630:	b009883a 	mov	r4,r22
41028634:	10800054 	ori	r2,r2,1
41028638:	18800115 	stw	r2,4(r3)
4102863c:	1025b700 	call	41025b70 <_free_r>
41028640:	003f3806 	br	41028324 <_realloc_r+0xb0>
41028644:	000d883a 	mov	r6,zero
41028648:	0009883a 	mov	r4,zero
4102864c:	003f5d06 	br	410283c4 <_realloc_r+0x150>
41028650:	30c00217 	ldw	r3,8(r6)
41028654:	30800317 	ldw	r2,12(r6)
41028658:	800f883a 	mov	r7,r16
4102865c:	84000204 	addi	r16,r16,8
41028660:	10c00215 	stw	r3,8(r2)
41028664:	18800315 	stw	r2,12(r3)
41028668:	003f2306 	br	410282f8 <_realloc_r+0x84>
4102866c:	8809883a 	mov	r4,r17
41028670:	900b883a 	mov	r5,r18
41028674:	1026f1c0 	call	41026f1c <memmove>
41028678:	003fd006 	br	410285bc <_realloc_r+0x348>
4102867c:	30800117 	ldw	r2,4(r6)
41028680:	e0c00404 	addi	r3,fp,16
41028684:	1108703a 	and	r4,r2,r4
41028688:	9905883a 	add	r2,r19,r4
4102868c:	10ff4d16 	blt	r2,r3,410283c4 <_realloc_r+0x150>
41028690:	1705c83a 	sub	r2,r2,fp
41028694:	870b883a 	add	r5,r16,fp
41028698:	10800054 	ori	r2,r2,1
4102869c:	28800115 	stw	r2,4(r5)
410286a0:	80c00117 	ldw	r3,4(r16)
410286a4:	009040f4 	movhi	r2,16643
410286a8:	10b95804 	addi	r2,r2,-6816
410286ac:	b009883a 	mov	r4,r22
410286b0:	18c0004c 	andi	r3,r3,1
410286b4:	e0c6b03a 	or	r3,fp,r3
410286b8:	11400215 	stw	r5,8(r2)
410286bc:	80c00115 	stw	r3,4(r16)
410286c0:	102b6c00 	call	4102b6c0 <__malloc_unlock>
410286c4:	84400204 	addi	r17,r16,8
410286c8:	003f2006 	br	4102834c <_realloc_r+0xd8>
410286cc:	98a9883a 	add	r20,r19,r2
410286d0:	2509883a 	add	r4,r4,r20
410286d4:	e0800404 	addi	r2,fp,16
410286d8:	d9000115 	stw	r4,4(sp)
410286dc:	20bf7016 	blt	r4,r2,410284a0 <_realloc_r+0x22c>
410286e0:	b8c00317 	ldw	r3,12(r23)
410286e4:	b8800217 	ldw	r2,8(r23)
410286e8:	99bfff04 	addi	r6,r19,-4
410286ec:	01400904 	movi	r5,36
410286f0:	18800215 	stw	r2,8(r3)
410286f4:	10c00315 	stw	r3,12(r2)
410286f8:	bc400204 	addi	r17,r23,8
410286fc:	29804136 	bltu	r5,r6,41028804 <_realloc_r+0x590>
41028700:	008004c4 	movi	r2,19
41028704:	9009883a 	mov	r4,r18
41028708:	880f883a 	mov	r7,r17
4102870c:	11800f2e 	bgeu	r2,r6,4102874c <_realloc_r+0x4d8>
41028710:	90800017 	ldw	r2,0(r18)
41028714:	b9c00404 	addi	r7,r23,16
41028718:	91000204 	addi	r4,r18,8
4102871c:	b8800215 	stw	r2,8(r23)
41028720:	90c00117 	ldw	r3,4(r18)
41028724:	008006c4 	movi	r2,27
41028728:	b8c00315 	stw	r3,12(r23)
4102872c:	1180072e 	bgeu	r2,r6,4102874c <_realloc_r+0x4d8>
41028730:	90c00217 	ldw	r3,8(r18)
41028734:	b9c00604 	addi	r7,r23,24
41028738:	91000404 	addi	r4,r18,16
4102873c:	b8c00415 	stw	r3,16(r23)
41028740:	90800317 	ldw	r2,12(r18)
41028744:	b8800515 	stw	r2,20(r23)
41028748:	31404026 	beq	r6,r5,4102884c <_realloc_r+0x5d8>
4102874c:	20800017 	ldw	r2,0(r4)
41028750:	38800015 	stw	r2,0(r7)
41028754:	20c00117 	ldw	r3,4(r4)
41028758:	38c00115 	stw	r3,4(r7)
4102875c:	20800217 	ldw	r2,8(r4)
41028760:	38800215 	stw	r2,8(r7)
41028764:	d8c00117 	ldw	r3,4(sp)
41028768:	bf0b883a 	add	r5,r23,fp
4102876c:	b009883a 	mov	r4,r22
41028770:	1f05c83a 	sub	r2,r3,fp
41028774:	10800054 	ori	r2,r2,1
41028778:	28800115 	stw	r2,4(r5)
4102877c:	b8c00117 	ldw	r3,4(r23)
41028780:	009040f4 	movhi	r2,16643
41028784:	10b95804 	addi	r2,r2,-6816
41028788:	11400215 	stw	r5,8(r2)
4102878c:	18c0004c 	andi	r3,r3,1
41028790:	e0c6b03a 	or	r3,fp,r3
41028794:	b8c00115 	stw	r3,4(r23)
41028798:	102b6c00 	call	4102b6c0 <__malloc_unlock>
4102879c:	003eeb06 	br	4102834c <_realloc_r+0xd8>
410287a0:	20800117 	ldw	r2,4(r4)
410287a4:	00ffff04 	movi	r3,-4
410287a8:	800f883a 	mov	r7,r16
410287ac:	10c4703a 	and	r2,r2,r3
410287b0:	98a9883a 	add	r20,r19,r2
410287b4:	84000204 	addi	r16,r16,8
410287b8:	003ecf06 	br	410282f8 <_realloc_r+0x84>
410287bc:	900b883a 	mov	r5,r18
410287c0:	8009883a 	mov	r4,r16
410287c4:	1026f1c0 	call	41026f1c <memmove>
410287c8:	dd000017 	ldw	r20,0(sp)
410287cc:	b80f883a 	mov	r7,r23
410287d0:	003ec906 	br	410282f8 <_realloc_r+0x84>
410287d4:	900b883a 	mov	r5,r18
410287d8:	8009883a 	mov	r4,r16
410287dc:	1026f1c0 	call	41026f1c <memmove>
410287e0:	b80f883a 	mov	r7,r23
410287e4:	003ec406 	br	410282f8 <_realloc_r+0x84>
410287e8:	90c00417 	ldw	r3,16(r18)
410287ec:	89400604 	addi	r5,r17,24
410287f0:	91000604 	addi	r4,r18,24
410287f4:	88c00415 	stw	r3,16(r17)
410287f8:	90800517 	ldw	r2,20(r18)
410287fc:	88800515 	stw	r2,20(r17)
41028800:	003f6806 	br	410285a4 <_realloc_r+0x330>
41028804:	900b883a 	mov	r5,r18
41028808:	8809883a 	mov	r4,r17
4102880c:	1026f1c0 	call	41026f1c <memmove>
41028810:	003fd406 	br	41028764 <_realloc_r+0x4f0>
41028814:	90c00417 	ldw	r3,16(r18)
41028818:	91000604 	addi	r4,r18,24
4102881c:	ba000804 	addi	r8,r23,32
41028820:	b8c00615 	stw	r3,24(r23)
41028824:	90800517 	ldw	r2,20(r18)
41028828:	b8800715 	stw	r2,28(r23)
4102882c:	003f1206 	br	41028478 <_realloc_r+0x204>
41028830:	90c00417 	ldw	r3,16(r18)
41028834:	91000604 	addi	r4,r18,24
41028838:	ba000804 	addi	r8,r23,32
4102883c:	b8c00615 	stw	r3,24(r23)
41028840:	90800517 	ldw	r2,20(r18)
41028844:	b8800715 	stw	r2,28(r23)
41028848:	003f3206 	br	41028514 <_realloc_r+0x2a0>
4102884c:	90c00417 	ldw	r3,16(r18)
41028850:	91000604 	addi	r4,r18,24
41028854:	b9c00804 	addi	r7,r23,32
41028858:	b8c00615 	stw	r3,24(r23)
4102885c:	90800517 	ldw	r2,20(r18)
41028860:	b8800715 	stw	r2,28(r23)
41028864:	003fb906 	br	4102874c <_realloc_r+0x4d8>

41028868 <__isinfd>:
41028868:	200d883a 	mov	r6,r4
4102886c:	0109c83a 	sub	r4,zero,r4
41028870:	2188b03a 	or	r4,r4,r6
41028874:	2008d7fa 	srli	r4,r4,31
41028878:	00a00034 	movhi	r2,32768
4102887c:	10bfffc4 	addi	r2,r2,-1
41028880:	1144703a 	and	r2,r2,r5
41028884:	2088b03a 	or	r4,r4,r2
41028888:	009ffc34 	movhi	r2,32752
4102888c:	1105c83a 	sub	r2,r2,r4
41028890:	0087c83a 	sub	r3,zero,r2
41028894:	10c4b03a 	or	r2,r2,r3
41028898:	1004d7fa 	srli	r2,r2,31
4102889c:	00c00044 	movi	r3,1
410288a0:	1885c83a 	sub	r2,r3,r2
410288a4:	f800283a 	ret

410288a8 <__isnand>:
410288a8:	200d883a 	mov	r6,r4
410288ac:	0109c83a 	sub	r4,zero,r4
410288b0:	2188b03a 	or	r4,r4,r6
410288b4:	2008d7fa 	srli	r4,r4,31
410288b8:	00a00034 	movhi	r2,32768
410288bc:	10bfffc4 	addi	r2,r2,-1
410288c0:	1144703a 	and	r2,r2,r5
410288c4:	2088b03a 	or	r4,r4,r2
410288c8:	009ffc34 	movhi	r2,32752
410288cc:	1105c83a 	sub	r2,r2,r4
410288d0:	1004d7fa 	srli	r2,r2,31
410288d4:	f800283a 	ret

410288d8 <_sbrk_r>:
410288d8:	defffd04 	addi	sp,sp,-12
410288dc:	dc000015 	stw	r16,0(sp)
410288e0:	041040f4 	movhi	r16,16643
410288e4:	84058904 	addi	r16,r16,5668
410288e8:	dc400115 	stw	r17,4(sp)
410288ec:	80000015 	stw	zero,0(r16)
410288f0:	2023883a 	mov	r17,r4
410288f4:	2809883a 	mov	r4,r5
410288f8:	dfc00215 	stw	ra,8(sp)
410288fc:	102b8c00 	call	4102b8c0 <sbrk>
41028900:	1007883a 	mov	r3,r2
41028904:	00bfffc4 	movi	r2,-1
41028908:	18800626 	beq	r3,r2,41028924 <_sbrk_r+0x4c>
4102890c:	1805883a 	mov	r2,r3
41028910:	dfc00217 	ldw	ra,8(sp)
41028914:	dc400117 	ldw	r17,4(sp)
41028918:	dc000017 	ldw	r16,0(sp)
4102891c:	dec00304 	addi	sp,sp,12
41028920:	f800283a 	ret
41028924:	80800017 	ldw	r2,0(r16)
41028928:	103ff826 	beq	r2,zero,4102890c <_sbrk_r+0x34>
4102892c:	88800015 	stw	r2,0(r17)
41028930:	1805883a 	mov	r2,r3
41028934:	dfc00217 	ldw	ra,8(sp)
41028938:	dc400117 	ldw	r17,4(sp)
4102893c:	dc000017 	ldw	r16,0(sp)
41028940:	dec00304 	addi	sp,sp,12
41028944:	f800283a 	ret

41028948 <__sclose>:
41028948:	2940038f 	ldh	r5,14(r5)
4102894c:	1028dc81 	jmpi	41028dc8 <_close_r>

41028950 <__sseek>:
41028950:	defffe04 	addi	sp,sp,-8
41028954:	dc000015 	stw	r16,0(sp)
41028958:	2821883a 	mov	r16,r5
4102895c:	2940038f 	ldh	r5,14(r5)
41028960:	dfc00115 	stw	ra,4(sp)
41028964:	10290400 	call	41029040 <_lseek_r>
41028968:	1007883a 	mov	r3,r2
4102896c:	00bfffc4 	movi	r2,-1
41028970:	18800926 	beq	r3,r2,41028998 <__sseek+0x48>
41028974:	8080030b 	ldhu	r2,12(r16)
41028978:	80c01415 	stw	r3,80(r16)
4102897c:	10840014 	ori	r2,r2,4096
41028980:	8080030d 	sth	r2,12(r16)
41028984:	1805883a 	mov	r2,r3
41028988:	dfc00117 	ldw	ra,4(sp)
4102898c:	dc000017 	ldw	r16,0(sp)
41028990:	dec00204 	addi	sp,sp,8
41028994:	f800283a 	ret
41028998:	8080030b 	ldhu	r2,12(r16)
4102899c:	10bbffcc 	andi	r2,r2,61439
410289a0:	8080030d 	sth	r2,12(r16)
410289a4:	1805883a 	mov	r2,r3
410289a8:	dfc00117 	ldw	ra,4(sp)
410289ac:	dc000017 	ldw	r16,0(sp)
410289b0:	dec00204 	addi	sp,sp,8
410289b4:	f800283a 	ret

410289b8 <__swrite>:
410289b8:	2880030b 	ldhu	r2,12(r5)
410289bc:	defffb04 	addi	sp,sp,-20
410289c0:	dcc00315 	stw	r19,12(sp)
410289c4:	1080400c 	andi	r2,r2,256
410289c8:	dc800215 	stw	r18,8(sp)
410289cc:	dc400115 	stw	r17,4(sp)
410289d0:	dc000015 	stw	r16,0(sp)
410289d4:	3027883a 	mov	r19,r6
410289d8:	3825883a 	mov	r18,r7
410289dc:	dfc00415 	stw	ra,16(sp)
410289e0:	2821883a 	mov	r16,r5
410289e4:	000d883a 	mov	r6,zero
410289e8:	01c00084 	movi	r7,2
410289ec:	2023883a 	mov	r17,r4
410289f0:	10000226 	beq	r2,zero,410289fc <__swrite+0x44>
410289f4:	2940038f 	ldh	r5,14(r5)
410289f8:	10290400 	call	41029040 <_lseek_r>
410289fc:	8080030b 	ldhu	r2,12(r16)
41028a00:	8140038f 	ldh	r5,14(r16)
41028a04:	8809883a 	mov	r4,r17
41028a08:	10bbffcc 	andi	r2,r2,61439
41028a0c:	980d883a 	mov	r6,r19
41028a10:	900f883a 	mov	r7,r18
41028a14:	8080030d 	sth	r2,12(r16)
41028a18:	dfc00417 	ldw	ra,16(sp)
41028a1c:	dcc00317 	ldw	r19,12(sp)
41028a20:	dc800217 	ldw	r18,8(sp)
41028a24:	dc400117 	ldw	r17,4(sp)
41028a28:	dc000017 	ldw	r16,0(sp)
41028a2c:	dec00504 	addi	sp,sp,20
41028a30:	1028c9c1 	jmpi	41028c9c <_write_r>

41028a34 <__sread>:
41028a34:	defffe04 	addi	sp,sp,-8
41028a38:	dc000015 	stw	r16,0(sp)
41028a3c:	2821883a 	mov	r16,r5
41028a40:	2940038f 	ldh	r5,14(r5)
41028a44:	dfc00115 	stw	ra,4(sp)
41028a48:	10290b80 	call	410290b8 <_read_r>
41028a4c:	1007883a 	mov	r3,r2
41028a50:	10000816 	blt	r2,zero,41028a74 <__sread+0x40>
41028a54:	80801417 	ldw	r2,80(r16)
41028a58:	10c5883a 	add	r2,r2,r3
41028a5c:	80801415 	stw	r2,80(r16)
41028a60:	1805883a 	mov	r2,r3
41028a64:	dfc00117 	ldw	ra,4(sp)
41028a68:	dc000017 	ldw	r16,0(sp)
41028a6c:	dec00204 	addi	sp,sp,8
41028a70:	f800283a 	ret
41028a74:	8080030b 	ldhu	r2,12(r16)
41028a78:	10bbffcc 	andi	r2,r2,61439
41028a7c:	8080030d 	sth	r2,12(r16)
41028a80:	1805883a 	mov	r2,r3
41028a84:	dfc00117 	ldw	ra,4(sp)
41028a88:	dc000017 	ldw	r16,0(sp)
41028a8c:	dec00204 	addi	sp,sp,8
41028a90:	f800283a 	ret

41028a94 <strcmp>:
41028a94:	2144b03a 	or	r2,r4,r5
41028a98:	108000cc 	andi	r2,r2,3
41028a9c:	10001d1e 	bne	r2,zero,41028b14 <strcmp+0x80>
41028aa0:	200f883a 	mov	r7,r4
41028aa4:	28800017 	ldw	r2,0(r5)
41028aa8:	21000017 	ldw	r4,0(r4)
41028aac:	280d883a 	mov	r6,r5
41028ab0:	2080161e 	bne	r4,r2,41028b0c <strcmp+0x78>
41028ab4:	023fbff4 	movhi	r8,65279
41028ab8:	423fbfc4 	addi	r8,r8,-257
41028abc:	2207883a 	add	r3,r4,r8
41028ac0:	01602074 	movhi	r5,32897
41028ac4:	29602004 	addi	r5,r5,-32640
41028ac8:	1946703a 	and	r3,r3,r5
41028acc:	0104303a 	nor	r2,zero,r4
41028ad0:	10c4703a 	and	r2,r2,r3
41028ad4:	10001c1e 	bne	r2,zero,41028b48 <strcmp+0xb4>
41028ad8:	4013883a 	mov	r9,r8
41028adc:	2811883a 	mov	r8,r5
41028ae0:	00000106 	br	41028ae8 <strcmp+0x54>
41028ae4:	1800181e 	bne	r3,zero,41028b48 <strcmp+0xb4>
41028ae8:	39c00104 	addi	r7,r7,4
41028aec:	39000017 	ldw	r4,0(r7)
41028af0:	31800104 	addi	r6,r6,4
41028af4:	31400017 	ldw	r5,0(r6)
41028af8:	2245883a 	add	r2,r4,r9
41028afc:	1204703a 	and	r2,r2,r8
41028b00:	0106303a 	nor	r3,zero,r4
41028b04:	1886703a 	and	r3,r3,r2
41028b08:	217ff626 	beq	r4,r5,41028ae4 <strcmp+0x50>
41028b0c:	3809883a 	mov	r4,r7
41028b10:	300b883a 	mov	r5,r6
41028b14:	20c00007 	ldb	r3,0(r4)
41028b18:	1800051e 	bne	r3,zero,41028b30 <strcmp+0x9c>
41028b1c:	00000606 	br	41028b38 <strcmp+0xa4>
41028b20:	21000044 	addi	r4,r4,1
41028b24:	20c00007 	ldb	r3,0(r4)
41028b28:	29400044 	addi	r5,r5,1
41028b2c:	18000226 	beq	r3,zero,41028b38 <strcmp+0xa4>
41028b30:	28800007 	ldb	r2,0(r5)
41028b34:	18bffa26 	beq	r3,r2,41028b20 <strcmp+0x8c>
41028b38:	20c00003 	ldbu	r3,0(r4)
41028b3c:	28800003 	ldbu	r2,0(r5)
41028b40:	1885c83a 	sub	r2,r3,r2
41028b44:	f800283a 	ret
41028b48:	0005883a 	mov	r2,zero
41028b4c:	f800283a 	ret

41028b50 <__swbuf_r>:
41028b50:	defffc04 	addi	sp,sp,-16
41028b54:	dc400215 	stw	r17,8(sp)
41028b58:	dc000115 	stw	r16,4(sp)
41028b5c:	dfc00315 	stw	ra,12(sp)
41028b60:	2023883a 	mov	r17,r4
41028b64:	2821883a 	mov	r16,r5
41028b68:	20000226 	beq	r4,zero,41028b74 <__swbuf_r+0x24>
41028b6c:	20800e17 	ldw	r2,56(r4)
41028b70:	10002f26 	beq	r2,zero,41028c30 <__swbuf_r+0xe0>
41028b74:	3080030b 	ldhu	r2,12(r6)
41028b78:	30c00617 	ldw	r3,24(r6)
41028b7c:	1080020c 	andi	r2,r2,8
41028b80:	30c00215 	stw	r3,8(r6)
41028b84:	10002226 	beq	r2,zero,41028c10 <__swbuf_r+0xc0>
41028b88:	30c00417 	ldw	r3,16(r6)
41028b8c:	18002026 	beq	r3,zero,41028c10 <__swbuf_r+0xc0>
41028b90:	31000017 	ldw	r4,0(r6)
41028b94:	30800517 	ldw	r2,20(r6)
41028b98:	20c7c83a 	sub	r3,r4,r3
41028b9c:	18802f0e 	bge	r3,r2,41028c5c <__swbuf_r+0x10c>
41028ba0:	19400044 	addi	r5,r3,1
41028ba4:	30800217 	ldw	r2,8(r6)
41028ba8:	84003fcc 	andi	r16,r16,255
41028bac:	20c00044 	addi	r3,r4,1
41028bb0:	10bfffc4 	addi	r2,r2,-1
41028bb4:	30800215 	stw	r2,8(r6)
41028bb8:	24000005 	stb	r16,0(r4)
41028bbc:	30800517 	ldw	r2,20(r6)
41028bc0:	30c00015 	stw	r3,0(r6)
41028bc4:	11400c26 	beq	r2,r5,41028bf8 <__swbuf_r+0xa8>
41028bc8:	3080030b 	ldhu	r2,12(r6)
41028bcc:	1080004c 	andi	r2,r2,1
41028bd0:	1005003a 	cmpeq	r2,r2,zero
41028bd4:	10000626 	beq	r2,zero,41028bf0 <__swbuf_r+0xa0>
41028bd8:	8005883a 	mov	r2,r16
41028bdc:	dfc00317 	ldw	ra,12(sp)
41028be0:	dc400217 	ldw	r17,8(sp)
41028be4:	dc000117 	ldw	r16,4(sp)
41028be8:	dec00404 	addi	sp,sp,16
41028bec:	f800283a 	ret
41028bf0:	00800284 	movi	r2,10
41028bf4:	80bff81e 	bne	r16,r2,41028bd8 <__swbuf_r+0x88>
41028bf8:	8809883a 	mov	r4,r17
41028bfc:	300b883a 	mov	r5,r6
41028c00:	10255540 	call	41025554 <_fflush_r>
41028c04:	103ff426 	beq	r2,zero,41028bd8 <__swbuf_r+0x88>
41028c08:	043fffc4 	movi	r16,-1
41028c0c:	003ff206 	br	41028bd8 <__swbuf_r+0x88>
41028c10:	300b883a 	mov	r5,r6
41028c14:	8809883a 	mov	r4,r17
41028c18:	d9800015 	stw	r6,0(sp)
41028c1c:	1023c4c0 	call	41023c4c <__swsetup_r>
41028c20:	d9800017 	ldw	r6,0(sp)
41028c24:	1000061e 	bne	r2,zero,41028c40 <__swbuf_r+0xf0>
41028c28:	30c00417 	ldw	r3,16(r6)
41028c2c:	003fd806 	br	41028b90 <__swbuf_r+0x40>
41028c30:	d9800015 	stw	r6,0(sp)
41028c34:	10257ec0 	call	410257ec <__sinit>
41028c38:	d9800017 	ldw	r6,0(sp)
41028c3c:	003fcd06 	br	41028b74 <__swbuf_r+0x24>
41028c40:	3080030b 	ldhu	r2,12(r6)
41028c44:	00c00244 	movi	r3,9
41028c48:	043fffc4 	movi	r16,-1
41028c4c:	10801014 	ori	r2,r2,64
41028c50:	3080030d 	sth	r2,12(r6)
41028c54:	88c00015 	stw	r3,0(r17)
41028c58:	003fdf06 	br	41028bd8 <__swbuf_r+0x88>
41028c5c:	300b883a 	mov	r5,r6
41028c60:	8809883a 	mov	r4,r17
41028c64:	d9800015 	stw	r6,0(sp)
41028c68:	10255540 	call	41025554 <_fflush_r>
41028c6c:	d9800017 	ldw	r6,0(sp)
41028c70:	103fe51e 	bne	r2,zero,41028c08 <__swbuf_r+0xb8>
41028c74:	31000017 	ldw	r4,0(r6)
41028c78:	01400044 	movi	r5,1
41028c7c:	003fc906 	br	41028ba4 <__swbuf_r+0x54>

41028c80 <__swbuf>:
41028c80:	019040f4 	movhi	r6,16643
41028c84:	31bedc04 	addi	r6,r6,-1168
41028c88:	2007883a 	mov	r3,r4
41028c8c:	31000017 	ldw	r4,0(r6)
41028c90:	280d883a 	mov	r6,r5
41028c94:	180b883a 	mov	r5,r3
41028c98:	1028b501 	jmpi	41028b50 <__swbuf_r>

41028c9c <_write_r>:
41028c9c:	defffd04 	addi	sp,sp,-12
41028ca0:	dc000015 	stw	r16,0(sp)
41028ca4:	041040f4 	movhi	r16,16643
41028ca8:	84058904 	addi	r16,r16,5668
41028cac:	dc400115 	stw	r17,4(sp)
41028cb0:	80000015 	stw	zero,0(r16)
41028cb4:	2023883a 	mov	r17,r4
41028cb8:	2809883a 	mov	r4,r5
41028cbc:	300b883a 	mov	r5,r6
41028cc0:	380d883a 	mov	r6,r7
41028cc4:	dfc00215 	stw	ra,8(sp)
41028cc8:	102bb500 	call	4102bb50 <write>
41028ccc:	1007883a 	mov	r3,r2
41028cd0:	00bfffc4 	movi	r2,-1
41028cd4:	18800626 	beq	r3,r2,41028cf0 <_write_r+0x54>
41028cd8:	1805883a 	mov	r2,r3
41028cdc:	dfc00217 	ldw	ra,8(sp)
41028ce0:	dc400117 	ldw	r17,4(sp)
41028ce4:	dc000017 	ldw	r16,0(sp)
41028ce8:	dec00304 	addi	sp,sp,12
41028cec:	f800283a 	ret
41028cf0:	80800017 	ldw	r2,0(r16)
41028cf4:	103ff826 	beq	r2,zero,41028cd8 <_write_r+0x3c>
41028cf8:	88800015 	stw	r2,0(r17)
41028cfc:	1805883a 	mov	r2,r3
41028d00:	dfc00217 	ldw	ra,8(sp)
41028d04:	dc400117 	ldw	r17,4(sp)
41028d08:	dc000017 	ldw	r16,0(sp)
41028d0c:	dec00304 	addi	sp,sp,12
41028d10:	f800283a 	ret

41028d14 <_calloc_r>:
41028d14:	298b383a 	mul	r5,r5,r6
41028d18:	defffe04 	addi	sp,sp,-8
41028d1c:	dc000015 	stw	r16,0(sp)
41028d20:	dfc00115 	stw	ra,4(sp)
41028d24:	10266f80 	call	410266f8 <_malloc_r>
41028d28:	1021883a 	mov	r16,r2
41028d2c:	01c00904 	movi	r7,36
41028d30:	10000d26 	beq	r2,zero,41028d68 <_calloc_r+0x54>
41028d34:	10ffff17 	ldw	r3,-4(r2)
41028d38:	1009883a 	mov	r4,r2
41028d3c:	00bfff04 	movi	r2,-4
41028d40:	1886703a 	and	r3,r3,r2
41028d44:	1887883a 	add	r3,r3,r2
41028d48:	180d883a 	mov	r6,r3
41028d4c:	000b883a 	mov	r5,zero
41028d50:	38c01736 	bltu	r7,r3,41028db0 <_calloc_r+0x9c>
41028d54:	008004c4 	movi	r2,19
41028d58:	10c00836 	bltu	r2,r3,41028d7c <_calloc_r+0x68>
41028d5c:	20000215 	stw	zero,8(r4)
41028d60:	20000015 	stw	zero,0(r4)
41028d64:	20000115 	stw	zero,4(r4)
41028d68:	8005883a 	mov	r2,r16
41028d6c:	dfc00117 	ldw	ra,4(sp)
41028d70:	dc000017 	ldw	r16,0(sp)
41028d74:	dec00204 	addi	sp,sp,8
41028d78:	f800283a 	ret
41028d7c:	008006c4 	movi	r2,27
41028d80:	80000015 	stw	zero,0(r16)
41028d84:	80000115 	stw	zero,4(r16)
41028d88:	81000204 	addi	r4,r16,8
41028d8c:	10fff32e 	bgeu	r2,r3,41028d5c <_calloc_r+0x48>
41028d90:	80000215 	stw	zero,8(r16)
41028d94:	80000315 	stw	zero,12(r16)
41028d98:	81000404 	addi	r4,r16,16
41028d9c:	19ffef1e 	bne	r3,r7,41028d5c <_calloc_r+0x48>
41028da0:	81000604 	addi	r4,r16,24
41028da4:	80000415 	stw	zero,16(r16)
41028da8:	80000515 	stw	zero,20(r16)
41028dac:	003feb06 	br	41028d5c <_calloc_r+0x48>
41028db0:	1026ffc0 	call	41026ffc <memset>
41028db4:	8005883a 	mov	r2,r16
41028db8:	dfc00117 	ldw	ra,4(sp)
41028dbc:	dc000017 	ldw	r16,0(sp)
41028dc0:	dec00204 	addi	sp,sp,8
41028dc4:	f800283a 	ret

41028dc8 <_close_r>:
41028dc8:	defffd04 	addi	sp,sp,-12
41028dcc:	dc000015 	stw	r16,0(sp)
41028dd0:	041040f4 	movhi	r16,16643
41028dd4:	84058904 	addi	r16,r16,5668
41028dd8:	dc400115 	stw	r17,4(sp)
41028ddc:	80000015 	stw	zero,0(r16)
41028de0:	2023883a 	mov	r17,r4
41028de4:	2809883a 	mov	r4,r5
41028de8:	dfc00215 	stw	ra,8(sp)
41028dec:	102afd80 	call	4102afd8 <close>
41028df0:	1007883a 	mov	r3,r2
41028df4:	00bfffc4 	movi	r2,-1
41028df8:	18800626 	beq	r3,r2,41028e14 <_close_r+0x4c>
41028dfc:	1805883a 	mov	r2,r3
41028e00:	dfc00217 	ldw	ra,8(sp)
41028e04:	dc400117 	ldw	r17,4(sp)
41028e08:	dc000017 	ldw	r16,0(sp)
41028e0c:	dec00304 	addi	sp,sp,12
41028e10:	f800283a 	ret
41028e14:	80800017 	ldw	r2,0(r16)
41028e18:	103ff826 	beq	r2,zero,41028dfc <_close_r+0x34>
41028e1c:	88800015 	stw	r2,0(r17)
41028e20:	1805883a 	mov	r2,r3
41028e24:	dfc00217 	ldw	ra,8(sp)
41028e28:	dc400117 	ldw	r17,4(sp)
41028e2c:	dc000017 	ldw	r16,0(sp)
41028e30:	dec00304 	addi	sp,sp,12
41028e34:	f800283a 	ret

41028e38 <_fclose_r>:
41028e38:	defffc04 	addi	sp,sp,-16
41028e3c:	dc400115 	stw	r17,4(sp)
41028e40:	dc000015 	stw	r16,0(sp)
41028e44:	dfc00315 	stw	ra,12(sp)
41028e48:	dc800215 	stw	r18,8(sp)
41028e4c:	2821883a 	mov	r16,r5
41028e50:	2023883a 	mov	r17,r4
41028e54:	28002926 	beq	r5,zero,41028efc <_fclose_r+0xc4>
41028e58:	10257dc0 	call	410257dc <__sfp_lock_acquire>
41028e5c:	88000226 	beq	r17,zero,41028e68 <_fclose_r+0x30>
41028e60:	88800e17 	ldw	r2,56(r17)
41028e64:	10002d26 	beq	r2,zero,41028f1c <_fclose_r+0xe4>
41028e68:	8080030f 	ldh	r2,12(r16)
41028e6c:	10002226 	beq	r2,zero,41028ef8 <_fclose_r+0xc0>
41028e70:	8809883a 	mov	r4,r17
41028e74:	800b883a 	mov	r5,r16
41028e78:	10255540 	call	41025554 <_fflush_r>
41028e7c:	1025883a 	mov	r18,r2
41028e80:	80800b17 	ldw	r2,44(r16)
41028e84:	10000426 	beq	r2,zero,41028e98 <_fclose_r+0x60>
41028e88:	81400717 	ldw	r5,28(r16)
41028e8c:	8809883a 	mov	r4,r17
41028e90:	103ee83a 	callr	r2
41028e94:	10002a16 	blt	r2,zero,41028f40 <_fclose_r+0x108>
41028e98:	8080030b 	ldhu	r2,12(r16)
41028e9c:	1080200c 	andi	r2,r2,128
41028ea0:	1000231e 	bne	r2,zero,41028f30 <_fclose_r+0xf8>
41028ea4:	81400c17 	ldw	r5,48(r16)
41028ea8:	28000526 	beq	r5,zero,41028ec0 <_fclose_r+0x88>
41028eac:	80801004 	addi	r2,r16,64
41028eb0:	28800226 	beq	r5,r2,41028ebc <_fclose_r+0x84>
41028eb4:	8809883a 	mov	r4,r17
41028eb8:	1025b700 	call	41025b70 <_free_r>
41028ebc:	80000c15 	stw	zero,48(r16)
41028ec0:	81401117 	ldw	r5,68(r16)
41028ec4:	28000326 	beq	r5,zero,41028ed4 <_fclose_r+0x9c>
41028ec8:	8809883a 	mov	r4,r17
41028ecc:	1025b700 	call	41025b70 <_free_r>
41028ed0:	80001115 	stw	zero,68(r16)
41028ed4:	8000030d 	sth	zero,12(r16)
41028ed8:	10257e00 	call	410257e0 <__sfp_lock_release>
41028edc:	9005883a 	mov	r2,r18
41028ee0:	dfc00317 	ldw	ra,12(sp)
41028ee4:	dc800217 	ldw	r18,8(sp)
41028ee8:	dc400117 	ldw	r17,4(sp)
41028eec:	dc000017 	ldw	r16,0(sp)
41028ef0:	dec00404 	addi	sp,sp,16
41028ef4:	f800283a 	ret
41028ef8:	10257e00 	call	410257e0 <__sfp_lock_release>
41028efc:	0025883a 	mov	r18,zero
41028f00:	9005883a 	mov	r2,r18
41028f04:	dfc00317 	ldw	ra,12(sp)
41028f08:	dc800217 	ldw	r18,8(sp)
41028f0c:	dc400117 	ldw	r17,4(sp)
41028f10:	dc000017 	ldw	r16,0(sp)
41028f14:	dec00404 	addi	sp,sp,16
41028f18:	f800283a 	ret
41028f1c:	8809883a 	mov	r4,r17
41028f20:	10257ec0 	call	410257ec <__sinit>
41028f24:	8080030f 	ldh	r2,12(r16)
41028f28:	103fd11e 	bne	r2,zero,41028e70 <_fclose_r+0x38>
41028f2c:	003ff206 	br	41028ef8 <_fclose_r+0xc0>
41028f30:	81400417 	ldw	r5,16(r16)
41028f34:	8809883a 	mov	r4,r17
41028f38:	1025b700 	call	41025b70 <_free_r>
41028f3c:	003fd906 	br	41028ea4 <_fclose_r+0x6c>
41028f40:	04bfffc4 	movi	r18,-1
41028f44:	003fd406 	br	41028e98 <_fclose_r+0x60>

41028f48 <fclose>:
41028f48:	009040f4 	movhi	r2,16643
41028f4c:	10bedc04 	addi	r2,r2,-1168
41028f50:	200b883a 	mov	r5,r4
41028f54:	11000017 	ldw	r4,0(r2)
41028f58:	1028e381 	jmpi	41028e38 <_fclose_r>

41028f5c <_fstat_r>:
41028f5c:	defffd04 	addi	sp,sp,-12
41028f60:	dc000015 	stw	r16,0(sp)
41028f64:	041040f4 	movhi	r16,16643
41028f68:	84058904 	addi	r16,r16,5668
41028f6c:	dc400115 	stw	r17,4(sp)
41028f70:	80000015 	stw	zero,0(r16)
41028f74:	2023883a 	mov	r17,r4
41028f78:	2809883a 	mov	r4,r5
41028f7c:	300b883a 	mov	r5,r6
41028f80:	dfc00215 	stw	ra,8(sp)
41028f84:	102b1a40 	call	4102b1a4 <fstat>
41028f88:	1007883a 	mov	r3,r2
41028f8c:	00bfffc4 	movi	r2,-1
41028f90:	18800626 	beq	r3,r2,41028fac <_fstat_r+0x50>
41028f94:	1805883a 	mov	r2,r3
41028f98:	dfc00217 	ldw	ra,8(sp)
41028f9c:	dc400117 	ldw	r17,4(sp)
41028fa0:	dc000017 	ldw	r16,0(sp)
41028fa4:	dec00304 	addi	sp,sp,12
41028fa8:	f800283a 	ret
41028fac:	80800017 	ldw	r2,0(r16)
41028fb0:	103ff826 	beq	r2,zero,41028f94 <_fstat_r+0x38>
41028fb4:	88800015 	stw	r2,0(r17)
41028fb8:	1805883a 	mov	r2,r3
41028fbc:	dfc00217 	ldw	ra,8(sp)
41028fc0:	dc400117 	ldw	r17,4(sp)
41028fc4:	dc000017 	ldw	r16,0(sp)
41028fc8:	dec00304 	addi	sp,sp,12
41028fcc:	f800283a 	ret

41028fd0 <_isatty_r>:
41028fd0:	defffd04 	addi	sp,sp,-12
41028fd4:	dc000015 	stw	r16,0(sp)
41028fd8:	041040f4 	movhi	r16,16643
41028fdc:	84058904 	addi	r16,r16,5668
41028fe0:	dc400115 	stw	r17,4(sp)
41028fe4:	80000015 	stw	zero,0(r16)
41028fe8:	2023883a 	mov	r17,r4
41028fec:	2809883a 	mov	r4,r5
41028ff0:	dfc00215 	stw	ra,8(sp)
41028ff4:	102b2d80 	call	4102b2d8 <isatty>
41028ff8:	1007883a 	mov	r3,r2
41028ffc:	00bfffc4 	movi	r2,-1
41029000:	18800626 	beq	r3,r2,4102901c <_isatty_r+0x4c>
41029004:	1805883a 	mov	r2,r3
41029008:	dfc00217 	ldw	ra,8(sp)
4102900c:	dc400117 	ldw	r17,4(sp)
41029010:	dc000017 	ldw	r16,0(sp)
41029014:	dec00304 	addi	sp,sp,12
41029018:	f800283a 	ret
4102901c:	80800017 	ldw	r2,0(r16)
41029020:	103ff826 	beq	r2,zero,41029004 <_isatty_r+0x34>
41029024:	88800015 	stw	r2,0(r17)
41029028:	1805883a 	mov	r2,r3
4102902c:	dfc00217 	ldw	ra,8(sp)
41029030:	dc400117 	ldw	r17,4(sp)
41029034:	dc000017 	ldw	r16,0(sp)
41029038:	dec00304 	addi	sp,sp,12
4102903c:	f800283a 	ret

41029040 <_lseek_r>:
41029040:	defffd04 	addi	sp,sp,-12
41029044:	dc000015 	stw	r16,0(sp)
41029048:	041040f4 	movhi	r16,16643
4102904c:	84058904 	addi	r16,r16,5668
41029050:	dc400115 	stw	r17,4(sp)
41029054:	80000015 	stw	zero,0(r16)
41029058:	2023883a 	mov	r17,r4
4102905c:	2809883a 	mov	r4,r5
41029060:	300b883a 	mov	r5,r6
41029064:	380d883a 	mov	r6,r7
41029068:	dfc00215 	stw	ra,8(sp)
4102906c:	102b4e40 	call	4102b4e4 <lseek>
41029070:	1007883a 	mov	r3,r2
41029074:	00bfffc4 	movi	r2,-1
41029078:	18800626 	beq	r3,r2,41029094 <_lseek_r+0x54>
4102907c:	1805883a 	mov	r2,r3
41029080:	dfc00217 	ldw	ra,8(sp)
41029084:	dc400117 	ldw	r17,4(sp)
41029088:	dc000017 	ldw	r16,0(sp)
4102908c:	dec00304 	addi	sp,sp,12
41029090:	f800283a 	ret
41029094:	80800017 	ldw	r2,0(r16)
41029098:	103ff826 	beq	r2,zero,4102907c <_lseek_r+0x3c>
4102909c:	88800015 	stw	r2,0(r17)
410290a0:	1805883a 	mov	r2,r3
410290a4:	dfc00217 	ldw	ra,8(sp)
410290a8:	dc400117 	ldw	r17,4(sp)
410290ac:	dc000017 	ldw	r16,0(sp)
410290b0:	dec00304 	addi	sp,sp,12
410290b4:	f800283a 	ret

410290b8 <_read_r>:
410290b8:	defffd04 	addi	sp,sp,-12
410290bc:	dc000015 	stw	r16,0(sp)
410290c0:	041040f4 	movhi	r16,16643
410290c4:	84058904 	addi	r16,r16,5668
410290c8:	dc400115 	stw	r17,4(sp)
410290cc:	80000015 	stw	zero,0(r16)
410290d0:	2023883a 	mov	r17,r4
410290d4:	2809883a 	mov	r4,r5
410290d8:	300b883a 	mov	r5,r6
410290dc:	380d883a 	mov	r6,r7
410290e0:	dfc00215 	stw	ra,8(sp)
410290e4:	102b6e00 	call	4102b6e0 <read>
410290e8:	1007883a 	mov	r3,r2
410290ec:	00bfffc4 	movi	r2,-1
410290f0:	18800626 	beq	r3,r2,4102910c <_read_r+0x54>
410290f4:	1805883a 	mov	r2,r3
410290f8:	dfc00217 	ldw	ra,8(sp)
410290fc:	dc400117 	ldw	r17,4(sp)
41029100:	dc000017 	ldw	r16,0(sp)
41029104:	dec00304 	addi	sp,sp,12
41029108:	f800283a 	ret
4102910c:	80800017 	ldw	r2,0(r16)
41029110:	103ff826 	beq	r2,zero,410290f4 <_read_r+0x3c>
41029114:	88800015 	stw	r2,0(r17)
41029118:	1805883a 	mov	r2,r3
4102911c:	dfc00217 	ldw	ra,8(sp)
41029120:	dc400117 	ldw	r17,4(sp)
41029124:	dc000017 	ldw	r16,0(sp)
41029128:	dec00304 	addi	sp,sp,12
4102912c:	f800283a 	ret

41029130 <__udivdi3>:
41029130:	defff004 	addi	sp,sp,-64
41029134:	2005883a 	mov	r2,r4
41029138:	3011883a 	mov	r8,r6
4102913c:	df000e15 	stw	fp,56(sp)
41029140:	dd000a15 	stw	r20,40(sp)
41029144:	dc000615 	stw	r16,24(sp)
41029148:	dfc00f15 	stw	ra,60(sp)
4102914c:	ddc00d15 	stw	r23,52(sp)
41029150:	dd800c15 	stw	r22,48(sp)
41029154:	dd400b15 	stw	r21,44(sp)
41029158:	dcc00915 	stw	r19,36(sp)
4102915c:	dc800815 	stw	r18,32(sp)
41029160:	dc400715 	stw	r17,28(sp)
41029164:	4021883a 	mov	r16,r8
41029168:	1039883a 	mov	fp,r2
4102916c:	2829883a 	mov	r20,r5
41029170:	38003b1e 	bne	r7,zero,41029260 <__udivdi3+0x130>
41029174:	2a005c36 	bltu	r5,r8,410292e8 <__udivdi3+0x1b8>
41029178:	4000a626 	beq	r8,zero,41029414 <__udivdi3+0x2e4>
4102917c:	00bfffd4 	movui	r2,65535
41029180:	14009e36 	bltu	r2,r16,410293fc <__udivdi3+0x2cc>
41029184:	00803fc4 	movi	r2,255
41029188:	14013d36 	bltu	r2,r16,41029680 <__udivdi3+0x550>
4102918c:	000b883a 	mov	r5,zero
41029190:	0005883a 	mov	r2,zero
41029194:	8084d83a 	srl	r2,r16,r2
41029198:	011040f4 	movhi	r4,16643
4102919c:	21378604 	addi	r4,r4,-8680
410291a0:	01800804 	movi	r6,32
410291a4:	1105883a 	add	r2,r2,r4
410291a8:	10c00003 	ldbu	r3,0(r2)
410291ac:	28c7883a 	add	r3,r5,r3
410291b0:	30edc83a 	sub	r22,r6,r3
410291b4:	b000ee1e 	bne	r22,zero,41029570 <__udivdi3+0x440>
410291b8:	802ad43a 	srli	r21,r16,16
410291bc:	00800044 	movi	r2,1
410291c0:	a423c83a 	sub	r17,r20,r16
410291c4:	85ffffcc 	andi	r23,r16,65535
410291c8:	d8800315 	stw	r2,12(sp)
410291cc:	8809883a 	mov	r4,r17
410291d0:	a80b883a 	mov	r5,r21
410291d4:	10214f40 	call	410214f4 <__udivsi3>
410291d8:	8809883a 	mov	r4,r17
410291dc:	a80b883a 	mov	r5,r21
410291e0:	102d883a 	mov	r22,r2
410291e4:	10214fc0 	call	410214fc <__umodsi3>
410291e8:	1004943a 	slli	r2,r2,16
410291ec:	e006d43a 	srli	r3,fp,16
410291f0:	bda3383a 	mul	r17,r23,r22
410291f4:	10c4b03a 	or	r2,r2,r3
410291f8:	1440042e 	bgeu	r2,r17,4102920c <__udivdi3+0xdc>
410291fc:	1405883a 	add	r2,r2,r16
41029200:	b5bfffc4 	addi	r22,r22,-1
41029204:	14000136 	bltu	r2,r16,4102920c <__udivdi3+0xdc>
41029208:	14413d36 	bltu	r2,r17,41029700 <__udivdi3+0x5d0>
4102920c:	1463c83a 	sub	r17,r2,r17
41029210:	8809883a 	mov	r4,r17
41029214:	a80b883a 	mov	r5,r21
41029218:	10214f40 	call	410214f4 <__udivsi3>
4102921c:	8809883a 	mov	r4,r17
41029220:	a80b883a 	mov	r5,r21
41029224:	1029883a 	mov	r20,r2
41029228:	10214fc0 	call	410214fc <__umodsi3>
4102922c:	1004943a 	slli	r2,r2,16
41029230:	bd09383a 	mul	r4,r23,r20
41029234:	e0ffffcc 	andi	r3,fp,65535
41029238:	10c4b03a 	or	r2,r2,r3
4102923c:	1100042e 	bgeu	r2,r4,41029250 <__udivdi3+0x120>
41029240:	8085883a 	add	r2,r16,r2
41029244:	a53fffc4 	addi	r20,r20,-1
41029248:	14000136 	bltu	r2,r16,41029250 <__udivdi3+0x120>
4102924c:	11012036 	bltu	r2,r4,410296d0 <__udivdi3+0x5a0>
41029250:	b004943a 	slli	r2,r22,16
41029254:	d9000317 	ldw	r4,12(sp)
41029258:	a084b03a 	or	r2,r20,r2
4102925c:	00001506 	br	410292b4 <__udivdi3+0x184>
41029260:	380d883a 	mov	r6,r7
41029264:	29c06236 	bltu	r5,r7,410293f0 <__udivdi3+0x2c0>
41029268:	00bfffd4 	movui	r2,65535
4102926c:	11c05a36 	bltu	r2,r7,410293d8 <__udivdi3+0x2a8>
41029270:	00803fc4 	movi	r2,255
41029274:	11c0fc36 	bltu	r2,r7,41029668 <__udivdi3+0x538>
41029278:	000b883a 	mov	r5,zero
4102927c:	0005883a 	mov	r2,zero
41029280:	3084d83a 	srl	r2,r6,r2
41029284:	011040f4 	movhi	r4,16643
41029288:	21378604 	addi	r4,r4,-8680
4102928c:	01c00804 	movi	r7,32
41029290:	1105883a 	add	r2,r2,r4
41029294:	10c00003 	ldbu	r3,0(r2)
41029298:	28c7883a 	add	r3,r5,r3
4102929c:	38efc83a 	sub	r23,r7,r3
410292a0:	b800691e 	bne	r23,zero,41029448 <__udivdi3+0x318>
410292a4:	35000136 	bltu	r6,r20,410292ac <__udivdi3+0x17c>
410292a8:	e4005136 	bltu	fp,r16,410293f0 <__udivdi3+0x2c0>
410292ac:	00800044 	movi	r2,1
410292b0:	0009883a 	mov	r4,zero
410292b4:	2007883a 	mov	r3,r4
410292b8:	dfc00f17 	ldw	ra,60(sp)
410292bc:	df000e17 	ldw	fp,56(sp)
410292c0:	ddc00d17 	ldw	r23,52(sp)
410292c4:	dd800c17 	ldw	r22,48(sp)
410292c8:	dd400b17 	ldw	r21,44(sp)
410292cc:	dd000a17 	ldw	r20,40(sp)
410292d0:	dcc00917 	ldw	r19,36(sp)
410292d4:	dc800817 	ldw	r18,32(sp)
410292d8:	dc400717 	ldw	r17,28(sp)
410292dc:	dc000617 	ldw	r16,24(sp)
410292e0:	dec01004 	addi	sp,sp,64
410292e4:	f800283a 	ret
410292e8:	00bfffd4 	movui	r2,65535
410292ec:	12005036 	bltu	r2,r8,41029430 <__udivdi3+0x300>
410292f0:	00803fc4 	movi	r2,255
410292f4:	1200e836 	bltu	r2,r8,41029698 <__udivdi3+0x568>
410292f8:	000b883a 	mov	r5,zero
410292fc:	0005883a 	mov	r2,zero
41029300:	8084d83a 	srl	r2,r16,r2
41029304:	011040f4 	movhi	r4,16643
41029308:	21378604 	addi	r4,r4,-8680
4102930c:	01800804 	movi	r6,32
41029310:	1105883a 	add	r2,r2,r4
41029314:	10c00003 	ldbu	r3,0(r2)
41029318:	28c7883a 	add	r3,r5,r3
4102931c:	30cbc83a 	sub	r5,r6,r3
41029320:	28000626 	beq	r5,zero,4102933c <__udivdi3+0x20c>
41029324:	3145c83a 	sub	r2,r6,r5
41029328:	e084d83a 	srl	r2,fp,r2
4102932c:	a146983a 	sll	r3,r20,r5
41029330:	e178983a 	sll	fp,fp,r5
41029334:	8160983a 	sll	r16,r16,r5
41029338:	18a8b03a 	or	r20,r3,r2
4102933c:	802ad43a 	srli	r21,r16,16
41029340:	a009883a 	mov	r4,r20
41029344:	85ffffcc 	andi	r23,r16,65535
41029348:	a80b883a 	mov	r5,r21
4102934c:	10214f40 	call	410214f4 <__udivsi3>
41029350:	a009883a 	mov	r4,r20
41029354:	a80b883a 	mov	r5,r21
41029358:	102d883a 	mov	r22,r2
4102935c:	10214fc0 	call	410214fc <__umodsi3>
41029360:	1004943a 	slli	r2,r2,16
41029364:	e006d43a 	srli	r3,fp,16
41029368:	bda3383a 	mul	r17,r23,r22
4102936c:	10c4b03a 	or	r2,r2,r3
41029370:	1440042e 	bgeu	r2,r17,41029384 <__udivdi3+0x254>
41029374:	1405883a 	add	r2,r2,r16
41029378:	b5bfffc4 	addi	r22,r22,-1
4102937c:	14000136 	bltu	r2,r16,41029384 <__udivdi3+0x254>
41029380:	1440d536 	bltu	r2,r17,410296d8 <__udivdi3+0x5a8>
41029384:	1463c83a 	sub	r17,r2,r17
41029388:	8809883a 	mov	r4,r17
4102938c:	a80b883a 	mov	r5,r21
41029390:	10214f40 	call	410214f4 <__udivsi3>
41029394:	8809883a 	mov	r4,r17
41029398:	a80b883a 	mov	r5,r21
4102939c:	1029883a 	mov	r20,r2
410293a0:	10214fc0 	call	410214fc <__umodsi3>
410293a4:	1004943a 	slli	r2,r2,16
410293a8:	bd09383a 	mul	r4,r23,r20
410293ac:	e0ffffcc 	andi	r3,fp,65535
410293b0:	10c4b03a 	or	r2,r2,r3
410293b4:	1100042e 	bgeu	r2,r4,410293c8 <__udivdi3+0x298>
410293b8:	8085883a 	add	r2,r16,r2
410293bc:	a53fffc4 	addi	r20,r20,-1
410293c0:	14000136 	bltu	r2,r16,410293c8 <__udivdi3+0x298>
410293c4:	1100c736 	bltu	r2,r4,410296e4 <__udivdi3+0x5b4>
410293c8:	b004943a 	slli	r2,r22,16
410293cc:	0009883a 	mov	r4,zero
410293d0:	a084b03a 	or	r2,r20,r2
410293d4:	003fb706 	br	410292b4 <__udivdi3+0x184>
410293d8:	00804034 	movhi	r2,256
410293dc:	10bfffc4 	addi	r2,r2,-1
410293e0:	11c0a436 	bltu	r2,r7,41029674 <__udivdi3+0x544>
410293e4:	01400404 	movi	r5,16
410293e8:	2805883a 	mov	r2,r5
410293ec:	003fa406 	br	41029280 <__udivdi3+0x150>
410293f0:	0005883a 	mov	r2,zero
410293f4:	0009883a 	mov	r4,zero
410293f8:	003fae06 	br	410292b4 <__udivdi3+0x184>
410293fc:	00804034 	movhi	r2,256
41029400:	10bfffc4 	addi	r2,r2,-1
41029404:	1400a136 	bltu	r2,r16,4102968c <__udivdi3+0x55c>
41029408:	01400404 	movi	r5,16
4102940c:	2805883a 	mov	r2,r5
41029410:	003f6006 	br	41029194 <__udivdi3+0x64>
41029414:	01000044 	movi	r4,1
41029418:	000b883a 	mov	r5,zero
4102941c:	10214f40 	call	410214f4 <__udivsi3>
41029420:	1021883a 	mov	r16,r2
41029424:	00bfffd4 	movui	r2,65535
41029428:	143ff436 	bltu	r2,r16,410293fc <__udivdi3+0x2cc>
4102942c:	003f5506 	br	41029184 <__udivdi3+0x54>
41029430:	00804034 	movhi	r2,256
41029434:	10bfffc4 	addi	r2,r2,-1
41029438:	12009a36 	bltu	r2,r8,410296a4 <__udivdi3+0x574>
4102943c:	01400404 	movi	r5,16
41029440:	2805883a 	mov	r2,r5
41029444:	003fae06 	br	41029300 <__udivdi3+0x1d0>
41029448:	3dc5c83a 	sub	r2,r7,r23
4102944c:	35c8983a 	sll	r4,r6,r23
41029450:	8086d83a 	srl	r3,r16,r2
41029454:	a0a2d83a 	srl	r17,r20,r2
41029458:	e084d83a 	srl	r2,fp,r2
4102945c:	20eab03a 	or	r21,r4,r3
41029460:	a82cd43a 	srli	r22,r21,16
41029464:	a5c6983a 	sll	r3,r20,r23
41029468:	8809883a 	mov	r4,r17
4102946c:	b00b883a 	mov	r5,r22
41029470:	1886b03a 	or	r3,r3,r2
41029474:	d8c00215 	stw	r3,8(sp)
41029478:	10214f40 	call	410214f4 <__udivsi3>
4102947c:	8809883a 	mov	r4,r17
41029480:	b00b883a 	mov	r5,r22
41029484:	1029883a 	mov	r20,r2
41029488:	10214fc0 	call	410214fc <__umodsi3>
4102948c:	a8ffffcc 	andi	r3,r21,65535
41029490:	d8c00515 	stw	r3,20(sp)
41029494:	d9000217 	ldw	r4,8(sp)
41029498:	d9400517 	ldw	r5,20(sp)
4102949c:	1004943a 	slli	r2,r2,16
410294a0:	2006d43a 	srli	r3,r4,16
410294a4:	85e0983a 	sll	r16,r16,r23
410294a8:	2d23383a 	mul	r17,r5,r20
410294ac:	10c4b03a 	or	r2,r2,r3
410294b0:	dc000015 	stw	r16,0(sp)
410294b4:	1440032e 	bgeu	r2,r17,410294c4 <__udivdi3+0x394>
410294b8:	1545883a 	add	r2,r2,r21
410294bc:	a53fffc4 	addi	r20,r20,-1
410294c0:	15407f2e 	bgeu	r2,r21,410296c0 <__udivdi3+0x590>
410294c4:	1463c83a 	sub	r17,r2,r17
410294c8:	8809883a 	mov	r4,r17
410294cc:	b00b883a 	mov	r5,r22
410294d0:	10214f40 	call	410214f4 <__udivsi3>
410294d4:	8809883a 	mov	r4,r17
410294d8:	b00b883a 	mov	r5,r22
410294dc:	1021883a 	mov	r16,r2
410294e0:	10214fc0 	call	410214fc <__umodsi3>
410294e4:	d8c00517 	ldw	r3,20(sp)
410294e8:	d9000217 	ldw	r4,8(sp)
410294ec:	1004943a 	slli	r2,r2,16
410294f0:	1c0f383a 	mul	r7,r3,r16
410294f4:	20ffffcc 	andi	r3,r4,65535
410294f8:	10e2b03a 	or	r17,r2,r3
410294fc:	89c0032e 	bgeu	r17,r7,4102950c <__udivdi3+0x3dc>
41029500:	8d63883a 	add	r17,r17,r21
41029504:	843fffc4 	addi	r16,r16,-1
41029508:	8d40692e 	bgeu	r17,r21,410296b0 <__udivdi3+0x580>
4102950c:	a008943a 	slli	r4,r20,16
41029510:	d9400017 	ldw	r5,0(sp)
41029514:	89e3c83a 	sub	r17,r17,r7
41029518:	8110b03a 	or	r8,r16,r4
4102951c:	280cd43a 	srli	r6,r5,16
41029520:	28ffffcc 	andi	r3,r5,65535
41029524:	40bfffcc 	andi	r2,r8,65535
41029528:	400ad43a 	srli	r5,r8,16
4102952c:	10d3383a 	mul	r9,r2,r3
41029530:	1185383a 	mul	r2,r2,r6
41029534:	28c7383a 	mul	r3,r5,r3
41029538:	4808d43a 	srli	r4,r9,16
4102953c:	298b383a 	mul	r5,r5,r6
41029540:	10c5883a 	add	r2,r2,r3
41029544:	2089883a 	add	r4,r4,r2
41029548:	20c0022e 	bgeu	r4,r3,41029554 <__udivdi3+0x424>
4102954c:	00800074 	movhi	r2,1
41029550:	288b883a 	add	r5,r5,r2
41029554:	2004d43a 	srli	r2,r4,16
41029558:	288b883a 	add	r5,r5,r2
4102955c:	89403f36 	bltu	r17,r5,4102965c <__udivdi3+0x52c>
41029560:	89403926 	beq	r17,r5,41029648 <__udivdi3+0x518>
41029564:	4005883a 	mov	r2,r8
41029568:	0009883a 	mov	r4,zero
4102956c:	003f5106 	br	410292b4 <__udivdi3+0x184>
41029570:	85a0983a 	sll	r16,r16,r22
41029574:	3585c83a 	sub	r2,r6,r22
41029578:	a0a2d83a 	srl	r17,r20,r2
4102957c:	802ad43a 	srli	r21,r16,16
41029580:	e084d83a 	srl	r2,fp,r2
41029584:	a586983a 	sll	r3,r20,r22
41029588:	8809883a 	mov	r4,r17
4102958c:	a80b883a 	mov	r5,r21
41029590:	1886b03a 	or	r3,r3,r2
41029594:	d8c00115 	stw	r3,4(sp)
41029598:	10214f40 	call	410214f4 <__udivsi3>
4102959c:	8809883a 	mov	r4,r17
410295a0:	a80b883a 	mov	r5,r21
410295a4:	d8800415 	stw	r2,16(sp)
410295a8:	10214fc0 	call	410214fc <__umodsi3>
410295ac:	d9000117 	ldw	r4,4(sp)
410295b0:	d9400417 	ldw	r5,16(sp)
410295b4:	1004943a 	slli	r2,r2,16
410295b8:	85ffffcc 	andi	r23,r16,65535
410295bc:	2006d43a 	srli	r3,r4,16
410295c0:	b963383a 	mul	r17,r23,r5
410295c4:	10c4b03a 	or	r2,r2,r3
410295c8:	1440042e 	bgeu	r2,r17,410295dc <__udivdi3+0x4ac>
410295cc:	297fffc4 	addi	r5,r5,-1
410295d0:	1405883a 	add	r2,r2,r16
410295d4:	d9400415 	stw	r5,16(sp)
410295d8:	1400442e 	bgeu	r2,r16,410296ec <__udivdi3+0x5bc>
410295dc:	1463c83a 	sub	r17,r2,r17
410295e0:	8809883a 	mov	r4,r17
410295e4:	a80b883a 	mov	r5,r21
410295e8:	10214f40 	call	410214f4 <__udivsi3>
410295ec:	8809883a 	mov	r4,r17
410295f0:	a80b883a 	mov	r5,r21
410295f4:	1029883a 	mov	r20,r2
410295f8:	10214fc0 	call	410214fc <__umodsi3>
410295fc:	d9400117 	ldw	r5,4(sp)
41029600:	1004943a 	slli	r2,r2,16
41029604:	bd09383a 	mul	r4,r23,r20
41029608:	28ffffcc 	andi	r3,r5,65535
4102960c:	10c6b03a 	or	r3,r2,r3
41029610:	1900062e 	bgeu	r3,r4,4102962c <__udivdi3+0x4fc>
41029614:	1c07883a 	add	r3,r3,r16
41029618:	a53fffc4 	addi	r20,r20,-1
4102961c:	1c000336 	bltu	r3,r16,4102962c <__udivdi3+0x4fc>
41029620:	1900022e 	bgeu	r3,r4,4102962c <__udivdi3+0x4fc>
41029624:	a53fffc4 	addi	r20,r20,-1
41029628:	1c07883a 	add	r3,r3,r16
4102962c:	d9400417 	ldw	r5,16(sp)
41029630:	e5b8983a 	sll	fp,fp,r22
41029634:	1923c83a 	sub	r17,r3,r4
41029638:	2804943a 	slli	r2,r5,16
4102963c:	a0a8b03a 	or	r20,r20,r2
41029640:	dd000315 	stw	r20,12(sp)
41029644:	003ee106 	br	410291cc <__udivdi3+0x9c>
41029648:	2004943a 	slli	r2,r4,16
4102964c:	e5c8983a 	sll	r4,fp,r23
41029650:	48ffffcc 	andi	r3,r9,65535
41029654:	10c5883a 	add	r2,r2,r3
41029658:	20bfc22e 	bgeu	r4,r2,41029564 <__udivdi3+0x434>
4102965c:	40bfffc4 	addi	r2,r8,-1
41029660:	0009883a 	mov	r4,zero
41029664:	003f1306 	br	410292b4 <__udivdi3+0x184>
41029668:	01400204 	movi	r5,8
4102966c:	2805883a 	mov	r2,r5
41029670:	003f0306 	br	41029280 <__udivdi3+0x150>
41029674:	01400604 	movi	r5,24
41029678:	2805883a 	mov	r2,r5
4102967c:	003f0006 	br	41029280 <__udivdi3+0x150>
41029680:	01400204 	movi	r5,8
41029684:	2805883a 	mov	r2,r5
41029688:	003ec206 	br	41029194 <__udivdi3+0x64>
4102968c:	01400604 	movi	r5,24
41029690:	2805883a 	mov	r2,r5
41029694:	003ebf06 	br	41029194 <__udivdi3+0x64>
41029698:	01400204 	movi	r5,8
4102969c:	2805883a 	mov	r2,r5
410296a0:	003f1706 	br	41029300 <__udivdi3+0x1d0>
410296a4:	01400604 	movi	r5,24
410296a8:	2805883a 	mov	r2,r5
410296ac:	003f1406 	br	41029300 <__udivdi3+0x1d0>
410296b0:	89ff962e 	bgeu	r17,r7,4102950c <__udivdi3+0x3dc>
410296b4:	8d63883a 	add	r17,r17,r21
410296b8:	843fffc4 	addi	r16,r16,-1
410296bc:	003f9306 	br	4102950c <__udivdi3+0x3dc>
410296c0:	147f802e 	bgeu	r2,r17,410294c4 <__udivdi3+0x394>
410296c4:	a53fffc4 	addi	r20,r20,-1
410296c8:	1545883a 	add	r2,r2,r21
410296cc:	003f7d06 	br	410294c4 <__udivdi3+0x394>
410296d0:	a53fffc4 	addi	r20,r20,-1
410296d4:	003ede06 	br	41029250 <__udivdi3+0x120>
410296d8:	b5bfffc4 	addi	r22,r22,-1
410296dc:	1405883a 	add	r2,r2,r16
410296e0:	003f2806 	br	41029384 <__udivdi3+0x254>
410296e4:	a53fffc4 	addi	r20,r20,-1
410296e8:	003f3706 	br	410293c8 <__udivdi3+0x298>
410296ec:	147fbb2e 	bgeu	r2,r17,410295dc <__udivdi3+0x4ac>
410296f0:	297fffc4 	addi	r5,r5,-1
410296f4:	1405883a 	add	r2,r2,r16
410296f8:	d9400415 	stw	r5,16(sp)
410296fc:	003fb706 	br	410295dc <__udivdi3+0x4ac>
41029700:	b5bfffc4 	addi	r22,r22,-1
41029704:	1405883a 	add	r2,r2,r16
41029708:	003ec006 	br	4102920c <__udivdi3+0xdc>

4102970c <__umoddi3>:
4102970c:	defff104 	addi	sp,sp,-60
41029710:	dd800b15 	stw	r22,44(sp)
41029714:	dd000915 	stw	r20,36(sp)
41029718:	dc000515 	stw	r16,20(sp)
4102971c:	dfc00e15 	stw	ra,56(sp)
41029720:	df000d15 	stw	fp,52(sp)
41029724:	ddc00c15 	stw	r23,48(sp)
41029728:	dd400a15 	stw	r21,40(sp)
4102972c:	dcc00815 	stw	r19,32(sp)
41029730:	dc800715 	stw	r18,28(sp)
41029734:	dc400615 	stw	r17,24(sp)
41029738:	3021883a 	mov	r16,r6
4102973c:	202d883a 	mov	r22,r4
41029740:	2829883a 	mov	r20,r5
41029744:	38002b1e 	bne	r7,zero,410297f4 <__umoddi3+0xe8>
41029748:	29805036 	bltu	r5,r6,4102988c <__umoddi3+0x180>
4102974c:	30008a26 	beq	r6,zero,41029978 <__umoddi3+0x26c>
41029750:	00bfffd4 	movui	r2,65535
41029754:	14008236 	bltu	r2,r16,41029960 <__umoddi3+0x254>
41029758:	00803fc4 	movi	r2,255
4102975c:	14013636 	bltu	r2,r16,41029c38 <__umoddi3+0x52c>
41029760:	000b883a 	mov	r5,zero
41029764:	0005883a 	mov	r2,zero
41029768:	8084d83a 	srl	r2,r16,r2
4102976c:	011040f4 	movhi	r4,16643
41029770:	21378604 	addi	r4,r4,-8680
41029774:	01800804 	movi	r6,32
41029778:	1105883a 	add	r2,r2,r4
4102977c:	10c00003 	ldbu	r3,0(r2)
41029780:	28c7883a 	add	r3,r5,r3
41029784:	30efc83a 	sub	r23,r6,r3
41029788:	b800941e 	bne	r23,zero,410299dc <__umoddi3+0x2d0>
4102978c:	802ad43a 	srli	r21,r16,16
41029790:	a423c83a 	sub	r17,r20,r16
41029794:	0039883a 	mov	fp,zero
41029798:	853fffcc 	andi	r20,r16,65535
4102979c:	8809883a 	mov	r4,r17
410297a0:	a80b883a 	mov	r5,r21
410297a4:	10214f40 	call	410214f4 <__udivsi3>
410297a8:	8809883a 	mov	r4,r17
410297ac:	a80b883a 	mov	r5,r21
410297b0:	a0a3383a 	mul	r17,r20,r2
410297b4:	10214fc0 	call	410214fc <__umodsi3>
410297b8:	1004943a 	slli	r2,r2,16
410297bc:	b006d43a 	srli	r3,r22,16
410297c0:	10c4b03a 	or	r2,r2,r3
410297c4:	1440032e 	bgeu	r2,r17,410297d4 <__umoddi3+0xc8>
410297c8:	1405883a 	add	r2,r2,r16
410297cc:	14000136 	bltu	r2,r16,410297d4 <__umoddi3+0xc8>
410297d0:	14413536 	bltu	r2,r17,41029ca8 <__umoddi3+0x59c>
410297d4:	1463c83a 	sub	r17,r2,r17
410297d8:	8809883a 	mov	r4,r17
410297dc:	a80b883a 	mov	r5,r21
410297e0:	10214f40 	call	410214f4 <__udivsi3>
410297e4:	8809883a 	mov	r4,r17
410297e8:	a0a3383a 	mul	r17,r20,r2
410297ec:	a80b883a 	mov	r5,r21
410297f0:	00004d06 	br	41029928 <__umoddi3+0x21c>
410297f4:	380d883a 	mov	r6,r7
410297f8:	29c0102e 	bgeu	r5,r7,4102983c <__umoddi3+0x130>
410297fc:	2011883a 	mov	r8,r4
41029800:	2813883a 	mov	r9,r5
41029804:	4005883a 	mov	r2,r8
41029808:	4807883a 	mov	r3,r9
4102980c:	dfc00e17 	ldw	ra,56(sp)
41029810:	df000d17 	ldw	fp,52(sp)
41029814:	ddc00c17 	ldw	r23,48(sp)
41029818:	dd800b17 	ldw	r22,44(sp)
4102981c:	dd400a17 	ldw	r21,40(sp)
41029820:	dd000917 	ldw	r20,36(sp)
41029824:	dcc00817 	ldw	r19,32(sp)
41029828:	dc800717 	ldw	r18,28(sp)
4102982c:	dc400617 	ldw	r17,24(sp)
41029830:	dc000517 	ldw	r16,20(sp)
41029834:	dec00f04 	addi	sp,sp,60
41029838:	f800283a 	ret
4102983c:	00bfffd4 	movui	r2,65535
41029840:	11c05a36 	bltu	r2,r7,410299ac <__umoddi3+0x2a0>
41029844:	00803fc4 	movi	r2,255
41029848:	11c0fe36 	bltu	r2,r7,41029c44 <__umoddi3+0x538>
4102984c:	000b883a 	mov	r5,zero
41029850:	0005883a 	mov	r2,zero
41029854:	3084d83a 	srl	r2,r6,r2
41029858:	011040f4 	movhi	r4,16643
4102985c:	21378604 	addi	r4,r4,-8680
41029860:	01c00804 	movi	r7,32
41029864:	1105883a 	add	r2,r2,r4
41029868:	10c00003 	ldbu	r3,0(r2)
4102986c:	28c7883a 	add	r3,r5,r3
41029870:	38ebc83a 	sub	r21,r7,r3
41029874:	a800851e 	bne	r21,zero,41029a8c <__umoddi3+0x380>
41029878:	35005236 	bltu	r6,r20,410299c4 <__umoddi3+0x2b8>
4102987c:	b400512e 	bgeu	r22,r16,410299c4 <__umoddi3+0x2b8>
41029880:	b011883a 	mov	r8,r22
41029884:	a013883a 	mov	r9,r20
41029888:	003fde06 	br	41029804 <__umoddi3+0xf8>
4102988c:	00bfffd4 	movui	r2,65535
41029890:	11804036 	bltu	r2,r6,41029994 <__umoddi3+0x288>
41029894:	00803fc4 	movi	r2,255
41029898:	1180ed36 	bltu	r2,r6,41029c50 <__umoddi3+0x544>
4102989c:	000b883a 	mov	r5,zero
410298a0:	0005883a 	mov	r2,zero
410298a4:	8084d83a 	srl	r2,r16,r2
410298a8:	011040f4 	movhi	r4,16643
410298ac:	21378604 	addi	r4,r4,-8680
410298b0:	01800804 	movi	r6,32
410298b4:	1105883a 	add	r2,r2,r4
410298b8:	10c00003 	ldbu	r3,0(r2)
410298bc:	28c7883a 	add	r3,r5,r3
410298c0:	30c7c83a 	sub	r3,r6,r3
410298c4:	1800bf1e 	bne	r3,zero,41029bc4 <__umoddi3+0x4b8>
410298c8:	0039883a 	mov	fp,zero
410298cc:	802ad43a 	srli	r21,r16,16
410298d0:	a009883a 	mov	r4,r20
410298d4:	85ffffcc 	andi	r23,r16,65535
410298d8:	a80b883a 	mov	r5,r21
410298dc:	10214f40 	call	410214f4 <__udivsi3>
410298e0:	a009883a 	mov	r4,r20
410298e4:	a80b883a 	mov	r5,r21
410298e8:	b8a3383a 	mul	r17,r23,r2
410298ec:	10214fc0 	call	410214fc <__umodsi3>
410298f0:	1004943a 	slli	r2,r2,16
410298f4:	b006d43a 	srli	r3,r22,16
410298f8:	10c4b03a 	or	r2,r2,r3
410298fc:	1440032e 	bgeu	r2,r17,4102990c <__umoddi3+0x200>
41029900:	1405883a 	add	r2,r2,r16
41029904:	14000136 	bltu	r2,r16,4102990c <__umoddi3+0x200>
41029908:	1440e536 	bltu	r2,r17,41029ca0 <__umoddi3+0x594>
4102990c:	1463c83a 	sub	r17,r2,r17
41029910:	8809883a 	mov	r4,r17
41029914:	a80b883a 	mov	r5,r21
41029918:	10214f40 	call	410214f4 <__udivsi3>
4102991c:	8809883a 	mov	r4,r17
41029920:	b8a3383a 	mul	r17,r23,r2
41029924:	a80b883a 	mov	r5,r21
41029928:	10214fc0 	call	410214fc <__umodsi3>
4102992c:	1004943a 	slli	r2,r2,16
41029930:	b0ffffcc 	andi	r3,r22,65535
41029934:	10c4b03a 	or	r2,r2,r3
41029938:	1440042e 	bgeu	r2,r17,4102994c <__umoddi3+0x240>
4102993c:	1405883a 	add	r2,r2,r16
41029940:	14000236 	bltu	r2,r16,4102994c <__umoddi3+0x240>
41029944:	1440012e 	bgeu	r2,r17,4102994c <__umoddi3+0x240>
41029948:	1405883a 	add	r2,r2,r16
4102994c:	1445c83a 	sub	r2,r2,r17
41029950:	1724d83a 	srl	r18,r2,fp
41029954:	0013883a 	mov	r9,zero
41029958:	9011883a 	mov	r8,r18
4102995c:	003fa906 	br	41029804 <__umoddi3+0xf8>
41029960:	00804034 	movhi	r2,256
41029964:	10bfffc4 	addi	r2,r2,-1
41029968:	1400b036 	bltu	r2,r16,41029c2c <__umoddi3+0x520>
4102996c:	01400404 	movi	r5,16
41029970:	2805883a 	mov	r2,r5
41029974:	003f7c06 	br	41029768 <__umoddi3+0x5c>
41029978:	01000044 	movi	r4,1
4102997c:	000b883a 	mov	r5,zero
41029980:	10214f40 	call	410214f4 <__udivsi3>
41029984:	1021883a 	mov	r16,r2
41029988:	00bfffd4 	movui	r2,65535
4102998c:	143ff436 	bltu	r2,r16,41029960 <__umoddi3+0x254>
41029990:	003f7106 	br	41029758 <__umoddi3+0x4c>
41029994:	00804034 	movhi	r2,256
41029998:	10bfffc4 	addi	r2,r2,-1
4102999c:	1180af36 	bltu	r2,r6,41029c5c <__umoddi3+0x550>
410299a0:	01400404 	movi	r5,16
410299a4:	2805883a 	mov	r2,r5
410299a8:	003fbe06 	br	410298a4 <__umoddi3+0x198>
410299ac:	00804034 	movhi	r2,256
410299b0:	10bfffc4 	addi	r2,r2,-1
410299b4:	11c0ac36 	bltu	r2,r7,41029c68 <__umoddi3+0x55c>
410299b8:	01400404 	movi	r5,16
410299bc:	2805883a 	mov	r2,r5
410299c0:	003fa406 	br	41029854 <__umoddi3+0x148>
410299c4:	b409c83a 	sub	r4,r22,r16
410299c8:	b105803a 	cmpltu	r2,r22,r4
410299cc:	a187c83a 	sub	r3,r20,r6
410299d0:	18a9c83a 	sub	r20,r3,r2
410299d4:	202d883a 	mov	r22,r4
410299d8:	003fa906 	br	41029880 <__umoddi3+0x174>
410299dc:	85e0983a 	sll	r16,r16,r23
410299e0:	35c5c83a 	sub	r2,r6,r23
410299e4:	a0a2d83a 	srl	r17,r20,r2
410299e8:	802ad43a 	srli	r21,r16,16
410299ec:	b084d83a 	srl	r2,r22,r2
410299f0:	a5c6983a 	sll	r3,r20,r23
410299f4:	8809883a 	mov	r4,r17
410299f8:	a80b883a 	mov	r5,r21
410299fc:	1886b03a 	or	r3,r3,r2
41029a00:	d8c00115 	stw	r3,4(sp)
41029a04:	853fffcc 	andi	r20,r16,65535
41029a08:	10214f40 	call	410214f4 <__udivsi3>
41029a0c:	8809883a 	mov	r4,r17
41029a10:	a80b883a 	mov	r5,r21
41029a14:	a0a3383a 	mul	r17,r20,r2
41029a18:	10214fc0 	call	410214fc <__umodsi3>
41029a1c:	d9000117 	ldw	r4,4(sp)
41029a20:	1004943a 	slli	r2,r2,16
41029a24:	b839883a 	mov	fp,r23
41029a28:	2006d43a 	srli	r3,r4,16
41029a2c:	10c4b03a 	or	r2,r2,r3
41029a30:	1440022e 	bgeu	r2,r17,41029a3c <__umoddi3+0x330>
41029a34:	1405883a 	add	r2,r2,r16
41029a38:	1400962e 	bgeu	r2,r16,41029c94 <__umoddi3+0x588>
41029a3c:	1463c83a 	sub	r17,r2,r17
41029a40:	8809883a 	mov	r4,r17
41029a44:	a80b883a 	mov	r5,r21
41029a48:	10214f40 	call	410214f4 <__udivsi3>
41029a4c:	8809883a 	mov	r4,r17
41029a50:	a80b883a 	mov	r5,r21
41029a54:	a0a3383a 	mul	r17,r20,r2
41029a58:	10214fc0 	call	410214fc <__umodsi3>
41029a5c:	d9400117 	ldw	r5,4(sp)
41029a60:	1004943a 	slli	r2,r2,16
41029a64:	28ffffcc 	andi	r3,r5,65535
41029a68:	10c4b03a 	or	r2,r2,r3
41029a6c:	1440042e 	bgeu	r2,r17,41029a80 <__umoddi3+0x374>
41029a70:	1405883a 	add	r2,r2,r16
41029a74:	14000236 	bltu	r2,r16,41029a80 <__umoddi3+0x374>
41029a78:	1440012e 	bgeu	r2,r17,41029a80 <__umoddi3+0x374>
41029a7c:	1405883a 	add	r2,r2,r16
41029a80:	b5ec983a 	sll	r22,r22,r23
41029a84:	1463c83a 	sub	r17,r2,r17
41029a88:	003f4406 	br	4102979c <__umoddi3+0x90>
41029a8c:	3d4fc83a 	sub	r7,r7,r21
41029a90:	3546983a 	sll	r3,r6,r21
41029a94:	81c4d83a 	srl	r2,r16,r7
41029a98:	a1e2d83a 	srl	r17,r20,r7
41029a9c:	a54c983a 	sll	r6,r20,r21
41029aa0:	18aeb03a 	or	r23,r3,r2
41029aa4:	b828d43a 	srli	r20,r23,16
41029aa8:	b1c4d83a 	srl	r2,r22,r7
41029aac:	8809883a 	mov	r4,r17
41029ab0:	a00b883a 	mov	r5,r20
41029ab4:	308cb03a 	or	r6,r6,r2
41029ab8:	d9c00315 	stw	r7,12(sp)
41029abc:	d9800215 	stw	r6,8(sp)
41029ac0:	10214f40 	call	410214f4 <__udivsi3>
41029ac4:	8809883a 	mov	r4,r17
41029ac8:	a00b883a 	mov	r5,r20
41029acc:	1039883a 	mov	fp,r2
41029ad0:	10214fc0 	call	410214fc <__umodsi3>
41029ad4:	b8ffffcc 	andi	r3,r23,65535
41029ad8:	d8c00415 	stw	r3,16(sp)
41029adc:	d9000217 	ldw	r4,8(sp)
41029ae0:	d9400417 	ldw	r5,16(sp)
41029ae4:	1004943a 	slli	r2,r2,16
41029ae8:	2006d43a 	srli	r3,r4,16
41029aec:	8560983a 	sll	r16,r16,r21
41029af0:	2f23383a 	mul	r17,r5,fp
41029af4:	10c4b03a 	or	r2,r2,r3
41029af8:	dc000015 	stw	r16,0(sp)
41029afc:	b56c983a 	sll	r22,r22,r21
41029b00:	1440032e 	bgeu	r2,r17,41029b10 <__umoddi3+0x404>
41029b04:	15c5883a 	add	r2,r2,r23
41029b08:	e73fffc4 	addi	fp,fp,-1
41029b0c:	15c05d2e 	bgeu	r2,r23,41029c84 <__umoddi3+0x578>
41029b10:	1463c83a 	sub	r17,r2,r17
41029b14:	8809883a 	mov	r4,r17
41029b18:	a00b883a 	mov	r5,r20
41029b1c:	10214f40 	call	410214f4 <__udivsi3>
41029b20:	8809883a 	mov	r4,r17
41029b24:	a00b883a 	mov	r5,r20
41029b28:	1021883a 	mov	r16,r2
41029b2c:	10214fc0 	call	410214fc <__umodsi3>
41029b30:	d8c00417 	ldw	r3,16(sp)
41029b34:	d9000217 	ldw	r4,8(sp)
41029b38:	1004943a 	slli	r2,r2,16
41029b3c:	1c23383a 	mul	r17,r3,r16
41029b40:	20ffffcc 	andi	r3,r4,65535
41029b44:	10ceb03a 	or	r7,r2,r3
41029b48:	3c40032e 	bgeu	r7,r17,41029b58 <__umoddi3+0x44c>
41029b4c:	3dcf883a 	add	r7,r7,r23
41029b50:	843fffc4 	addi	r16,r16,-1
41029b54:	3dc0472e 	bgeu	r7,r23,41029c74 <__umoddi3+0x568>
41029b58:	e004943a 	slli	r2,fp,16
41029b5c:	d9400017 	ldw	r5,0(sp)
41029b60:	3c4fc83a 	sub	r7,r7,r17
41029b64:	8084b03a 	or	r2,r16,r2
41029b68:	28ffffcc 	andi	r3,r5,65535
41029b6c:	280cd43a 	srli	r6,r5,16
41029b70:	100ad43a 	srli	r5,r2,16
41029b74:	10bfffcc 	andi	r2,r2,65535
41029b78:	10d1383a 	mul	r8,r2,r3
41029b7c:	28c7383a 	mul	r3,r5,r3
41029b80:	1185383a 	mul	r2,r2,r6
41029b84:	4008d43a 	srli	r4,r8,16
41029b88:	298b383a 	mul	r5,r5,r6
41029b8c:	10c5883a 	add	r2,r2,r3
41029b90:	2089883a 	add	r4,r4,r2
41029b94:	20c0022e 	bgeu	r4,r3,41029ba0 <__umoddi3+0x494>
41029b98:	00800074 	movhi	r2,1
41029b9c:	288b883a 	add	r5,r5,r2
41029ba0:	2004d43a 	srli	r2,r4,16
41029ba4:	2008943a 	slli	r4,r4,16
41029ba8:	40ffffcc 	andi	r3,r8,65535
41029bac:	288b883a 	add	r5,r5,r2
41029bb0:	20c9883a 	add	r4,r4,r3
41029bb4:	39400b36 	bltu	r7,r5,41029be4 <__umoddi3+0x4d8>
41029bb8:	39403d26 	beq	r7,r5,41029cb0 <__umoddi3+0x5a4>
41029bbc:	394bc83a 	sub	r5,r7,r5
41029bc0:	00000f06 	br	41029c00 <__umoddi3+0x4f4>
41029bc4:	30c5c83a 	sub	r2,r6,r3
41029bc8:	1839883a 	mov	fp,r3
41029bcc:	b084d83a 	srl	r2,r22,r2
41029bd0:	a0c6983a 	sll	r3,r20,r3
41029bd4:	8720983a 	sll	r16,r16,fp
41029bd8:	b72c983a 	sll	r22,r22,fp
41029bdc:	18a8b03a 	or	r20,r3,r2
41029be0:	003f3a06 	br	410298cc <__umoddi3+0x1c0>
41029be4:	d8c00017 	ldw	r3,0(sp)
41029be8:	20c5c83a 	sub	r2,r4,r3
41029bec:	2089803a 	cmpltu	r4,r4,r2
41029bf0:	2dc7c83a 	sub	r3,r5,r23
41029bf4:	1907c83a 	sub	r3,r3,r4
41029bf8:	38cbc83a 	sub	r5,r7,r3
41029bfc:	1009883a 	mov	r4,r2
41029c00:	b105c83a 	sub	r2,r22,r4
41029c04:	b087803a 	cmpltu	r3,r22,r2
41029c08:	28c7c83a 	sub	r3,r5,r3
41029c0c:	d9400317 	ldw	r5,12(sp)
41029c10:	1544d83a 	srl	r2,r2,r21
41029c14:	1948983a 	sll	r4,r3,r5
41029c18:	1d46d83a 	srl	r3,r3,r21
41029c1c:	20a4b03a 	or	r18,r4,r2
41029c20:	9011883a 	mov	r8,r18
41029c24:	1813883a 	mov	r9,r3
41029c28:	003ef606 	br	41029804 <__umoddi3+0xf8>
41029c2c:	01400604 	movi	r5,24
41029c30:	2805883a 	mov	r2,r5
41029c34:	003ecc06 	br	41029768 <__umoddi3+0x5c>
41029c38:	01400204 	movi	r5,8
41029c3c:	2805883a 	mov	r2,r5
41029c40:	003ec906 	br	41029768 <__umoddi3+0x5c>
41029c44:	01400204 	movi	r5,8
41029c48:	2805883a 	mov	r2,r5
41029c4c:	003f0106 	br	41029854 <__umoddi3+0x148>
41029c50:	01400204 	movi	r5,8
41029c54:	2805883a 	mov	r2,r5
41029c58:	003f1206 	br	410298a4 <__umoddi3+0x198>
41029c5c:	01400604 	movi	r5,24
41029c60:	2805883a 	mov	r2,r5
41029c64:	003f0f06 	br	410298a4 <__umoddi3+0x198>
41029c68:	01400604 	movi	r5,24
41029c6c:	2805883a 	mov	r2,r5
41029c70:	003ef806 	br	41029854 <__umoddi3+0x148>
41029c74:	3c7fb82e 	bgeu	r7,r17,41029b58 <__umoddi3+0x44c>
41029c78:	843fffc4 	addi	r16,r16,-1
41029c7c:	3dcf883a 	add	r7,r7,r23
41029c80:	003fb506 	br	41029b58 <__umoddi3+0x44c>
41029c84:	147fa22e 	bgeu	r2,r17,41029b10 <__umoddi3+0x404>
41029c88:	e73fffc4 	addi	fp,fp,-1
41029c8c:	15c5883a 	add	r2,r2,r23
41029c90:	003f9f06 	br	41029b10 <__umoddi3+0x404>
41029c94:	147f692e 	bgeu	r2,r17,41029a3c <__umoddi3+0x330>
41029c98:	1405883a 	add	r2,r2,r16
41029c9c:	003f6706 	br	41029a3c <__umoddi3+0x330>
41029ca0:	1405883a 	add	r2,r2,r16
41029ca4:	003f1906 	br	4102990c <__umoddi3+0x200>
41029ca8:	1405883a 	add	r2,r2,r16
41029cac:	003ec906 	br	410297d4 <__umoddi3+0xc8>
41029cb0:	b13fcc36 	bltu	r22,r4,41029be4 <__umoddi3+0x4d8>
41029cb4:	000b883a 	mov	r5,zero
41029cb8:	003fd106 	br	41029c00 <__umoddi3+0x4f4>

41029cbc <_fpadd_parts>:
41029cbc:	defff804 	addi	sp,sp,-32
41029cc0:	dcc00315 	stw	r19,12(sp)
41029cc4:	2027883a 	mov	r19,r4
41029cc8:	21000017 	ldw	r4,0(r4)
41029ccc:	00c00044 	movi	r3,1
41029cd0:	dd400515 	stw	r21,20(sp)
41029cd4:	dd000415 	stw	r20,16(sp)
41029cd8:	ddc00715 	stw	r23,28(sp)
41029cdc:	dd800615 	stw	r22,24(sp)
41029ce0:	dc800215 	stw	r18,8(sp)
41029ce4:	dc400115 	stw	r17,4(sp)
41029ce8:	dc000015 	stw	r16,0(sp)
41029cec:	282b883a 	mov	r21,r5
41029cf0:	3029883a 	mov	r20,r6
41029cf4:	1900632e 	bgeu	r3,r4,41029e84 <_fpadd_parts+0x1c8>
41029cf8:	28800017 	ldw	r2,0(r5)
41029cfc:	1880812e 	bgeu	r3,r2,41029f04 <_fpadd_parts+0x248>
41029d00:	00c00104 	movi	r3,4
41029d04:	20c0dc26 	beq	r4,r3,4102a078 <_fpadd_parts+0x3bc>
41029d08:	10c07e26 	beq	r2,r3,41029f04 <_fpadd_parts+0x248>
41029d0c:	00c00084 	movi	r3,2
41029d10:	10c06726 	beq	r2,r3,41029eb0 <_fpadd_parts+0x1f4>
41029d14:	20c07b26 	beq	r4,r3,41029f04 <_fpadd_parts+0x248>
41029d18:	9dc00217 	ldw	r23,8(r19)
41029d1c:	28c00217 	ldw	r3,8(r5)
41029d20:	9c400317 	ldw	r17,12(r19)
41029d24:	2bc00317 	ldw	r15,12(r5)
41029d28:	b8cdc83a 	sub	r6,r23,r3
41029d2c:	9c800417 	ldw	r18,16(r19)
41029d30:	2c000417 	ldw	r16,16(r5)
41029d34:	3009883a 	mov	r4,r6
41029d38:	30009716 	blt	r6,zero,41029f98 <_fpadd_parts+0x2dc>
41029d3c:	00800fc4 	movi	r2,63
41029d40:	11806b16 	blt	r2,r6,41029ef0 <_fpadd_parts+0x234>
41029d44:	0100a40e 	bge	zero,r4,41029fd8 <_fpadd_parts+0x31c>
41029d48:	35bff804 	addi	r22,r6,-32
41029d4c:	b000bc16 	blt	r22,zero,4102a040 <_fpadd_parts+0x384>
41029d50:	8596d83a 	srl	r11,r16,r22
41029d54:	0019883a 	mov	r12,zero
41029d58:	0013883a 	mov	r9,zero
41029d5c:	01000044 	movi	r4,1
41029d60:	0015883a 	mov	r10,zero
41029d64:	b000be16 	blt	r22,zero,4102a060 <_fpadd_parts+0x3a4>
41029d68:	2590983a 	sll	r8,r4,r22
41029d6c:	000f883a 	mov	r7,zero
41029d70:	00bfffc4 	movi	r2,-1
41029d74:	3889883a 	add	r4,r7,r2
41029d78:	408b883a 	add	r5,r8,r2
41029d7c:	21cd803a 	cmpltu	r6,r4,r7
41029d80:	314b883a 	add	r5,r6,r5
41029d84:	7904703a 	and	r2,r15,r4
41029d88:	8146703a 	and	r3,r16,r5
41029d8c:	10c4b03a 	or	r2,r2,r3
41029d90:	10000226 	beq	r2,zero,41029d9c <_fpadd_parts+0xe0>
41029d94:	02400044 	movi	r9,1
41029d98:	0015883a 	mov	r10,zero
41029d9c:	5a5eb03a 	or	r15,r11,r9
41029da0:	62a0b03a 	or	r16,r12,r10
41029da4:	99400117 	ldw	r5,4(r19)
41029da8:	a8800117 	ldw	r2,4(r21)
41029dac:	28806e26 	beq	r5,r2,41029f68 <_fpadd_parts+0x2ac>
41029db0:	28006626 	beq	r5,zero,41029f4c <_fpadd_parts+0x290>
41029db4:	7c45c83a 	sub	r2,r15,r17
41029db8:	7889803a 	cmpltu	r4,r15,r2
41029dbc:	8487c83a 	sub	r3,r16,r18
41029dc0:	1909c83a 	sub	r4,r3,r4
41029dc4:	100d883a 	mov	r6,r2
41029dc8:	200f883a 	mov	r7,r4
41029dcc:	38007716 	blt	r7,zero,41029fac <_fpadd_parts+0x2f0>
41029dd0:	a5c00215 	stw	r23,8(r20)
41029dd4:	a1c00415 	stw	r7,16(r20)
41029dd8:	a0000115 	stw	zero,4(r20)
41029ddc:	a1800315 	stw	r6,12(r20)
41029de0:	a2000317 	ldw	r8,12(r20)
41029de4:	a2400417 	ldw	r9,16(r20)
41029de8:	00bfffc4 	movi	r2,-1
41029dec:	408b883a 	add	r5,r8,r2
41029df0:	2a09803a 	cmpltu	r4,r5,r8
41029df4:	488d883a 	add	r6,r9,r2
41029df8:	01c40034 	movhi	r7,4096
41029dfc:	39ffffc4 	addi	r7,r7,-1
41029e00:	218d883a 	add	r6,r4,r6
41029e04:	39801736 	bltu	r7,r6,41029e64 <_fpadd_parts+0x1a8>
41029e08:	31c06526 	beq	r6,r7,41029fa0 <_fpadd_parts+0x2e4>
41029e0c:	a3000217 	ldw	r12,8(r20)
41029e10:	4209883a 	add	r4,r8,r8
41029e14:	00bfffc4 	movi	r2,-1
41029e18:	220f803a 	cmpltu	r7,r4,r8
41029e1c:	4a4b883a 	add	r5,r9,r9
41029e20:	394f883a 	add	r7,r7,r5
41029e24:	2095883a 	add	r10,r4,r2
41029e28:	3897883a 	add	r11,r7,r2
41029e2c:	510d803a 	cmpltu	r6,r10,r4
41029e30:	6099883a 	add	r12,r12,r2
41029e34:	32d7883a 	add	r11,r6,r11
41029e38:	00840034 	movhi	r2,4096
41029e3c:	10bfffc4 	addi	r2,r2,-1
41029e40:	2011883a 	mov	r8,r4
41029e44:	3813883a 	mov	r9,r7
41029e48:	a1000315 	stw	r4,12(r20)
41029e4c:	a1c00415 	stw	r7,16(r20)
41029e50:	a3000215 	stw	r12,8(r20)
41029e54:	12c00336 	bltu	r2,r11,41029e64 <_fpadd_parts+0x1a8>
41029e58:	58bfed1e 	bne	r11,r2,41029e10 <_fpadd_parts+0x154>
41029e5c:	00bfff84 	movi	r2,-2
41029e60:	12bfeb2e 	bgeu	r2,r10,41029e10 <_fpadd_parts+0x154>
41029e64:	a2800417 	ldw	r10,16(r20)
41029e68:	008000c4 	movi	r2,3
41029e6c:	00c80034 	movhi	r3,8192
41029e70:	18ffffc4 	addi	r3,r3,-1
41029e74:	a2400317 	ldw	r9,12(r20)
41029e78:	a0800015 	stw	r2,0(r20)
41029e7c:	1a802336 	bltu	r3,r10,41029f0c <_fpadd_parts+0x250>
41029e80:	a027883a 	mov	r19,r20
41029e84:	9805883a 	mov	r2,r19
41029e88:	ddc00717 	ldw	r23,28(sp)
41029e8c:	dd800617 	ldw	r22,24(sp)
41029e90:	dd400517 	ldw	r21,20(sp)
41029e94:	dd000417 	ldw	r20,16(sp)
41029e98:	dcc00317 	ldw	r19,12(sp)
41029e9c:	dc800217 	ldw	r18,8(sp)
41029ea0:	dc400117 	ldw	r17,4(sp)
41029ea4:	dc000017 	ldw	r16,0(sp)
41029ea8:	dec00804 	addi	sp,sp,32
41029eac:	f800283a 	ret
41029eb0:	20fff41e 	bne	r4,r3,41029e84 <_fpadd_parts+0x1c8>
41029eb4:	31000015 	stw	r4,0(r6)
41029eb8:	98800117 	ldw	r2,4(r19)
41029ebc:	30800115 	stw	r2,4(r6)
41029ec0:	98c00217 	ldw	r3,8(r19)
41029ec4:	30c00215 	stw	r3,8(r6)
41029ec8:	98800317 	ldw	r2,12(r19)
41029ecc:	30800315 	stw	r2,12(r6)
41029ed0:	98c00417 	ldw	r3,16(r19)
41029ed4:	30c00415 	stw	r3,16(r6)
41029ed8:	98800117 	ldw	r2,4(r19)
41029edc:	28c00117 	ldw	r3,4(r5)
41029ee0:	3027883a 	mov	r19,r6
41029ee4:	10c4703a 	and	r2,r2,r3
41029ee8:	30800115 	stw	r2,4(r6)
41029eec:	003fe506 	br	41029e84 <_fpadd_parts+0x1c8>
41029ef0:	1dc02616 	blt	r3,r23,41029f8c <_fpadd_parts+0x2d0>
41029ef4:	0023883a 	mov	r17,zero
41029ef8:	182f883a 	mov	r23,r3
41029efc:	0025883a 	mov	r18,zero
41029f00:	003fa806 	br	41029da4 <_fpadd_parts+0xe8>
41029f04:	a827883a 	mov	r19,r21
41029f08:	003fde06 	br	41029e84 <_fpadd_parts+0x1c8>
41029f0c:	01800044 	movi	r6,1
41029f10:	500497fa 	slli	r2,r10,31
41029f14:	4808d07a 	srli	r4,r9,1
41029f18:	518ad83a 	srl	r5,r10,r6
41029f1c:	a2000217 	ldw	r8,8(r20)
41029f20:	1108b03a 	or	r4,r2,r4
41029f24:	0007883a 	mov	r3,zero
41029f28:	4984703a 	and	r2,r9,r6
41029f2c:	208cb03a 	or	r6,r4,r2
41029f30:	28ceb03a 	or	r7,r5,r3
41029f34:	42000044 	addi	r8,r8,1
41029f38:	a027883a 	mov	r19,r20
41029f3c:	a1c00415 	stw	r7,16(r20)
41029f40:	a2000215 	stw	r8,8(r20)
41029f44:	a1800315 	stw	r6,12(r20)
41029f48:	003fce06 	br	41029e84 <_fpadd_parts+0x1c8>
41029f4c:	8bc5c83a 	sub	r2,r17,r15
41029f50:	8889803a 	cmpltu	r4,r17,r2
41029f54:	9407c83a 	sub	r3,r18,r16
41029f58:	1909c83a 	sub	r4,r3,r4
41029f5c:	100d883a 	mov	r6,r2
41029f60:	200f883a 	mov	r7,r4
41029f64:	003f9906 	br	41029dcc <_fpadd_parts+0x110>
41029f68:	7c45883a 	add	r2,r15,r17
41029f6c:	13c9803a 	cmpltu	r4,r2,r15
41029f70:	8487883a 	add	r3,r16,r18
41029f74:	20c9883a 	add	r4,r4,r3
41029f78:	a1400115 	stw	r5,4(r20)
41029f7c:	a5c00215 	stw	r23,8(r20)
41029f80:	a0800315 	stw	r2,12(r20)
41029f84:	a1000415 	stw	r4,16(r20)
41029f88:	003fb606 	br	41029e64 <_fpadd_parts+0x1a8>
41029f8c:	001f883a 	mov	r15,zero
41029f90:	0021883a 	mov	r16,zero
41029f94:	003f8306 	br	41029da4 <_fpadd_parts+0xe8>
41029f98:	018dc83a 	sub	r6,zero,r6
41029f9c:	003f6706 	br	41029d3c <_fpadd_parts+0x80>
41029fa0:	00bfff84 	movi	r2,-2
41029fa4:	117faf36 	bltu	r2,r5,41029e64 <_fpadd_parts+0x1a8>
41029fa8:	003f9806 	br	41029e0c <_fpadd_parts+0x150>
41029fac:	0005883a 	mov	r2,zero
41029fb0:	1189c83a 	sub	r4,r2,r6
41029fb4:	1105803a 	cmpltu	r2,r2,r4
41029fb8:	01cbc83a 	sub	r5,zero,r7
41029fbc:	2885c83a 	sub	r2,r5,r2
41029fc0:	01800044 	movi	r6,1
41029fc4:	a1800115 	stw	r6,4(r20)
41029fc8:	a5c00215 	stw	r23,8(r20)
41029fcc:	a1000315 	stw	r4,12(r20)
41029fd0:	a0800415 	stw	r2,16(r20)
41029fd4:	003f8206 	br	41029de0 <_fpadd_parts+0x124>
41029fd8:	203f7226 	beq	r4,zero,41029da4 <_fpadd_parts+0xe8>
41029fdc:	35bff804 	addi	r22,r6,-32
41029fe0:	b9af883a 	add	r23,r23,r6
41029fe4:	b0003116 	blt	r22,zero,4102a0ac <_fpadd_parts+0x3f0>
41029fe8:	959ad83a 	srl	r13,r18,r22
41029fec:	001d883a 	mov	r14,zero
41029ff0:	000f883a 	mov	r7,zero
41029ff4:	01000044 	movi	r4,1
41029ff8:	0011883a 	mov	r8,zero
41029ffc:	b0002516 	blt	r22,zero,4102a094 <_fpadd_parts+0x3d8>
4102a000:	2594983a 	sll	r10,r4,r22
4102a004:	0013883a 	mov	r9,zero
4102a008:	00bfffc4 	movi	r2,-1
4102a00c:	4889883a 	add	r4,r9,r2
4102a010:	508b883a 	add	r5,r10,r2
4102a014:	224d803a 	cmpltu	r6,r4,r9
4102a018:	314b883a 	add	r5,r6,r5
4102a01c:	8904703a 	and	r2,r17,r4
4102a020:	9146703a 	and	r3,r18,r5
4102a024:	10c4b03a 	or	r2,r2,r3
4102a028:	10000226 	beq	r2,zero,4102a034 <_fpadd_parts+0x378>
4102a02c:	01c00044 	movi	r7,1
4102a030:	0011883a 	mov	r8,zero
4102a034:	69e2b03a 	or	r17,r13,r7
4102a038:	7224b03a 	or	r18,r14,r8
4102a03c:	003f5906 	br	41029da4 <_fpadd_parts+0xe8>
4102a040:	8407883a 	add	r3,r16,r16
4102a044:	008007c4 	movi	r2,31
4102a048:	1185c83a 	sub	r2,r2,r6
4102a04c:	1886983a 	sll	r3,r3,r2
4102a050:	7996d83a 	srl	r11,r15,r6
4102a054:	8198d83a 	srl	r12,r16,r6
4102a058:	1ad6b03a 	or	r11,r3,r11
4102a05c:	003f3e06 	br	41029d58 <_fpadd_parts+0x9c>
4102a060:	2006d07a 	srli	r3,r4,1
4102a064:	008007c4 	movi	r2,31
4102a068:	1185c83a 	sub	r2,r2,r6
4102a06c:	1890d83a 	srl	r8,r3,r2
4102a070:	218e983a 	sll	r7,r4,r6
4102a074:	003f3e06 	br	41029d70 <_fpadd_parts+0xb4>
4102a078:	113f821e 	bne	r2,r4,41029e84 <_fpadd_parts+0x1c8>
4102a07c:	28c00117 	ldw	r3,4(r5)
4102a080:	98800117 	ldw	r2,4(r19)
4102a084:	10ff7f26 	beq	r2,r3,41029e84 <_fpadd_parts+0x1c8>
4102a088:	04d040f4 	movhi	r19,16643
4102a08c:	9cf84504 	addi	r19,r19,-7916
4102a090:	003f7c06 	br	41029e84 <_fpadd_parts+0x1c8>
4102a094:	2006d07a 	srli	r3,r4,1
4102a098:	008007c4 	movi	r2,31
4102a09c:	1185c83a 	sub	r2,r2,r6
4102a0a0:	1894d83a 	srl	r10,r3,r2
4102a0a4:	2192983a 	sll	r9,r4,r6
4102a0a8:	003fd706 	br	4102a008 <_fpadd_parts+0x34c>
4102a0ac:	9487883a 	add	r3,r18,r18
4102a0b0:	008007c4 	movi	r2,31
4102a0b4:	1185c83a 	sub	r2,r2,r6
4102a0b8:	1886983a 	sll	r3,r3,r2
4102a0bc:	899ad83a 	srl	r13,r17,r6
4102a0c0:	919cd83a 	srl	r14,r18,r6
4102a0c4:	1b5ab03a 	or	r13,r3,r13
4102a0c8:	003fc906 	br	41029ff0 <_fpadd_parts+0x334>

4102a0cc <__subdf3>:
4102a0cc:	deffea04 	addi	sp,sp,-88
4102a0d0:	dcc01415 	stw	r19,80(sp)
4102a0d4:	dcc00404 	addi	r19,sp,16
4102a0d8:	2011883a 	mov	r8,r4
4102a0dc:	2813883a 	mov	r9,r5
4102a0e0:	dc401315 	stw	r17,76(sp)
4102a0e4:	d809883a 	mov	r4,sp
4102a0e8:	980b883a 	mov	r5,r19
4102a0ec:	dc400904 	addi	r17,sp,36
4102a0f0:	dfc01515 	stw	ra,84(sp)
4102a0f4:	da400115 	stw	r9,4(sp)
4102a0f8:	d9c00315 	stw	r7,12(sp)
4102a0fc:	da000015 	stw	r8,0(sp)
4102a100:	d9800215 	stw	r6,8(sp)
4102a104:	102add80 	call	4102add8 <__unpack_d>
4102a108:	d9000204 	addi	r4,sp,8
4102a10c:	880b883a 	mov	r5,r17
4102a110:	102add80 	call	4102add8 <__unpack_d>
4102a114:	d8800a17 	ldw	r2,40(sp)
4102a118:	880b883a 	mov	r5,r17
4102a11c:	9809883a 	mov	r4,r19
4102a120:	d9800e04 	addi	r6,sp,56
4102a124:	1080005c 	xori	r2,r2,1
4102a128:	d8800a15 	stw	r2,40(sp)
4102a12c:	1029cbc0 	call	41029cbc <_fpadd_parts>
4102a130:	1009883a 	mov	r4,r2
4102a134:	10217ac0 	call	410217ac <__pack_d>
4102a138:	dfc01517 	ldw	ra,84(sp)
4102a13c:	dcc01417 	ldw	r19,80(sp)
4102a140:	dc401317 	ldw	r17,76(sp)
4102a144:	dec01604 	addi	sp,sp,88
4102a148:	f800283a 	ret

4102a14c <__adddf3>:
4102a14c:	deffea04 	addi	sp,sp,-88
4102a150:	dcc01415 	stw	r19,80(sp)
4102a154:	dcc00404 	addi	r19,sp,16
4102a158:	2011883a 	mov	r8,r4
4102a15c:	2813883a 	mov	r9,r5
4102a160:	dc401315 	stw	r17,76(sp)
4102a164:	d809883a 	mov	r4,sp
4102a168:	980b883a 	mov	r5,r19
4102a16c:	dc400904 	addi	r17,sp,36
4102a170:	dfc01515 	stw	ra,84(sp)
4102a174:	da400115 	stw	r9,4(sp)
4102a178:	d9c00315 	stw	r7,12(sp)
4102a17c:	da000015 	stw	r8,0(sp)
4102a180:	d9800215 	stw	r6,8(sp)
4102a184:	102add80 	call	4102add8 <__unpack_d>
4102a188:	d9000204 	addi	r4,sp,8
4102a18c:	880b883a 	mov	r5,r17
4102a190:	102add80 	call	4102add8 <__unpack_d>
4102a194:	d9800e04 	addi	r6,sp,56
4102a198:	9809883a 	mov	r4,r19
4102a19c:	880b883a 	mov	r5,r17
4102a1a0:	1029cbc0 	call	41029cbc <_fpadd_parts>
4102a1a4:	1009883a 	mov	r4,r2
4102a1a8:	10217ac0 	call	410217ac <__pack_d>
4102a1ac:	dfc01517 	ldw	ra,84(sp)
4102a1b0:	dcc01417 	ldw	r19,80(sp)
4102a1b4:	dc401317 	ldw	r17,76(sp)
4102a1b8:	dec01604 	addi	sp,sp,88
4102a1bc:	f800283a 	ret

4102a1c0 <__muldf3>:
4102a1c0:	deffdd04 	addi	sp,sp,-140
4102a1c4:	df002115 	stw	fp,132(sp)
4102a1c8:	df000404 	addi	fp,sp,16
4102a1cc:	2011883a 	mov	r8,r4
4102a1d0:	2813883a 	mov	r9,r5
4102a1d4:	d809883a 	mov	r4,sp
4102a1d8:	e00b883a 	mov	r5,fp
4102a1dc:	dfc02215 	stw	ra,136(sp)
4102a1e0:	da400115 	stw	r9,4(sp)
4102a1e4:	d9c00315 	stw	r7,12(sp)
4102a1e8:	da000015 	stw	r8,0(sp)
4102a1ec:	d9800215 	stw	r6,8(sp)
4102a1f0:	ddc02015 	stw	r23,128(sp)
4102a1f4:	dd801f15 	stw	r22,124(sp)
4102a1f8:	dd401e15 	stw	r21,120(sp)
4102a1fc:	dd001d15 	stw	r20,116(sp)
4102a200:	dcc01c15 	stw	r19,112(sp)
4102a204:	dc801b15 	stw	r18,108(sp)
4102a208:	dc401a15 	stw	r17,104(sp)
4102a20c:	dc001915 	stw	r16,100(sp)
4102a210:	102add80 	call	4102add8 <__unpack_d>
4102a214:	d9000204 	addi	r4,sp,8
4102a218:	d9400904 	addi	r5,sp,36
4102a21c:	102add80 	call	4102add8 <__unpack_d>
4102a220:	d9000417 	ldw	r4,16(sp)
4102a224:	00800044 	movi	r2,1
4102a228:	1100102e 	bgeu	r2,r4,4102a26c <__muldf3+0xac>
4102a22c:	d8c00917 	ldw	r3,36(sp)
4102a230:	10c0062e 	bgeu	r2,r3,4102a24c <__muldf3+0x8c>
4102a234:	00800104 	movi	r2,4
4102a238:	20800a26 	beq	r4,r2,4102a264 <__muldf3+0xa4>
4102a23c:	1880c826 	beq	r3,r2,4102a560 <__muldf3+0x3a0>
4102a240:	00800084 	movi	r2,2
4102a244:	20800926 	beq	r4,r2,4102a26c <__muldf3+0xac>
4102a248:	18801a1e 	bne	r3,r2,4102a2b4 <__muldf3+0xf4>
4102a24c:	d8c00a17 	ldw	r3,40(sp)
4102a250:	d8800517 	ldw	r2,20(sp)
4102a254:	d9000904 	addi	r4,sp,36
4102a258:	10c4c03a 	cmpne	r2,r2,r3
4102a25c:	d8800a15 	stw	r2,40(sp)
4102a260:	00000706 	br	4102a280 <__muldf3+0xc0>
4102a264:	00800084 	movi	r2,2
4102a268:	1880bf26 	beq	r3,r2,4102a568 <__muldf3+0x3a8>
4102a26c:	d8800517 	ldw	r2,20(sp)
4102a270:	d8c00a17 	ldw	r3,40(sp)
4102a274:	e009883a 	mov	r4,fp
4102a278:	10c4c03a 	cmpne	r2,r2,r3
4102a27c:	d8800515 	stw	r2,20(sp)
4102a280:	10217ac0 	call	410217ac <__pack_d>
4102a284:	dfc02217 	ldw	ra,136(sp)
4102a288:	df002117 	ldw	fp,132(sp)
4102a28c:	ddc02017 	ldw	r23,128(sp)
4102a290:	dd801f17 	ldw	r22,124(sp)
4102a294:	dd401e17 	ldw	r21,120(sp)
4102a298:	dd001d17 	ldw	r20,116(sp)
4102a29c:	dcc01c17 	ldw	r19,112(sp)
4102a2a0:	dc801b17 	ldw	r18,108(sp)
4102a2a4:	dc401a17 	ldw	r17,104(sp)
4102a2a8:	dc001917 	ldw	r16,100(sp)
4102a2ac:	dec02304 	addi	sp,sp,140
4102a2b0:	f800283a 	ret
4102a2b4:	db000c17 	ldw	r12,48(sp)
4102a2b8:	db800717 	ldw	r14,28(sp)
4102a2bc:	dbc00817 	ldw	r15,32(sp)
4102a2c0:	db400d17 	ldw	r13,52(sp)
4102a2c4:	6009883a 	mov	r4,r12
4102a2c8:	000d883a 	mov	r6,zero
4102a2cc:	0011883a 	mov	r8,zero
4102a2d0:	000b883a 	mov	r5,zero
4102a2d4:	0007883a 	mov	r3,zero
4102a2d8:	0019883a 	mov	r12,zero
4102a2dc:	4393383a 	mul	r9,r8,r14
4102a2e0:	d9801415 	stw	r6,80(sp)
4102a2e4:	6111383a 	mul	r8,r12,r4
4102a2e8:	d9801615 	stw	r6,88(sp)
4102a2ec:	1b4f383a 	mul	r7,r3,r13
4102a2f0:	2bcd383a 	mul	r6,r5,r15
4102a2f4:	7361383a 	mul	r16,r14,r13
4102a2f8:	23e5383a 	mul	r18,r4,r15
4102a2fc:	7362383a 	mulxuu	r17,r14,r13
4102a300:	23e6383a 	mulxuu	r19,r4,r15
4102a304:	3a4f883a 	add	r7,r7,r9
4102a308:	320d883a 	add	r6,r6,r8
4102a30c:	3c63883a 	add	r17,r7,r17
4102a310:	34e7883a 	add	r19,r6,r19
4102a314:	8495883a 	add	r10,r16,r18
4102a318:	23aa383a 	mulxuu	r21,r4,r14
4102a31c:	540f803a 	cmpltu	r7,r10,r16
4102a320:	8cd7883a 	add	r11,r17,r19
4102a324:	3acf883a 	add	r7,r7,r11
4102a328:	4a0d883a 	add	r6,r9,r8
4102a32c:	db401315 	stw	r13,76(sp)
4102a330:	dbc01515 	stw	r15,84(sp)
4102a334:	23a9383a 	mul	r20,r4,r14
4102a338:	da801715 	stw	r10,92(sp)
4102a33c:	d9c01815 	stw	r7,96(sp)
4102a340:	356b883a 	add	r21,r6,r21
4102a344:	3c40682e 	bgeu	r7,r17,4102a4e8 <__muldf3+0x328>
4102a348:	000f883a 	mov	r7,zero
4102a34c:	02000044 	movi	r8,1
4102a350:	d9401717 	ldw	r5,92(sp)
4102a354:	0009883a 	mov	r4,zero
4102a358:	a105883a 	add	r2,r20,r4
4102a35c:	150d803a 	cmpltu	r6,r2,r20
4102a360:	a947883a 	add	r3,r21,r5
4102a364:	30cd883a 	add	r6,r6,r3
4102a368:	101f883a 	mov	r15,r2
4102a36c:	3021883a 	mov	r16,r6
4102a370:	35406236 	bltu	r6,r21,4102a4fc <__muldf3+0x33c>
4102a374:	a9806026 	beq	r21,r6,4102a4f8 <__muldf3+0x338>
4102a378:	d9801317 	ldw	r6,76(sp)
4102a37c:	db001517 	ldw	r12,84(sp)
4102a380:	d8c01417 	ldw	r3,80(sp)
4102a384:	d9401617 	ldw	r5,88(sp)
4102a388:	6009883a 	mov	r4,r12
4102a38c:	1b05383a 	mul	r2,r3,r12
4102a390:	2987383a 	mul	r3,r5,r6
4102a394:	332d383a 	mul	r22,r6,r12
4102a398:	312e383a 	mulxuu	r23,r6,r4
4102a39c:	d9801817 	ldw	r6,96(sp)
4102a3a0:	10c5883a 	add	r2,r2,r3
4102a3a4:	15ef883a 	add	r23,r2,r23
4102a3a8:	000b883a 	mov	r5,zero
4102a3ac:	b185883a 	add	r2,r22,r6
4102a3b0:	158d803a 	cmpltu	r6,r2,r22
4102a3b4:	b947883a 	add	r3,r23,r5
4102a3b8:	30c7883a 	add	r3,r6,r3
4102a3bc:	40cb883a 	add	r5,r8,r3
4102a3c0:	d8c00617 	ldw	r3,24(sp)
4102a3c4:	3889883a 	add	r4,r7,r2
4102a3c8:	d8800b17 	ldw	r2,44(sp)
4102a3cc:	18c00104 	addi	r3,r3,4
4102a3d0:	21cd803a 	cmpltu	r6,r4,r7
4102a3d4:	10c7883a 	add	r3,r2,r3
4102a3d8:	2013883a 	mov	r9,r4
4102a3dc:	d8800a17 	ldw	r2,40(sp)
4102a3e0:	d9000517 	ldw	r4,20(sp)
4102a3e4:	314d883a 	add	r6,r6,r5
4102a3e8:	3015883a 	mov	r10,r6
4102a3ec:	2088c03a 	cmpne	r4,r4,r2
4102a3f0:	00880034 	movhi	r2,8192
4102a3f4:	10bfffc4 	addi	r2,r2,-1
4102a3f8:	d9000f15 	stw	r4,60(sp)
4102a3fc:	d8c01015 	stw	r3,64(sp)
4102a400:	1180162e 	bgeu	r2,r6,4102a45c <__muldf3+0x29c>
4102a404:	1811883a 	mov	r8,r3
4102a408:	1023883a 	mov	r17,r2
4102a40c:	800497fa 	slli	r2,r16,31
4102a410:	7816d07a 	srli	r11,r15,1
4102a414:	500697fa 	slli	r3,r10,31
4102a418:	480cd07a 	srli	r6,r9,1
4102a41c:	500ed07a 	srli	r7,r10,1
4102a420:	12d6b03a 	or	r11,r2,r11
4102a424:	00800044 	movi	r2,1
4102a428:	198cb03a 	or	r6,r3,r6
4102a42c:	4888703a 	and	r4,r9,r2
4102a430:	8018d07a 	srli	r12,r16,1
4102a434:	001b883a 	mov	r13,zero
4102a438:	03a00034 	movhi	r14,32768
4102a43c:	3013883a 	mov	r9,r6
4102a440:	3815883a 	mov	r10,r7
4102a444:	4091883a 	add	r8,r8,r2
4102a448:	20000226 	beq	r4,zero,4102a454 <__muldf3+0x294>
4102a44c:	5b5eb03a 	or	r15,r11,r13
4102a450:	63a0b03a 	or	r16,r12,r14
4102a454:	8abfed36 	bltu	r17,r10,4102a40c <__muldf3+0x24c>
4102a458:	da001015 	stw	r8,64(sp)
4102a45c:	00840034 	movhi	r2,4096
4102a460:	10bfffc4 	addi	r2,r2,-1
4102a464:	12801436 	bltu	r2,r10,4102a4b8 <__muldf3+0x2f8>
4102a468:	da001017 	ldw	r8,64(sp)
4102a46c:	1023883a 	mov	r17,r2
4102a470:	4a45883a 	add	r2,r9,r9
4102a474:	124d803a 	cmpltu	r6,r2,r9
4102a478:	5287883a 	add	r3,r10,r10
4102a47c:	7bd7883a 	add	r11,r15,r15
4102a480:	5bcf803a 	cmpltu	r7,r11,r15
4102a484:	8419883a 	add	r12,r16,r16
4102a488:	01000044 	movi	r4,1
4102a48c:	30cd883a 	add	r6,r6,r3
4102a490:	3b0f883a 	add	r7,r7,r12
4102a494:	423fffc4 	addi	r8,r8,-1
4102a498:	1013883a 	mov	r9,r2
4102a49c:	3015883a 	mov	r10,r6
4102a4a0:	111ab03a 	or	r13,r2,r4
4102a4a4:	80002a16 	blt	r16,zero,4102a550 <__muldf3+0x390>
4102a4a8:	581f883a 	mov	r15,r11
4102a4ac:	3821883a 	mov	r16,r7
4102a4b0:	8abfef2e 	bgeu	r17,r10,4102a470 <__muldf3+0x2b0>
4102a4b4:	da001015 	stw	r8,64(sp)
4102a4b8:	00803fc4 	movi	r2,255
4102a4bc:	488e703a 	and	r7,r9,r2
4102a4c0:	00802004 	movi	r2,128
4102a4c4:	0007883a 	mov	r3,zero
4102a4c8:	0011883a 	mov	r8,zero
4102a4cc:	38801226 	beq	r7,r2,4102a518 <__muldf3+0x358>
4102a4d0:	008000c4 	movi	r2,3
4102a4d4:	d9000e04 	addi	r4,sp,56
4102a4d8:	da801215 	stw	r10,72(sp)
4102a4dc:	d8800e15 	stw	r2,56(sp)
4102a4e0:	da401115 	stw	r9,68(sp)
4102a4e4:	003f6606 	br	4102a280 <__muldf3+0xc0>
4102a4e8:	89c01b26 	beq	r17,r7,4102a558 <__muldf3+0x398>
4102a4ec:	000f883a 	mov	r7,zero
4102a4f0:	0011883a 	mov	r8,zero
4102a4f4:	003f9606 	br	4102a350 <__muldf3+0x190>
4102a4f8:	153f9f2e 	bgeu	r2,r20,4102a378 <__muldf3+0x1b8>
4102a4fc:	00800044 	movi	r2,1
4102a500:	3889883a 	add	r4,r7,r2
4102a504:	21cd803a 	cmpltu	r6,r4,r7
4102a508:	320d883a 	add	r6,r6,r8
4102a50c:	200f883a 	mov	r7,r4
4102a510:	3011883a 	mov	r8,r6
4102a514:	003f9806 	br	4102a378 <__muldf3+0x1b8>
4102a518:	403fed1e 	bne	r8,zero,4102a4d0 <__muldf3+0x310>
4102a51c:	01004004 	movi	r4,256
4102a520:	4904703a 	and	r2,r9,r4
4102a524:	10c4b03a 	or	r2,r2,r3
4102a528:	103fe91e 	bne	r2,zero,4102a4d0 <__muldf3+0x310>
4102a52c:	7c04b03a 	or	r2,r15,r16
4102a530:	103fe726 	beq	r2,zero,4102a4d0 <__muldf3+0x310>
4102a534:	49c5883a 	add	r2,r9,r7
4102a538:	1251803a 	cmpltu	r8,r2,r9
4102a53c:	4291883a 	add	r8,r8,r10
4102a540:	013fc004 	movi	r4,-256
4102a544:	1112703a 	and	r9,r2,r4
4102a548:	4015883a 	mov	r10,r8
4102a54c:	003fe006 	br	4102a4d0 <__muldf3+0x310>
4102a550:	6813883a 	mov	r9,r13
4102a554:	003fd406 	br	4102a4a8 <__muldf3+0x2e8>
4102a558:	543f7b36 	bltu	r10,r16,4102a348 <__muldf3+0x188>
4102a55c:	003fe306 	br	4102a4ec <__muldf3+0x32c>
4102a560:	00800084 	movi	r2,2
4102a564:	20bf391e 	bne	r4,r2,4102a24c <__muldf3+0x8c>
4102a568:	011040f4 	movhi	r4,16643
4102a56c:	21384504 	addi	r4,r4,-7916
4102a570:	003f4306 	br	4102a280 <__muldf3+0xc0>

4102a574 <__divdf3>:
4102a574:	deffed04 	addi	sp,sp,-76
4102a578:	dcc01115 	stw	r19,68(sp)
4102a57c:	dcc00404 	addi	r19,sp,16
4102a580:	2011883a 	mov	r8,r4
4102a584:	2813883a 	mov	r9,r5
4102a588:	dc000e15 	stw	r16,56(sp)
4102a58c:	d809883a 	mov	r4,sp
4102a590:	980b883a 	mov	r5,r19
4102a594:	dc000904 	addi	r16,sp,36
4102a598:	dfc01215 	stw	ra,72(sp)
4102a59c:	da400115 	stw	r9,4(sp)
4102a5a0:	d9c00315 	stw	r7,12(sp)
4102a5a4:	da000015 	stw	r8,0(sp)
4102a5a8:	d9800215 	stw	r6,8(sp)
4102a5ac:	dc801015 	stw	r18,64(sp)
4102a5b0:	dc400f15 	stw	r17,60(sp)
4102a5b4:	102add80 	call	4102add8 <__unpack_d>
4102a5b8:	d9000204 	addi	r4,sp,8
4102a5bc:	800b883a 	mov	r5,r16
4102a5c0:	102add80 	call	4102add8 <__unpack_d>
4102a5c4:	d9000417 	ldw	r4,16(sp)
4102a5c8:	00800044 	movi	r2,1
4102a5cc:	11000b2e 	bgeu	r2,r4,4102a5fc <__divdf3+0x88>
4102a5d0:	d9400917 	ldw	r5,36(sp)
4102a5d4:	1140762e 	bgeu	r2,r5,4102a7b0 <__divdf3+0x23c>
4102a5d8:	d8800517 	ldw	r2,20(sp)
4102a5dc:	d8c00a17 	ldw	r3,40(sp)
4102a5e0:	01800104 	movi	r6,4
4102a5e4:	10c4f03a 	xor	r2,r2,r3
4102a5e8:	d8800515 	stw	r2,20(sp)
4102a5ec:	21800226 	beq	r4,r6,4102a5f8 <__divdf3+0x84>
4102a5f0:	00800084 	movi	r2,2
4102a5f4:	2080141e 	bne	r4,r2,4102a648 <__divdf3+0xd4>
4102a5f8:	29000926 	beq	r5,r4,4102a620 <__divdf3+0xac>
4102a5fc:	9809883a 	mov	r4,r19
4102a600:	10217ac0 	call	410217ac <__pack_d>
4102a604:	dfc01217 	ldw	ra,72(sp)
4102a608:	dcc01117 	ldw	r19,68(sp)
4102a60c:	dc801017 	ldw	r18,64(sp)
4102a610:	dc400f17 	ldw	r17,60(sp)
4102a614:	dc000e17 	ldw	r16,56(sp)
4102a618:	dec01304 	addi	sp,sp,76
4102a61c:	f800283a 	ret
4102a620:	011040f4 	movhi	r4,16643
4102a624:	21384504 	addi	r4,r4,-7916
4102a628:	10217ac0 	call	410217ac <__pack_d>
4102a62c:	dfc01217 	ldw	ra,72(sp)
4102a630:	dcc01117 	ldw	r19,68(sp)
4102a634:	dc801017 	ldw	r18,64(sp)
4102a638:	dc400f17 	ldw	r17,60(sp)
4102a63c:	dc000e17 	ldw	r16,56(sp)
4102a640:	dec01304 	addi	sp,sp,76
4102a644:	f800283a 	ret
4102a648:	29805b26 	beq	r5,r6,4102a7b8 <__divdf3+0x244>
4102a64c:	28802d26 	beq	r5,r2,4102a704 <__divdf3+0x190>
4102a650:	d8c00617 	ldw	r3,24(sp)
4102a654:	d8800b17 	ldw	r2,44(sp)
4102a658:	d9c00817 	ldw	r7,32(sp)
4102a65c:	dc400d17 	ldw	r17,52(sp)
4102a660:	188bc83a 	sub	r5,r3,r2
4102a664:	d9800717 	ldw	r6,28(sp)
4102a668:	dc000c17 	ldw	r16,48(sp)
4102a66c:	d9400615 	stw	r5,24(sp)
4102a670:	3c403836 	bltu	r7,r17,4102a754 <__divdf3+0x1e0>
4102a674:	89c03626 	beq	r17,r7,4102a750 <__divdf3+0x1dc>
4102a678:	0015883a 	mov	r10,zero
4102a67c:	001d883a 	mov	r14,zero
4102a680:	02c40034 	movhi	r11,4096
4102a684:	001f883a 	mov	r15,zero
4102a688:	003f883a 	mov	ra,zero
4102a68c:	04800f44 	movi	r18,61
4102a690:	00000f06 	br	4102a6d0 <__divdf3+0x15c>
4102a694:	601d883a 	mov	r14,r12
4102a698:	681f883a 	mov	r15,r13
4102a69c:	400d883a 	mov	r6,r8
4102a6a0:	100f883a 	mov	r7,r2
4102a6a4:	3191883a 	add	r8,r6,r6
4102a6a8:	5808d07a 	srli	r4,r11,1
4102a6ac:	4185803a 	cmpltu	r2,r8,r6
4102a6b0:	39d3883a 	add	r9,r7,r7
4102a6b4:	28c6b03a 	or	r3,r5,r3
4102a6b8:	1245883a 	add	r2,r2,r9
4102a6bc:	1815883a 	mov	r10,r3
4102a6c0:	2017883a 	mov	r11,r4
4102a6c4:	400d883a 	mov	r6,r8
4102a6c8:	100f883a 	mov	r7,r2
4102a6cc:	fc801726 	beq	ra,r18,4102a72c <__divdf3+0x1b8>
4102a6d0:	580a97fa 	slli	r5,r11,31
4102a6d4:	5006d07a 	srli	r3,r10,1
4102a6d8:	ffc00044 	addi	ra,ra,1
4102a6dc:	3c7ff136 	bltu	r7,r17,4102a6a4 <__divdf3+0x130>
4102a6e0:	3411c83a 	sub	r8,r6,r16
4102a6e4:	3205803a 	cmpltu	r2,r6,r8
4102a6e8:	3c53c83a 	sub	r9,r7,r17
4102a6ec:	7298b03a 	or	r12,r14,r10
4102a6f0:	7adab03a 	or	r13,r15,r11
4102a6f4:	4885c83a 	sub	r2,r9,r2
4102a6f8:	89ffe61e 	bne	r17,r7,4102a694 <__divdf3+0x120>
4102a6fc:	343fe936 	bltu	r6,r16,4102a6a4 <__divdf3+0x130>
4102a700:	003fe406 	br	4102a694 <__divdf3+0x120>
4102a704:	9809883a 	mov	r4,r19
4102a708:	d9800415 	stw	r6,16(sp)
4102a70c:	10217ac0 	call	410217ac <__pack_d>
4102a710:	dfc01217 	ldw	ra,72(sp)
4102a714:	dcc01117 	ldw	r19,68(sp)
4102a718:	dc801017 	ldw	r18,64(sp)
4102a71c:	dc400f17 	ldw	r17,60(sp)
4102a720:	dc000e17 	ldw	r16,56(sp)
4102a724:	dec01304 	addi	sp,sp,76
4102a728:	f800283a 	ret
4102a72c:	00803fc4 	movi	r2,255
4102a730:	7090703a 	and	r8,r14,r2
4102a734:	00802004 	movi	r2,128
4102a738:	0007883a 	mov	r3,zero
4102a73c:	0013883a 	mov	r9,zero
4102a740:	40800d26 	beq	r8,r2,4102a778 <__divdf3+0x204>
4102a744:	dbc00815 	stw	r15,32(sp)
4102a748:	db800715 	stw	r14,28(sp)
4102a74c:	003fab06 	br	4102a5fc <__divdf3+0x88>
4102a750:	343fc92e 	bgeu	r6,r16,4102a678 <__divdf3+0x104>
4102a754:	3185883a 	add	r2,r6,r6
4102a758:	1189803a 	cmpltu	r4,r2,r6
4102a75c:	39c7883a 	add	r3,r7,r7
4102a760:	20c9883a 	add	r4,r4,r3
4102a764:	297fffc4 	addi	r5,r5,-1
4102a768:	100d883a 	mov	r6,r2
4102a76c:	200f883a 	mov	r7,r4
4102a770:	d9400615 	stw	r5,24(sp)
4102a774:	003fc006 	br	4102a678 <__divdf3+0x104>
4102a778:	483ff21e 	bne	r9,zero,4102a744 <__divdf3+0x1d0>
4102a77c:	01004004 	movi	r4,256
4102a780:	7104703a 	and	r2,r14,r4
4102a784:	10c4b03a 	or	r2,r2,r3
4102a788:	103fee1e 	bne	r2,zero,4102a744 <__divdf3+0x1d0>
4102a78c:	31c4b03a 	or	r2,r6,r7
4102a790:	103fec26 	beq	r2,zero,4102a744 <__divdf3+0x1d0>
4102a794:	7205883a 	add	r2,r14,r8
4102a798:	1391803a 	cmpltu	r8,r2,r14
4102a79c:	43d1883a 	add	r8,r8,r15
4102a7a0:	013fc004 	movi	r4,-256
4102a7a4:	111c703a 	and	r14,r2,r4
4102a7a8:	401f883a 	mov	r15,r8
4102a7ac:	003fe506 	br	4102a744 <__divdf3+0x1d0>
4102a7b0:	8009883a 	mov	r4,r16
4102a7b4:	003f9206 	br	4102a600 <__divdf3+0x8c>
4102a7b8:	9809883a 	mov	r4,r19
4102a7bc:	d8000715 	stw	zero,28(sp)
4102a7c0:	d8000815 	stw	zero,32(sp)
4102a7c4:	d8000615 	stw	zero,24(sp)
4102a7c8:	003f8d06 	br	4102a600 <__divdf3+0x8c>

4102a7cc <__eqdf2>:
4102a7cc:	deffef04 	addi	sp,sp,-68
4102a7d0:	dc400f15 	stw	r17,60(sp)
4102a7d4:	dc400404 	addi	r17,sp,16
4102a7d8:	2005883a 	mov	r2,r4
4102a7dc:	2807883a 	mov	r3,r5
4102a7e0:	dc000e15 	stw	r16,56(sp)
4102a7e4:	d809883a 	mov	r4,sp
4102a7e8:	880b883a 	mov	r5,r17
4102a7ec:	dc000904 	addi	r16,sp,36
4102a7f0:	d8c00115 	stw	r3,4(sp)
4102a7f4:	d8800015 	stw	r2,0(sp)
4102a7f8:	d9800215 	stw	r6,8(sp)
4102a7fc:	dfc01015 	stw	ra,64(sp)
4102a800:	d9c00315 	stw	r7,12(sp)
4102a804:	102add80 	call	4102add8 <__unpack_d>
4102a808:	d9000204 	addi	r4,sp,8
4102a80c:	800b883a 	mov	r5,r16
4102a810:	102add80 	call	4102add8 <__unpack_d>
4102a814:	d8800417 	ldw	r2,16(sp)
4102a818:	00c00044 	movi	r3,1
4102a81c:	180d883a 	mov	r6,r3
4102a820:	1880062e 	bgeu	r3,r2,4102a83c <__eqdf2+0x70>
4102a824:	d8800917 	ldw	r2,36(sp)
4102a828:	8809883a 	mov	r4,r17
4102a82c:	800b883a 	mov	r5,r16
4102a830:	1880022e 	bgeu	r3,r2,4102a83c <__eqdf2+0x70>
4102a834:	102af100 	call	4102af10 <__fpcmp_parts_d>
4102a838:	100d883a 	mov	r6,r2
4102a83c:	3005883a 	mov	r2,r6
4102a840:	dfc01017 	ldw	ra,64(sp)
4102a844:	dc400f17 	ldw	r17,60(sp)
4102a848:	dc000e17 	ldw	r16,56(sp)
4102a84c:	dec01104 	addi	sp,sp,68
4102a850:	f800283a 	ret

4102a854 <__nedf2>:
4102a854:	deffef04 	addi	sp,sp,-68
4102a858:	dc400f15 	stw	r17,60(sp)
4102a85c:	dc400404 	addi	r17,sp,16
4102a860:	2005883a 	mov	r2,r4
4102a864:	2807883a 	mov	r3,r5
4102a868:	dc000e15 	stw	r16,56(sp)
4102a86c:	d809883a 	mov	r4,sp
4102a870:	880b883a 	mov	r5,r17
4102a874:	dc000904 	addi	r16,sp,36
4102a878:	d8c00115 	stw	r3,4(sp)
4102a87c:	d8800015 	stw	r2,0(sp)
4102a880:	d9800215 	stw	r6,8(sp)
4102a884:	dfc01015 	stw	ra,64(sp)
4102a888:	d9c00315 	stw	r7,12(sp)
4102a88c:	102add80 	call	4102add8 <__unpack_d>
4102a890:	d9000204 	addi	r4,sp,8
4102a894:	800b883a 	mov	r5,r16
4102a898:	102add80 	call	4102add8 <__unpack_d>
4102a89c:	d8800417 	ldw	r2,16(sp)
4102a8a0:	00c00044 	movi	r3,1
4102a8a4:	180d883a 	mov	r6,r3
4102a8a8:	1880062e 	bgeu	r3,r2,4102a8c4 <__nedf2+0x70>
4102a8ac:	d8800917 	ldw	r2,36(sp)
4102a8b0:	8809883a 	mov	r4,r17
4102a8b4:	800b883a 	mov	r5,r16
4102a8b8:	1880022e 	bgeu	r3,r2,4102a8c4 <__nedf2+0x70>
4102a8bc:	102af100 	call	4102af10 <__fpcmp_parts_d>
4102a8c0:	100d883a 	mov	r6,r2
4102a8c4:	3005883a 	mov	r2,r6
4102a8c8:	dfc01017 	ldw	ra,64(sp)
4102a8cc:	dc400f17 	ldw	r17,60(sp)
4102a8d0:	dc000e17 	ldw	r16,56(sp)
4102a8d4:	dec01104 	addi	sp,sp,68
4102a8d8:	f800283a 	ret

4102a8dc <__gtdf2>:
4102a8dc:	deffef04 	addi	sp,sp,-68
4102a8e0:	dc400f15 	stw	r17,60(sp)
4102a8e4:	dc400404 	addi	r17,sp,16
4102a8e8:	2005883a 	mov	r2,r4
4102a8ec:	2807883a 	mov	r3,r5
4102a8f0:	dc000e15 	stw	r16,56(sp)
4102a8f4:	d809883a 	mov	r4,sp
4102a8f8:	880b883a 	mov	r5,r17
4102a8fc:	dc000904 	addi	r16,sp,36
4102a900:	d8c00115 	stw	r3,4(sp)
4102a904:	d8800015 	stw	r2,0(sp)
4102a908:	d9800215 	stw	r6,8(sp)
4102a90c:	dfc01015 	stw	ra,64(sp)
4102a910:	d9c00315 	stw	r7,12(sp)
4102a914:	102add80 	call	4102add8 <__unpack_d>
4102a918:	d9000204 	addi	r4,sp,8
4102a91c:	800b883a 	mov	r5,r16
4102a920:	102add80 	call	4102add8 <__unpack_d>
4102a924:	d8800417 	ldw	r2,16(sp)
4102a928:	00c00044 	movi	r3,1
4102a92c:	01bfffc4 	movi	r6,-1
4102a930:	1880062e 	bgeu	r3,r2,4102a94c <__gtdf2+0x70>
4102a934:	d8800917 	ldw	r2,36(sp)
4102a938:	8809883a 	mov	r4,r17
4102a93c:	800b883a 	mov	r5,r16
4102a940:	1880022e 	bgeu	r3,r2,4102a94c <__gtdf2+0x70>
4102a944:	102af100 	call	4102af10 <__fpcmp_parts_d>
4102a948:	100d883a 	mov	r6,r2
4102a94c:	3005883a 	mov	r2,r6
4102a950:	dfc01017 	ldw	ra,64(sp)
4102a954:	dc400f17 	ldw	r17,60(sp)
4102a958:	dc000e17 	ldw	r16,56(sp)
4102a95c:	dec01104 	addi	sp,sp,68
4102a960:	f800283a 	ret

4102a964 <__gedf2>:
4102a964:	deffef04 	addi	sp,sp,-68
4102a968:	dc400f15 	stw	r17,60(sp)
4102a96c:	dc400404 	addi	r17,sp,16
4102a970:	2005883a 	mov	r2,r4
4102a974:	2807883a 	mov	r3,r5
4102a978:	dc000e15 	stw	r16,56(sp)
4102a97c:	d809883a 	mov	r4,sp
4102a980:	880b883a 	mov	r5,r17
4102a984:	dc000904 	addi	r16,sp,36
4102a988:	d8c00115 	stw	r3,4(sp)
4102a98c:	d8800015 	stw	r2,0(sp)
4102a990:	d9800215 	stw	r6,8(sp)
4102a994:	dfc01015 	stw	ra,64(sp)
4102a998:	d9c00315 	stw	r7,12(sp)
4102a99c:	102add80 	call	4102add8 <__unpack_d>
4102a9a0:	d9000204 	addi	r4,sp,8
4102a9a4:	800b883a 	mov	r5,r16
4102a9a8:	102add80 	call	4102add8 <__unpack_d>
4102a9ac:	d8800417 	ldw	r2,16(sp)
4102a9b0:	00c00044 	movi	r3,1
4102a9b4:	01bfffc4 	movi	r6,-1
4102a9b8:	1880062e 	bgeu	r3,r2,4102a9d4 <__gedf2+0x70>
4102a9bc:	d8800917 	ldw	r2,36(sp)
4102a9c0:	8809883a 	mov	r4,r17
4102a9c4:	800b883a 	mov	r5,r16
4102a9c8:	1880022e 	bgeu	r3,r2,4102a9d4 <__gedf2+0x70>
4102a9cc:	102af100 	call	4102af10 <__fpcmp_parts_d>
4102a9d0:	100d883a 	mov	r6,r2
4102a9d4:	3005883a 	mov	r2,r6
4102a9d8:	dfc01017 	ldw	ra,64(sp)
4102a9dc:	dc400f17 	ldw	r17,60(sp)
4102a9e0:	dc000e17 	ldw	r16,56(sp)
4102a9e4:	dec01104 	addi	sp,sp,68
4102a9e8:	f800283a 	ret

4102a9ec <__ltdf2>:
4102a9ec:	deffef04 	addi	sp,sp,-68
4102a9f0:	dc400f15 	stw	r17,60(sp)
4102a9f4:	dc400404 	addi	r17,sp,16
4102a9f8:	2005883a 	mov	r2,r4
4102a9fc:	2807883a 	mov	r3,r5
4102aa00:	dc000e15 	stw	r16,56(sp)
4102aa04:	d809883a 	mov	r4,sp
4102aa08:	880b883a 	mov	r5,r17
4102aa0c:	dc000904 	addi	r16,sp,36
4102aa10:	d8c00115 	stw	r3,4(sp)
4102aa14:	d8800015 	stw	r2,0(sp)
4102aa18:	d9800215 	stw	r6,8(sp)
4102aa1c:	dfc01015 	stw	ra,64(sp)
4102aa20:	d9c00315 	stw	r7,12(sp)
4102aa24:	102add80 	call	4102add8 <__unpack_d>
4102aa28:	d9000204 	addi	r4,sp,8
4102aa2c:	800b883a 	mov	r5,r16
4102aa30:	102add80 	call	4102add8 <__unpack_d>
4102aa34:	d8800417 	ldw	r2,16(sp)
4102aa38:	00c00044 	movi	r3,1
4102aa3c:	180d883a 	mov	r6,r3
4102aa40:	1880062e 	bgeu	r3,r2,4102aa5c <__ltdf2+0x70>
4102aa44:	d8800917 	ldw	r2,36(sp)
4102aa48:	8809883a 	mov	r4,r17
4102aa4c:	800b883a 	mov	r5,r16
4102aa50:	1880022e 	bgeu	r3,r2,4102aa5c <__ltdf2+0x70>
4102aa54:	102af100 	call	4102af10 <__fpcmp_parts_d>
4102aa58:	100d883a 	mov	r6,r2
4102aa5c:	3005883a 	mov	r2,r6
4102aa60:	dfc01017 	ldw	ra,64(sp)
4102aa64:	dc400f17 	ldw	r17,60(sp)
4102aa68:	dc000e17 	ldw	r16,56(sp)
4102aa6c:	dec01104 	addi	sp,sp,68
4102aa70:	f800283a 	ret

4102aa74 <__floatsidf>:
4102aa74:	2006d7fa 	srli	r3,r4,31
4102aa78:	defff604 	addi	sp,sp,-40
4102aa7c:	008000c4 	movi	r2,3
4102aa80:	dfc00915 	stw	ra,36(sp)
4102aa84:	dcc00815 	stw	r19,32(sp)
4102aa88:	dc800715 	stw	r18,28(sp)
4102aa8c:	dc400615 	stw	r17,24(sp)
4102aa90:	dc000515 	stw	r16,20(sp)
4102aa94:	d8800015 	stw	r2,0(sp)
4102aa98:	d8c00115 	stw	r3,4(sp)
4102aa9c:	20000f1e 	bne	r4,zero,4102aadc <__floatsidf+0x68>
4102aaa0:	00800084 	movi	r2,2
4102aaa4:	d8800015 	stw	r2,0(sp)
4102aaa8:	d809883a 	mov	r4,sp
4102aaac:	10217ac0 	call	410217ac <__pack_d>
4102aab0:	1009883a 	mov	r4,r2
4102aab4:	180b883a 	mov	r5,r3
4102aab8:	2005883a 	mov	r2,r4
4102aabc:	2807883a 	mov	r3,r5
4102aac0:	dfc00917 	ldw	ra,36(sp)
4102aac4:	dcc00817 	ldw	r19,32(sp)
4102aac8:	dc800717 	ldw	r18,28(sp)
4102aacc:	dc400617 	ldw	r17,24(sp)
4102aad0:	dc000517 	ldw	r16,20(sp)
4102aad4:	dec00a04 	addi	sp,sp,40
4102aad8:	f800283a 	ret
4102aadc:	00800f04 	movi	r2,60
4102aae0:	1807003a 	cmpeq	r3,r3,zero
4102aae4:	d8800215 	stw	r2,8(sp)
4102aae8:	18001126 	beq	r3,zero,4102ab30 <__floatsidf+0xbc>
4102aaec:	0027883a 	mov	r19,zero
4102aaf0:	2025883a 	mov	r18,r4
4102aaf4:	d9000315 	stw	r4,12(sp)
4102aaf8:	dcc00415 	stw	r19,16(sp)
4102aafc:	10215040 	call	41021504 <__clzsi2>
4102ab00:	11000744 	addi	r4,r2,29
4102ab04:	013fe80e 	bge	zero,r4,4102aaa8 <__floatsidf+0x34>
4102ab08:	10bfff44 	addi	r2,r2,-3
4102ab0c:	10000c16 	blt	r2,zero,4102ab40 <__floatsidf+0xcc>
4102ab10:	90a2983a 	sll	r17,r18,r2
4102ab14:	0021883a 	mov	r16,zero
4102ab18:	d8800217 	ldw	r2,8(sp)
4102ab1c:	dc400415 	stw	r17,16(sp)
4102ab20:	dc000315 	stw	r16,12(sp)
4102ab24:	1105c83a 	sub	r2,r2,r4
4102ab28:	d8800215 	stw	r2,8(sp)
4102ab2c:	003fde06 	br	4102aaa8 <__floatsidf+0x34>
4102ab30:	00a00034 	movhi	r2,32768
4102ab34:	20800a26 	beq	r4,r2,4102ab60 <__floatsidf+0xec>
4102ab38:	0109c83a 	sub	r4,zero,r4
4102ab3c:	003feb06 	br	4102aaec <__floatsidf+0x78>
4102ab40:	9006d07a 	srli	r3,r18,1
4102ab44:	008007c4 	movi	r2,31
4102ab48:	1105c83a 	sub	r2,r2,r4
4102ab4c:	1886d83a 	srl	r3,r3,r2
4102ab50:	9922983a 	sll	r17,r19,r4
4102ab54:	9120983a 	sll	r16,r18,r4
4102ab58:	1c62b03a 	or	r17,r3,r17
4102ab5c:	003fee06 	br	4102ab18 <__floatsidf+0xa4>
4102ab60:	0009883a 	mov	r4,zero
4102ab64:	01707834 	movhi	r5,49632
4102ab68:	003fd306 	br	4102aab8 <__floatsidf+0x44>

4102ab6c <__fixdfsi>:
4102ab6c:	defff804 	addi	sp,sp,-32
4102ab70:	2005883a 	mov	r2,r4
4102ab74:	2807883a 	mov	r3,r5
4102ab78:	d809883a 	mov	r4,sp
4102ab7c:	d9400204 	addi	r5,sp,8
4102ab80:	d8c00115 	stw	r3,4(sp)
4102ab84:	d8800015 	stw	r2,0(sp)
4102ab88:	dfc00715 	stw	ra,28(sp)
4102ab8c:	102add80 	call	4102add8 <__unpack_d>
4102ab90:	d8c00217 	ldw	r3,8(sp)
4102ab94:	00800084 	movi	r2,2
4102ab98:	1880051e 	bne	r3,r2,4102abb0 <__fixdfsi+0x44>
4102ab9c:	0007883a 	mov	r3,zero
4102aba0:	1805883a 	mov	r2,r3
4102aba4:	dfc00717 	ldw	ra,28(sp)
4102aba8:	dec00804 	addi	sp,sp,32
4102abac:	f800283a 	ret
4102abb0:	00800044 	movi	r2,1
4102abb4:	10fff92e 	bgeu	r2,r3,4102ab9c <__fixdfsi+0x30>
4102abb8:	00800104 	movi	r2,4
4102abbc:	18800426 	beq	r3,r2,4102abd0 <__fixdfsi+0x64>
4102abc0:	d8c00417 	ldw	r3,16(sp)
4102abc4:	183ff516 	blt	r3,zero,4102ab9c <__fixdfsi+0x30>
4102abc8:	00800784 	movi	r2,30
4102abcc:	10c0080e 	bge	r2,r3,4102abf0 <__fixdfsi+0x84>
4102abd0:	d8800317 	ldw	r2,12(sp)
4102abd4:	1000121e 	bne	r2,zero,4102ac20 <__fixdfsi+0xb4>
4102abd8:	00e00034 	movhi	r3,32768
4102abdc:	18ffffc4 	addi	r3,r3,-1
4102abe0:	1805883a 	mov	r2,r3
4102abe4:	dfc00717 	ldw	ra,28(sp)
4102abe8:	dec00804 	addi	sp,sp,32
4102abec:	f800283a 	ret
4102abf0:	00800f04 	movi	r2,60
4102abf4:	10d1c83a 	sub	r8,r2,r3
4102abf8:	40bff804 	addi	r2,r8,-32
4102abfc:	d9800517 	ldw	r6,20(sp)
4102ac00:	d9c00617 	ldw	r7,24(sp)
4102ac04:	10000816 	blt	r2,zero,4102ac28 <__fixdfsi+0xbc>
4102ac08:	3888d83a 	srl	r4,r7,r2
4102ac0c:	d8800317 	ldw	r2,12(sp)
4102ac10:	2007883a 	mov	r3,r4
4102ac14:	103fe226 	beq	r2,zero,4102aba0 <__fixdfsi+0x34>
4102ac18:	0107c83a 	sub	r3,zero,r4
4102ac1c:	003fe006 	br	4102aba0 <__fixdfsi+0x34>
4102ac20:	00e00034 	movhi	r3,32768
4102ac24:	003fde06 	br	4102aba0 <__fixdfsi+0x34>
4102ac28:	39c7883a 	add	r3,r7,r7
4102ac2c:	008007c4 	movi	r2,31
4102ac30:	1205c83a 	sub	r2,r2,r8
4102ac34:	1886983a 	sll	r3,r3,r2
4102ac38:	3208d83a 	srl	r4,r6,r8
4102ac3c:	1908b03a 	or	r4,r3,r4
4102ac40:	003ff206 	br	4102ac0c <__fixdfsi+0xa0>

4102ac44 <__floatunsidf>:
4102ac44:	defff204 	addi	sp,sp,-56
4102ac48:	dfc00d15 	stw	ra,52(sp)
4102ac4c:	ddc00c15 	stw	r23,48(sp)
4102ac50:	dd800b15 	stw	r22,44(sp)
4102ac54:	dd400a15 	stw	r21,40(sp)
4102ac58:	dd000915 	stw	r20,36(sp)
4102ac5c:	dcc00815 	stw	r19,32(sp)
4102ac60:	dc800715 	stw	r18,28(sp)
4102ac64:	dc400615 	stw	r17,24(sp)
4102ac68:	dc000515 	stw	r16,20(sp)
4102ac6c:	d8000115 	stw	zero,4(sp)
4102ac70:	20000f1e 	bne	r4,zero,4102acb0 <__floatunsidf+0x6c>
4102ac74:	00800084 	movi	r2,2
4102ac78:	d8800015 	stw	r2,0(sp)
4102ac7c:	d809883a 	mov	r4,sp
4102ac80:	10217ac0 	call	410217ac <__pack_d>
4102ac84:	dfc00d17 	ldw	ra,52(sp)
4102ac88:	ddc00c17 	ldw	r23,48(sp)
4102ac8c:	dd800b17 	ldw	r22,44(sp)
4102ac90:	dd400a17 	ldw	r21,40(sp)
4102ac94:	dd000917 	ldw	r20,36(sp)
4102ac98:	dcc00817 	ldw	r19,32(sp)
4102ac9c:	dc800717 	ldw	r18,28(sp)
4102aca0:	dc400617 	ldw	r17,24(sp)
4102aca4:	dc000517 	ldw	r16,20(sp)
4102aca8:	dec00e04 	addi	sp,sp,56
4102acac:	f800283a 	ret
4102acb0:	008000c4 	movi	r2,3
4102acb4:	00c00f04 	movi	r3,60
4102acb8:	002f883a 	mov	r23,zero
4102acbc:	202d883a 	mov	r22,r4
4102acc0:	d8800015 	stw	r2,0(sp)
4102acc4:	d8c00215 	stw	r3,8(sp)
4102acc8:	d9000315 	stw	r4,12(sp)
4102accc:	ddc00415 	stw	r23,16(sp)
4102acd0:	10215040 	call	41021504 <__clzsi2>
4102acd4:	12400744 	addi	r9,r2,29
4102acd8:	48000b16 	blt	r9,zero,4102ad08 <__floatunsidf+0xc4>
4102acdc:	483fe726 	beq	r9,zero,4102ac7c <__floatunsidf+0x38>
4102ace0:	10bfff44 	addi	r2,r2,-3
4102ace4:	10002e16 	blt	r2,zero,4102ada0 <__floatunsidf+0x15c>
4102ace8:	b0a2983a 	sll	r17,r22,r2
4102acec:	0021883a 	mov	r16,zero
4102acf0:	d8800217 	ldw	r2,8(sp)
4102acf4:	dc400415 	stw	r17,16(sp)
4102acf8:	dc000315 	stw	r16,12(sp)
4102acfc:	1245c83a 	sub	r2,r2,r9
4102ad00:	d8800215 	stw	r2,8(sp)
4102ad04:	003fdd06 	br	4102ac7c <__floatunsidf+0x38>
4102ad08:	0255c83a 	sub	r10,zero,r9
4102ad0c:	51bff804 	addi	r6,r10,-32
4102ad10:	30001b16 	blt	r6,zero,4102ad80 <__floatunsidf+0x13c>
4102ad14:	b9a8d83a 	srl	r20,r23,r6
4102ad18:	002b883a 	mov	r21,zero
4102ad1c:	000f883a 	mov	r7,zero
4102ad20:	01000044 	movi	r4,1
4102ad24:	0011883a 	mov	r8,zero
4102ad28:	30002516 	blt	r6,zero,4102adc0 <__floatunsidf+0x17c>
4102ad2c:	21a6983a 	sll	r19,r4,r6
4102ad30:	0025883a 	mov	r18,zero
4102ad34:	00bfffc4 	movi	r2,-1
4102ad38:	9089883a 	add	r4,r18,r2
4102ad3c:	988b883a 	add	r5,r19,r2
4102ad40:	248d803a 	cmpltu	r6,r4,r18
4102ad44:	314b883a 	add	r5,r6,r5
4102ad48:	b104703a 	and	r2,r22,r4
4102ad4c:	b946703a 	and	r3,r23,r5
4102ad50:	10c4b03a 	or	r2,r2,r3
4102ad54:	10000226 	beq	r2,zero,4102ad60 <__floatunsidf+0x11c>
4102ad58:	01c00044 	movi	r7,1
4102ad5c:	0011883a 	mov	r8,zero
4102ad60:	d9000217 	ldw	r4,8(sp)
4102ad64:	a1c4b03a 	or	r2,r20,r7
4102ad68:	aa06b03a 	or	r3,r21,r8
4102ad6c:	2249c83a 	sub	r4,r4,r9
4102ad70:	d8c00415 	stw	r3,16(sp)
4102ad74:	d9000215 	stw	r4,8(sp)
4102ad78:	d8800315 	stw	r2,12(sp)
4102ad7c:	003fbf06 	br	4102ac7c <__floatunsidf+0x38>
4102ad80:	bdc7883a 	add	r3,r23,r23
4102ad84:	008007c4 	movi	r2,31
4102ad88:	1285c83a 	sub	r2,r2,r10
4102ad8c:	1886983a 	sll	r3,r3,r2
4102ad90:	b2a8d83a 	srl	r20,r22,r10
4102ad94:	baaad83a 	srl	r21,r23,r10
4102ad98:	1d28b03a 	or	r20,r3,r20
4102ad9c:	003fdf06 	br	4102ad1c <__floatunsidf+0xd8>
4102ada0:	b006d07a 	srli	r3,r22,1
4102ada4:	008007c4 	movi	r2,31
4102ada8:	1245c83a 	sub	r2,r2,r9
4102adac:	1886d83a 	srl	r3,r3,r2
4102adb0:	ba62983a 	sll	r17,r23,r9
4102adb4:	b260983a 	sll	r16,r22,r9
4102adb8:	1c62b03a 	or	r17,r3,r17
4102adbc:	003fcc06 	br	4102acf0 <__floatunsidf+0xac>
4102adc0:	2006d07a 	srli	r3,r4,1
4102adc4:	008007c4 	movi	r2,31
4102adc8:	1285c83a 	sub	r2,r2,r10
4102adcc:	18a6d83a 	srl	r19,r3,r2
4102add0:	22a4983a 	sll	r18,r4,r10
4102add4:	003fd706 	br	4102ad34 <__floatunsidf+0xf0>

4102add8 <__unpack_d>:
4102add8:	20c00117 	ldw	r3,4(r4)
4102addc:	22400017 	ldw	r9,0(r4)
4102ade0:	00800434 	movhi	r2,16
4102ade4:	10bfffc4 	addi	r2,r2,-1
4102ade8:	1808d53a 	srli	r4,r3,20
4102adec:	180cd7fa 	srli	r6,r3,31
4102adf0:	1894703a 	and	r10,r3,r2
4102adf4:	2201ffcc 	andi	r8,r4,2047
4102adf8:	281b883a 	mov	r13,r5
4102adfc:	4817883a 	mov	r11,r9
4102ae00:	29800115 	stw	r6,4(r5)
4102ae04:	5019883a 	mov	r12,r10
4102ae08:	40001e1e 	bne	r8,zero,4102ae84 <__unpack_d+0xac>
4102ae0c:	4a84b03a 	or	r2,r9,r10
4102ae10:	10001926 	beq	r2,zero,4102ae78 <__unpack_d+0xa0>
4102ae14:	4804d63a 	srli	r2,r9,24
4102ae18:	500c923a 	slli	r6,r10,8
4102ae1c:	013f0084 	movi	r4,-1022
4102ae20:	00c40034 	movhi	r3,4096
4102ae24:	18ffffc4 	addi	r3,r3,-1
4102ae28:	118cb03a 	or	r6,r2,r6
4102ae2c:	008000c4 	movi	r2,3
4102ae30:	480a923a 	slli	r5,r9,8
4102ae34:	68800015 	stw	r2,0(r13)
4102ae38:	69000215 	stw	r4,8(r13)
4102ae3c:	19800b36 	bltu	r3,r6,4102ae6c <__unpack_d+0x94>
4102ae40:	200f883a 	mov	r7,r4
4102ae44:	1811883a 	mov	r8,r3
4102ae48:	2945883a 	add	r2,r5,r5
4102ae4c:	1149803a 	cmpltu	r4,r2,r5
4102ae50:	3187883a 	add	r3,r6,r6
4102ae54:	20c9883a 	add	r4,r4,r3
4102ae58:	100b883a 	mov	r5,r2
4102ae5c:	200d883a 	mov	r6,r4
4102ae60:	39ffffc4 	addi	r7,r7,-1
4102ae64:	413ff82e 	bgeu	r8,r4,4102ae48 <__unpack_d+0x70>
4102ae68:	69c00215 	stw	r7,8(r13)
4102ae6c:	69800415 	stw	r6,16(r13)
4102ae70:	69400315 	stw	r5,12(r13)
4102ae74:	f800283a 	ret
4102ae78:	00800084 	movi	r2,2
4102ae7c:	28800015 	stw	r2,0(r5)
4102ae80:	f800283a 	ret
4102ae84:	0081ffc4 	movi	r2,2047
4102ae88:	40800f26 	beq	r8,r2,4102aec8 <__unpack_d+0xf0>
4102ae8c:	480cd63a 	srli	r6,r9,24
4102ae90:	5006923a 	slli	r3,r10,8
4102ae94:	4804923a 	slli	r2,r9,8
4102ae98:	0009883a 	mov	r4,zero
4102ae9c:	30c6b03a 	or	r3,r6,r3
4102aea0:	01440034 	movhi	r5,4096
4102aea4:	110cb03a 	or	r6,r2,r4
4102aea8:	423f0044 	addi	r8,r8,-1023
4102aeac:	194eb03a 	or	r7,r3,r5
4102aeb0:	008000c4 	movi	r2,3
4102aeb4:	69c00415 	stw	r7,16(r13)
4102aeb8:	6a000215 	stw	r8,8(r13)
4102aebc:	68800015 	stw	r2,0(r13)
4102aec0:	69800315 	stw	r6,12(r13)
4102aec4:	f800283a 	ret
4102aec8:	4a84b03a 	or	r2,r9,r10
4102aecc:	1000031e 	bne	r2,zero,4102aedc <__unpack_d+0x104>
4102aed0:	00800104 	movi	r2,4
4102aed4:	28800015 	stw	r2,0(r5)
4102aed8:	f800283a 	ret
4102aedc:	0009883a 	mov	r4,zero
4102aee0:	01400234 	movhi	r5,8
4102aee4:	4904703a 	and	r2,r9,r4
4102aee8:	5146703a 	and	r3,r10,r5
4102aeec:	10c4b03a 	or	r2,r2,r3
4102aef0:	10000526 	beq	r2,zero,4102af08 <__unpack_d+0x130>
4102aef4:	00800044 	movi	r2,1
4102aef8:	68800015 	stw	r2,0(r13)
4102aefc:	6b000415 	stw	r12,16(r13)
4102af00:	6ac00315 	stw	r11,12(r13)
4102af04:	f800283a 	ret
4102af08:	68000015 	stw	zero,0(r13)
4102af0c:	003ffb06 	br	4102aefc <__unpack_d+0x124>

4102af10 <__fpcmp_parts_d>:
4102af10:	21800017 	ldw	r6,0(r4)
4102af14:	00c00044 	movi	r3,1
4102af18:	19800a2e 	bgeu	r3,r6,4102af44 <__fpcmp_parts_d+0x34>
4102af1c:	28800017 	ldw	r2,0(r5)
4102af20:	1880082e 	bgeu	r3,r2,4102af44 <__fpcmp_parts_d+0x34>
4102af24:	00c00104 	movi	r3,4
4102af28:	30c02626 	beq	r6,r3,4102afc4 <__fpcmp_parts_d+0xb4>
4102af2c:	10c02226 	beq	r2,r3,4102afb8 <__fpcmp_parts_d+0xa8>
4102af30:	00c00084 	movi	r3,2
4102af34:	30c00526 	beq	r6,r3,4102af4c <__fpcmp_parts_d+0x3c>
4102af38:	10c0071e 	bne	r2,r3,4102af58 <__fpcmp_parts_d+0x48>
4102af3c:	20800117 	ldw	r2,4(r4)
4102af40:	1000091e 	bne	r2,zero,4102af68 <__fpcmp_parts_d+0x58>
4102af44:	00800044 	movi	r2,1
4102af48:	f800283a 	ret
4102af4c:	10c01a1e 	bne	r2,r3,4102afb8 <__fpcmp_parts_d+0xa8>
4102af50:	0005883a 	mov	r2,zero
4102af54:	f800283a 	ret
4102af58:	22000117 	ldw	r8,4(r4)
4102af5c:	28800117 	ldw	r2,4(r5)
4102af60:	40800326 	beq	r8,r2,4102af70 <__fpcmp_parts_d+0x60>
4102af64:	403ff726 	beq	r8,zero,4102af44 <__fpcmp_parts_d+0x34>
4102af68:	00bfffc4 	movi	r2,-1
4102af6c:	f800283a 	ret
4102af70:	20c00217 	ldw	r3,8(r4)
4102af74:	28800217 	ldw	r2,8(r5)
4102af78:	10fffa16 	blt	r2,r3,4102af64 <__fpcmp_parts_d+0x54>
4102af7c:	18800916 	blt	r3,r2,4102afa4 <__fpcmp_parts_d+0x94>
4102af80:	21c00417 	ldw	r7,16(r4)
4102af84:	28c00417 	ldw	r3,16(r5)
4102af88:	21800317 	ldw	r6,12(r4)
4102af8c:	28800317 	ldw	r2,12(r5)
4102af90:	19fff436 	bltu	r3,r7,4102af64 <__fpcmp_parts_d+0x54>
4102af94:	38c00526 	beq	r7,r3,4102afac <__fpcmp_parts_d+0x9c>
4102af98:	38c00236 	bltu	r7,r3,4102afa4 <__fpcmp_parts_d+0x94>
4102af9c:	19ffec1e 	bne	r3,r7,4102af50 <__fpcmp_parts_d+0x40>
4102afa0:	30bfeb2e 	bgeu	r6,r2,4102af50 <__fpcmp_parts_d+0x40>
4102afa4:	403fe71e 	bne	r8,zero,4102af44 <__fpcmp_parts_d+0x34>
4102afa8:	003fef06 	br	4102af68 <__fpcmp_parts_d+0x58>
4102afac:	11bffa2e 	bgeu	r2,r6,4102af98 <__fpcmp_parts_d+0x88>
4102afb0:	403fe426 	beq	r8,zero,4102af44 <__fpcmp_parts_d+0x34>
4102afb4:	003fec06 	br	4102af68 <__fpcmp_parts_d+0x58>
4102afb8:	28800117 	ldw	r2,4(r5)
4102afbc:	103fe11e 	bne	r2,zero,4102af44 <__fpcmp_parts_d+0x34>
4102afc0:	003fe906 	br	4102af68 <__fpcmp_parts_d+0x58>
4102afc4:	11bfdd1e 	bne	r2,r6,4102af3c <__fpcmp_parts_d+0x2c>
4102afc8:	28c00117 	ldw	r3,4(r5)
4102afcc:	20800117 	ldw	r2,4(r4)
4102afd0:	1885c83a 	sub	r2,r3,r2
4102afd4:	f800283a 	ret

4102afd8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
4102afd8:	defff804 	addi	sp,sp,-32
4102afdc:	dfc00715 	stw	ra,28(sp)
4102afe0:	df000615 	stw	fp,24(sp)
4102afe4:	df000604 	addi	fp,sp,24
4102afe8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
4102afec:	e0bffc17 	ldw	r2,-16(fp)
4102aff0:	1004803a 	cmplt	r2,r2,zero
4102aff4:	1000081e 	bne	r2,zero,4102b018 <close+0x40>
4102aff8:	e0bffc17 	ldw	r2,-16(fp)
4102affc:	10800324 	muli	r2,r2,12
4102b000:	1007883a 	mov	r3,r2
4102b004:	009040f4 	movhi	r2,16643
4102b008:	10ba6404 	addi	r2,r2,-5744
4102b00c:	1887883a 	add	r3,r3,r2
4102b010:	e0ffff15 	stw	r3,-4(fp)
4102b014:	00000106 	br	4102b01c <close+0x44>
4102b018:	e03fff15 	stw	zero,-4(fp)
4102b01c:	e0bfff17 	ldw	r2,-4(fp)
4102b020:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
4102b024:	e0bffb17 	ldw	r2,-20(fp)
4102b028:	1005003a 	cmpeq	r2,r2,zero
4102b02c:	10001d1e 	bne	r2,zero,4102b0a4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
4102b030:	e0bffb17 	ldw	r2,-20(fp)
4102b034:	10800017 	ldw	r2,0(r2)
4102b038:	10800417 	ldw	r2,16(r2)
4102b03c:	1005003a 	cmpeq	r2,r2,zero
4102b040:	1000071e 	bne	r2,zero,4102b060 <close+0x88>
4102b044:	e0bffb17 	ldw	r2,-20(fp)
4102b048:	10800017 	ldw	r2,0(r2)
4102b04c:	10800417 	ldw	r2,16(r2)
4102b050:	e13ffb17 	ldw	r4,-20(fp)
4102b054:	103ee83a 	callr	r2
4102b058:	e0bffe15 	stw	r2,-8(fp)
4102b05c:	00000106 	br	4102b064 <close+0x8c>
4102b060:	e03ffe15 	stw	zero,-8(fp)
4102b064:	e0bffe17 	ldw	r2,-8(fp)
4102b068:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
4102b06c:	e13ffc17 	ldw	r4,-16(fp)
4102b070:	102b8600 	call	4102b860 <alt_release_fd>
    if (rval < 0)
4102b074:	e0bffa17 	ldw	r2,-24(fp)
4102b078:	1004403a 	cmpge	r2,r2,zero
4102b07c:	1000071e 	bne	r2,zero,4102b09c <close+0xc4>
    {
      ALT_ERRNO = -rval;
4102b080:	102b0d40 	call	4102b0d4 <alt_get_errno>
4102b084:	e0fffa17 	ldw	r3,-24(fp)
4102b088:	00c7c83a 	sub	r3,zero,r3
4102b08c:	10c00015 	stw	r3,0(r2)
      return -1;
4102b090:	00bfffc4 	movi	r2,-1
4102b094:	e0bffd15 	stw	r2,-12(fp)
4102b098:	00000806 	br	4102b0bc <close+0xe4>
    }
    return 0;
4102b09c:	e03ffd15 	stw	zero,-12(fp)
4102b0a0:	00000606 	br	4102b0bc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
4102b0a4:	102b0d40 	call	4102b0d4 <alt_get_errno>
4102b0a8:	1007883a 	mov	r3,r2
4102b0ac:	00801444 	movi	r2,81
4102b0b0:	18800015 	stw	r2,0(r3)
    return -1;
4102b0b4:	00bfffc4 	movi	r2,-1
4102b0b8:	e0bffd15 	stw	r2,-12(fp)
4102b0bc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
4102b0c0:	e037883a 	mov	sp,fp
4102b0c4:	dfc00117 	ldw	ra,4(sp)
4102b0c8:	df000017 	ldw	fp,0(sp)
4102b0cc:	dec00204 	addi	sp,sp,8
4102b0d0:	f800283a 	ret

4102b0d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4102b0d4:	defffd04 	addi	sp,sp,-12
4102b0d8:	dfc00215 	stw	ra,8(sp)
4102b0dc:	df000115 	stw	fp,4(sp)
4102b0e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
4102b0e4:	009040f4 	movhi	r2,16643
4102b0e8:	10bee704 	addi	r2,r2,-1124
4102b0ec:	10800017 	ldw	r2,0(r2)
4102b0f0:	1005003a 	cmpeq	r2,r2,zero
4102b0f4:	1000061e 	bne	r2,zero,4102b110 <alt_get_errno+0x3c>
4102b0f8:	009040f4 	movhi	r2,16643
4102b0fc:	10bee704 	addi	r2,r2,-1124
4102b100:	10800017 	ldw	r2,0(r2)
4102b104:	103ee83a 	callr	r2
4102b108:	e0bfff15 	stw	r2,-4(fp)
4102b10c:	00000306 	br	4102b11c <alt_get_errno+0x48>
4102b110:	009040f4 	movhi	r2,16643
4102b114:	10858904 	addi	r2,r2,5668
4102b118:	e0bfff15 	stw	r2,-4(fp)
4102b11c:	e0bfff17 	ldw	r2,-4(fp)
}
4102b120:	e037883a 	mov	sp,fp
4102b124:	dfc00117 	ldw	ra,4(sp)
4102b128:	df000017 	ldw	fp,0(sp)
4102b12c:	dec00204 	addi	sp,sp,8
4102b130:	f800283a 	ret

4102b134 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
4102b134:	defffe04 	addi	sp,sp,-8
4102b138:	df000115 	stw	fp,4(sp)
4102b13c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
4102b140:	e03fff15 	stw	zero,-4(fp)
4102b144:	00000506 	br	4102b15c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
4102b148:	e0bfff17 	ldw	r2,-4(fp)
4102b14c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
4102b150:	e0bfff17 	ldw	r2,-4(fp)
4102b154:	10800804 	addi	r2,r2,32
4102b158:	e0bfff15 	stw	r2,-4(fp)
4102b15c:	e0bfff17 	ldw	r2,-4(fp)
4102b160:	10820030 	cmpltui	r2,r2,2048
4102b164:	103ff81e 	bne	r2,zero,4102b148 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
4102b168:	e037883a 	mov	sp,fp
4102b16c:	df000017 	ldw	fp,0(sp)
4102b170:	dec00104 	addi	sp,sp,4
4102b174:	f800283a 	ret

4102b178 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
4102b178:	defffc04 	addi	sp,sp,-16
4102b17c:	df000315 	stw	fp,12(sp)
4102b180:	df000304 	addi	fp,sp,12
4102b184:	e13ffd15 	stw	r4,-12(fp)
4102b188:	e17ffe15 	stw	r5,-8(fp)
4102b18c:	e1bfff15 	stw	r6,-4(fp)
  return len;
4102b190:	e0bfff17 	ldw	r2,-4(fp)
}
4102b194:	e037883a 	mov	sp,fp
4102b198:	df000017 	ldw	fp,0(sp)
4102b19c:	dec00104 	addi	sp,sp,4
4102b1a0:	f800283a 	ret

4102b1a4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
4102b1a4:	defff904 	addi	sp,sp,-28
4102b1a8:	dfc00615 	stw	ra,24(sp)
4102b1ac:	df000515 	stw	fp,20(sp)
4102b1b0:	df000504 	addi	fp,sp,20
4102b1b4:	e13ffc15 	stw	r4,-16(fp)
4102b1b8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4102b1bc:	e0bffc17 	ldw	r2,-16(fp)
4102b1c0:	1004803a 	cmplt	r2,r2,zero
4102b1c4:	1000081e 	bne	r2,zero,4102b1e8 <fstat+0x44>
4102b1c8:	e0bffc17 	ldw	r2,-16(fp)
4102b1cc:	10800324 	muli	r2,r2,12
4102b1d0:	1007883a 	mov	r3,r2
4102b1d4:	009040f4 	movhi	r2,16643
4102b1d8:	10ba6404 	addi	r2,r2,-5744
4102b1dc:	1887883a 	add	r3,r3,r2
4102b1e0:	e0ffff15 	stw	r3,-4(fp)
4102b1e4:	00000106 	br	4102b1ec <fstat+0x48>
4102b1e8:	e03fff15 	stw	zero,-4(fp)
4102b1ec:	e0bfff17 	ldw	r2,-4(fp)
4102b1f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
4102b1f4:	e0bffb17 	ldw	r2,-20(fp)
4102b1f8:	1005003a 	cmpeq	r2,r2,zero
4102b1fc:	1000121e 	bne	r2,zero,4102b248 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
4102b200:	e0bffb17 	ldw	r2,-20(fp)
4102b204:	10800017 	ldw	r2,0(r2)
4102b208:	10800817 	ldw	r2,32(r2)
4102b20c:	1005003a 	cmpeq	r2,r2,zero
4102b210:	1000081e 	bne	r2,zero,4102b234 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
4102b214:	e0bffb17 	ldw	r2,-20(fp)
4102b218:	10800017 	ldw	r2,0(r2)
4102b21c:	10800817 	ldw	r2,32(r2)
4102b220:	e13ffb17 	ldw	r4,-20(fp)
4102b224:	e17ffd17 	ldw	r5,-12(fp)
4102b228:	103ee83a 	callr	r2
4102b22c:	e0bffe15 	stw	r2,-8(fp)
4102b230:	00000b06 	br	4102b260 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
4102b234:	e0fffd17 	ldw	r3,-12(fp)
4102b238:	00880004 	movi	r2,8192
4102b23c:	18800115 	stw	r2,4(r3)
      return 0;
4102b240:	e03ffe15 	stw	zero,-8(fp)
4102b244:	00000606 	br	4102b260 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
4102b248:	102b2780 	call	4102b278 <alt_get_errno>
4102b24c:	1007883a 	mov	r3,r2
4102b250:	00801444 	movi	r2,81
4102b254:	18800015 	stw	r2,0(r3)
    return -1;
4102b258:	00bfffc4 	movi	r2,-1
4102b25c:	e0bffe15 	stw	r2,-8(fp)
4102b260:	e0bffe17 	ldw	r2,-8(fp)
  }
}
4102b264:	e037883a 	mov	sp,fp
4102b268:	dfc00117 	ldw	ra,4(sp)
4102b26c:	df000017 	ldw	fp,0(sp)
4102b270:	dec00204 	addi	sp,sp,8
4102b274:	f800283a 	ret

4102b278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4102b278:	defffd04 	addi	sp,sp,-12
4102b27c:	dfc00215 	stw	ra,8(sp)
4102b280:	df000115 	stw	fp,4(sp)
4102b284:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
4102b288:	009040f4 	movhi	r2,16643
4102b28c:	10bee704 	addi	r2,r2,-1124
4102b290:	10800017 	ldw	r2,0(r2)
4102b294:	1005003a 	cmpeq	r2,r2,zero
4102b298:	1000061e 	bne	r2,zero,4102b2b4 <alt_get_errno+0x3c>
4102b29c:	009040f4 	movhi	r2,16643
4102b2a0:	10bee704 	addi	r2,r2,-1124
4102b2a4:	10800017 	ldw	r2,0(r2)
4102b2a8:	103ee83a 	callr	r2
4102b2ac:	e0bfff15 	stw	r2,-4(fp)
4102b2b0:	00000306 	br	4102b2c0 <alt_get_errno+0x48>
4102b2b4:	009040f4 	movhi	r2,16643
4102b2b8:	10858904 	addi	r2,r2,5668
4102b2bc:	e0bfff15 	stw	r2,-4(fp)
4102b2c0:	e0bfff17 	ldw	r2,-4(fp)
}
4102b2c4:	e037883a 	mov	sp,fp
4102b2c8:	dfc00117 	ldw	ra,4(sp)
4102b2cc:	df000017 	ldw	fp,0(sp)
4102b2d0:	dec00204 	addi	sp,sp,8
4102b2d4:	f800283a 	ret

4102b2d8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
4102b2d8:	deffeb04 	addi	sp,sp,-84
4102b2dc:	dfc01415 	stw	ra,80(sp)
4102b2e0:	df001315 	stw	fp,76(sp)
4102b2e4:	df001304 	addi	fp,sp,76
4102b2e8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4102b2ec:	e0bffd17 	ldw	r2,-12(fp)
4102b2f0:	1004803a 	cmplt	r2,r2,zero
4102b2f4:	1000081e 	bne	r2,zero,4102b318 <isatty+0x40>
4102b2f8:	e0bffd17 	ldw	r2,-12(fp)
4102b2fc:	10800324 	muli	r2,r2,12
4102b300:	1007883a 	mov	r3,r2
4102b304:	009040f4 	movhi	r2,16643
4102b308:	10ba6404 	addi	r2,r2,-5744
4102b30c:	1887883a 	add	r3,r3,r2
4102b310:	e0ffff15 	stw	r3,-4(fp)
4102b314:	00000106 	br	4102b31c <isatty+0x44>
4102b318:	e03fff15 	stw	zero,-4(fp)
4102b31c:	e0bfff17 	ldw	r2,-4(fp)
4102b320:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
4102b324:	e0bfed17 	ldw	r2,-76(fp)
4102b328:	1005003a 	cmpeq	r2,r2,zero
4102b32c:	10000f1e 	bne	r2,zero,4102b36c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
4102b330:	e0bfed17 	ldw	r2,-76(fp)
4102b334:	10800017 	ldw	r2,0(r2)
4102b338:	10800817 	ldw	r2,32(r2)
4102b33c:	1004c03a 	cmpne	r2,r2,zero
4102b340:	1000031e 	bne	r2,zero,4102b350 <isatty+0x78>
    {
      return 1;
4102b344:	00800044 	movi	r2,1
4102b348:	e0bffe15 	stw	r2,-8(fp)
4102b34c:	00000c06 	br	4102b380 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
4102b350:	e17fee04 	addi	r5,fp,-72
4102b354:	e13ffd17 	ldw	r4,-12(fp)
4102b358:	102b1a40 	call	4102b1a4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
4102b35c:	e0bfef17 	ldw	r2,-68(fp)
4102b360:	10880020 	cmpeqi	r2,r2,8192
4102b364:	e0bffe15 	stw	r2,-8(fp)
4102b368:	00000506 	br	4102b380 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
4102b36c:	102b3980 	call	4102b398 <alt_get_errno>
4102b370:	1007883a 	mov	r3,r2
4102b374:	00801444 	movi	r2,81
4102b378:	18800015 	stw	r2,0(r3)
    return 0;
4102b37c:	e03ffe15 	stw	zero,-8(fp)
4102b380:	e0bffe17 	ldw	r2,-8(fp)
  }
}
4102b384:	e037883a 	mov	sp,fp
4102b388:	dfc00117 	ldw	ra,4(sp)
4102b38c:	df000017 	ldw	fp,0(sp)
4102b390:	dec00204 	addi	sp,sp,8
4102b394:	f800283a 	ret

4102b398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4102b398:	defffd04 	addi	sp,sp,-12
4102b39c:	dfc00215 	stw	ra,8(sp)
4102b3a0:	df000115 	stw	fp,4(sp)
4102b3a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
4102b3a8:	009040f4 	movhi	r2,16643
4102b3ac:	10bee704 	addi	r2,r2,-1124
4102b3b0:	10800017 	ldw	r2,0(r2)
4102b3b4:	1005003a 	cmpeq	r2,r2,zero
4102b3b8:	1000061e 	bne	r2,zero,4102b3d4 <alt_get_errno+0x3c>
4102b3bc:	009040f4 	movhi	r2,16643
4102b3c0:	10bee704 	addi	r2,r2,-1124
4102b3c4:	10800017 	ldw	r2,0(r2)
4102b3c8:	103ee83a 	callr	r2
4102b3cc:	e0bfff15 	stw	r2,-4(fp)
4102b3d0:	00000306 	br	4102b3e0 <alt_get_errno+0x48>
4102b3d4:	009040f4 	movhi	r2,16643
4102b3d8:	10858904 	addi	r2,r2,5668
4102b3dc:	e0bfff15 	stw	r2,-4(fp)
4102b3e0:	e0bfff17 	ldw	r2,-4(fp)
}
4102b3e4:	e037883a 	mov	sp,fp
4102b3e8:	dfc00117 	ldw	ra,4(sp)
4102b3ec:	df000017 	ldw	fp,0(sp)
4102b3f0:	dec00204 	addi	sp,sp,8
4102b3f4:	f800283a 	ret

4102b3f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
4102b3f8:	defffe04 	addi	sp,sp,-8
4102b3fc:	dfc00115 	stw	ra,4(sp)
4102b400:	df000015 	stw	fp,0(sp)
4102b404:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
4102b408:	011040f4 	movhi	r4,16643
4102b40c:	213eec04 	addi	r4,r4,-1104
4102b410:	015040f4 	movhi	r5,16643
4102b414:	29785504 	addi	r5,r5,-7852
4102b418:	019040f4 	movhi	r6,16643
4102b41c:	31beec04 	addi	r6,r6,-1104
4102b420:	102b4780 	call	4102b478 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
4102b424:	011040b4 	movhi	r4,16642
4102b428:	21000804 	addi	r4,r4,32
4102b42c:	015040b4 	movhi	r5,16642
4102b430:	29400804 	addi	r5,r5,32
4102b434:	019040b4 	movhi	r6,16642
4102b438:	31806d04 	addi	r6,r6,436
4102b43c:	102b4780 	call	4102b478 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
4102b440:	011040f4 	movhi	r4,16643
4102b444:	2136f804 	addi	r4,r4,-9248
4102b448:	015040f4 	movhi	r5,16643
4102b44c:	2976f804 	addi	r5,r5,-9248
4102b450:	019040f4 	movhi	r6,16643
4102b454:	31b85504 	addi	r6,r6,-7852
4102b458:	102b4780 	call	4102b478 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
4102b45c:	102b1340 	call	4102b134 <alt_dcache_flush_all>
  alt_icache_flush_all();
4102b460:	102cdbc0 	call	4102cdbc <alt_icache_flush_all>
}
4102b464:	e037883a 	mov	sp,fp
4102b468:	dfc00117 	ldw	ra,4(sp)
4102b46c:	df000017 	ldw	fp,0(sp)
4102b470:	dec00204 	addi	sp,sp,8
4102b474:	f800283a 	ret

4102b478 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
4102b478:	defffc04 	addi	sp,sp,-16
4102b47c:	df000315 	stw	fp,12(sp)
4102b480:	df000304 	addi	fp,sp,12
4102b484:	e13ffd15 	stw	r4,-12(fp)
4102b488:	e17ffe15 	stw	r5,-8(fp)
4102b48c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
4102b490:	e0fffe17 	ldw	r3,-8(fp)
4102b494:	e0bffd17 	ldw	r2,-12(fp)
4102b498:	18800e26 	beq	r3,r2,4102b4d4 <alt_load_section+0x5c>
  {
    while( to != end )
4102b49c:	00000a06 	br	4102b4c8 <alt_load_section+0x50>
    {
      *to++ = *from++;
4102b4a0:	e0bffd17 	ldw	r2,-12(fp)
4102b4a4:	10c00017 	ldw	r3,0(r2)
4102b4a8:	e0bffe17 	ldw	r2,-8(fp)
4102b4ac:	10c00015 	stw	r3,0(r2)
4102b4b0:	e0bffe17 	ldw	r2,-8(fp)
4102b4b4:	10800104 	addi	r2,r2,4
4102b4b8:	e0bffe15 	stw	r2,-8(fp)
4102b4bc:	e0bffd17 	ldw	r2,-12(fp)
4102b4c0:	10800104 	addi	r2,r2,4
4102b4c4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
4102b4c8:	e0fffe17 	ldw	r3,-8(fp)
4102b4cc:	e0bfff17 	ldw	r2,-4(fp)
4102b4d0:	18bff31e 	bne	r3,r2,4102b4a0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
4102b4d4:	e037883a 	mov	sp,fp
4102b4d8:	df000017 	ldw	fp,0(sp)
4102b4dc:	dec00104 	addi	sp,sp,4
4102b4e0:	f800283a 	ret

4102b4e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
4102b4e4:	defff804 	addi	sp,sp,-32
4102b4e8:	dfc00715 	stw	ra,28(sp)
4102b4ec:	df000615 	stw	fp,24(sp)
4102b4f0:	df000604 	addi	fp,sp,24
4102b4f4:	e13ffc15 	stw	r4,-16(fp)
4102b4f8:	e17ffd15 	stw	r5,-12(fp)
4102b4fc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
4102b500:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4102b504:	e0bffc17 	ldw	r2,-16(fp)
4102b508:	1004803a 	cmplt	r2,r2,zero
4102b50c:	1000081e 	bne	r2,zero,4102b530 <lseek+0x4c>
4102b510:	e0bffc17 	ldw	r2,-16(fp)
4102b514:	10800324 	muli	r2,r2,12
4102b518:	1007883a 	mov	r3,r2
4102b51c:	009040f4 	movhi	r2,16643
4102b520:	10ba6404 	addi	r2,r2,-5744
4102b524:	1887883a 	add	r3,r3,r2
4102b528:	e0ffff15 	stw	r3,-4(fp)
4102b52c:	00000106 	br	4102b534 <lseek+0x50>
4102b530:	e03fff15 	stw	zero,-4(fp)
4102b534:	e0bfff17 	ldw	r2,-4(fp)
4102b538:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
4102b53c:	e0bffb17 	ldw	r2,-20(fp)
4102b540:	1005003a 	cmpeq	r2,r2,zero
4102b544:	1000111e 	bne	r2,zero,4102b58c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
4102b548:	e0bffb17 	ldw	r2,-20(fp)
4102b54c:	10800017 	ldw	r2,0(r2)
4102b550:	10800717 	ldw	r2,28(r2)
4102b554:	1005003a 	cmpeq	r2,r2,zero
4102b558:	1000091e 	bne	r2,zero,4102b580 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
4102b55c:	e0bffb17 	ldw	r2,-20(fp)
4102b560:	10800017 	ldw	r2,0(r2)
4102b564:	10800717 	ldw	r2,28(r2)
4102b568:	e13ffb17 	ldw	r4,-20(fp)
4102b56c:	e17ffd17 	ldw	r5,-12(fp)
4102b570:	e1bffe17 	ldw	r6,-8(fp)
4102b574:	103ee83a 	callr	r2
4102b578:	e0bffa15 	stw	r2,-24(fp)
4102b57c:	00000506 	br	4102b594 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
4102b580:	00bfde84 	movi	r2,-134
4102b584:	e0bffa15 	stw	r2,-24(fp)
4102b588:	00000206 	br	4102b594 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
4102b58c:	00bfebc4 	movi	r2,-81
4102b590:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
4102b594:	e0bffa17 	ldw	r2,-24(fp)
4102b598:	1004403a 	cmpge	r2,r2,zero
4102b59c:	1000071e 	bne	r2,zero,4102b5bc <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
4102b5a0:	102b5d40 	call	4102b5d4 <alt_get_errno>
4102b5a4:	1007883a 	mov	r3,r2
4102b5a8:	e0bffa17 	ldw	r2,-24(fp)
4102b5ac:	0085c83a 	sub	r2,zero,r2
4102b5b0:	18800015 	stw	r2,0(r3)
    rc = -1;
4102b5b4:	00bfffc4 	movi	r2,-1
4102b5b8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
4102b5bc:	e0bffa17 	ldw	r2,-24(fp)
}
4102b5c0:	e037883a 	mov	sp,fp
4102b5c4:	dfc00117 	ldw	ra,4(sp)
4102b5c8:	df000017 	ldw	fp,0(sp)
4102b5cc:	dec00204 	addi	sp,sp,8
4102b5d0:	f800283a 	ret

4102b5d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4102b5d4:	defffd04 	addi	sp,sp,-12
4102b5d8:	dfc00215 	stw	ra,8(sp)
4102b5dc:	df000115 	stw	fp,4(sp)
4102b5e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
4102b5e4:	009040f4 	movhi	r2,16643
4102b5e8:	10bee704 	addi	r2,r2,-1124
4102b5ec:	10800017 	ldw	r2,0(r2)
4102b5f0:	1005003a 	cmpeq	r2,r2,zero
4102b5f4:	1000061e 	bne	r2,zero,4102b610 <alt_get_errno+0x3c>
4102b5f8:	009040f4 	movhi	r2,16643
4102b5fc:	10bee704 	addi	r2,r2,-1124
4102b600:	10800017 	ldw	r2,0(r2)
4102b604:	103ee83a 	callr	r2
4102b608:	e0bfff15 	stw	r2,-4(fp)
4102b60c:	00000306 	br	4102b61c <alt_get_errno+0x48>
4102b610:	009040f4 	movhi	r2,16643
4102b614:	10858904 	addi	r2,r2,5668
4102b618:	e0bfff15 	stw	r2,-4(fp)
4102b61c:	e0bfff17 	ldw	r2,-4(fp)
}
4102b620:	e037883a 	mov	sp,fp
4102b624:	dfc00117 	ldw	ra,4(sp)
4102b628:	df000017 	ldw	fp,0(sp)
4102b62c:	dec00204 	addi	sp,sp,8
4102b630:	f800283a 	ret

4102b634 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
4102b634:	defffd04 	addi	sp,sp,-12
4102b638:	dfc00215 	stw	ra,8(sp)
4102b63c:	df000115 	stw	fp,4(sp)
4102b640:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
4102b644:	0009883a 	mov	r4,zero
4102b648:	102bcd00 	call	4102bcd0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
4102b64c:	102bd040 	call	4102bd04 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
4102b650:	011040f4 	movhi	r4,16643
4102b654:	21384d04 	addi	r4,r4,-7884
4102b658:	015040f4 	movhi	r5,16643
4102b65c:	29784d04 	addi	r5,r5,-7884
4102b660:	019040f4 	movhi	r6,16643
4102b664:	31b84d04 	addi	r6,r6,-7884
4102b668:	102d17c0 	call	4102d17c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
4102b66c:	102ccf40 	call	4102ccf4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
4102b670:	011040f4 	movhi	r4,16643
4102b674:	21335604 	addi	r4,r4,-12968
4102b678:	102d7d40 	call	4102d7d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
4102b67c:	d126ae17 	ldw	r4,-25928(gp)
4102b680:	d166af17 	ldw	r5,-25924(gp)
4102b684:	d1a6b017 	ldw	r6,-25920(gp)
4102b688:	10209800 	call	41020980 <main>
4102b68c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
4102b690:	01000044 	movi	r4,1
4102b694:	102afd80 	call	4102afd8 <close>
  exit (result);
4102b698:	e13fff17 	ldw	r4,-4(fp)
4102b69c:	102d7e80 	call	4102d7e8 <exit>

4102b6a0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
4102b6a0:	defffe04 	addi	sp,sp,-8
4102b6a4:	df000115 	stw	fp,4(sp)
4102b6a8:	df000104 	addi	fp,sp,4
4102b6ac:	e13fff15 	stw	r4,-4(fp)
}
4102b6b0:	e037883a 	mov	sp,fp
4102b6b4:	df000017 	ldw	fp,0(sp)
4102b6b8:	dec00104 	addi	sp,sp,4
4102b6bc:	f800283a 	ret

4102b6c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
4102b6c0:	defffe04 	addi	sp,sp,-8
4102b6c4:	df000115 	stw	fp,4(sp)
4102b6c8:	df000104 	addi	fp,sp,4
4102b6cc:	e13fff15 	stw	r4,-4(fp)
}
4102b6d0:	e037883a 	mov	sp,fp
4102b6d4:	df000017 	ldw	fp,0(sp)
4102b6d8:	dec00104 	addi	sp,sp,4
4102b6dc:	f800283a 	ret

4102b6e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
4102b6e0:	defff704 	addi	sp,sp,-36
4102b6e4:	dfc00815 	stw	ra,32(sp)
4102b6e8:	df000715 	stw	fp,28(sp)
4102b6ec:	df000704 	addi	fp,sp,28
4102b6f0:	e13ffb15 	stw	r4,-20(fp)
4102b6f4:	e17ffc15 	stw	r5,-16(fp)
4102b6f8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4102b6fc:	e0bffb17 	ldw	r2,-20(fp)
4102b700:	1004803a 	cmplt	r2,r2,zero
4102b704:	1000081e 	bne	r2,zero,4102b728 <read+0x48>
4102b708:	e0bffb17 	ldw	r2,-20(fp)
4102b70c:	10800324 	muli	r2,r2,12
4102b710:	1007883a 	mov	r3,r2
4102b714:	009040f4 	movhi	r2,16643
4102b718:	10ba6404 	addi	r2,r2,-5744
4102b71c:	1887883a 	add	r3,r3,r2
4102b720:	e0ffff15 	stw	r3,-4(fp)
4102b724:	00000106 	br	4102b72c <read+0x4c>
4102b728:	e03fff15 	stw	zero,-4(fp)
4102b72c:	e0bfff17 	ldw	r2,-4(fp)
4102b730:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
4102b734:	e0bffa17 	ldw	r2,-24(fp)
4102b738:	1005003a 	cmpeq	r2,r2,zero
4102b73c:	1000241e 	bne	r2,zero,4102b7d0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
4102b740:	e0bffa17 	ldw	r2,-24(fp)
4102b744:	10800217 	ldw	r2,8(r2)
4102b748:	108000cc 	andi	r2,r2,3
4102b74c:	10800060 	cmpeqi	r2,r2,1
4102b750:	10001a1e 	bne	r2,zero,4102b7bc <read+0xdc>
4102b754:	e0bffa17 	ldw	r2,-24(fp)
4102b758:	10800017 	ldw	r2,0(r2)
4102b75c:	10800517 	ldw	r2,20(r2)
4102b760:	1005003a 	cmpeq	r2,r2,zero
4102b764:	1000151e 	bne	r2,zero,4102b7bc <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
4102b768:	e0bffa17 	ldw	r2,-24(fp)
4102b76c:	10800017 	ldw	r2,0(r2)
4102b770:	10800517 	ldw	r2,20(r2)
4102b774:	e17ffc17 	ldw	r5,-16(fp)
4102b778:	e1bffd17 	ldw	r6,-12(fp)
4102b77c:	e13ffa17 	ldw	r4,-24(fp)
4102b780:	103ee83a 	callr	r2
4102b784:	e0bff915 	stw	r2,-28(fp)
4102b788:	e0bff917 	ldw	r2,-28(fp)
4102b78c:	1004403a 	cmpge	r2,r2,zero
4102b790:	1000071e 	bne	r2,zero,4102b7b0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
4102b794:	102b8000 	call	4102b800 <alt_get_errno>
4102b798:	e0fff917 	ldw	r3,-28(fp)
4102b79c:	00c7c83a 	sub	r3,zero,r3
4102b7a0:	10c00015 	stw	r3,0(r2)
          return -1;
4102b7a4:	00bfffc4 	movi	r2,-1
4102b7a8:	e0bffe15 	stw	r2,-8(fp)
4102b7ac:	00000e06 	br	4102b7e8 <read+0x108>
        }
        return rval;
4102b7b0:	e0bff917 	ldw	r2,-28(fp)
4102b7b4:	e0bffe15 	stw	r2,-8(fp)
4102b7b8:	00000b06 	br	4102b7e8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
4102b7bc:	102b8000 	call	4102b800 <alt_get_errno>
4102b7c0:	1007883a 	mov	r3,r2
4102b7c4:	00800344 	movi	r2,13
4102b7c8:	18800015 	stw	r2,0(r3)
4102b7cc:	00000406 	br	4102b7e0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
4102b7d0:	102b8000 	call	4102b800 <alt_get_errno>
4102b7d4:	1007883a 	mov	r3,r2
4102b7d8:	00801444 	movi	r2,81
4102b7dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
4102b7e0:	00bfffc4 	movi	r2,-1
4102b7e4:	e0bffe15 	stw	r2,-8(fp)
4102b7e8:	e0bffe17 	ldw	r2,-8(fp)
}
4102b7ec:	e037883a 	mov	sp,fp
4102b7f0:	dfc00117 	ldw	ra,4(sp)
4102b7f4:	df000017 	ldw	fp,0(sp)
4102b7f8:	dec00204 	addi	sp,sp,8
4102b7fc:	f800283a 	ret

4102b800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4102b800:	defffd04 	addi	sp,sp,-12
4102b804:	dfc00215 	stw	ra,8(sp)
4102b808:	df000115 	stw	fp,4(sp)
4102b80c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
4102b810:	009040f4 	movhi	r2,16643
4102b814:	10bee704 	addi	r2,r2,-1124
4102b818:	10800017 	ldw	r2,0(r2)
4102b81c:	1005003a 	cmpeq	r2,r2,zero
4102b820:	1000061e 	bne	r2,zero,4102b83c <alt_get_errno+0x3c>
4102b824:	009040f4 	movhi	r2,16643
4102b828:	10bee704 	addi	r2,r2,-1124
4102b82c:	10800017 	ldw	r2,0(r2)
4102b830:	103ee83a 	callr	r2
4102b834:	e0bfff15 	stw	r2,-4(fp)
4102b838:	00000306 	br	4102b848 <alt_get_errno+0x48>
4102b83c:	009040f4 	movhi	r2,16643
4102b840:	10858904 	addi	r2,r2,5668
4102b844:	e0bfff15 	stw	r2,-4(fp)
4102b848:	e0bfff17 	ldw	r2,-4(fp)
}
4102b84c:	e037883a 	mov	sp,fp
4102b850:	dfc00117 	ldw	ra,4(sp)
4102b854:	df000017 	ldw	fp,0(sp)
4102b858:	dec00204 	addi	sp,sp,8
4102b85c:	f800283a 	ret

4102b860 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
4102b860:	defffe04 	addi	sp,sp,-8
4102b864:	df000115 	stw	fp,4(sp)
4102b868:	df000104 	addi	fp,sp,4
4102b86c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
4102b870:	e0bfff17 	ldw	r2,-4(fp)
4102b874:	108000d0 	cmplti	r2,r2,3
4102b878:	10000d1e 	bne	r2,zero,4102b8b0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
4102b87c:	e0bfff17 	ldw	r2,-4(fp)
4102b880:	00d040f4 	movhi	r3,16643
4102b884:	18fa6404 	addi	r3,r3,-5744
4102b888:	10800324 	muli	r2,r2,12
4102b88c:	10c5883a 	add	r2,r2,r3
4102b890:	10800204 	addi	r2,r2,8
4102b894:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
4102b898:	e0bfff17 	ldw	r2,-4(fp)
4102b89c:	00d040f4 	movhi	r3,16643
4102b8a0:	18fa6404 	addi	r3,r3,-5744
4102b8a4:	10800324 	muli	r2,r2,12
4102b8a8:	10c5883a 	add	r2,r2,r3
4102b8ac:	10000015 	stw	zero,0(r2)
  }
}
4102b8b0:	e037883a 	mov	sp,fp
4102b8b4:	df000017 	ldw	fp,0(sp)
4102b8b8:	dec00104 	addi	sp,sp,4
4102b8bc:	f800283a 	ret

4102b8c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
4102b8c0:	defff804 	addi	sp,sp,-32
4102b8c4:	df000715 	stw	fp,28(sp)
4102b8c8:	df000704 	addi	fp,sp,28
4102b8cc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102b8d0:	0005303a 	rdctl	r2,status
4102b8d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4102b8d8:	e0fffb17 	ldw	r3,-20(fp)
4102b8dc:	00bfff84 	movi	r2,-2
4102b8e0:	1884703a 	and	r2,r3,r2
4102b8e4:	1001703a 	wrctl	status,r2
  
  return context;
4102b8e8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
4102b8ec:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
4102b8f0:	d0a00c17 	ldw	r2,-32720(gp)
4102b8f4:	10c000c4 	addi	r3,r2,3
4102b8f8:	00bfff04 	movi	r2,-4
4102b8fc:	1884703a 	and	r2,r3,r2
4102b900:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
4102b904:	d0e00c17 	ldw	r3,-32720(gp)
4102b908:	e0bffe17 	ldw	r2,-8(fp)
4102b90c:	1887883a 	add	r3,r3,r2
4102b910:	00904134 	movhi	r2,16644
4102b914:	10bd0004 	addi	r2,r2,-3072
4102b918:	10c0072e 	bgeu	r2,r3,4102b938 <sbrk+0x78>
4102b91c:	e0bffd17 	ldw	r2,-12(fp)
4102b920:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4102b924:	e0bffa17 	ldw	r2,-24(fp)
4102b928:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
4102b92c:	00bfffc4 	movi	r2,-1
4102b930:	e0bfff15 	stw	r2,-4(fp)
4102b934:	00000c06 	br	4102b968 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
4102b938:	d0a00c17 	ldw	r2,-32720(gp)
4102b93c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
4102b940:	d0e00c17 	ldw	r3,-32720(gp)
4102b944:	e0bffe17 	ldw	r2,-8(fp)
4102b948:	1885883a 	add	r2,r3,r2
4102b94c:	d0a00c15 	stw	r2,-32720(gp)
4102b950:	e0bffd17 	ldw	r2,-12(fp)
4102b954:	e0bff915 	stw	r2,-28(fp)
4102b958:	e0bff917 	ldw	r2,-28(fp)
4102b95c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
4102b960:	e0bffc17 	ldw	r2,-16(fp)
4102b964:	e0bfff15 	stw	r2,-4(fp)
4102b968:	e0bfff17 	ldw	r2,-4(fp)
} 
4102b96c:	e037883a 	mov	sp,fp
4102b970:	df000017 	ldw	fp,0(sp)
4102b974:	dec00104 	addi	sp,sp,4
4102b978:	f800283a 	ret

4102b97c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
4102b97c:	defffa04 	addi	sp,sp,-24
4102b980:	df000515 	stw	fp,20(sp)
4102b984:	df000504 	addi	fp,sp,20
4102b988:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102b98c:	0005303a 	rdctl	r2,status
4102b990:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4102b994:	e0fffd17 	ldw	r3,-12(fp)
4102b998:	00bfff84 	movi	r2,-2
4102b99c:	1884703a 	and	r2,r3,r2
4102b9a0:	1001703a 	wrctl	status,r2
  
  return context;
4102b9a4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
4102b9a8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
4102b9ac:	e0bfff17 	ldw	r2,-4(fp)
4102b9b0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
4102b9b4:	e0bffc17 	ldw	r2,-16(fp)
4102b9b8:	10c00017 	ldw	r3,0(r2)
4102b9bc:	e0bffc17 	ldw	r2,-16(fp)
4102b9c0:	10800117 	ldw	r2,4(r2)
4102b9c4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
4102b9c8:	e0bffc17 	ldw	r2,-16(fp)
4102b9cc:	10c00117 	ldw	r3,4(r2)
4102b9d0:	e0bffc17 	ldw	r2,-16(fp)
4102b9d4:	10800017 	ldw	r2,0(r2)
4102b9d8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
4102b9dc:	e0fffc17 	ldw	r3,-16(fp)
4102b9e0:	e0bffc17 	ldw	r2,-16(fp)
4102b9e4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
4102b9e8:	e0fffc17 	ldw	r3,-16(fp)
4102b9ec:	e0bffc17 	ldw	r2,-16(fp)
4102b9f0:	18800015 	stw	r2,0(r3)
4102b9f4:	e0bffe17 	ldw	r2,-8(fp)
4102b9f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4102b9fc:	e0bffb17 	ldw	r2,-20(fp)
4102ba00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
4102ba04:	e037883a 	mov	sp,fp
4102ba08:	df000017 	ldw	fp,0(sp)
4102ba0c:	dec00104 	addi	sp,sp,4
4102ba10:	f800283a 	ret

4102ba14 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
4102ba14:	defffb04 	addi	sp,sp,-20
4102ba18:	dfc00415 	stw	ra,16(sp)
4102ba1c:	df000315 	stw	fp,12(sp)
4102ba20:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
4102ba24:	d0a00d17 	ldw	r2,-32716(gp)
4102ba28:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
4102ba2c:	d0a6b217 	ldw	r2,-25912(gp)
4102ba30:	10800044 	addi	r2,r2,1
4102ba34:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
4102ba38:	00003106 	br	4102bb00 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
4102ba3c:	e0bffe17 	ldw	r2,-8(fp)
4102ba40:	10800017 	ldw	r2,0(r2)
4102ba44:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
4102ba48:	e0bffe17 	ldw	r2,-8(fp)
4102ba4c:	10800403 	ldbu	r2,16(r2)
4102ba50:	10803fcc 	andi	r2,r2,255
4102ba54:	1005003a 	cmpeq	r2,r2,zero
4102ba58:	1000051e 	bne	r2,zero,4102ba70 <alt_tick+0x5c>
4102ba5c:	d0a6b217 	ldw	r2,-25912(gp)
4102ba60:	1004c03a 	cmpne	r2,r2,zero
4102ba64:	1000021e 	bne	r2,zero,4102ba70 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
4102ba68:	e0bffe17 	ldw	r2,-8(fp)
4102ba6c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
4102ba70:	e0bffe17 	ldw	r2,-8(fp)
4102ba74:	10c00217 	ldw	r3,8(r2)
4102ba78:	d0a6b217 	ldw	r2,-25912(gp)
4102ba7c:	10c01e36 	bltu	r2,r3,4102baf8 <alt_tick+0xe4>
4102ba80:	e0bffe17 	ldw	r2,-8(fp)
4102ba84:	10800403 	ldbu	r2,16(r2)
4102ba88:	10803fcc 	andi	r2,r2,255
4102ba8c:	1004c03a 	cmpne	r2,r2,zero
4102ba90:	1000191e 	bne	r2,zero,4102baf8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
4102ba94:	e0bffe17 	ldw	r2,-8(fp)
4102ba98:	10c00317 	ldw	r3,12(r2)
4102ba9c:	e0bffe17 	ldw	r2,-8(fp)
4102baa0:	11000517 	ldw	r4,20(r2)
4102baa4:	183ee83a 	callr	r3
4102baa8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
4102baac:	e0bffd17 	ldw	r2,-12(fp)
4102bab0:	1004c03a 	cmpne	r2,r2,zero
4102bab4:	1000031e 	bne	r2,zero,4102bac4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
4102bab8:	e13ffe17 	ldw	r4,-8(fp)
4102babc:	102b97c0 	call	4102b97c <alt_alarm_stop>
4102bac0:	00000d06 	br	4102baf8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
4102bac4:	e0bffe17 	ldw	r2,-8(fp)
4102bac8:	10c00217 	ldw	r3,8(r2)
4102bacc:	e0bffd17 	ldw	r2,-12(fp)
4102bad0:	1887883a 	add	r3,r3,r2
4102bad4:	e0bffe17 	ldw	r2,-8(fp)
4102bad8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
4102badc:	e0bffe17 	ldw	r2,-8(fp)
4102bae0:	10c00217 	ldw	r3,8(r2)
4102bae4:	d0a6b217 	ldw	r2,-25912(gp)
4102bae8:	1880032e 	bgeu	r3,r2,4102baf8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
4102baec:	e0fffe17 	ldw	r3,-8(fp)
4102baf0:	00800044 	movi	r2,1
4102baf4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
4102baf8:	e0bfff17 	ldw	r2,-4(fp)
4102bafc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
4102bb00:	d0e00d04 	addi	r3,gp,-32716
4102bb04:	e0bffe17 	ldw	r2,-8(fp)
4102bb08:	10ffcc1e 	bne	r2,r3,4102ba3c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
4102bb0c:	e037883a 	mov	sp,fp
4102bb10:	dfc00117 	ldw	ra,4(sp)
4102bb14:	df000017 	ldw	fp,0(sp)
4102bb18:	dec00204 	addi	sp,sp,8
4102bb1c:	f800283a 	ret

4102bb20 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
4102bb20:	defffd04 	addi	sp,sp,-12
4102bb24:	dfc00215 	stw	ra,8(sp)
4102bb28:	df000115 	stw	fp,4(sp)
4102bb2c:	df000104 	addi	fp,sp,4
4102bb30:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
4102bb34:	e13fff17 	ldw	r4,-4(fp)
4102bb38:	102ca940 	call	4102ca94 <alt_busy_sleep>
}
4102bb3c:	e037883a 	mov	sp,fp
4102bb40:	dfc00117 	ldw	ra,4(sp)
4102bb44:	df000017 	ldw	fp,0(sp)
4102bb48:	dec00204 	addi	sp,sp,8
4102bb4c:	f800283a 	ret

4102bb50 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
4102bb50:	defff704 	addi	sp,sp,-36
4102bb54:	dfc00815 	stw	ra,32(sp)
4102bb58:	df000715 	stw	fp,28(sp)
4102bb5c:	df000704 	addi	fp,sp,28
4102bb60:	e13ffb15 	stw	r4,-20(fp)
4102bb64:	e17ffc15 	stw	r5,-16(fp)
4102bb68:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4102bb6c:	e0bffb17 	ldw	r2,-20(fp)
4102bb70:	1004803a 	cmplt	r2,r2,zero
4102bb74:	1000081e 	bne	r2,zero,4102bb98 <write+0x48>
4102bb78:	e0bffb17 	ldw	r2,-20(fp)
4102bb7c:	10800324 	muli	r2,r2,12
4102bb80:	1007883a 	mov	r3,r2
4102bb84:	009040f4 	movhi	r2,16643
4102bb88:	10ba6404 	addi	r2,r2,-5744
4102bb8c:	1887883a 	add	r3,r3,r2
4102bb90:	e0ffff15 	stw	r3,-4(fp)
4102bb94:	00000106 	br	4102bb9c <write+0x4c>
4102bb98:	e03fff15 	stw	zero,-4(fp)
4102bb9c:	e0bfff17 	ldw	r2,-4(fp)
4102bba0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
4102bba4:	e0bffa17 	ldw	r2,-24(fp)
4102bba8:	1005003a 	cmpeq	r2,r2,zero
4102bbac:	1000241e 	bne	r2,zero,4102bc40 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
4102bbb0:	e0bffa17 	ldw	r2,-24(fp)
4102bbb4:	10800217 	ldw	r2,8(r2)
4102bbb8:	108000cc 	andi	r2,r2,3
4102bbbc:	1005003a 	cmpeq	r2,r2,zero
4102bbc0:	10001a1e 	bne	r2,zero,4102bc2c <write+0xdc>
4102bbc4:	e0bffa17 	ldw	r2,-24(fp)
4102bbc8:	10800017 	ldw	r2,0(r2)
4102bbcc:	10800617 	ldw	r2,24(r2)
4102bbd0:	1005003a 	cmpeq	r2,r2,zero
4102bbd4:	1000151e 	bne	r2,zero,4102bc2c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
4102bbd8:	e0bffa17 	ldw	r2,-24(fp)
4102bbdc:	10800017 	ldw	r2,0(r2)
4102bbe0:	10800617 	ldw	r2,24(r2)
4102bbe4:	e17ffc17 	ldw	r5,-16(fp)
4102bbe8:	e1bffd17 	ldw	r6,-12(fp)
4102bbec:	e13ffa17 	ldw	r4,-24(fp)
4102bbf0:	103ee83a 	callr	r2
4102bbf4:	e0bff915 	stw	r2,-28(fp)
4102bbf8:	e0bff917 	ldw	r2,-28(fp)
4102bbfc:	1004403a 	cmpge	r2,r2,zero
4102bc00:	1000071e 	bne	r2,zero,4102bc20 <write+0xd0>
      {
        ALT_ERRNO = -rval;
4102bc04:	102bc700 	call	4102bc70 <alt_get_errno>
4102bc08:	e0fff917 	ldw	r3,-28(fp)
4102bc0c:	00c7c83a 	sub	r3,zero,r3
4102bc10:	10c00015 	stw	r3,0(r2)
        return -1;
4102bc14:	00bfffc4 	movi	r2,-1
4102bc18:	e0bffe15 	stw	r2,-8(fp)
4102bc1c:	00000e06 	br	4102bc58 <write+0x108>
      }
      return rval;
4102bc20:	e0bff917 	ldw	r2,-28(fp)
4102bc24:	e0bffe15 	stw	r2,-8(fp)
4102bc28:	00000b06 	br	4102bc58 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
4102bc2c:	102bc700 	call	4102bc70 <alt_get_errno>
4102bc30:	1007883a 	mov	r3,r2
4102bc34:	00800344 	movi	r2,13
4102bc38:	18800015 	stw	r2,0(r3)
4102bc3c:	00000406 	br	4102bc50 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
4102bc40:	102bc700 	call	4102bc70 <alt_get_errno>
4102bc44:	1007883a 	mov	r3,r2
4102bc48:	00801444 	movi	r2,81
4102bc4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
4102bc50:	00bfffc4 	movi	r2,-1
4102bc54:	e0bffe15 	stw	r2,-8(fp)
4102bc58:	e0bffe17 	ldw	r2,-8(fp)
}
4102bc5c:	e037883a 	mov	sp,fp
4102bc60:	dfc00117 	ldw	ra,4(sp)
4102bc64:	df000017 	ldw	fp,0(sp)
4102bc68:	dec00204 	addi	sp,sp,8
4102bc6c:	f800283a 	ret

4102bc70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4102bc70:	defffd04 	addi	sp,sp,-12
4102bc74:	dfc00215 	stw	ra,8(sp)
4102bc78:	df000115 	stw	fp,4(sp)
4102bc7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
4102bc80:	009040f4 	movhi	r2,16643
4102bc84:	10bee704 	addi	r2,r2,-1124
4102bc88:	10800017 	ldw	r2,0(r2)
4102bc8c:	1005003a 	cmpeq	r2,r2,zero
4102bc90:	1000061e 	bne	r2,zero,4102bcac <alt_get_errno+0x3c>
4102bc94:	009040f4 	movhi	r2,16643
4102bc98:	10bee704 	addi	r2,r2,-1124
4102bc9c:	10800017 	ldw	r2,0(r2)
4102bca0:	103ee83a 	callr	r2
4102bca4:	e0bfff15 	stw	r2,-4(fp)
4102bca8:	00000306 	br	4102bcb8 <alt_get_errno+0x48>
4102bcac:	009040f4 	movhi	r2,16643
4102bcb0:	10858904 	addi	r2,r2,5668
4102bcb4:	e0bfff15 	stw	r2,-4(fp)
4102bcb8:	e0bfff17 	ldw	r2,-4(fp)
}
4102bcbc:	e037883a 	mov	sp,fp
4102bcc0:	dfc00117 	ldw	ra,4(sp)
4102bcc4:	df000017 	ldw	fp,0(sp)
4102bcc8:	dec00204 	addi	sp,sp,8
4102bccc:	f800283a 	ret

4102bcd0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
4102bcd0:	defffd04 	addi	sp,sp,-12
4102bcd4:	dfc00215 	stw	ra,8(sp)
4102bcd8:	df000115 	stw	fp,4(sp)
4102bcdc:	df000104 	addi	fp,sp,4
4102bce0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
4102bce4:	102d4b80 	call	4102d4b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
4102bce8:	00800044 	movi	r2,1
4102bcec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
4102bcf0:	e037883a 	mov	sp,fp
4102bcf4:	dfc00117 	ldw	ra,4(sp)
4102bcf8:	df000017 	ldw	fp,0(sp)
4102bcfc:	dec00204 	addi	sp,sp,8
4102bd00:	f800283a 	ret

4102bd04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
4102bd04:	defffe04 	addi	sp,sp,-8
4102bd08:	dfc00115 	stw	ra,4(sp)
4102bd0c:	df000015 	stw	fp,0(sp)
4102bd10:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
4102bd14:	01100034 	movhi	r4,16384
4102bd18:	000b883a 	mov	r5,zero
4102bd1c:	01800044 	movi	r6,1
4102bd20:	01c0fa04 	movi	r7,1000
4102bd24:	102c8b00 	call	4102c8b0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
4102bd28:	011040f4 	movhi	r4,16643
4102bd2c:	213ace04 	addi	r4,r4,-5320
4102bd30:	000b883a 	mov	r5,zero
4102bd34:	000d883a 	mov	r6,zero
4102bd38:	102bedc0 	call	4102bedc <altera_avalon_jtag_uart_init>
4102bd3c:	011040f4 	movhi	r4,16643
4102bd40:	213ac404 	addi	r4,r4,-5360
4102bd44:	102bd5c0 	call	4102bd5c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
4102bd48:	e037883a 	mov	sp,fp
4102bd4c:	dfc00117 	ldw	ra,4(sp)
4102bd50:	df000017 	ldw	fp,0(sp)
4102bd54:	dec00204 	addi	sp,sp,8
4102bd58:	f800283a 	ret

4102bd5c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
4102bd5c:	defffd04 	addi	sp,sp,-12
4102bd60:	dfc00215 	stw	ra,8(sp)
4102bd64:	df000115 	stw	fp,4(sp)
4102bd68:	df000104 	addi	fp,sp,4
4102bd6c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
4102bd70:	e13fff17 	ldw	r4,-4(fp)
4102bd74:	015040f4 	movhi	r5,16643
4102bd78:	297ee404 	addi	r5,r5,-1136
4102bd7c:	102cbe00 	call	4102cbe0 <alt_dev_llist_insert>
}
4102bd80:	e037883a 	mov	sp,fp
4102bd84:	dfc00117 	ldw	ra,4(sp)
4102bd88:	df000017 	ldw	fp,0(sp)
4102bd8c:	dec00204 	addi	sp,sp,8
4102bd90:	f800283a 	ret

4102bd94 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
4102bd94:	defffa04 	addi	sp,sp,-24
4102bd98:	dfc00515 	stw	ra,20(sp)
4102bd9c:	df000415 	stw	fp,16(sp)
4102bda0:	df000404 	addi	fp,sp,16
4102bda4:	e13ffd15 	stw	r4,-12(fp)
4102bda8:	e17ffe15 	stw	r5,-8(fp)
4102bdac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
4102bdb0:	e0bffd17 	ldw	r2,-12(fp)
4102bdb4:	10800017 	ldw	r2,0(r2)
4102bdb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
4102bdbc:	e0bffc17 	ldw	r2,-16(fp)
4102bdc0:	11000a04 	addi	r4,r2,40
4102bdc4:	e0bffd17 	ldw	r2,-12(fp)
4102bdc8:	11c00217 	ldw	r7,8(r2)
4102bdcc:	e17ffe17 	ldw	r5,-8(fp)
4102bdd0:	e1bfff17 	ldw	r6,-4(fp)
4102bdd4:	102c3dc0 	call	4102c3dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
4102bdd8:	e037883a 	mov	sp,fp
4102bddc:	dfc00117 	ldw	ra,4(sp)
4102bde0:	df000017 	ldw	fp,0(sp)
4102bde4:	dec00204 	addi	sp,sp,8
4102bde8:	f800283a 	ret

4102bdec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
4102bdec:	defffa04 	addi	sp,sp,-24
4102bdf0:	dfc00515 	stw	ra,20(sp)
4102bdf4:	df000415 	stw	fp,16(sp)
4102bdf8:	df000404 	addi	fp,sp,16
4102bdfc:	e13ffd15 	stw	r4,-12(fp)
4102be00:	e17ffe15 	stw	r5,-8(fp)
4102be04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
4102be08:	e0bffd17 	ldw	r2,-12(fp)
4102be0c:	10800017 	ldw	r2,0(r2)
4102be10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
4102be14:	e0bffc17 	ldw	r2,-16(fp)
4102be18:	11000a04 	addi	r4,r2,40
4102be1c:	e0bffd17 	ldw	r2,-12(fp)
4102be20:	11c00217 	ldw	r7,8(r2)
4102be24:	e17ffe17 	ldw	r5,-8(fp)
4102be28:	e1bfff17 	ldw	r6,-4(fp)
4102be2c:	102c6000 	call	4102c600 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
4102be30:	e037883a 	mov	sp,fp
4102be34:	dfc00117 	ldw	ra,4(sp)
4102be38:	df000017 	ldw	fp,0(sp)
4102be3c:	dec00204 	addi	sp,sp,8
4102be40:	f800283a 	ret

4102be44 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
4102be44:	defffc04 	addi	sp,sp,-16
4102be48:	dfc00315 	stw	ra,12(sp)
4102be4c:	df000215 	stw	fp,8(sp)
4102be50:	df000204 	addi	fp,sp,8
4102be54:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
4102be58:	e0bfff17 	ldw	r2,-4(fp)
4102be5c:	10800017 	ldw	r2,0(r2)
4102be60:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
4102be64:	e0bffe17 	ldw	r2,-8(fp)
4102be68:	11000a04 	addi	r4,r2,40
4102be6c:	e0bfff17 	ldw	r2,-4(fp)
4102be70:	11400217 	ldw	r5,8(r2)
4102be74:	102c2740 	call	4102c274 <altera_avalon_jtag_uart_close>
}
4102be78:	e037883a 	mov	sp,fp
4102be7c:	dfc00117 	ldw	ra,4(sp)
4102be80:	df000017 	ldw	fp,0(sp)
4102be84:	dec00204 	addi	sp,sp,8
4102be88:	f800283a 	ret

4102be8c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
4102be8c:	defffa04 	addi	sp,sp,-24
4102be90:	dfc00515 	stw	ra,20(sp)
4102be94:	df000415 	stw	fp,16(sp)
4102be98:	df000404 	addi	fp,sp,16
4102be9c:	e13ffd15 	stw	r4,-12(fp)
4102bea0:	e17ffe15 	stw	r5,-8(fp)
4102bea4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
4102bea8:	e0bffd17 	ldw	r2,-12(fp)
4102beac:	10800017 	ldw	r2,0(r2)
4102beb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
4102beb4:	e0bffc17 	ldw	r2,-16(fp)
4102beb8:	11000a04 	addi	r4,r2,40
4102bebc:	e17ffe17 	ldw	r5,-8(fp)
4102bec0:	e1bfff17 	ldw	r6,-4(fp)
4102bec4:	102c2e80 	call	4102c2e8 <altera_avalon_jtag_uart_ioctl>
}
4102bec8:	e037883a 	mov	sp,fp
4102becc:	dfc00117 	ldw	ra,4(sp)
4102bed0:	df000017 	ldw	fp,0(sp)
4102bed4:	dec00204 	addi	sp,sp,8
4102bed8:	f800283a 	ret

4102bedc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
4102bedc:	defffa04 	addi	sp,sp,-24
4102bee0:	dfc00515 	stw	ra,20(sp)
4102bee4:	df000415 	stw	fp,16(sp)
4102bee8:	df000404 	addi	fp,sp,16
4102beec:	e13ffd15 	stw	r4,-12(fp)
4102bef0:	e17ffe15 	stw	r5,-8(fp)
4102bef4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4102bef8:	e0fffd17 	ldw	r3,-12(fp)
4102befc:	00800044 	movi	r2,1
4102bf00:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
4102bf04:	e0bffd17 	ldw	r2,-12(fp)
4102bf08:	10800017 	ldw	r2,0(r2)
4102bf0c:	11000104 	addi	r4,r2,4
4102bf10:	e0bffd17 	ldw	r2,-12(fp)
4102bf14:	10800817 	ldw	r2,32(r2)
4102bf18:	1007883a 	mov	r3,r2
4102bf1c:	2005883a 	mov	r2,r4
4102bf20:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
4102bf24:	e13ffe17 	ldw	r4,-8(fp)
4102bf28:	e17fff17 	ldw	r5,-4(fp)
4102bf2c:	d8000015 	stw	zero,0(sp)
4102bf30:	019040f4 	movhi	r6,16643
4102bf34:	31afe704 	addi	r6,r6,-16484
4102bf38:	e1fffd17 	ldw	r7,-12(fp)
4102bf3c:	102cdec0 	call	4102cdec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
4102bf40:	e0bffd17 	ldw	r2,-12(fp)
4102bf44:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
4102bf48:	e0bffd17 	ldw	r2,-12(fp)
4102bf4c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
4102bf50:	009040f4 	movhi	r2,16643
4102bf54:	10858d04 	addi	r2,r2,5684
4102bf58:	10800017 	ldw	r2,0(r2)
4102bf5c:	100b883a 	mov	r5,r2
4102bf60:	019040f4 	movhi	r6,16643
4102bf64:	31b07104 	addi	r6,r6,-15932
4102bf68:	e1fffd17 	ldw	r7,-12(fp)
4102bf6c:	102c9400 	call	4102c940 <alt_alarm_start>
4102bf70:	1004403a 	cmpge	r2,r2,zero
4102bf74:	1000041e 	bne	r2,zero,4102bf88 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
4102bf78:	e0fffd17 	ldw	r3,-12(fp)
4102bf7c:	00a00034 	movhi	r2,32768
4102bf80:	10bfffc4 	addi	r2,r2,-1
4102bf84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
4102bf88:	e037883a 	mov	sp,fp
4102bf8c:	dfc00117 	ldw	ra,4(sp)
4102bf90:	df000017 	ldw	fp,0(sp)
4102bf94:	dec00204 	addi	sp,sp,8
4102bf98:	f800283a 	ret

4102bf9c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
4102bf9c:	defff804 	addi	sp,sp,-32
4102bfa0:	df000715 	stw	fp,28(sp)
4102bfa4:	df000704 	addi	fp,sp,28
4102bfa8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
4102bfac:	e0bfff17 	ldw	r2,-4(fp)
4102bfb0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
4102bfb4:	e0bffe17 	ldw	r2,-8(fp)
4102bfb8:	10800017 	ldw	r2,0(r2)
4102bfbc:	e0bffd15 	stw	r2,-12(fp)
4102bfc0:	00000006 	br	4102bfc4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4102bfc4:	e0bffd17 	ldw	r2,-12(fp)
4102bfc8:	10800104 	addi	r2,r2,4
4102bfcc:	10800037 	ldwio	r2,0(r2)
4102bfd0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
4102bfd4:	e0bffc17 	ldw	r2,-16(fp)
4102bfd8:	1080c00c 	andi	r2,r2,768
4102bfdc:	1005003a 	cmpeq	r2,r2,zero
4102bfe0:	1000741e 	bne	r2,zero,4102c1b4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
4102bfe4:	e0bffc17 	ldw	r2,-16(fp)
4102bfe8:	1080400c 	andi	r2,r2,256
4102bfec:	1005003a 	cmpeq	r2,r2,zero
4102bff0:	1000351e 	bne	r2,zero,4102c0c8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
4102bff4:	00800074 	movhi	r2,1
4102bff8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4102bffc:	e0bffe17 	ldw	r2,-8(fp)
4102c000:	10800a17 	ldw	r2,40(r2)
4102c004:	10800044 	addi	r2,r2,1
4102c008:	1081ffcc 	andi	r2,r2,2047
4102c00c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
4102c010:	e0bffe17 	ldw	r2,-8(fp)
4102c014:	10c00b17 	ldw	r3,44(r2)
4102c018:	e0bffa17 	ldw	r2,-24(fp)
4102c01c:	18801626 	beq	r3,r2,4102c078 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
4102c020:	e0bffd17 	ldw	r2,-12(fp)
4102c024:	10800037 	ldwio	r2,0(r2)
4102c028:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
4102c02c:	e0bffb17 	ldw	r2,-20(fp)
4102c030:	10a0000c 	andi	r2,r2,32768
4102c034:	1005003a 	cmpeq	r2,r2,zero
4102c038:	10000f1e 	bne	r2,zero,4102c078 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
4102c03c:	e0bffe17 	ldw	r2,-8(fp)
4102c040:	10c00a17 	ldw	r3,40(r2)
4102c044:	e0bffb17 	ldw	r2,-20(fp)
4102c048:	1009883a 	mov	r4,r2
4102c04c:	e0bffe17 	ldw	r2,-8(fp)
4102c050:	1885883a 	add	r2,r3,r2
4102c054:	10800e04 	addi	r2,r2,56
4102c058:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4102c05c:	e0bffe17 	ldw	r2,-8(fp)
4102c060:	10800a17 	ldw	r2,40(r2)
4102c064:	10800044 	addi	r2,r2,1
4102c068:	10c1ffcc 	andi	r3,r2,2047
4102c06c:	e0bffe17 	ldw	r2,-8(fp)
4102c070:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
4102c074:	003fe106 	br	4102bffc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
4102c078:	e0bffb17 	ldw	r2,-20(fp)
4102c07c:	10bfffec 	andhi	r2,r2,65535
4102c080:	1005003a 	cmpeq	r2,r2,zero
4102c084:	1000101e 	bne	r2,zero,4102c0c8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4102c088:	e0bffe17 	ldw	r2,-8(fp)
4102c08c:	10c00817 	ldw	r3,32(r2)
4102c090:	00bfff84 	movi	r2,-2
4102c094:	1886703a 	and	r3,r3,r2
4102c098:	e0bffe17 	ldw	r2,-8(fp)
4102c09c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
4102c0a0:	e0bffd17 	ldw	r2,-12(fp)
4102c0a4:	11000104 	addi	r4,r2,4
4102c0a8:	e0bffe17 	ldw	r2,-8(fp)
4102c0ac:	10800817 	ldw	r2,32(r2)
4102c0b0:	1007883a 	mov	r3,r2
4102c0b4:	2005883a 	mov	r2,r4
4102c0b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4102c0bc:	e0bffd17 	ldw	r2,-12(fp)
4102c0c0:	10800104 	addi	r2,r2,4
4102c0c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
4102c0c8:	e0bffc17 	ldw	r2,-16(fp)
4102c0cc:	1080800c 	andi	r2,r2,512
4102c0d0:	1005003a 	cmpeq	r2,r2,zero
4102c0d4:	103fbb1e 	bne	r2,zero,4102bfc4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
4102c0d8:	e0bffc17 	ldw	r2,-16(fp)
4102c0dc:	10bfffec 	andhi	r2,r2,65535
4102c0e0:	1004d43a 	srli	r2,r2,16
4102c0e4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
4102c0e8:	00001506 	br	4102c140 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
4102c0ec:	e13ffd17 	ldw	r4,-12(fp)
4102c0f0:	e0bffe17 	ldw	r2,-8(fp)
4102c0f4:	10c00d17 	ldw	r3,52(r2)
4102c0f8:	e0bffe17 	ldw	r2,-8(fp)
4102c0fc:	1885883a 	add	r2,r3,r2
4102c100:	10820e04 	addi	r2,r2,2104
4102c104:	10800003 	ldbu	r2,0(r2)
4102c108:	10c03fcc 	andi	r3,r2,255
4102c10c:	18c0201c 	xori	r3,r3,128
4102c110:	18ffe004 	addi	r3,r3,-128
4102c114:	2005883a 	mov	r2,r4
4102c118:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4102c11c:	e0bffe17 	ldw	r2,-8(fp)
4102c120:	10800d17 	ldw	r2,52(r2)
4102c124:	10800044 	addi	r2,r2,1
4102c128:	10c1ffcc 	andi	r3,r2,2047
4102c12c:	e0bffe17 	ldw	r2,-8(fp)
4102c130:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
4102c134:	e0bff917 	ldw	r2,-28(fp)
4102c138:	10bfffc4 	addi	r2,r2,-1
4102c13c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
4102c140:	e0bff917 	ldw	r2,-28(fp)
4102c144:	1005003a 	cmpeq	r2,r2,zero
4102c148:	1000051e 	bne	r2,zero,4102c160 <altera_avalon_jtag_uart_irq+0x1c4>
4102c14c:	e0bffe17 	ldw	r2,-8(fp)
4102c150:	10c00d17 	ldw	r3,52(r2)
4102c154:	e0bffe17 	ldw	r2,-8(fp)
4102c158:	10800c17 	ldw	r2,48(r2)
4102c15c:	18bfe31e 	bne	r3,r2,4102c0ec <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
4102c160:	e0bff917 	ldw	r2,-28(fp)
4102c164:	1005003a 	cmpeq	r2,r2,zero
4102c168:	103f961e 	bne	r2,zero,4102bfc4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4102c16c:	e0bffe17 	ldw	r2,-8(fp)
4102c170:	10c00817 	ldw	r3,32(r2)
4102c174:	00bfff44 	movi	r2,-3
4102c178:	1886703a 	and	r3,r3,r2
4102c17c:	e0bffe17 	ldw	r2,-8(fp)
4102c180:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4102c184:	e0bffe17 	ldw	r2,-8(fp)
4102c188:	10800017 	ldw	r2,0(r2)
4102c18c:	11000104 	addi	r4,r2,4
4102c190:	e0bffe17 	ldw	r2,-8(fp)
4102c194:	10800817 	ldw	r2,32(r2)
4102c198:	1007883a 	mov	r3,r2
4102c19c:	2005883a 	mov	r2,r4
4102c1a0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4102c1a4:	e0bffd17 	ldw	r2,-12(fp)
4102c1a8:	10800104 	addi	r2,r2,4
4102c1ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
4102c1b0:	003f8406 	br	4102bfc4 <altera_avalon_jtag_uart_irq+0x28>
}
4102c1b4:	e037883a 	mov	sp,fp
4102c1b8:	df000017 	ldw	fp,0(sp)
4102c1bc:	dec00104 	addi	sp,sp,4
4102c1c0:	f800283a 	ret

4102c1c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
4102c1c4:	defffc04 	addi	sp,sp,-16
4102c1c8:	df000315 	stw	fp,12(sp)
4102c1cc:	df000304 	addi	fp,sp,12
4102c1d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
4102c1d4:	e0bfff17 	ldw	r2,-4(fp)
4102c1d8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
4102c1dc:	e0bffe17 	ldw	r2,-8(fp)
4102c1e0:	10800017 	ldw	r2,0(r2)
4102c1e4:	10800104 	addi	r2,r2,4
4102c1e8:	10800037 	ldwio	r2,0(r2)
4102c1ec:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
4102c1f0:	e0bffd17 	ldw	r2,-12(fp)
4102c1f4:	1081000c 	andi	r2,r2,1024
4102c1f8:	1005003a 	cmpeq	r2,r2,zero
4102c1fc:	10000c1e 	bne	r2,zero,4102c230 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
4102c200:	e0bffe17 	ldw	r2,-8(fp)
4102c204:	10800017 	ldw	r2,0(r2)
4102c208:	11000104 	addi	r4,r2,4
4102c20c:	e0bffe17 	ldw	r2,-8(fp)
4102c210:	10800817 	ldw	r2,32(r2)
4102c214:	10810014 	ori	r2,r2,1024
4102c218:	1007883a 	mov	r3,r2
4102c21c:	2005883a 	mov	r2,r4
4102c220:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
4102c224:	e0bffe17 	ldw	r2,-8(fp)
4102c228:	10000915 	stw	zero,36(r2)
4102c22c:	00000a06 	br	4102c258 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
4102c230:	e0bffe17 	ldw	r2,-8(fp)
4102c234:	10c00917 	ldw	r3,36(r2)
4102c238:	00a00034 	movhi	r2,32768
4102c23c:	10bfff04 	addi	r2,r2,-4
4102c240:	10c00536 	bltu	r2,r3,4102c258 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
4102c244:	e0bffe17 	ldw	r2,-8(fp)
4102c248:	10800917 	ldw	r2,36(r2)
4102c24c:	10c00044 	addi	r3,r2,1
4102c250:	e0bffe17 	ldw	r2,-8(fp)
4102c254:	10c00915 	stw	r3,36(r2)
4102c258:	009040f4 	movhi	r2,16643
4102c25c:	10858d04 	addi	r2,r2,5684
4102c260:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
4102c264:	e037883a 	mov	sp,fp
4102c268:	df000017 	ldw	fp,0(sp)
4102c26c:	dec00104 	addi	sp,sp,4
4102c270:	f800283a 	ret

4102c274 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
4102c274:	defffc04 	addi	sp,sp,-16
4102c278:	df000315 	stw	fp,12(sp)
4102c27c:	df000304 	addi	fp,sp,12
4102c280:	e13ffd15 	stw	r4,-12(fp)
4102c284:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
4102c288:	00000706 	br	4102c2a8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
4102c28c:	e0bffe17 	ldw	r2,-8(fp)
4102c290:	1090000c 	andi	r2,r2,16384
4102c294:	1005003a 	cmpeq	r2,r2,zero
4102c298:	1000031e 	bne	r2,zero,4102c2a8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
4102c29c:	00bffd44 	movi	r2,-11
4102c2a0:	e0bfff15 	stw	r2,-4(fp)
4102c2a4:	00000b06 	br	4102c2d4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
4102c2a8:	e0bffd17 	ldw	r2,-12(fp)
4102c2ac:	10c00d17 	ldw	r3,52(r2)
4102c2b0:	e0bffd17 	ldw	r2,-12(fp)
4102c2b4:	10800c17 	ldw	r2,48(r2)
4102c2b8:	18800526 	beq	r3,r2,4102c2d0 <altera_avalon_jtag_uart_close+0x5c>
4102c2bc:	e0bffd17 	ldw	r2,-12(fp)
4102c2c0:	10c00917 	ldw	r3,36(r2)
4102c2c4:	e0bffd17 	ldw	r2,-12(fp)
4102c2c8:	10800117 	ldw	r2,4(r2)
4102c2cc:	18bfef36 	bltu	r3,r2,4102c28c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
4102c2d0:	e03fff15 	stw	zero,-4(fp)
4102c2d4:	e0bfff17 	ldw	r2,-4(fp)
}
4102c2d8:	e037883a 	mov	sp,fp
4102c2dc:	df000017 	ldw	fp,0(sp)
4102c2e0:	dec00104 	addi	sp,sp,4
4102c2e4:	f800283a 	ret

4102c2e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
4102c2e8:	defff804 	addi	sp,sp,-32
4102c2ec:	df000715 	stw	fp,28(sp)
4102c2f0:	df000704 	addi	fp,sp,28
4102c2f4:	e13ffb15 	stw	r4,-20(fp)
4102c2f8:	e17ffc15 	stw	r5,-16(fp)
4102c2fc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
4102c300:	00bff9c4 	movi	r2,-25
4102c304:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
4102c308:	e0bffc17 	ldw	r2,-16(fp)
4102c30c:	e0bfff15 	stw	r2,-4(fp)
4102c310:	e0ffff17 	ldw	r3,-4(fp)
4102c314:	189a8060 	cmpeqi	r2,r3,27137
4102c318:	1000041e 	bne	r2,zero,4102c32c <altera_avalon_jtag_uart_ioctl+0x44>
4102c31c:	e0ffff17 	ldw	r3,-4(fp)
4102c320:	189a80a0 	cmpeqi	r2,r3,27138
4102c324:	10001b1e 	bne	r2,zero,4102c394 <altera_avalon_jtag_uart_ioctl+0xac>
4102c328:	00002706 	br	4102c3c8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
4102c32c:	e0bffb17 	ldw	r2,-20(fp)
4102c330:	10c00117 	ldw	r3,4(r2)
4102c334:	00a00034 	movhi	r2,32768
4102c338:	10bfffc4 	addi	r2,r2,-1
4102c33c:	18802226 	beq	r3,r2,4102c3c8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
4102c340:	e0bffd17 	ldw	r2,-12(fp)
4102c344:	10800017 	ldw	r2,0(r2)
4102c348:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
4102c34c:	e0bff917 	ldw	r2,-28(fp)
4102c350:	10800090 	cmplti	r2,r2,2
4102c354:	1000071e 	bne	r2,zero,4102c374 <altera_avalon_jtag_uart_ioctl+0x8c>
4102c358:	e0fff917 	ldw	r3,-28(fp)
4102c35c:	00a00034 	movhi	r2,32768
4102c360:	10bfffc4 	addi	r2,r2,-1
4102c364:	18800326 	beq	r3,r2,4102c374 <altera_avalon_jtag_uart_ioctl+0x8c>
4102c368:	e0bff917 	ldw	r2,-28(fp)
4102c36c:	e0bffe15 	stw	r2,-8(fp)
4102c370:	00000306 	br	4102c380 <altera_avalon_jtag_uart_ioctl+0x98>
4102c374:	00e00034 	movhi	r3,32768
4102c378:	18ffff84 	addi	r3,r3,-2
4102c37c:	e0fffe15 	stw	r3,-8(fp)
4102c380:	e0bffb17 	ldw	r2,-20(fp)
4102c384:	e0fffe17 	ldw	r3,-8(fp)
4102c388:	10c00115 	stw	r3,4(r2)
      rc = 0;
4102c38c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
4102c390:	00000d06 	br	4102c3c8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
4102c394:	e0bffb17 	ldw	r2,-20(fp)
4102c398:	10c00117 	ldw	r3,4(r2)
4102c39c:	00a00034 	movhi	r2,32768
4102c3a0:	10bfffc4 	addi	r2,r2,-1
4102c3a4:	18800826 	beq	r3,r2,4102c3c8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
4102c3a8:	e13ffd17 	ldw	r4,-12(fp)
4102c3ac:	e0bffb17 	ldw	r2,-20(fp)
4102c3b0:	10c00917 	ldw	r3,36(r2)
4102c3b4:	e0bffb17 	ldw	r2,-20(fp)
4102c3b8:	10800117 	ldw	r2,4(r2)
4102c3bc:	1885803a 	cmpltu	r2,r3,r2
4102c3c0:	20800015 	stw	r2,0(r4)
      rc = 0;
4102c3c4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
4102c3c8:	e0bffa17 	ldw	r2,-24(fp)
}
4102c3cc:	e037883a 	mov	sp,fp
4102c3d0:	df000017 	ldw	fp,0(sp)
4102c3d4:	dec00104 	addi	sp,sp,4
4102c3d8:	f800283a 	ret

4102c3dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
4102c3dc:	defff204 	addi	sp,sp,-56
4102c3e0:	dfc00d15 	stw	ra,52(sp)
4102c3e4:	df000c15 	stw	fp,48(sp)
4102c3e8:	df000c04 	addi	fp,sp,48
4102c3ec:	e13ffb15 	stw	r4,-20(fp)
4102c3f0:	e17ffc15 	stw	r5,-16(fp)
4102c3f4:	e1bffd15 	stw	r6,-12(fp)
4102c3f8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
4102c3fc:	e0bffc17 	ldw	r2,-16(fp)
4102c400:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
4102c404:	00004806 	br	4102c528 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
4102c408:	e0bffb17 	ldw	r2,-20(fp)
4102c40c:	10800a17 	ldw	r2,40(r2)
4102c410:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
4102c414:	e0bffb17 	ldw	r2,-20(fp)
4102c418:	10800b17 	ldw	r2,44(r2)
4102c41c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
4102c420:	e0fff717 	ldw	r3,-36(fp)
4102c424:	e0bff617 	ldw	r2,-40(fp)
4102c428:	18800536 	bltu	r3,r2,4102c440 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
4102c42c:	e0bff717 	ldw	r2,-36(fp)
4102c430:	e0fff617 	ldw	r3,-40(fp)
4102c434:	10c5c83a 	sub	r2,r2,r3
4102c438:	e0bff815 	stw	r2,-32(fp)
4102c43c:	00000406 	br	4102c450 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
4102c440:	00820004 	movi	r2,2048
4102c444:	e0fff617 	ldw	r3,-40(fp)
4102c448:	10c5c83a 	sub	r2,r2,r3
4102c44c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
4102c450:	e0bff817 	ldw	r2,-32(fp)
4102c454:	1005003a 	cmpeq	r2,r2,zero
4102c458:	10001f1e 	bne	r2,zero,4102c4d8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
4102c45c:	e0fffd17 	ldw	r3,-12(fp)
4102c460:	e0bff817 	ldw	r2,-32(fp)
4102c464:	1880022e 	bgeu	r3,r2,4102c470 <altera_avalon_jtag_uart_read+0x94>
        n = space;
4102c468:	e0bffd17 	ldw	r2,-12(fp)
4102c46c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
4102c470:	e0bffb17 	ldw	r2,-20(fp)
4102c474:	10c00e04 	addi	r3,r2,56
4102c478:	e0bff617 	ldw	r2,-40(fp)
4102c47c:	1887883a 	add	r3,r3,r2
4102c480:	e0bffa17 	ldw	r2,-24(fp)
4102c484:	1009883a 	mov	r4,r2
4102c488:	180b883a 	mov	r5,r3
4102c48c:	e1bff817 	ldw	r6,-32(fp)
4102c490:	1021ac00 	call	41021ac0 <memcpy>
      ptr   += n;
4102c494:	e0fff817 	ldw	r3,-32(fp)
4102c498:	e0bffa17 	ldw	r2,-24(fp)
4102c49c:	10c5883a 	add	r2,r2,r3
4102c4a0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
4102c4a4:	e0fffd17 	ldw	r3,-12(fp)
4102c4a8:	e0bff817 	ldw	r2,-32(fp)
4102c4ac:	1885c83a 	sub	r2,r3,r2
4102c4b0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4102c4b4:	e0fff617 	ldw	r3,-40(fp)
4102c4b8:	e0bff817 	ldw	r2,-32(fp)
4102c4bc:	1885883a 	add	r2,r3,r2
4102c4c0:	10c1ffcc 	andi	r3,r2,2047
4102c4c4:	e0bffb17 	ldw	r2,-20(fp)
4102c4c8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
4102c4cc:	e0bffd17 	ldw	r2,-12(fp)
4102c4d0:	10800048 	cmpgei	r2,r2,1
4102c4d4:	103fcc1e 	bne	r2,zero,4102c408 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
4102c4d8:	e0fffa17 	ldw	r3,-24(fp)
4102c4dc:	e0bffc17 	ldw	r2,-16(fp)
4102c4e0:	1880141e 	bne	r3,r2,4102c534 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
4102c4e4:	e0bffe17 	ldw	r2,-8(fp)
4102c4e8:	1090000c 	andi	r2,r2,16384
4102c4ec:	1004c03a 	cmpne	r2,r2,zero
4102c4f0:	1000101e 	bne	r2,zero,4102c534 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
4102c4f4:	e0bffb17 	ldw	r2,-20(fp)
4102c4f8:	10c00a17 	ldw	r3,40(r2)
4102c4fc:	e0bff717 	ldw	r2,-36(fp)
4102c500:	1880051e 	bne	r3,r2,4102c518 <altera_avalon_jtag_uart_read+0x13c>
4102c504:	e0bffb17 	ldw	r2,-20(fp)
4102c508:	10c00917 	ldw	r3,36(r2)
4102c50c:	e0bffb17 	ldw	r2,-20(fp)
4102c510:	10800117 	ldw	r2,4(r2)
4102c514:	18bff736 	bltu	r3,r2,4102c4f4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
4102c518:	e0bffb17 	ldw	r2,-20(fp)
4102c51c:	10c00a17 	ldw	r3,40(r2)
4102c520:	e0bff717 	ldw	r2,-36(fp)
4102c524:	18800326 	beq	r3,r2,4102c534 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
4102c528:	e0bffd17 	ldw	r2,-12(fp)
4102c52c:	10800048 	cmpgei	r2,r2,1
4102c530:	103fb51e 	bne	r2,zero,4102c408 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
4102c534:	e0fffa17 	ldw	r3,-24(fp)
4102c538:	e0bffc17 	ldw	r2,-16(fp)
4102c53c:	18801926 	beq	r3,r2,4102c5a4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102c540:	0005303a 	rdctl	r2,status
4102c544:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4102c548:	e0fff517 	ldw	r3,-44(fp)
4102c54c:	00bfff84 	movi	r2,-2
4102c550:	1884703a 	and	r2,r3,r2
4102c554:	1001703a 	wrctl	status,r2
  
  return context;
4102c558:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
4102c55c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4102c560:	e0bffb17 	ldw	r2,-20(fp)
4102c564:	10800817 	ldw	r2,32(r2)
4102c568:	10c00054 	ori	r3,r2,1
4102c56c:	e0bffb17 	ldw	r2,-20(fp)
4102c570:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4102c574:	e0bffb17 	ldw	r2,-20(fp)
4102c578:	10800017 	ldw	r2,0(r2)
4102c57c:	11000104 	addi	r4,r2,4
4102c580:	e0bffb17 	ldw	r2,-20(fp)
4102c584:	10800817 	ldw	r2,32(r2)
4102c588:	1007883a 	mov	r3,r2
4102c58c:	2005883a 	mov	r2,r4
4102c590:	10c00035 	stwio	r3,0(r2)
4102c594:	e0bff917 	ldw	r2,-28(fp)
4102c598:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4102c59c:	e0bff417 	ldw	r2,-48(fp)
4102c5a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
4102c5a4:	e0fffa17 	ldw	r3,-24(fp)
4102c5a8:	e0bffc17 	ldw	r2,-16(fp)
4102c5ac:	18800526 	beq	r3,r2,4102c5c4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
4102c5b0:	e0fffa17 	ldw	r3,-24(fp)
4102c5b4:	e0bffc17 	ldw	r2,-16(fp)
4102c5b8:	1887c83a 	sub	r3,r3,r2
4102c5bc:	e0ffff15 	stw	r3,-4(fp)
4102c5c0:	00000906 	br	4102c5e8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
4102c5c4:	e0bffe17 	ldw	r2,-8(fp)
4102c5c8:	1090000c 	andi	r2,r2,16384
4102c5cc:	1005003a 	cmpeq	r2,r2,zero
4102c5d0:	1000031e 	bne	r2,zero,4102c5e0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
4102c5d4:	00bffd44 	movi	r2,-11
4102c5d8:	e0bfff15 	stw	r2,-4(fp)
4102c5dc:	00000206 	br	4102c5e8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
4102c5e0:	00bffec4 	movi	r2,-5
4102c5e4:	e0bfff15 	stw	r2,-4(fp)
4102c5e8:	e0bfff17 	ldw	r2,-4(fp)
}
4102c5ec:	e037883a 	mov	sp,fp
4102c5f0:	dfc00117 	ldw	ra,4(sp)
4102c5f4:	df000017 	ldw	fp,0(sp)
4102c5f8:	dec00204 	addi	sp,sp,8
4102c5fc:	f800283a 	ret

4102c600 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
4102c600:	defff204 	addi	sp,sp,-56
4102c604:	dfc00d15 	stw	ra,52(sp)
4102c608:	df000c15 	stw	fp,48(sp)
4102c60c:	df000c04 	addi	fp,sp,48
4102c610:	e13ffb15 	stw	r4,-20(fp)
4102c614:	e17ffc15 	stw	r5,-16(fp)
4102c618:	e1bffd15 	stw	r6,-12(fp)
4102c61c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
4102c620:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
4102c624:	e0bffc17 	ldw	r2,-16(fp)
4102c628:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
4102c62c:	00003a06 	br	4102c718 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
4102c630:	e0bffb17 	ldw	r2,-20(fp)
4102c634:	10800c17 	ldw	r2,48(r2)
4102c638:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
4102c63c:	e0bffb17 	ldw	r2,-20(fp)
4102c640:	10800d17 	ldw	r2,52(r2)
4102c644:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
4102c648:	e0fffa17 	ldw	r3,-24(fp)
4102c64c:	e0bff917 	ldw	r2,-28(fp)
4102c650:	1880062e 	bgeu	r3,r2,4102c66c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
4102c654:	e0fff917 	ldw	r3,-28(fp)
4102c658:	e0bffa17 	ldw	r2,-24(fp)
4102c65c:	1885c83a 	sub	r2,r3,r2
4102c660:	10bfffc4 	addi	r2,r2,-1
4102c664:	e0bff815 	stw	r2,-32(fp)
4102c668:	00000c06 	br	4102c69c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
4102c66c:	e0bff917 	ldw	r2,-28(fp)
4102c670:	1005003a 	cmpeq	r2,r2,zero
4102c674:	1000051e 	bne	r2,zero,4102c68c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
4102c678:	00820004 	movi	r2,2048
4102c67c:	e0fffa17 	ldw	r3,-24(fp)
4102c680:	10c5c83a 	sub	r2,r2,r3
4102c684:	e0bff815 	stw	r2,-32(fp)
4102c688:	00000406 	br	4102c69c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
4102c68c:	0081ffc4 	movi	r2,2047
4102c690:	e0fffa17 	ldw	r3,-24(fp)
4102c694:	10c5c83a 	sub	r2,r2,r3
4102c698:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
4102c69c:	e0bff817 	ldw	r2,-32(fp)
4102c6a0:	1005003a 	cmpeq	r2,r2,zero
4102c6a4:	10001f1e 	bne	r2,zero,4102c724 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
4102c6a8:	e0fffd17 	ldw	r3,-12(fp)
4102c6ac:	e0bff817 	ldw	r2,-32(fp)
4102c6b0:	1880022e 	bgeu	r3,r2,4102c6bc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
4102c6b4:	e0bffd17 	ldw	r2,-12(fp)
4102c6b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
4102c6bc:	e0bffb17 	ldw	r2,-20(fp)
4102c6c0:	10c20e04 	addi	r3,r2,2104
4102c6c4:	e0bffa17 	ldw	r2,-24(fp)
4102c6c8:	1885883a 	add	r2,r3,r2
4102c6cc:	e0fffc17 	ldw	r3,-16(fp)
4102c6d0:	1009883a 	mov	r4,r2
4102c6d4:	180b883a 	mov	r5,r3
4102c6d8:	e1bff817 	ldw	r6,-32(fp)
4102c6dc:	1021ac00 	call	41021ac0 <memcpy>
      ptr   += n;
4102c6e0:	e0fff817 	ldw	r3,-32(fp)
4102c6e4:	e0bffc17 	ldw	r2,-16(fp)
4102c6e8:	10c5883a 	add	r2,r2,r3
4102c6ec:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
4102c6f0:	e0fffd17 	ldw	r3,-12(fp)
4102c6f4:	e0bff817 	ldw	r2,-32(fp)
4102c6f8:	1885c83a 	sub	r2,r3,r2
4102c6fc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4102c700:	e0fffa17 	ldw	r3,-24(fp)
4102c704:	e0bff817 	ldw	r2,-32(fp)
4102c708:	1885883a 	add	r2,r3,r2
4102c70c:	10c1ffcc 	andi	r3,r2,2047
4102c710:	e0bffb17 	ldw	r2,-20(fp)
4102c714:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
4102c718:	e0bffd17 	ldw	r2,-12(fp)
4102c71c:	10800048 	cmpgei	r2,r2,1
4102c720:	103fc31e 	bne	r2,zero,4102c630 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102c724:	0005303a 	rdctl	r2,status
4102c728:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4102c72c:	e0fff517 	ldw	r3,-44(fp)
4102c730:	00bfff84 	movi	r2,-2
4102c734:	1884703a 	and	r2,r3,r2
4102c738:	1001703a 	wrctl	status,r2
  
  return context;
4102c73c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
4102c740:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4102c744:	e0bffb17 	ldw	r2,-20(fp)
4102c748:	10800817 	ldw	r2,32(r2)
4102c74c:	10c00094 	ori	r3,r2,2
4102c750:	e0bffb17 	ldw	r2,-20(fp)
4102c754:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4102c758:	e0bffb17 	ldw	r2,-20(fp)
4102c75c:	10800017 	ldw	r2,0(r2)
4102c760:	11000104 	addi	r4,r2,4
4102c764:	e0bffb17 	ldw	r2,-20(fp)
4102c768:	10800817 	ldw	r2,32(r2)
4102c76c:	1007883a 	mov	r3,r2
4102c770:	2005883a 	mov	r2,r4
4102c774:	10c00035 	stwio	r3,0(r2)
4102c778:	e0bff717 	ldw	r2,-36(fp)
4102c77c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4102c780:	e0bff417 	ldw	r2,-48(fp)
4102c784:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
4102c788:	e0bffd17 	ldw	r2,-12(fp)
4102c78c:	10800050 	cmplti	r2,r2,1
4102c790:	1000111e 	bne	r2,zero,4102c7d8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
4102c794:	e0bffe17 	ldw	r2,-8(fp)
4102c798:	1090000c 	andi	r2,r2,16384
4102c79c:	1004c03a 	cmpne	r2,r2,zero
4102c7a0:	1000101e 	bne	r2,zero,4102c7e4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
4102c7a4:	e0bffb17 	ldw	r2,-20(fp)
4102c7a8:	10c00d17 	ldw	r3,52(r2)
4102c7ac:	e0bff917 	ldw	r2,-28(fp)
4102c7b0:	1880051e 	bne	r3,r2,4102c7c8 <altera_avalon_jtag_uart_write+0x1c8>
4102c7b4:	e0bffb17 	ldw	r2,-20(fp)
4102c7b8:	10c00917 	ldw	r3,36(r2)
4102c7bc:	e0bffb17 	ldw	r2,-20(fp)
4102c7c0:	10800117 	ldw	r2,4(r2)
4102c7c4:	18bff736 	bltu	r3,r2,4102c7a4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
4102c7c8:	e0bffb17 	ldw	r2,-20(fp)
4102c7cc:	10c00d17 	ldw	r3,52(r2)
4102c7d0:	e0bff917 	ldw	r2,-28(fp)
4102c7d4:	18800326 	beq	r3,r2,4102c7e4 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
4102c7d8:	e0bffd17 	ldw	r2,-12(fp)
4102c7dc:	10800048 	cmpgei	r2,r2,1
4102c7e0:	103fcd1e 	bne	r2,zero,4102c718 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
4102c7e4:	e0fffc17 	ldw	r3,-16(fp)
4102c7e8:	e0bff617 	ldw	r2,-40(fp)
4102c7ec:	18800526 	beq	r3,r2,4102c804 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
4102c7f0:	e0fffc17 	ldw	r3,-16(fp)
4102c7f4:	e0bff617 	ldw	r2,-40(fp)
4102c7f8:	1887c83a 	sub	r3,r3,r2
4102c7fc:	e0ffff15 	stw	r3,-4(fp)
4102c800:	00000906 	br	4102c828 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
4102c804:	e0bffe17 	ldw	r2,-8(fp)
4102c808:	1090000c 	andi	r2,r2,16384
4102c80c:	1005003a 	cmpeq	r2,r2,zero
4102c810:	1000031e 	bne	r2,zero,4102c820 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
4102c814:	00bffd44 	movi	r2,-11
4102c818:	e0bfff15 	stw	r2,-4(fp)
4102c81c:	00000206 	br	4102c828 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
4102c820:	00bffec4 	movi	r2,-5
4102c824:	e0bfff15 	stw	r2,-4(fp)
4102c828:	e0bfff17 	ldw	r2,-4(fp)
}
4102c82c:	e037883a 	mov	sp,fp
4102c830:	dfc00117 	ldw	ra,4(sp)
4102c834:	df000017 	ldw	fp,0(sp)
4102c838:	dec00204 	addi	sp,sp,8
4102c83c:	f800283a 	ret

4102c840 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
4102c840:	defffa04 	addi	sp,sp,-24
4102c844:	dfc00515 	stw	ra,20(sp)
4102c848:	df000415 	stw	fp,16(sp)
4102c84c:	df000404 	addi	fp,sp,16
4102c850:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
4102c854:	e0bfff17 	ldw	r2,-4(fp)
4102c858:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
4102c85c:	e0bfff17 	ldw	r2,-4(fp)
4102c860:	10800104 	addi	r2,r2,4
4102c864:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102c868:	0005303a 	rdctl	r2,status
4102c86c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4102c870:	e0fffd17 	ldw	r3,-12(fp)
4102c874:	00bfff84 	movi	r2,-2
4102c878:	1884703a 	and	r2,r3,r2
4102c87c:	1001703a 	wrctl	status,r2
  
  return context;
4102c880:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
4102c884:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
4102c888:	102ba140 	call	4102ba14 <alt_tick>
4102c88c:	e0bffe17 	ldw	r2,-8(fp)
4102c890:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4102c894:	e0bffc17 	ldw	r2,-16(fp)
4102c898:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
4102c89c:	e037883a 	mov	sp,fp
4102c8a0:	dfc00117 	ldw	ra,4(sp)
4102c8a4:	df000017 	ldw	fp,0(sp)
4102c8a8:	dec00204 	addi	sp,sp,8
4102c8ac:	f800283a 	ret

4102c8b0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
4102c8b0:	defff804 	addi	sp,sp,-32
4102c8b4:	dfc00715 	stw	ra,28(sp)
4102c8b8:	df000615 	stw	fp,24(sp)
4102c8bc:	df000604 	addi	fp,sp,24
4102c8c0:	e13ffc15 	stw	r4,-16(fp)
4102c8c4:	e17ffd15 	stw	r5,-12(fp)
4102c8c8:	e1bffe15 	stw	r6,-8(fp)
4102c8cc:	e1ffff15 	stw	r7,-4(fp)
4102c8d0:	e0bfff17 	ldw	r2,-4(fp)
4102c8d4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
4102c8d8:	009040f4 	movhi	r2,16643
4102c8dc:	10858d04 	addi	r2,r2,5684
4102c8e0:	10800017 	ldw	r2,0(r2)
4102c8e4:	1004c03a 	cmpne	r2,r2,zero
4102c8e8:	1000041e 	bne	r2,zero,4102c8fc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
4102c8ec:	00d040f4 	movhi	r3,16643
4102c8f0:	18c58d04 	addi	r3,r3,5684
4102c8f4:	e0bffb17 	ldw	r2,-20(fp)
4102c8f8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
4102c8fc:	e0bffc17 	ldw	r2,-16(fp)
4102c900:	10800104 	addi	r2,r2,4
4102c904:	1007883a 	mov	r3,r2
4102c908:	008001c4 	movi	r2,7
4102c90c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
4102c910:	d8000015 	stw	zero,0(sp)
4102c914:	e13ffd17 	ldw	r4,-12(fp)
4102c918:	e17ffe17 	ldw	r5,-8(fp)
4102c91c:	019040f4 	movhi	r6,16643
4102c920:	31b21004 	addi	r6,r6,-14272
4102c924:	e1fffc17 	ldw	r7,-16(fp)
4102c928:	102cdec0 	call	4102cdec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
4102c92c:	e037883a 	mov	sp,fp
4102c930:	dfc00117 	ldw	ra,4(sp)
4102c934:	df000017 	ldw	fp,0(sp)
4102c938:	dec00204 	addi	sp,sp,8
4102c93c:	f800283a 	ret

4102c940 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
4102c940:	defff404 	addi	sp,sp,-48
4102c944:	df000b15 	stw	fp,44(sp)
4102c948:	df000b04 	addi	fp,sp,44
4102c94c:	e13ffb15 	stw	r4,-20(fp)
4102c950:	e17ffc15 	stw	r5,-16(fp)
4102c954:	e1bffd15 	stw	r6,-12(fp)
4102c958:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
4102c95c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
4102c960:	009040f4 	movhi	r2,16643
4102c964:	10858d04 	addi	r2,r2,5684
4102c968:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
4102c96c:	1005003a 	cmpeq	r2,r2,zero
4102c970:	1000411e 	bne	r2,zero,4102ca78 <alt_alarm_start+0x138>
  {
    if (alarm)
4102c974:	e0bffb17 	ldw	r2,-20(fp)
4102c978:	1005003a 	cmpeq	r2,r2,zero
4102c97c:	10003b1e 	bne	r2,zero,4102ca6c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
4102c980:	e0fffb17 	ldw	r3,-20(fp)
4102c984:	e0bffd17 	ldw	r2,-12(fp)
4102c988:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
4102c98c:	e0fffb17 	ldw	r3,-20(fp)
4102c990:	e0bffe17 	ldw	r2,-8(fp)
4102c994:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102c998:	0005303a 	rdctl	r2,status
4102c99c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4102c9a0:	e0fff817 	ldw	r3,-32(fp)
4102c9a4:	00bfff84 	movi	r2,-2
4102c9a8:	1884703a 	and	r2,r3,r2
4102c9ac:	1001703a 	wrctl	status,r2
  
  return context;
4102c9b0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
4102c9b4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
4102c9b8:	009040f4 	movhi	r2,16643
4102c9bc:	10858e04 	addi	r2,r2,5688
4102c9c0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
4102c9c4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
4102c9c8:	e0fffc17 	ldw	r3,-16(fp)
4102c9cc:	e0bff917 	ldw	r2,-28(fp)
4102c9d0:	1885883a 	add	r2,r3,r2
4102c9d4:	10c00044 	addi	r3,r2,1
4102c9d8:	e0bffb17 	ldw	r2,-20(fp)
4102c9dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
4102c9e0:	e0bffb17 	ldw	r2,-20(fp)
4102c9e4:	10c00217 	ldw	r3,8(r2)
4102c9e8:	e0bff917 	ldw	r2,-28(fp)
4102c9ec:	1880042e 	bgeu	r3,r2,4102ca00 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
4102c9f0:	e0fffb17 	ldw	r3,-20(fp)
4102c9f4:	00800044 	movi	r2,1
4102c9f8:	18800405 	stb	r2,16(r3)
4102c9fc:	00000206 	br	4102ca08 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
4102ca00:	e0bffb17 	ldw	r2,-20(fp)
4102ca04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
4102ca08:	e0fffb17 	ldw	r3,-20(fp)
4102ca0c:	009040f4 	movhi	r2,16643
4102ca10:	10bee904 	addi	r2,r2,-1116
4102ca14:	e0bff615 	stw	r2,-40(fp)
4102ca18:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
4102ca1c:	e0fff717 	ldw	r3,-36(fp)
4102ca20:	e0bff617 	ldw	r2,-40(fp)
4102ca24:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
4102ca28:	e0bff617 	ldw	r2,-40(fp)
4102ca2c:	10c00017 	ldw	r3,0(r2)
4102ca30:	e0bff717 	ldw	r2,-36(fp)
4102ca34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
4102ca38:	e0bff617 	ldw	r2,-40(fp)
4102ca3c:	10c00017 	ldw	r3,0(r2)
4102ca40:	e0bff717 	ldw	r2,-36(fp)
4102ca44:	18800115 	stw	r2,4(r3)
  list->next           = entry;
4102ca48:	e0fff617 	ldw	r3,-40(fp)
4102ca4c:	e0bff717 	ldw	r2,-36(fp)
4102ca50:	18800015 	stw	r2,0(r3)
4102ca54:	e0bffa17 	ldw	r2,-24(fp)
4102ca58:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4102ca5c:	e0bff517 	ldw	r2,-44(fp)
4102ca60:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
4102ca64:	e03fff15 	stw	zero,-4(fp)
4102ca68:	00000506 	br	4102ca80 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
4102ca6c:	00bffa84 	movi	r2,-22
4102ca70:	e0bfff15 	stw	r2,-4(fp)
4102ca74:	00000206 	br	4102ca80 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
4102ca78:	00bfde84 	movi	r2,-134
4102ca7c:	e0bfff15 	stw	r2,-4(fp)
4102ca80:	e0bfff17 	ldw	r2,-4(fp)
  }
}
4102ca84:	e037883a 	mov	sp,fp
4102ca88:	df000017 	ldw	fp,0(sp)
4102ca8c:	dec00104 	addi	sp,sp,4
4102ca90:	f800283a 	ret

4102ca94 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
4102ca94:	defffa04 	addi	sp,sp,-24
4102ca98:	dfc00515 	stw	ra,20(sp)
4102ca9c:	df000415 	stw	fp,16(sp)
4102caa0:	df000404 	addi	fp,sp,16
4102caa4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
4102caa8:	008000c4 	movi	r2,3
4102caac:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
4102cab0:	e0fffc17 	ldw	r3,-16(fp)
4102cab4:	008003f4 	movhi	r2,15
4102cab8:	10909004 	addi	r2,r2,16960
4102cabc:	188b383a 	mul	r5,r3,r2
4102cac0:	01023c74 	movhi	r4,2289
4102cac4:	21346004 	addi	r4,r4,-11904
4102cac8:	10214f40 	call	410214f4 <__udivsi3>
4102cacc:	100b883a 	mov	r5,r2
4102cad0:	01200034 	movhi	r4,32768
4102cad4:	213fffc4 	addi	r4,r4,-1
4102cad8:	10214f40 	call	410214f4 <__udivsi3>
4102cadc:	100b883a 	mov	r5,r2
4102cae0:	e13fff17 	ldw	r4,-4(fp)
4102cae4:	10214f40 	call	410214f4 <__udivsi3>
4102cae8:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
4102caec:	e0bffd17 	ldw	r2,-12(fp)
4102caf0:	1005003a 	cmpeq	r2,r2,zero
4102caf4:	1000281e 	bne	r2,zero,4102cb98 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
4102caf8:	e03ffe15 	stw	zero,-8(fp)
4102cafc:	00001606 	br	4102cb58 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
4102cb00:	00a00034 	movhi	r2,32768
4102cb04:	10bfffc4 	addi	r2,r2,-1
4102cb08:	10bfffc4 	addi	r2,r2,-1
4102cb0c:	103ffe1e 	bne	r2,zero,4102cb08 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
4102cb10:	e0fffc17 	ldw	r3,-16(fp)
4102cb14:	008003f4 	movhi	r2,15
4102cb18:	10909004 	addi	r2,r2,16960
4102cb1c:	188b383a 	mul	r5,r3,r2
4102cb20:	01023c74 	movhi	r4,2289
4102cb24:	21346004 	addi	r4,r4,-11904
4102cb28:	10214f40 	call	410214f4 <__udivsi3>
4102cb2c:	100b883a 	mov	r5,r2
4102cb30:	01200034 	movhi	r4,32768
4102cb34:	213fffc4 	addi	r4,r4,-1
4102cb38:	10214f40 	call	410214f4 <__udivsi3>
4102cb3c:	1007883a 	mov	r3,r2
4102cb40:	e0bfff17 	ldw	r2,-4(fp)
4102cb44:	10c5c83a 	sub	r2,r2,r3
4102cb48:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
4102cb4c:	e0bffe17 	ldw	r2,-8(fp)
4102cb50:	10800044 	addi	r2,r2,1
4102cb54:	e0bffe15 	stw	r2,-8(fp)
4102cb58:	e0fffe17 	ldw	r3,-8(fp)
4102cb5c:	e0bffd17 	ldw	r2,-12(fp)
4102cb60:	18bfe716 	blt	r3,r2,4102cb00 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
4102cb64:	e0fffc17 	ldw	r3,-16(fp)
4102cb68:	008003f4 	movhi	r2,15
4102cb6c:	10909004 	addi	r2,r2,16960
4102cb70:	188b383a 	mul	r5,r3,r2
4102cb74:	01023c74 	movhi	r4,2289
4102cb78:	21346004 	addi	r4,r4,-11904
4102cb7c:	10214f40 	call	410214f4 <__udivsi3>
4102cb80:	1007883a 	mov	r3,r2
4102cb84:	e0bfff17 	ldw	r2,-4(fp)
4102cb88:	1885383a 	mul	r2,r3,r2
4102cb8c:	10bfffc4 	addi	r2,r2,-1
4102cb90:	103ffe1e 	bne	r2,zero,4102cb8c <alt_busy_sleep+0xf8>
4102cb94:	00000c06 	br	4102cbc8 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
4102cb98:	e0fffc17 	ldw	r3,-16(fp)
4102cb9c:	008003f4 	movhi	r2,15
4102cba0:	10909004 	addi	r2,r2,16960
4102cba4:	188b383a 	mul	r5,r3,r2
4102cba8:	01023c74 	movhi	r4,2289
4102cbac:	21346004 	addi	r4,r4,-11904
4102cbb0:	10214f40 	call	410214f4 <__udivsi3>
4102cbb4:	1007883a 	mov	r3,r2
4102cbb8:	e0bfff17 	ldw	r2,-4(fp)
4102cbbc:	1885383a 	mul	r2,r3,r2
4102cbc0:	10bfffc4 	addi	r2,r2,-1
4102cbc4:	00bffe16 	blt	zero,r2,4102cbc0 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
4102cbc8:	0005883a 	mov	r2,zero
}
4102cbcc:	e037883a 	mov	sp,fp
4102cbd0:	dfc00117 	ldw	ra,4(sp)
4102cbd4:	df000017 	ldw	fp,0(sp)
4102cbd8:	dec00204 	addi	sp,sp,8
4102cbdc:	f800283a 	ret

4102cbe0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
4102cbe0:	defff904 	addi	sp,sp,-28
4102cbe4:	dfc00615 	stw	ra,24(sp)
4102cbe8:	df000515 	stw	fp,20(sp)
4102cbec:	df000504 	addi	fp,sp,20
4102cbf0:	e13ffd15 	stw	r4,-12(fp)
4102cbf4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
4102cbf8:	e0bffd17 	ldw	r2,-12(fp)
4102cbfc:	1005003a 	cmpeq	r2,r2,zero
4102cc00:	1000041e 	bne	r2,zero,4102cc14 <alt_dev_llist_insert+0x34>
4102cc04:	e0bffd17 	ldw	r2,-12(fp)
4102cc08:	10800217 	ldw	r2,8(r2)
4102cc0c:	1004c03a 	cmpne	r2,r2,zero
4102cc10:	1000071e 	bne	r2,zero,4102cc30 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
4102cc14:	102cc940 	call	4102cc94 <alt_get_errno>
4102cc18:	1007883a 	mov	r3,r2
4102cc1c:	00800584 	movi	r2,22
4102cc20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
4102cc24:	00bffa84 	movi	r2,-22
4102cc28:	e0bfff15 	stw	r2,-4(fp)
4102cc2c:	00001306 	br	4102cc7c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
4102cc30:	e0fffd17 	ldw	r3,-12(fp)
4102cc34:	e0bffe17 	ldw	r2,-8(fp)
4102cc38:	e0bffb15 	stw	r2,-20(fp)
4102cc3c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
4102cc40:	e0fffc17 	ldw	r3,-16(fp)
4102cc44:	e0bffb17 	ldw	r2,-20(fp)
4102cc48:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
4102cc4c:	e0bffb17 	ldw	r2,-20(fp)
4102cc50:	10c00017 	ldw	r3,0(r2)
4102cc54:	e0bffc17 	ldw	r2,-16(fp)
4102cc58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
4102cc5c:	e0bffb17 	ldw	r2,-20(fp)
4102cc60:	10c00017 	ldw	r3,0(r2)
4102cc64:	e0bffc17 	ldw	r2,-16(fp)
4102cc68:	18800115 	stw	r2,4(r3)
  list->next           = entry;
4102cc6c:	e0fffb17 	ldw	r3,-20(fp)
4102cc70:	e0bffc17 	ldw	r2,-16(fp)
4102cc74:	18800015 	stw	r2,0(r3)

  return 0;  
4102cc78:	e03fff15 	stw	zero,-4(fp)
4102cc7c:	e0bfff17 	ldw	r2,-4(fp)
}
4102cc80:	e037883a 	mov	sp,fp
4102cc84:	dfc00117 	ldw	ra,4(sp)
4102cc88:	df000017 	ldw	fp,0(sp)
4102cc8c:	dec00204 	addi	sp,sp,8
4102cc90:	f800283a 	ret

4102cc94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4102cc94:	defffd04 	addi	sp,sp,-12
4102cc98:	dfc00215 	stw	ra,8(sp)
4102cc9c:	df000115 	stw	fp,4(sp)
4102cca0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
4102cca4:	009040f4 	movhi	r2,16643
4102cca8:	10bee704 	addi	r2,r2,-1124
4102ccac:	10800017 	ldw	r2,0(r2)
4102ccb0:	1005003a 	cmpeq	r2,r2,zero
4102ccb4:	1000061e 	bne	r2,zero,4102ccd0 <alt_get_errno+0x3c>
4102ccb8:	009040f4 	movhi	r2,16643
4102ccbc:	10bee704 	addi	r2,r2,-1124
4102ccc0:	10800017 	ldw	r2,0(r2)
4102ccc4:	103ee83a 	callr	r2
4102ccc8:	e0bfff15 	stw	r2,-4(fp)
4102cccc:	00000306 	br	4102ccdc <alt_get_errno+0x48>
4102ccd0:	009040f4 	movhi	r2,16643
4102ccd4:	10858904 	addi	r2,r2,5668
4102ccd8:	e0bfff15 	stw	r2,-4(fp)
4102ccdc:	e0bfff17 	ldw	r2,-4(fp)
}
4102cce0:	e037883a 	mov	sp,fp
4102cce4:	dfc00117 	ldw	ra,4(sp)
4102cce8:	df000017 	ldw	fp,0(sp)
4102ccec:	dec00204 	addi	sp,sp,8
4102ccf0:	f800283a 	ret

4102ccf4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
4102ccf4:	defffd04 	addi	sp,sp,-12
4102ccf8:	dfc00215 	stw	ra,8(sp)
4102ccfc:	df000115 	stw	fp,4(sp)
4102cd00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
4102cd04:	00bfff04 	movi	r2,-4
4102cd08:	00d040f4 	movhi	r3,16643
4102cd0c:	18f6f804 	addi	r3,r3,-9248
4102cd10:	1885883a 	add	r2,r3,r2
4102cd14:	e0bfff15 	stw	r2,-4(fp)
4102cd18:	00000606 	br	4102cd34 <_do_ctors+0x40>
        (*ctor) (); 
4102cd1c:	e0bfff17 	ldw	r2,-4(fp)
4102cd20:	10800017 	ldw	r2,0(r2)
4102cd24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
4102cd28:	e0bfff17 	ldw	r2,-4(fp)
4102cd2c:	10bfff04 	addi	r2,r2,-4
4102cd30:	e0bfff15 	stw	r2,-4(fp)
4102cd34:	e0ffff17 	ldw	r3,-4(fp)
4102cd38:	009040f4 	movhi	r2,16643
4102cd3c:	10b6f704 	addi	r2,r2,-9252
4102cd40:	18bff62e 	bgeu	r3,r2,4102cd1c <_do_ctors+0x28>
        (*ctor) (); 
}
4102cd44:	e037883a 	mov	sp,fp
4102cd48:	dfc00117 	ldw	ra,4(sp)
4102cd4c:	df000017 	ldw	fp,0(sp)
4102cd50:	dec00204 	addi	sp,sp,8
4102cd54:	f800283a 	ret

4102cd58 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
4102cd58:	defffd04 	addi	sp,sp,-12
4102cd5c:	dfc00215 	stw	ra,8(sp)
4102cd60:	df000115 	stw	fp,4(sp)
4102cd64:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
4102cd68:	00bfff04 	movi	r2,-4
4102cd6c:	00d040f4 	movhi	r3,16643
4102cd70:	18f6f804 	addi	r3,r3,-9248
4102cd74:	1885883a 	add	r2,r3,r2
4102cd78:	e0bfff15 	stw	r2,-4(fp)
4102cd7c:	00000606 	br	4102cd98 <_do_dtors+0x40>
        (*dtor) (); 
4102cd80:	e0bfff17 	ldw	r2,-4(fp)
4102cd84:	10800017 	ldw	r2,0(r2)
4102cd88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
4102cd8c:	e0bfff17 	ldw	r2,-4(fp)
4102cd90:	10bfff04 	addi	r2,r2,-4
4102cd94:	e0bfff15 	stw	r2,-4(fp)
4102cd98:	e0ffff17 	ldw	r3,-4(fp)
4102cd9c:	009040f4 	movhi	r2,16643
4102cda0:	10b6f804 	addi	r2,r2,-9248
4102cda4:	18bff62e 	bgeu	r3,r2,4102cd80 <_do_dtors+0x28>
        (*dtor) (); 
}
4102cda8:	e037883a 	mov	sp,fp
4102cdac:	dfc00117 	ldw	ra,4(sp)
4102cdb0:	df000017 	ldw	fp,0(sp)
4102cdb4:	dec00204 	addi	sp,sp,8
4102cdb8:	f800283a 	ret

4102cdbc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
4102cdbc:	defffe04 	addi	sp,sp,-8
4102cdc0:	dfc00115 	stw	ra,4(sp)
4102cdc4:	df000015 	stw	fp,0(sp)
4102cdc8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
4102cdcc:	0009883a 	mov	r4,zero
4102cdd0:	01440004 	movi	r5,4096
4102cdd4:	102d7440 	call	4102d744 <alt_icache_flush>
#endif
}
4102cdd8:	e037883a 	mov	sp,fp
4102cddc:	dfc00117 	ldw	ra,4(sp)
4102cde0:	df000017 	ldw	fp,0(sp)
4102cde4:	dec00204 	addi	sp,sp,8
4102cde8:	f800283a 	ret

4102cdec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
4102cdec:	defff904 	addi	sp,sp,-28
4102cdf0:	dfc00615 	stw	ra,24(sp)
4102cdf4:	df000515 	stw	fp,20(sp)
4102cdf8:	df000504 	addi	fp,sp,20
4102cdfc:	e13ffc15 	stw	r4,-16(fp)
4102ce00:	e17ffd15 	stw	r5,-12(fp)
4102ce04:	e1bffe15 	stw	r6,-8(fp)
4102ce08:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
4102ce0c:	e0800217 	ldw	r2,8(fp)
4102ce10:	d8800015 	stw	r2,0(sp)
4102ce14:	e13ffc17 	ldw	r4,-16(fp)
4102ce18:	e17ffd17 	ldw	r5,-12(fp)
4102ce1c:	e1bffe17 	ldw	r6,-8(fp)
4102ce20:	e1ffff17 	ldw	r7,-4(fp)
4102ce24:	102cfc00 	call	4102cfc0 <alt_iic_isr_register>
}  
4102ce28:	e037883a 	mov	sp,fp
4102ce2c:	dfc00117 	ldw	ra,4(sp)
4102ce30:	df000017 	ldw	fp,0(sp)
4102ce34:	dec00204 	addi	sp,sp,8
4102ce38:	f800283a 	ret

4102ce3c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
4102ce3c:	defff904 	addi	sp,sp,-28
4102ce40:	df000615 	stw	fp,24(sp)
4102ce44:	df000604 	addi	fp,sp,24
4102ce48:	e13ffe15 	stw	r4,-8(fp)
4102ce4c:	e17fff15 	stw	r5,-4(fp)
4102ce50:	e0bfff17 	ldw	r2,-4(fp)
4102ce54:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102ce58:	0005303a 	rdctl	r2,status
4102ce5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4102ce60:	e0fffb17 	ldw	r3,-20(fp)
4102ce64:	00bfff84 	movi	r2,-2
4102ce68:	1884703a 	and	r2,r3,r2
4102ce6c:	1001703a 	wrctl	status,r2
  
  return context;
4102ce70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
4102ce74:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
4102ce78:	e0fffc17 	ldw	r3,-16(fp)
4102ce7c:	00800044 	movi	r2,1
4102ce80:	10c4983a 	sll	r2,r2,r3
4102ce84:	1007883a 	mov	r3,r2
4102ce88:	009040f4 	movhi	r2,16643
4102ce8c:	10858f04 	addi	r2,r2,5692
4102ce90:	10800017 	ldw	r2,0(r2)
4102ce94:	1886b03a 	or	r3,r3,r2
4102ce98:	009040f4 	movhi	r2,16643
4102ce9c:	10858f04 	addi	r2,r2,5692
4102cea0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
4102cea4:	009040f4 	movhi	r2,16643
4102cea8:	10858f04 	addi	r2,r2,5692
4102ceac:	10800017 	ldw	r2,0(r2)
4102ceb0:	100170fa 	wrctl	ienable,r2
4102ceb4:	e0bffd17 	ldw	r2,-12(fp)
4102ceb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4102cebc:	e0bffa17 	ldw	r2,-24(fp)
4102cec0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
4102cec4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
4102cec8:	e037883a 	mov	sp,fp
4102cecc:	df000017 	ldw	fp,0(sp)
4102ced0:	dec00104 	addi	sp,sp,4
4102ced4:	f800283a 	ret

4102ced8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
4102ced8:	defff904 	addi	sp,sp,-28
4102cedc:	df000615 	stw	fp,24(sp)
4102cee0:	df000604 	addi	fp,sp,24
4102cee4:	e13ffe15 	stw	r4,-8(fp)
4102cee8:	e17fff15 	stw	r5,-4(fp)
4102ceec:	e0bfff17 	ldw	r2,-4(fp)
4102cef0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102cef4:	0005303a 	rdctl	r2,status
4102cef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4102cefc:	e0fffb17 	ldw	r3,-20(fp)
4102cf00:	00bfff84 	movi	r2,-2
4102cf04:	1884703a 	and	r2,r3,r2
4102cf08:	1001703a 	wrctl	status,r2
  
  return context;
4102cf0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
4102cf10:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
4102cf14:	e0fffc17 	ldw	r3,-16(fp)
4102cf18:	00800044 	movi	r2,1
4102cf1c:	10c4983a 	sll	r2,r2,r3
4102cf20:	0084303a 	nor	r2,zero,r2
4102cf24:	1007883a 	mov	r3,r2
4102cf28:	009040f4 	movhi	r2,16643
4102cf2c:	10858f04 	addi	r2,r2,5692
4102cf30:	10800017 	ldw	r2,0(r2)
4102cf34:	1886703a 	and	r3,r3,r2
4102cf38:	009040f4 	movhi	r2,16643
4102cf3c:	10858f04 	addi	r2,r2,5692
4102cf40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
4102cf44:	009040f4 	movhi	r2,16643
4102cf48:	10858f04 	addi	r2,r2,5692
4102cf4c:	10800017 	ldw	r2,0(r2)
4102cf50:	100170fa 	wrctl	ienable,r2
4102cf54:	e0bffd17 	ldw	r2,-12(fp)
4102cf58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4102cf5c:	e0bffa17 	ldw	r2,-24(fp)
4102cf60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
4102cf64:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
4102cf68:	e037883a 	mov	sp,fp
4102cf6c:	df000017 	ldw	fp,0(sp)
4102cf70:	dec00104 	addi	sp,sp,4
4102cf74:	f800283a 	ret

4102cf78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
4102cf78:	defffc04 	addi	sp,sp,-16
4102cf7c:	df000315 	stw	fp,12(sp)
4102cf80:	df000304 	addi	fp,sp,12
4102cf84:	e13ffe15 	stw	r4,-8(fp)
4102cf88:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
4102cf8c:	000530fa 	rdctl	r2,ienable
4102cf90:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
4102cf94:	e0ffff17 	ldw	r3,-4(fp)
4102cf98:	00800044 	movi	r2,1
4102cf9c:	10c4983a 	sll	r2,r2,r3
4102cfa0:	1007883a 	mov	r3,r2
4102cfa4:	e0bffd17 	ldw	r2,-12(fp)
4102cfa8:	1884703a 	and	r2,r3,r2
4102cfac:	1004c03a 	cmpne	r2,r2,zero
}
4102cfb0:	e037883a 	mov	sp,fp
4102cfb4:	df000017 	ldw	fp,0(sp)
4102cfb8:	dec00104 	addi	sp,sp,4
4102cfbc:	f800283a 	ret

4102cfc0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
4102cfc0:	defff404 	addi	sp,sp,-48
4102cfc4:	dfc00b15 	stw	ra,44(sp)
4102cfc8:	df000a15 	stw	fp,40(sp)
4102cfcc:	df000a04 	addi	fp,sp,40
4102cfd0:	e13ffb15 	stw	r4,-20(fp)
4102cfd4:	e17ffc15 	stw	r5,-16(fp)
4102cfd8:	e1bffd15 	stw	r6,-12(fp)
4102cfdc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
4102cfe0:	00bffa84 	movi	r2,-22
4102cfe4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
4102cfe8:	e0bffc17 	ldw	r2,-16(fp)
4102cfec:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
4102cff0:	e0bff917 	ldw	r2,-28(fp)
4102cff4:	10800808 	cmpgei	r2,r2,32
4102cff8:	1000291e 	bne	r2,zero,4102d0a0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102cffc:	0005303a 	rdctl	r2,status
4102d000:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4102d004:	e0fff717 	ldw	r3,-36(fp)
4102d008:	00bfff84 	movi	r2,-2
4102d00c:	1884703a 	and	r2,r3,r2
4102d010:	1001703a 	wrctl	status,r2
  
  return context;
4102d014:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
4102d018:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
4102d01c:	e0bff917 	ldw	r2,-28(fp)
4102d020:	00d040f4 	movhi	r3,16643
4102d024:	18c59a04 	addi	r3,r3,5736
4102d028:	100490fa 	slli	r2,r2,3
4102d02c:	10c7883a 	add	r3,r2,r3
4102d030:	e0bffd17 	ldw	r2,-12(fp)
4102d034:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
4102d038:	e0bff917 	ldw	r2,-28(fp)
4102d03c:	00d040f4 	movhi	r3,16643
4102d040:	18c59a04 	addi	r3,r3,5736
4102d044:	100490fa 	slli	r2,r2,3
4102d048:	10c5883a 	add	r2,r2,r3
4102d04c:	10c00104 	addi	r3,r2,4
4102d050:	e0bffe17 	ldw	r2,-8(fp)
4102d054:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
4102d058:	e0bffd17 	ldw	r2,-12(fp)
4102d05c:	1005003a 	cmpeq	r2,r2,zero
4102d060:	1000051e 	bne	r2,zero,4102d078 <alt_iic_isr_register+0xb8>
4102d064:	e17ff917 	ldw	r5,-28(fp)
4102d068:	e13ffb17 	ldw	r4,-20(fp)
4102d06c:	102ce3c0 	call	4102ce3c <alt_ic_irq_enable>
4102d070:	e0bfff15 	stw	r2,-4(fp)
4102d074:	00000406 	br	4102d088 <alt_iic_isr_register+0xc8>
4102d078:	e17ff917 	ldw	r5,-28(fp)
4102d07c:	e13ffb17 	ldw	r4,-20(fp)
4102d080:	102ced80 	call	4102ced8 <alt_ic_irq_disable>
4102d084:	e0bfff15 	stw	r2,-4(fp)
4102d088:	e0bfff17 	ldw	r2,-4(fp)
4102d08c:	e0bffa15 	stw	r2,-24(fp)
4102d090:	e0bff817 	ldw	r2,-32(fp)
4102d094:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4102d098:	e0bff617 	ldw	r2,-40(fp)
4102d09c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
4102d0a0:	e0bffa17 	ldw	r2,-24(fp)
}
4102d0a4:	e037883a 	mov	sp,fp
4102d0a8:	dfc00117 	ldw	ra,4(sp)
4102d0ac:	df000017 	ldw	fp,0(sp)
4102d0b0:	dec00204 	addi	sp,sp,8
4102d0b4:	f800283a 	ret

4102d0b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
4102d0b8:	defff904 	addi	sp,sp,-28
4102d0bc:	dfc00615 	stw	ra,24(sp)
4102d0c0:	df000515 	stw	fp,20(sp)
4102d0c4:	df000504 	addi	fp,sp,20
4102d0c8:	e13ffc15 	stw	r4,-16(fp)
4102d0cc:	e17ffd15 	stw	r5,-12(fp)
4102d0d0:	e1bffe15 	stw	r6,-8(fp)
4102d0d4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
4102d0d8:	e13ffd17 	ldw	r4,-12(fp)
4102d0dc:	e17ffe17 	ldw	r5,-8(fp)
4102d0e0:	e1bfff17 	ldw	r6,-4(fp)
4102d0e4:	102d2d00 	call	4102d2d0 <open>
4102d0e8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
4102d0ec:	e0bffb17 	ldw	r2,-20(fp)
4102d0f0:	1004803a 	cmplt	r2,r2,zero
4102d0f4:	10001c1e 	bne	r2,zero,4102d168 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
4102d0f8:	e0bffb17 	ldw	r2,-20(fp)
4102d0fc:	00d040f4 	movhi	r3,16643
4102d100:	18fa6404 	addi	r3,r3,-5744
4102d104:	10800324 	muli	r2,r2,12
4102d108:	10c5883a 	add	r2,r2,r3
4102d10c:	10c00017 	ldw	r3,0(r2)
4102d110:	e0bffc17 	ldw	r2,-16(fp)
4102d114:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
4102d118:	e0bffb17 	ldw	r2,-20(fp)
4102d11c:	00d040f4 	movhi	r3,16643
4102d120:	18fa6404 	addi	r3,r3,-5744
4102d124:	10800324 	muli	r2,r2,12
4102d128:	10c5883a 	add	r2,r2,r3
4102d12c:	10800104 	addi	r2,r2,4
4102d130:	10c00017 	ldw	r3,0(r2)
4102d134:	e0bffc17 	ldw	r2,-16(fp)
4102d138:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
4102d13c:	e0bffb17 	ldw	r2,-20(fp)
4102d140:	00d040f4 	movhi	r3,16643
4102d144:	18fa6404 	addi	r3,r3,-5744
4102d148:	10800324 	muli	r2,r2,12
4102d14c:	10c5883a 	add	r2,r2,r3
4102d150:	10800204 	addi	r2,r2,8
4102d154:	10c00017 	ldw	r3,0(r2)
4102d158:	e0bffc17 	ldw	r2,-16(fp)
4102d15c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
4102d160:	e13ffb17 	ldw	r4,-20(fp)
4102d164:	102b8600 	call	4102b860 <alt_release_fd>
  }
} 
4102d168:	e037883a 	mov	sp,fp
4102d16c:	dfc00117 	ldw	ra,4(sp)
4102d170:	df000017 	ldw	fp,0(sp)
4102d174:	dec00204 	addi	sp,sp,8
4102d178:	f800283a 	ret

4102d17c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
4102d17c:	defffb04 	addi	sp,sp,-20
4102d180:	dfc00415 	stw	ra,16(sp)
4102d184:	df000315 	stw	fp,12(sp)
4102d188:	df000304 	addi	fp,sp,12
4102d18c:	e13ffd15 	stw	r4,-12(fp)
4102d190:	e17ffe15 	stw	r5,-8(fp)
4102d194:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
4102d198:	011040f4 	movhi	r4,16643
4102d19c:	213a6704 	addi	r4,r4,-5732
4102d1a0:	e17ffd17 	ldw	r5,-12(fp)
4102d1a4:	01800044 	movi	r6,1
4102d1a8:	01c07fc4 	movi	r7,511
4102d1ac:	102d0b80 	call	4102d0b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
4102d1b0:	011040f4 	movhi	r4,16643
4102d1b4:	213a6404 	addi	r4,r4,-5744
4102d1b8:	e17ffe17 	ldw	r5,-8(fp)
4102d1bc:	000d883a 	mov	r6,zero
4102d1c0:	01c07fc4 	movi	r7,511
4102d1c4:	102d0b80 	call	4102d0b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
4102d1c8:	011040f4 	movhi	r4,16643
4102d1cc:	213a6a04 	addi	r4,r4,-5720
4102d1d0:	e17fff17 	ldw	r5,-4(fp)
4102d1d4:	01800044 	movi	r6,1
4102d1d8:	01c07fc4 	movi	r7,511
4102d1dc:	102d0b80 	call	4102d0b8 <alt_open_fd>
}  
4102d1e0:	e037883a 	mov	sp,fp
4102d1e4:	dfc00117 	ldw	ra,4(sp)
4102d1e8:	df000017 	ldw	fp,0(sp)
4102d1ec:	dec00204 	addi	sp,sp,8
4102d1f0:	f800283a 	ret

4102d1f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
4102d1f4:	defffc04 	addi	sp,sp,-16
4102d1f8:	df000315 	stw	fp,12(sp)
4102d1fc:	df000304 	addi	fp,sp,12
4102d200:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
4102d204:	e0bffe17 	ldw	r2,-8(fp)
4102d208:	10800217 	ldw	r2,8(r2)
4102d20c:	10d00034 	orhi	r3,r2,16384
4102d210:	e0bffe17 	ldw	r2,-8(fp)
4102d214:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
4102d218:	e03ffd15 	stw	zero,-12(fp)
4102d21c:	00002006 	br	4102d2a0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
4102d220:	e0bffd17 	ldw	r2,-12(fp)
4102d224:	00d040f4 	movhi	r3,16643
4102d228:	18fa6404 	addi	r3,r3,-5744
4102d22c:	10800324 	muli	r2,r2,12
4102d230:	10c5883a 	add	r2,r2,r3
4102d234:	10c00017 	ldw	r3,0(r2)
4102d238:	e0bffe17 	ldw	r2,-8(fp)
4102d23c:	10800017 	ldw	r2,0(r2)
4102d240:	1880141e 	bne	r3,r2,4102d294 <alt_file_locked+0xa0>
4102d244:	e0bffd17 	ldw	r2,-12(fp)
4102d248:	00d040f4 	movhi	r3,16643
4102d24c:	18fa6404 	addi	r3,r3,-5744
4102d250:	10800324 	muli	r2,r2,12
4102d254:	10c5883a 	add	r2,r2,r3
4102d258:	10800204 	addi	r2,r2,8
4102d25c:	10800017 	ldw	r2,0(r2)
4102d260:	1004403a 	cmpge	r2,r2,zero
4102d264:	10000b1e 	bne	r2,zero,4102d294 <alt_file_locked+0xa0>
4102d268:	e0bffd17 	ldw	r2,-12(fp)
4102d26c:	10800324 	muli	r2,r2,12
4102d270:	1007883a 	mov	r3,r2
4102d274:	009040f4 	movhi	r2,16643
4102d278:	10ba6404 	addi	r2,r2,-5744
4102d27c:	1887883a 	add	r3,r3,r2
4102d280:	e0bffe17 	ldw	r2,-8(fp)
4102d284:	18800326 	beq	r3,r2,4102d294 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
4102d288:	00bffcc4 	movi	r2,-13
4102d28c:	e0bfff15 	stw	r2,-4(fp)
4102d290:	00000a06 	br	4102d2bc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
4102d294:	e0bffd17 	ldw	r2,-12(fp)
4102d298:	10800044 	addi	r2,r2,1
4102d29c:	e0bffd15 	stw	r2,-12(fp)
4102d2a0:	009040f4 	movhi	r2,16643
4102d2a4:	10bee604 	addi	r2,r2,-1128
4102d2a8:	10800017 	ldw	r2,0(r2)
4102d2ac:	1007883a 	mov	r3,r2
4102d2b0:	e0bffd17 	ldw	r2,-12(fp)
4102d2b4:	18bfda2e 	bgeu	r3,r2,4102d220 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
4102d2b8:	e03fff15 	stw	zero,-4(fp)
4102d2bc:	e0bfff17 	ldw	r2,-4(fp)
}
4102d2c0:	e037883a 	mov	sp,fp
4102d2c4:	df000017 	ldw	fp,0(sp)
4102d2c8:	dec00104 	addi	sp,sp,4
4102d2cc:	f800283a 	ret

4102d2d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
4102d2d0:	defff404 	addi	sp,sp,-48
4102d2d4:	dfc00b15 	stw	ra,44(sp)
4102d2d8:	df000a15 	stw	fp,40(sp)
4102d2dc:	df000a04 	addi	fp,sp,40
4102d2e0:	e13ffb15 	stw	r4,-20(fp)
4102d2e4:	e17ffc15 	stw	r5,-16(fp)
4102d2e8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
4102d2ec:	00bfffc4 	movi	r2,-1
4102d2f0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
4102d2f4:	00bffb44 	movi	r2,-19
4102d2f8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
4102d2fc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
4102d300:	e13ffb17 	ldw	r4,-20(fp)
4102d304:	015040f4 	movhi	r5,16643
4102d308:	297ee404 	addi	r5,r5,-1136
4102d30c:	102d4d80 	call	4102d4d8 <alt_find_dev>
4102d310:	e0bffa15 	stw	r2,-24(fp)
4102d314:	e0bffa17 	ldw	r2,-24(fp)
4102d318:	1004c03a 	cmpne	r2,r2,zero
4102d31c:	1000051e 	bne	r2,zero,4102d334 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
4102d320:	e13ffb17 	ldw	r4,-20(fp)
4102d324:	102d56c0 	call	4102d56c <alt_find_file>
4102d328:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
4102d32c:	00800044 	movi	r2,1
4102d330:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
4102d334:	e0bffa17 	ldw	r2,-24(fp)
4102d338:	1005003a 	cmpeq	r2,r2,zero
4102d33c:	1000301e 	bne	r2,zero,4102d400 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
4102d340:	e13ffa17 	ldw	r4,-24(fp)
4102d344:	102d68c0 	call	4102d68c <alt_get_fd>
4102d348:	e0bff815 	stw	r2,-32(fp)
4102d34c:	e0bff817 	ldw	r2,-32(fp)
4102d350:	1004403a 	cmpge	r2,r2,zero
4102d354:	1000031e 	bne	r2,zero,4102d364 <open+0x94>
    {
      status = index;
4102d358:	e0bff817 	ldw	r2,-32(fp)
4102d35c:	e0bff715 	stw	r2,-36(fp)
4102d360:	00002906 	br	4102d408 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
4102d364:	e0bff817 	ldw	r2,-32(fp)
4102d368:	10800324 	muli	r2,r2,12
4102d36c:	1007883a 	mov	r3,r2
4102d370:	009040f4 	movhi	r2,16643
4102d374:	10ba6404 	addi	r2,r2,-5744
4102d378:	1885883a 	add	r2,r3,r2
4102d37c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
4102d380:	e0fffc17 	ldw	r3,-16(fp)
4102d384:	00900034 	movhi	r2,16384
4102d388:	10bfffc4 	addi	r2,r2,-1
4102d38c:	1886703a 	and	r3,r3,r2
4102d390:	e0bff917 	ldw	r2,-28(fp)
4102d394:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
4102d398:	e0bff617 	ldw	r2,-40(fp)
4102d39c:	1004c03a 	cmpne	r2,r2,zero
4102d3a0:	1000061e 	bne	r2,zero,4102d3bc <open+0xec>
4102d3a4:	e13ff917 	ldw	r4,-28(fp)
4102d3a8:	102d1f40 	call	4102d1f4 <alt_file_locked>
4102d3ac:	e0bff715 	stw	r2,-36(fp)
4102d3b0:	e0bff717 	ldw	r2,-36(fp)
4102d3b4:	1004803a 	cmplt	r2,r2,zero
4102d3b8:	1000131e 	bne	r2,zero,4102d408 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
4102d3bc:	e0bffa17 	ldw	r2,-24(fp)
4102d3c0:	10800317 	ldw	r2,12(r2)
4102d3c4:	1005003a 	cmpeq	r2,r2,zero
4102d3c8:	1000091e 	bne	r2,zero,4102d3f0 <open+0x120>
4102d3cc:	e0bffa17 	ldw	r2,-24(fp)
4102d3d0:	10800317 	ldw	r2,12(r2)
4102d3d4:	e13ff917 	ldw	r4,-28(fp)
4102d3d8:	e17ffb17 	ldw	r5,-20(fp)
4102d3dc:	e1bffc17 	ldw	r6,-16(fp)
4102d3e0:	e1fffd17 	ldw	r7,-12(fp)
4102d3e4:	103ee83a 	callr	r2
4102d3e8:	e0bfff15 	stw	r2,-4(fp)
4102d3ec:	00000106 	br	4102d3f4 <open+0x124>
4102d3f0:	e03fff15 	stw	zero,-4(fp)
4102d3f4:	e0bfff17 	ldw	r2,-4(fp)
4102d3f8:	e0bff715 	stw	r2,-36(fp)
4102d3fc:	00000206 	br	4102d408 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
4102d400:	00bffb44 	movi	r2,-19
4102d404:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
4102d408:	e0bff717 	ldw	r2,-36(fp)
4102d40c:	1004403a 	cmpge	r2,r2,zero
4102d410:	1000091e 	bne	r2,zero,4102d438 <open+0x168>
  {
    alt_release_fd (index);  
4102d414:	e13ff817 	ldw	r4,-32(fp)
4102d418:	102b8600 	call	4102b860 <alt_release_fd>
    ALT_ERRNO = -status;
4102d41c:	102d4580 	call	4102d458 <alt_get_errno>
4102d420:	e0fff717 	ldw	r3,-36(fp)
4102d424:	00c7c83a 	sub	r3,zero,r3
4102d428:	10c00015 	stw	r3,0(r2)
    return -1;
4102d42c:	00bfffc4 	movi	r2,-1
4102d430:	e0bffe15 	stw	r2,-8(fp)
4102d434:	00000206 	br	4102d440 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
4102d438:	e0bff817 	ldw	r2,-32(fp)
4102d43c:	e0bffe15 	stw	r2,-8(fp)
4102d440:	e0bffe17 	ldw	r2,-8(fp)
}
4102d444:	e037883a 	mov	sp,fp
4102d448:	dfc00117 	ldw	ra,4(sp)
4102d44c:	df000017 	ldw	fp,0(sp)
4102d450:	dec00204 	addi	sp,sp,8
4102d454:	f800283a 	ret

4102d458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4102d458:	defffd04 	addi	sp,sp,-12
4102d45c:	dfc00215 	stw	ra,8(sp)
4102d460:	df000115 	stw	fp,4(sp)
4102d464:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
4102d468:	009040f4 	movhi	r2,16643
4102d46c:	10bee704 	addi	r2,r2,-1124
4102d470:	10800017 	ldw	r2,0(r2)
4102d474:	1005003a 	cmpeq	r2,r2,zero
4102d478:	1000061e 	bne	r2,zero,4102d494 <alt_get_errno+0x3c>
4102d47c:	009040f4 	movhi	r2,16643
4102d480:	10bee704 	addi	r2,r2,-1124
4102d484:	10800017 	ldw	r2,0(r2)
4102d488:	103ee83a 	callr	r2
4102d48c:	e0bfff15 	stw	r2,-4(fp)
4102d490:	00000306 	br	4102d4a0 <alt_get_errno+0x48>
4102d494:	009040f4 	movhi	r2,16643
4102d498:	10858904 	addi	r2,r2,5668
4102d49c:	e0bfff15 	stw	r2,-4(fp)
4102d4a0:	e0bfff17 	ldw	r2,-4(fp)
}
4102d4a4:	e037883a 	mov	sp,fp
4102d4a8:	dfc00117 	ldw	ra,4(sp)
4102d4ac:	df000017 	ldw	fp,0(sp)
4102d4b0:	dec00204 	addi	sp,sp,8
4102d4b4:	f800283a 	ret

4102d4b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
4102d4b8:	deffff04 	addi	sp,sp,-4
4102d4bc:	df000015 	stw	fp,0(sp)
4102d4c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
4102d4c4:	000170fa 	wrctl	ienable,zero
}
4102d4c8:	e037883a 	mov	sp,fp
4102d4cc:	df000017 	ldw	fp,0(sp)
4102d4d0:	dec00104 	addi	sp,sp,4
4102d4d4:	f800283a 	ret

4102d4d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
4102d4d8:	defff904 	addi	sp,sp,-28
4102d4dc:	dfc00615 	stw	ra,24(sp)
4102d4e0:	df000515 	stw	fp,20(sp)
4102d4e4:	df000504 	addi	fp,sp,20
4102d4e8:	e13ffd15 	stw	r4,-12(fp)
4102d4ec:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
4102d4f0:	e0bffe17 	ldw	r2,-8(fp)
4102d4f4:	10800017 	ldw	r2,0(r2)
4102d4f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
4102d4fc:	e13ffd17 	ldw	r4,-12(fp)
4102d500:	1021cb00 	call	41021cb0 <strlen>
4102d504:	10800044 	addi	r2,r2,1
4102d508:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
4102d50c:	00000d06 	br	4102d544 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
4102d510:	e0bffc17 	ldw	r2,-16(fp)
4102d514:	11000217 	ldw	r4,8(r2)
4102d518:	e1bffb17 	ldw	r6,-20(fp)
4102d51c:	e17ffd17 	ldw	r5,-12(fp)
4102d520:	102d8200 	call	4102d820 <memcmp>
4102d524:	1004c03a 	cmpne	r2,r2,zero
4102d528:	1000031e 	bne	r2,zero,4102d538 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
4102d52c:	e0bffc17 	ldw	r2,-16(fp)
4102d530:	e0bfff15 	stw	r2,-4(fp)
4102d534:	00000706 	br	4102d554 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
4102d538:	e0bffc17 	ldw	r2,-16(fp)
4102d53c:	10800017 	ldw	r2,0(r2)
4102d540:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
4102d544:	e0fffe17 	ldw	r3,-8(fp)
4102d548:	e0bffc17 	ldw	r2,-16(fp)
4102d54c:	10fff01e 	bne	r2,r3,4102d510 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
4102d550:	e03fff15 	stw	zero,-4(fp)
4102d554:	e0bfff17 	ldw	r2,-4(fp)
}
4102d558:	e037883a 	mov	sp,fp
4102d55c:	dfc00117 	ldw	ra,4(sp)
4102d560:	df000017 	ldw	fp,0(sp)
4102d564:	dec00204 	addi	sp,sp,8
4102d568:	f800283a 	ret

4102d56c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
4102d56c:	defffa04 	addi	sp,sp,-24
4102d570:	dfc00515 	stw	ra,20(sp)
4102d574:	df000415 	stw	fp,16(sp)
4102d578:	df000404 	addi	fp,sp,16
4102d57c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
4102d580:	009040f4 	movhi	r2,16643
4102d584:	10bee204 	addi	r2,r2,-1144
4102d588:	10800017 	ldw	r2,0(r2)
4102d58c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
4102d590:	00003306 	br	4102d660 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
4102d594:	e0bffd17 	ldw	r2,-12(fp)
4102d598:	11000217 	ldw	r4,8(r2)
4102d59c:	1021cb00 	call	41021cb0 <strlen>
4102d5a0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
4102d5a4:	e0bffd17 	ldw	r2,-12(fp)
4102d5a8:	10c00217 	ldw	r3,8(r2)
4102d5ac:	e0bffc17 	ldw	r2,-16(fp)
4102d5b0:	1885883a 	add	r2,r3,r2
4102d5b4:	10bfffc4 	addi	r2,r2,-1
4102d5b8:	10800003 	ldbu	r2,0(r2)
4102d5bc:	10803fcc 	andi	r2,r2,255
4102d5c0:	1080201c 	xori	r2,r2,128
4102d5c4:	10bfe004 	addi	r2,r2,-128
4102d5c8:	10800bd8 	cmpnei	r2,r2,47
4102d5cc:	1000031e 	bne	r2,zero,4102d5dc <alt_find_file+0x70>
    {
      len -= 1;
4102d5d0:	e0bffc17 	ldw	r2,-16(fp)
4102d5d4:	10bfffc4 	addi	r2,r2,-1
4102d5d8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
4102d5dc:	e0bffc17 	ldw	r2,-16(fp)
4102d5e0:	1007883a 	mov	r3,r2
4102d5e4:	e0bffe17 	ldw	r2,-8(fp)
4102d5e8:	1885883a 	add	r2,r3,r2
4102d5ec:	10800003 	ldbu	r2,0(r2)
4102d5f0:	10803fcc 	andi	r2,r2,255
4102d5f4:	1080201c 	xori	r2,r2,128
4102d5f8:	10bfe004 	addi	r2,r2,-128
4102d5fc:	10800be0 	cmpeqi	r2,r2,47
4102d600:	10000a1e 	bne	r2,zero,4102d62c <alt_find_file+0xc0>
4102d604:	e0bffc17 	ldw	r2,-16(fp)
4102d608:	1007883a 	mov	r3,r2
4102d60c:	e0bffe17 	ldw	r2,-8(fp)
4102d610:	1885883a 	add	r2,r3,r2
4102d614:	10800003 	ldbu	r2,0(r2)
4102d618:	10803fcc 	andi	r2,r2,255
4102d61c:	1080201c 	xori	r2,r2,128
4102d620:	10bfe004 	addi	r2,r2,-128
4102d624:	1004c03a 	cmpne	r2,r2,zero
4102d628:	10000a1e 	bne	r2,zero,4102d654 <alt_find_file+0xe8>
4102d62c:	e0bffd17 	ldw	r2,-12(fp)
4102d630:	11000217 	ldw	r4,8(r2)
4102d634:	e1bffc17 	ldw	r6,-16(fp)
4102d638:	e17ffe17 	ldw	r5,-8(fp)
4102d63c:	102d8200 	call	4102d820 <memcmp>
4102d640:	1004c03a 	cmpne	r2,r2,zero
4102d644:	1000031e 	bne	r2,zero,4102d654 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
4102d648:	e0bffd17 	ldw	r2,-12(fp)
4102d64c:	e0bfff15 	stw	r2,-4(fp)
4102d650:	00000806 	br	4102d674 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
4102d654:	e0bffd17 	ldw	r2,-12(fp)
4102d658:	10800017 	ldw	r2,0(r2)
4102d65c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
4102d660:	00d040f4 	movhi	r3,16643
4102d664:	18fee204 	addi	r3,r3,-1144
4102d668:	e0bffd17 	ldw	r2,-12(fp)
4102d66c:	10ffc91e 	bne	r2,r3,4102d594 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
4102d670:	e03fff15 	stw	zero,-4(fp)
4102d674:	e0bfff17 	ldw	r2,-4(fp)
}
4102d678:	e037883a 	mov	sp,fp
4102d67c:	dfc00117 	ldw	ra,4(sp)
4102d680:	df000017 	ldw	fp,0(sp)
4102d684:	dec00204 	addi	sp,sp,8
4102d688:	f800283a 	ret

4102d68c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
4102d68c:	defffc04 	addi	sp,sp,-16
4102d690:	df000315 	stw	fp,12(sp)
4102d694:	df000304 	addi	fp,sp,12
4102d698:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
4102d69c:	00bffa04 	movi	r2,-24
4102d6a0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
4102d6a4:	e03ffe15 	stw	zero,-8(fp)
4102d6a8:	00001e06 	br	4102d724 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
4102d6ac:	e0bffe17 	ldw	r2,-8(fp)
4102d6b0:	00d040f4 	movhi	r3,16643
4102d6b4:	18fa6404 	addi	r3,r3,-5744
4102d6b8:	10800324 	muli	r2,r2,12
4102d6bc:	10c5883a 	add	r2,r2,r3
4102d6c0:	10800017 	ldw	r2,0(r2)
4102d6c4:	1004c03a 	cmpne	r2,r2,zero
4102d6c8:	1000131e 	bne	r2,zero,4102d718 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
4102d6cc:	e0bffe17 	ldw	r2,-8(fp)
4102d6d0:	00d040f4 	movhi	r3,16643
4102d6d4:	18fa6404 	addi	r3,r3,-5744
4102d6d8:	10800324 	muli	r2,r2,12
4102d6dc:	10c7883a 	add	r3,r2,r3
4102d6e0:	e0bfff17 	ldw	r2,-4(fp)
4102d6e4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
4102d6e8:	009040f4 	movhi	r2,16643
4102d6ec:	10bee604 	addi	r2,r2,-1128
4102d6f0:	10c00017 	ldw	r3,0(r2)
4102d6f4:	e0bffe17 	ldw	r2,-8(fp)
4102d6f8:	1880040e 	bge	r3,r2,4102d70c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
4102d6fc:	00d040f4 	movhi	r3,16643
4102d700:	18fee604 	addi	r3,r3,-1128
4102d704:	e0bffe17 	ldw	r2,-8(fp)
4102d708:	18800015 	stw	r2,0(r3)
      }
      rc = i;
4102d70c:	e0bffe17 	ldw	r2,-8(fp)
4102d710:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
4102d714:	00000606 	br	4102d730 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
4102d718:	e0bffe17 	ldw	r2,-8(fp)
4102d71c:	10800044 	addi	r2,r2,1
4102d720:	e0bffe15 	stw	r2,-8(fp)
4102d724:	e0bffe17 	ldw	r2,-8(fp)
4102d728:	10800810 	cmplti	r2,r2,32
4102d72c:	103fdf1e 	bne	r2,zero,4102d6ac <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
4102d730:	e0bffd17 	ldw	r2,-12(fp)
}
4102d734:	e037883a 	mov	sp,fp
4102d738:	df000017 	ldw	fp,0(sp)
4102d73c:	dec00104 	addi	sp,sp,4
4102d740:	f800283a 	ret

4102d744 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
4102d744:	defffb04 	addi	sp,sp,-20
4102d748:	df000415 	stw	fp,16(sp)
4102d74c:	df000404 	addi	fp,sp,16
4102d750:	e13ffe15 	stw	r4,-8(fp)
4102d754:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
4102d758:	e0bfff17 	ldw	r2,-4(fp)
4102d75c:	10840070 	cmpltui	r2,r2,4097
4102d760:	1000021e 	bne	r2,zero,4102d76c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
4102d764:	00840004 	movi	r2,4096
4102d768:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
4102d76c:	e0fffe17 	ldw	r3,-8(fp)
4102d770:	e0bfff17 	ldw	r2,-4(fp)
4102d774:	1885883a 	add	r2,r3,r2
4102d778:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
4102d77c:	e0bffe17 	ldw	r2,-8(fp)
4102d780:	e0bffd15 	stw	r2,-12(fp)
4102d784:	00000506 	br	4102d79c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
4102d788:	e0bffd17 	ldw	r2,-12(fp)
4102d78c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
4102d790:	e0bffd17 	ldw	r2,-12(fp)
4102d794:	10800804 	addi	r2,r2,32
4102d798:	e0bffd15 	stw	r2,-12(fp)
4102d79c:	e0fffd17 	ldw	r3,-12(fp)
4102d7a0:	e0bffc17 	ldw	r2,-16(fp)
4102d7a4:	18bff836 	bltu	r3,r2,4102d788 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
4102d7a8:	e0bffe17 	ldw	r2,-8(fp)
4102d7ac:	108007cc 	andi	r2,r2,31
4102d7b0:	1005003a 	cmpeq	r2,r2,zero
4102d7b4:	1000021e 	bne	r2,zero,4102d7c0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
4102d7b8:	e0bffd17 	ldw	r2,-12(fp)
4102d7bc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
4102d7c0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
4102d7c4:	e037883a 	mov	sp,fp
4102d7c8:	df000017 	ldw	fp,0(sp)
4102d7cc:	dec00104 	addi	sp,sp,4
4102d7d0:	f800283a 	ret

4102d7d4 <atexit>:
4102d7d4:	200b883a 	mov	r5,r4
4102d7d8:	000d883a 	mov	r6,zero
4102d7dc:	0009883a 	mov	r4,zero
4102d7e0:	000f883a 	mov	r7,zero
4102d7e4:	102d8941 	jmpi	4102d894 <__register_exitproc>

4102d7e8 <exit>:
4102d7e8:	defffe04 	addi	sp,sp,-8
4102d7ec:	000b883a 	mov	r5,zero
4102d7f0:	dc000015 	stw	r16,0(sp)
4102d7f4:	dfc00115 	stw	ra,4(sp)
4102d7f8:	2021883a 	mov	r16,r4
4102d7fc:	102d9cc0 	call	4102d9cc <__call_exitprocs>
4102d800:	009040f4 	movhi	r2,16643
4102d804:	10bedd04 	addi	r2,r2,-1164
4102d808:	11000017 	ldw	r4,0(r2)
4102d80c:	20800f17 	ldw	r2,60(r4)
4102d810:	10000126 	beq	r2,zero,4102d818 <exit+0x30>
4102d814:	103ee83a 	callr	r2
4102d818:	8009883a 	mov	r4,r16
4102d81c:	102dbbc0 	call	4102dbbc <_exit>

4102d820 <memcmp>:
4102d820:	00c000c4 	movi	r3,3
4102d824:	1980032e 	bgeu	r3,r6,4102d834 <memcmp+0x14>
4102d828:	2144b03a 	or	r2,r4,r5
4102d82c:	10c4703a 	and	r2,r2,r3
4102d830:	10000f26 	beq	r2,zero,4102d870 <memcmp+0x50>
4102d834:	31ffffc4 	addi	r7,r6,-1
4102d838:	3000061e 	bne	r6,zero,4102d854 <memcmp+0x34>
4102d83c:	00000a06 	br	4102d868 <memcmp+0x48>
4102d840:	39ffffc4 	addi	r7,r7,-1
4102d844:	00bfffc4 	movi	r2,-1
4102d848:	21000044 	addi	r4,r4,1
4102d84c:	29400044 	addi	r5,r5,1
4102d850:	38800526 	beq	r7,r2,4102d868 <memcmp+0x48>
4102d854:	20c00003 	ldbu	r3,0(r4)
4102d858:	28800003 	ldbu	r2,0(r5)
4102d85c:	18bff826 	beq	r3,r2,4102d840 <memcmp+0x20>
4102d860:	1885c83a 	sub	r2,r3,r2
4102d864:	f800283a 	ret
4102d868:	0005883a 	mov	r2,zero
4102d86c:	f800283a 	ret
4102d870:	180f883a 	mov	r7,r3
4102d874:	20c00017 	ldw	r3,0(r4)
4102d878:	28800017 	ldw	r2,0(r5)
4102d87c:	18bfed1e 	bne	r3,r2,4102d834 <memcmp+0x14>
4102d880:	31bfff04 	addi	r6,r6,-4
4102d884:	21000104 	addi	r4,r4,4
4102d888:	29400104 	addi	r5,r5,4
4102d88c:	39bff936 	bltu	r7,r6,4102d874 <memcmp+0x54>
4102d890:	003fe806 	br	4102d834 <memcmp+0x14>

4102d894 <__register_exitproc>:
4102d894:	defffa04 	addi	sp,sp,-24
4102d898:	009040f4 	movhi	r2,16643
4102d89c:	10bedd04 	addi	r2,r2,-1164
4102d8a0:	dc000015 	stw	r16,0(sp)
4102d8a4:	14000017 	ldw	r16,0(r2)
4102d8a8:	dd000415 	stw	r20,16(sp)
4102d8ac:	2829883a 	mov	r20,r5
4102d8b0:	81405217 	ldw	r5,328(r16)
4102d8b4:	dcc00315 	stw	r19,12(sp)
4102d8b8:	dc800215 	stw	r18,8(sp)
4102d8bc:	dc400115 	stw	r17,4(sp)
4102d8c0:	dfc00515 	stw	ra,20(sp)
4102d8c4:	2023883a 	mov	r17,r4
4102d8c8:	3027883a 	mov	r19,r6
4102d8cc:	3825883a 	mov	r18,r7
4102d8d0:	28002526 	beq	r5,zero,4102d968 <__register_exitproc+0xd4>
4102d8d4:	29000117 	ldw	r4,4(r5)
4102d8d8:	008007c4 	movi	r2,31
4102d8dc:	11002716 	blt	r2,r4,4102d97c <__register_exitproc+0xe8>
4102d8e0:	8800101e 	bne	r17,zero,4102d924 <__register_exitproc+0x90>
4102d8e4:	2105883a 	add	r2,r4,r4
4102d8e8:	1085883a 	add	r2,r2,r2
4102d8ec:	20c00044 	addi	r3,r4,1
4102d8f0:	1145883a 	add	r2,r2,r5
4102d8f4:	0009883a 	mov	r4,zero
4102d8f8:	15000215 	stw	r20,8(r2)
4102d8fc:	28c00115 	stw	r3,4(r5)
4102d900:	2005883a 	mov	r2,r4
4102d904:	dfc00517 	ldw	ra,20(sp)
4102d908:	dd000417 	ldw	r20,16(sp)
4102d90c:	dcc00317 	ldw	r19,12(sp)
4102d910:	dc800217 	ldw	r18,8(sp)
4102d914:	dc400117 	ldw	r17,4(sp)
4102d918:	dc000017 	ldw	r16,0(sp)
4102d91c:	dec00604 	addi	sp,sp,24
4102d920:	f800283a 	ret
4102d924:	29802204 	addi	r6,r5,136
4102d928:	00800044 	movi	r2,1
4102d92c:	110e983a 	sll	r7,r2,r4
4102d930:	30c04017 	ldw	r3,256(r6)
4102d934:	2105883a 	add	r2,r4,r4
4102d938:	1085883a 	add	r2,r2,r2
4102d93c:	1185883a 	add	r2,r2,r6
4102d940:	19c6b03a 	or	r3,r3,r7
4102d944:	14802015 	stw	r18,128(r2)
4102d948:	14c00015 	stw	r19,0(r2)
4102d94c:	00800084 	movi	r2,2
4102d950:	30c04015 	stw	r3,256(r6)
4102d954:	88bfe31e 	bne	r17,r2,4102d8e4 <__register_exitproc+0x50>
4102d958:	30804117 	ldw	r2,260(r6)
4102d95c:	11c4b03a 	or	r2,r2,r7
4102d960:	30804115 	stw	r2,260(r6)
4102d964:	003fdf06 	br	4102d8e4 <__register_exitproc+0x50>
4102d968:	009040f4 	movhi	r2,16643
4102d96c:	1085da04 	addi	r2,r2,5992
4102d970:	100b883a 	mov	r5,r2
4102d974:	80805215 	stw	r2,328(r16)
4102d978:	003fd606 	br	4102d8d4 <__register_exitproc+0x40>
4102d97c:	00800034 	movhi	r2,0
4102d980:	10800004 	addi	r2,r2,0
4102d984:	1000021e 	bne	r2,zero,4102d990 <__register_exitproc+0xfc>
4102d988:	013fffc4 	movi	r4,-1
4102d98c:	003fdc06 	br	4102d900 <__register_exitproc+0x6c>
4102d990:	01006404 	movi	r4,400
4102d994:	103ee83a 	callr	r2
4102d998:	1007883a 	mov	r3,r2
4102d99c:	103ffa26 	beq	r2,zero,4102d988 <__register_exitproc+0xf4>
4102d9a0:	80805217 	ldw	r2,328(r16)
4102d9a4:	180b883a 	mov	r5,r3
4102d9a8:	18000115 	stw	zero,4(r3)
4102d9ac:	18800015 	stw	r2,0(r3)
4102d9b0:	80c05215 	stw	r3,328(r16)
4102d9b4:	18006215 	stw	zero,392(r3)
4102d9b8:	18006315 	stw	zero,396(r3)
4102d9bc:	0009883a 	mov	r4,zero
4102d9c0:	883fc826 	beq	r17,zero,4102d8e4 <__register_exitproc+0x50>
4102d9c4:	003fd706 	br	4102d924 <__register_exitproc+0x90>

4102d9c8 <register_fini>:
4102d9c8:	f800283a 	ret

4102d9cc <__call_exitprocs>:
4102d9cc:	009040f4 	movhi	r2,16643
4102d9d0:	10bedd04 	addi	r2,r2,-1164
4102d9d4:	10800017 	ldw	r2,0(r2)
4102d9d8:	defff304 	addi	sp,sp,-52
4102d9dc:	df000b15 	stw	fp,44(sp)
4102d9e0:	d8800115 	stw	r2,4(sp)
4102d9e4:	00800034 	movhi	r2,0
4102d9e8:	10800004 	addi	r2,r2,0
4102d9ec:	1005003a 	cmpeq	r2,r2,zero
4102d9f0:	d8800215 	stw	r2,8(sp)
4102d9f4:	d8800117 	ldw	r2,4(sp)
4102d9f8:	dd400815 	stw	r21,32(sp)
4102d9fc:	dd000715 	stw	r20,28(sp)
4102da00:	10805204 	addi	r2,r2,328
4102da04:	dfc00c15 	stw	ra,48(sp)
4102da08:	ddc00a15 	stw	r23,40(sp)
4102da0c:	dd800915 	stw	r22,36(sp)
4102da10:	dcc00615 	stw	r19,24(sp)
4102da14:	dc800515 	stw	r18,20(sp)
4102da18:	dc400415 	stw	r17,16(sp)
4102da1c:	dc000315 	stw	r16,12(sp)
4102da20:	282b883a 	mov	r21,r5
4102da24:	2039883a 	mov	fp,r4
4102da28:	d8800015 	stw	r2,0(sp)
4102da2c:	2829003a 	cmpeq	r20,r5,zero
4102da30:	d8800117 	ldw	r2,4(sp)
4102da34:	14405217 	ldw	r17,328(r2)
4102da38:	88001026 	beq	r17,zero,4102da7c <__call_exitprocs+0xb0>
4102da3c:	ddc00017 	ldw	r23,0(sp)
4102da40:	88800117 	ldw	r2,4(r17)
4102da44:	8c802204 	addi	r18,r17,136
4102da48:	143fffc4 	addi	r16,r2,-1
4102da4c:	80000916 	blt	r16,zero,4102da74 <__call_exitprocs+0xa8>
4102da50:	05bfffc4 	movi	r22,-1
4102da54:	a000151e 	bne	r20,zero,4102daac <__call_exitprocs+0xe0>
4102da58:	8409883a 	add	r4,r16,r16
4102da5c:	2105883a 	add	r2,r4,r4
4102da60:	1485883a 	add	r2,r2,r18
4102da64:	10c02017 	ldw	r3,128(r2)
4102da68:	a8c01126 	beq	r21,r3,4102dab0 <__call_exitprocs+0xe4>
4102da6c:	843fffc4 	addi	r16,r16,-1
4102da70:	85bff81e 	bne	r16,r22,4102da54 <__call_exitprocs+0x88>
4102da74:	d8800217 	ldw	r2,8(sp)
4102da78:	10003126 	beq	r2,zero,4102db40 <__call_exitprocs+0x174>
4102da7c:	dfc00c17 	ldw	ra,48(sp)
4102da80:	df000b17 	ldw	fp,44(sp)
4102da84:	ddc00a17 	ldw	r23,40(sp)
4102da88:	dd800917 	ldw	r22,36(sp)
4102da8c:	dd400817 	ldw	r21,32(sp)
4102da90:	dd000717 	ldw	r20,28(sp)
4102da94:	dcc00617 	ldw	r19,24(sp)
4102da98:	dc800517 	ldw	r18,20(sp)
4102da9c:	dc400417 	ldw	r17,16(sp)
4102daa0:	dc000317 	ldw	r16,12(sp)
4102daa4:	dec00d04 	addi	sp,sp,52
4102daa8:	f800283a 	ret
4102daac:	8409883a 	add	r4,r16,r16
4102dab0:	88c00117 	ldw	r3,4(r17)
4102dab4:	2105883a 	add	r2,r4,r4
4102dab8:	1445883a 	add	r2,r2,r17
4102dabc:	18ffffc4 	addi	r3,r3,-1
4102dac0:	11800217 	ldw	r6,8(r2)
4102dac4:	1c001526 	beq	r3,r16,4102db1c <__call_exitprocs+0x150>
4102dac8:	10000215 	stw	zero,8(r2)
4102dacc:	303fe726 	beq	r6,zero,4102da6c <__call_exitprocs+0xa0>
4102dad0:	00c00044 	movi	r3,1
4102dad4:	1c06983a 	sll	r3,r3,r16
4102dad8:	90804017 	ldw	r2,256(r18)
4102dadc:	8cc00117 	ldw	r19,4(r17)
4102dae0:	1884703a 	and	r2,r3,r2
4102dae4:	10001426 	beq	r2,zero,4102db38 <__call_exitprocs+0x16c>
4102dae8:	90804117 	ldw	r2,260(r18)
4102daec:	1884703a 	and	r2,r3,r2
4102daf0:	10000c1e 	bne	r2,zero,4102db24 <__call_exitprocs+0x158>
4102daf4:	2105883a 	add	r2,r4,r4
4102daf8:	1485883a 	add	r2,r2,r18
4102dafc:	11400017 	ldw	r5,0(r2)
4102db00:	e009883a 	mov	r4,fp
4102db04:	303ee83a 	callr	r6
4102db08:	88800117 	ldw	r2,4(r17)
4102db0c:	98bfc81e 	bne	r19,r2,4102da30 <__call_exitprocs+0x64>
4102db10:	b8800017 	ldw	r2,0(r23)
4102db14:	147fd526 	beq	r2,r17,4102da6c <__call_exitprocs+0xa0>
4102db18:	003fc506 	br	4102da30 <__call_exitprocs+0x64>
4102db1c:	8c000115 	stw	r16,4(r17)
4102db20:	003fea06 	br	4102dacc <__call_exitprocs+0x100>
4102db24:	2105883a 	add	r2,r4,r4
4102db28:	1485883a 	add	r2,r2,r18
4102db2c:	11000017 	ldw	r4,0(r2)
4102db30:	303ee83a 	callr	r6
4102db34:	003ff406 	br	4102db08 <__call_exitprocs+0x13c>
4102db38:	303ee83a 	callr	r6
4102db3c:	003ff206 	br	4102db08 <__call_exitprocs+0x13c>
4102db40:	88800117 	ldw	r2,4(r17)
4102db44:	1000081e 	bne	r2,zero,4102db68 <__call_exitprocs+0x19c>
4102db48:	89000017 	ldw	r4,0(r17)
4102db4c:	20000726 	beq	r4,zero,4102db6c <__call_exitprocs+0x1a0>
4102db50:	b9000015 	stw	r4,0(r23)
4102db54:	8809883a 	mov	r4,r17
4102db58:	00000000 	call	40000000 <__alt_mem_mem_if_ddr2_emif+0x40000000>
4102db5c:	bc400017 	ldw	r17,0(r23)
4102db60:	883fb71e 	bne	r17,zero,4102da40 <__call_exitprocs+0x74>
4102db64:	003fc506 	br	4102da7c <__call_exitprocs+0xb0>
4102db68:	89000017 	ldw	r4,0(r17)
4102db6c:	882f883a 	mov	r23,r17
4102db70:	2023883a 	mov	r17,r4
4102db74:	883fb21e 	bne	r17,zero,4102da40 <__call_exitprocs+0x74>
4102db78:	003fc006 	br	4102da7c <__call_exitprocs+0xb0>

4102db7c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
4102db7c:	defffd04 	addi	sp,sp,-12
4102db80:	df000215 	stw	fp,8(sp)
4102db84:	df000204 	addi	fp,sp,8
4102db88:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
4102db8c:	e0bfff17 	ldw	r2,-4(fp)
4102db90:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
4102db94:	e0bffe17 	ldw	r2,-8(fp)
4102db98:	1005003a 	cmpeq	r2,r2,zero
4102db9c:	1000021e 	bne	r2,zero,4102dba8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
4102dba0:	002af070 	cmpltui	zero,zero,43969
4102dba4:	00000106 	br	4102dbac <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
4102dba8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
4102dbac:	e037883a 	mov	sp,fp
4102dbb0:	df000017 	ldw	fp,0(sp)
4102dbb4:	dec00104 	addi	sp,sp,4
4102dbb8:	f800283a 	ret

4102dbbc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
4102dbbc:	defffd04 	addi	sp,sp,-12
4102dbc0:	dfc00215 	stw	ra,8(sp)
4102dbc4:	df000115 	stw	fp,4(sp)
4102dbc8:	df000104 	addi	fp,sp,4
4102dbcc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
4102dbd0:	e13fff17 	ldw	r4,-4(fp)
4102dbd4:	102db7c0 	call	4102db7c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
4102dbd8:	003fff06 	br	4102dbd8 <_exit+0x1c>
4102dbdc:	4102d9c8 	cmpgei	r4,r8,2919
