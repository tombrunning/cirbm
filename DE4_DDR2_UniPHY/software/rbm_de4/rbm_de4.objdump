
rbm_de4.elf:     file format elf32-littlenios2
rbm_de4.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x410201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x41020000 paddr 0x41020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x41020020 paddr 0x41020020 align 2**12
         filesz 0x00013e68 memsz 0x00013e68 flags r-x
    LOAD off    0x00015000 vaddr 0x00000000 paddr 0x41033e88 align 2**12
         filesz 0x00002ba8 memsz 0x00002f9c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  41020000  41020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  41020020  41020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013cd4  410201b4  410201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001118  00000000  41033e88  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a90  00001118  41034fa0  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003f4  00002ba8  41036a30  00017ba8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00017ba8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000010d8  00000000  00000000  00017bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001904  00000000  00000000  00018ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003378d  00000000  00000000  0001a5ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ae92  00000000  00000000  0004dd39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c0c5  00000000  00000000  00058bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022b8  00000000  00000000  00074c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002dd4  00000000  00000000  00076f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000124a3  00000000  00000000  00079d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0008c1c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b70  00000000  00000000  0008c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00090946  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00090949  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00090953  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00090954  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00090955  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00090959  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009095d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00090961  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0009096a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00090973  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0009097c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  00090984  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c6b  00000000  00000000  000909a5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008c397  00000000  00000000  00095610  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
41020000 l    d  .entry	00000000 .entry
41020020 l    d  .exceptions	00000000 .exceptions
410201b4 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00001118 l    d  .rwdata	00000000 .rwdata
00002ba8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
410201fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 memtest.c
41020200 l     F .text	00000078 MenuHeader
41020278 l     F .text	00000054 MenuBegin
410202cc l     F .text	00000040 MenuItem
00002ba8 l     O .bss	00000001 ch.3039
00002ba9 l     O .bss	00000004 entry.3038
4102039c l     F .text	000000fc MenuEnd
41020498 l     F .text	00000118 MemGetAddressRange
410205b0 l     F .text	00000078 MemTestDataBus
41020628 l     F .text	000001e0 MemTestAddressBus
41020808 l     F .text	0000020c MemTest8_16BitAccess
41020a14 l     F .text	00000198 MemTestDevice
41020bac l     F .text	000001ac TestRam
41020d58 l     F .text	00000148 FlashCheckIfBlockErased
41020ea0 l     F .text	00000390 FlashTestBlockWrite
41021230 l     F .text	00000310 FlashTestReadWrite
41021540 l     F .text	00000118 FlashTestBlockErase
41021658 l     F .text	00000154 FlashRunTests
410217ac l     F .text	00000174 GetFlashName
41021920 l     F .text	0000034c FlashErase
41021c6c l     F .text	00000264 FlashFindErasedBlocks
41021ed0 l     F .text	0000019c TestFlash
4102206c l     F .text	00000178 TopMenu
00000000 l    df *ABS*	00000000 lib2-divmod.c
41022230 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00001118 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
41022f40 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
410230c8 l     F .text	00000058 __sprint_r
00000b52 l     O .rodata	00000010 blanks.3452
00000b42 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00000b6a l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
00000c8d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
410268ac l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
410282a8 l     F .text	00000058 std
410283b4 l     F .text	00000008 __fp_lock
410283bc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00002b74 l     O .rwdata	00000004 charset
00000e30 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00000f78 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
4102b178 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
4102b5a8 l     F .text	00000048 match
00001940 l     O .rwdata	00000014 fpi.1950
00000f94 l     O .rodata	00000028 tinytens
0000192c l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
4102de00 l     F .text	00000024 htinit
4102de8c l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
4102e6f4 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
4102f880 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
41031424 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
410314fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
410316cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
410317ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
410318cc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
41031a28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
41031c54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002b98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
41031ef0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001afc l     O .rwdata	00001060 jtag_uart
41031fdc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
4103221c l     F .text	00000228 altera_avalon_jtag_uart_irq
41032444 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
41032ac0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
41032e0c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
410332c4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
41033400 l     F .text	000000dc alt_file_locked
41033664 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
41033c70 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
41033e24 l     F .text	00000040 alt_sim_halt
41022d98 g     F .text	0000001c putchar
41029bec g     F .text	00000094 _mprec_log10
41029cd8 g     F .text	00000088 __any_on
4102e988 g     F .text	00000070 _isatty_r
00000f50 g     O .rodata	00000028 __mprec_tinytens
41031a88 g     F .text	0000006c alt_main
41022dbc g     F .text	000000a0 _puts_r
00002d0c g     O .bss	00000100 alt_irq
4102e9f8 g     F .text	00000078 _lseek_r
41034fa0 g       *ABS*	00000000 __flash_rwdata_start
41030390 g     F .text	00000088 __eqdf2
00002f9c g       *ABS*	00000000 __alt_heap_start
41022d20 g     F .text	00000044 printf
4102b3a8 g     F .text	00000068 __sseek
41028310 g     F .text	000000a4 __sinit
4102d980 g     F .text	00000130 __swbuf_r
41029250 g     F .text	00000084 _setlocale_r
41028410 g     F .text	00000068 __sfmoreglue
4102d964 g     F .text	0000001c ungetc
41031b14 g     F .text	00000020 __malloc_unlock
4102b5f0 g     F .text	000014e4 _strtod_r
4102030c g     F .text	00000090 GetInputString
41029668 g     F .text	000000e0 memmove
41028400 g     F .text	00000010 _cleanup
41029d60 g     F .text	000000bc _Balloc
410304a0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
41020000 g     F .entry	0000001c __reset
41020020 g       *ABS*	00000000 __flash_exceptions_start
4102dd8c g     F .text	00000074 _fstat_r
00002bbc g     O .bss	00000004 errno
41022ebc g     F .text	00000014 __srget
41026670 g     F .text	00000024 __svfscanf
41030c88 g     F .text	0000002c __make_fp
00002bd0 g     O .bss	00000004 alt_argv
0000ab5c g       *ABS*	00000000 _gp
0000197c g     O .rwdata	00000180 alt_fd_list
41022414 g     F .text	00000090 _getc_r
4102237c g     F .text	00000098 getc
41022db4 g     F .text	00000008 _putchar_r
41032f34 g     F .text	00000094 alt_find_dev
41022c80 g     F .text	000000a0 memcpy
4102e740 g     F .text	00000248 __hexnan
410283f4 g     F .text	0000000c _cleanup_r
410306c0 g     F .text	000000f8 __floatsidf
41033388 g     F .text	00000078 alt_io_redirect
410305b0 g     F .text	00000088 __ltdf2
41033e88 g       *ABS*	00000000 __DTOR_END__
41022e5c g     F .text	00000014 puts
41029504 g     F .text	00000040 mbrtowc
41026694 g     F .text	00000068 _vfscanf_r
41029b3c g     F .text	000000b0 __ratio
4103265c g     F .text	00000224 altera_avalon_jtag_uart_read
410224b8 g     F .text	00000014 malloc
41022d64 g     F .text	00000034 _printf_r
4102236c g     F .text	00000008 __udivsi3
4103172c g     F .text	000000c0 isatty
41029200 g     F .text	0000002c iswspace
00000e60 g     O .rodata	000000c8 __mprec_tens
4102922c g     F .text	00000008 __locale_charset
4102eae8 g     F .text	000000a4 __fixunsdfsi
41033a60 g     F .text	00000090 alt_icache_flush
00002bb0 g     O .bss	00000004 __malloc_top_pad
4102d3d0 g     F .text	00000024 strtoul
00002b70 g     O .rwdata	00000004 __mb_cur_max
41029234 g     F .text	0000000c _localeconv_r
4102d3f4 g     F .text	000002f8 _strtoull_r
4102a458 g     F .text	0000003c __i2b
41028be4 g     F .text	0000049c __sfvwrite_r
41022ed0 g     F .text	00000070 _sbrk_r
4102ea70 g     F .text	00000078 _read_r
41031484 g     F .text	00000078 alt_dcache_flush
00001920 g     O .rwdata	0000000c __lc_ctype
00002b88 g     O .rwdata	00000004 alt_max_fd
41030fc8 g     F .text	00000138 __unpack_d
4102dc68 g     F .text	00000110 _fclose_r
41028274 g     F .text	00000034 fflush
00002bb4 g     O .bss	00000004 __malloc_max_sbrked_mem
4102fd10 g     F .text	00000074 __adddf3
4102f718 g     F .text	00000078 __nesf2
41029a1c g     F .text	00000120 __b2d
4102f168 g     F .text	000005b0 __umoddi3
41031938 g     F .text	000000f0 lseek
00002b60 g     O .rwdata	00000004 _global_impure_ptr
4102a9c0 g     F .text	000005f4 _realloc_r
00002f9c g       *ABS*	00000000 __bss_end
410331cc g     F .text	000000f8 alt_iic_isr_register
4103375c g     F .text	0000010c alt_tick
00002c0c g     O .bss	00000100 __hexdig
4102eb8c g     F .text	000005dc __udivdi3
00000f28 g     O .rodata	00000028 __mprec_bigtens
4102a6b4 g     F .text	00000120 __s2b
41030904 g     F .text	00000194 __floatunsidf
4102993c g     F .text	00000060 __mcmp
00002b6c g     O .rwdata	00000004 __ctype_ptr
410283dc g     F .text	00000018 __fp_lock_all
41033184 g     F .text	00000048 alt_ic_irq_enabled
410336c4 g     F .text	00000098 alt_alarm_stop
4102ce58 g     F .text	00000024 strtol
00002bd8 g     O .bss	00000004 alt_irq_active
410200ec g     F .exceptions	000000c8 alt_irq_handler
00001954 g     O .rwdata	00000028 alt_dev_null
41030b18 g     F .text	000000c8 __unpack_f
41032d14 g     F .text	00000044 alt_dcache_flush_all
41029808 g     F .text	00000070 __hi0bits
410307b8 g     F .text	000000d8 __fixdfsi
4102cbf8 g     F .text	0000001c strtod
00002ba8 g       *ABS*	00000000 __ram_rwdata_end
41020000 g       *ABS*	00000000 __alt_mem_onchip_memory
00002b80 g     O .rwdata	00000008 alt_dev_list
41031dd0 g     F .text	00000120 write
4102a8d8 g     F .text	000000e8 _putc_r
4102f790 g     F .text	00000078 __gtsf2
00001118 g       *ABS*	00000000 __ram_rodata_end
410315f8 g     F .text	000000d4 fstat
41030638 g     F .text	00000088 __ledf2
4102a594 g     F .text	00000120 __pow5mult
00002bc0 g     O .bss	00000004 __nlocale_changed
41022374 g     F .text	00000008 __umodsi3
00002f9c g       *ABS*	00000000 end
410311c8 g     F .text	00000160 __pack_f
4103215c g     F .text	000000c0 altera_avalon_jtag_uart_init
41033e84 g       *ABS*	00000000 __CTOR_LIST__
40000000 g       *ABS*	00000000 __alt_stack_pointer
41032b30 g     F .text	00000090 alt_avalon_timer_sc_init
41030a98 g     F .text	00000080 __clzsi2
41032880 g     F .text	00000240 altera_avalon_jtag_uart_write
41028300 g     F .text	00000004 __sfp_lock_acquire
41029584 g     F .text	000000e4 memchr
41023120 g     F .text	00001eac ___vfprintf_internal_r
4102b340 g     F .text	00000060 _sprintf_r
410288d0 g     F .text	00000314 _free_r
41033c74 g     F .text	000001b0 __call_exitprocs
41022e70 g     F .text	0000004c __srget_r
00002bc4 g     O .bss	00000004 __mlocale_changed
00002b68 g     O .rwdata	00000004 __malloc_sbrk_base
410201b4 g     F .text	0000004c _start
00002bdc g     O .bss	00000004 _alt_tick_rate
4102ce7c g     F .text	00000324 _strtoll_r
4102a124 g     F .text	0000014c __lshift
00002be0 g     O .bss	00000004 _alt_nticks
41031b34 g     F .text	00000120 read
41031f84 g     F .text	00000058 alt_sys_init
41033b3c g     F .text	00000134 __register_exitproc
4102a270 g     F .text	000001e8 __multiply
410324f4 g     F .text	00000074 altera_avalon_jtag_uart_close
00001118 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00002be4 g     O .bss	00000028 __malloc_current_mallinfo
41029e1c g     F .text	0000017c __d2b
41032014 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
4102d1a0 g     F .text	00000230 _strtoul_r
410339a8 g     F .text	000000b8 alt_get_fd
41031100 g     F .text	000000c8 __fpcmp_parts_d
4102dbf8 g     F .text	00000070 _close_r
41022c0c g     F .text	00000074 memcmp
410320c4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00002f9c g       *ABS*	00000000 __alt_stack_base
4103210c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
41022fd0 g     F .text	00000084 sscanf
41026770 g     F .text	0000013c __swsetup_r
41030138 g     F .text	00000258 __divdf3
41028478 g     F .text	000000f0 __sfp
41029c80 g     F .text	00000058 __copybits
00001518 g     O .rwdata	00000408 __malloc_av_
4102830c g     F .text	00000004 __sinit_lock_release
4102fd84 g     F .text	000003b4 __muldf3
4102b48c g     F .text	00000060 __sread
41028764 g     F .text	00000040 fread
41033888 g     F .text	00000120 alt_find_file
41032d58 g     F .text	000000b4 alt_dev_llist_insert
41031af4 g     F .text	00000020 __malloc_lock
41031d14 g     F .text	000000bc sbrk
41028078 g     F .text	000001fc _fflush_r
4102db44 g     F .text	000000b4 _calloc_r
00002b90 g     O .rwdata	00000008 alt_flash_dev_list
00002ba8 g       *ABS*	00000000 __bss_start
41029748 g     F .text	00000098 memset
410221e4 g     F .text	0000004c main
00002bd4 g     O .bss	00000004 alt_envp
00002bb8 g     O .bss	00000004 __malloc_max_total_mem
4103206c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
4102dab0 g     F .text	0000001c __swbuf
4102f808 g     F .text	00000078 __ltsf2
41028568 g     F .text	000001fc _fread_r
4102b3a0 g     F .text	00000008 __sclose
40000000 g       *ABS*	00000000 __alt_heap_limit
4102dd78 g     F .text	00000014 fclose
4102cc14 g     F .text	00000244 _strtol_r
41030890 g     F .text	00000074 __truncdfsf2
00002e0c g     O .bss	00000190 _atexit0
41026ac4 g     F .text	000015b4 _dtoa_r
410224cc g     F .text	00000740 _malloc_r
00002b8c g     O .rwdata	00000004 alt_errno
4102d6ec g     F .text	000000dc __submore
00000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr2_emif
41029148 g     F .text	000000b8 _fwalk
41029544 g     F .text	00000040 _mbtowc_r
4102a7d4 g     F .text	00000104 putc
410222ac g     F .text	00000060 __divsi3
00000fd8 g     O .rodata	00000014 __thenan_df
410287a4 g     F .text	0000012c _malloc_trim_r
41033e88 g       *ABS*	00000000 __CTOR_END__
4102b4ec g     F .text	000000bc strcmp
41033e88 g       *ABS*	00000000 __flash_rodata_start
41033e88 g       *ABS*	00000000 __DTOR_LIST__
41030418 g     F .text	00000088 __nedf2
41031f50 g     F .text	00000034 alt_irq_init
41031cb4 g     F .text	00000060 alt_release_fd
4102b2cc g     F .text	00000074 sprintf
00000fec g     O .rodata	00000100 __clz_tab
00002bc8 g     O .bss	00000004 _PathLocale
4102cad4 g     F .text	00000124 strtof
41033af0 g     F .text	00000014 atexit
4102dacc g     F .text	00000078 _write_r
410292d4 g     F .text	0000001c setlocale
4102b2c4 g     F .text	00000008 nanf
00002b5c g     O .rwdata	00000004 _impure_ptr
00002bcc g     O .bss	00000004 alt_argc
41029484 g     F .text	00000080 _mbrtowc_r
41032ed0 g     F .text	00000064 _do_dtors
4102afb4 g     F .text	000001c4 __srefill_r
41020020 g       .exceptions	00000000 alt_irq_entry
4102999c g     F .text	00000080 __ulp
4102b194 g     F .text	00000040 __isinfd
410283c4 g     F .text	00000018 __fp_unlock_all
00002b78 g     O .rwdata	00000008 alt_fs_list
41020020 g       *ABS*	00000000 __ram_exceptions_start
41029240 g     F .text	00000010 localeconv
41032ff8 g     F .text	00000050 alt_ic_isr_register
4102de24 g     F .text	00000068 __hexdig_init
41022f48 g     F .text	00000088 _sscanf_r
00002ba8 g       *ABS*	00000000 _edata
00002f9c g       *ABS*	00000000 _end
41031528 g     F .text	0000007c alt_flash_open_dev
410201b4 g       *ABS*	00000000 __ram_exceptions_end
410266fc g     F .text	00000074 vfscanf
41032568 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
410330e4 g     F .text	000000a0 alt_ic_irq_disable
4102b410 g     F .text	0000007c __swrite
00002b64 g     O .rwdata	00000004 __malloc_trim_threshold
41033868 g     F .text	00000020 altera_nios2_qsys_irq_init
41033b04 g     F .text	00000038 exit
41029080 g     F .text	000000c8 _fwalk_reent
41029f98 g     F .text	0000018c __mdiff
410315a4 g     F .text	00000054 alt_flash_close_dev
4102230c g     F .text	00000060 __modsi3
40000000 g       *ABS*	00000000 __alt_data_end
41020020 g     F .exceptions	00000000 alt_exception
41028304 g     F .text	00000004 __sfp_lock_release
4102b204 g     F .text	000000c0 __sccl
00000b8c g     O .rodata	00000101 _ctype_
41030be0 g     F .text	000000a8 __fpcmp_parts_f
41033e64 g     F .text	00000020 _exit
4102b1d4 g     F .text	00000030 __isnand
41032bc0 g     F .text	00000154 alt_alarm_start
410292f0 g     F .text	00000194 __smakebuf_r
41023054 g     F .text	00000074 strlen
410334dc g     F .text	00000188 open
41030528 g     F .text	00000088 __gedf2
4102df3c g     F .text	000007b8 __gethex
41032fc8 g     F .text	00000030 alt_icache_flush_all
00002b9c g     O .rwdata	00000004 alt_priority_mask
41033048 g     F .text	0000009c alt_ic_irq_enable
41024fcc g     F .text	00000024 __vfprintf_internal
4102fc90 g     F .text	00000080 __subdf3
41029878 g     F .text	000000c4 __lo0bits
41024ff0 g     F .text	00001680 __svfscanf_r
00002ba0 g     O .rwdata	00000008 alt_alarm_list
4102d7c8 g     F .text	0000019c _ungetc_r
41032e6c g     F .text	00000064 _do_ctors
41031328 g     F .text	000000fc close
4103184c g     F .text	00000080 alt_load
41030cb4 g     F .text	00000314 __pack_d
410224a4 g     F .text	00000014 free
41028308 g     F .text	00000004 __sinit_lock_acquire
4102a494 g     F .text	00000100 __multadd
410297e0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

41020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
41020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
41020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
41020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
4102000c:	00bffd16 	blt	zero,r2,41020004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
41020010:	005040b4 	movhi	at,16642
    ori r1, r1, %lo(_start)
41020014:	08406d14 	ori	at,at,436
    jmp r1
41020018:	0800683a 	jmp	at
4102001c:	00000000 	call	40000000 <__alt_data_end>

Disassembly of section .exceptions:

41020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
41020020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
41020024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
41020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
4102002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
41020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
41020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
41020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
4102003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
41020040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
41020044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
41020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
4102004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
41020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
41020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
41020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
4102005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
41020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
41020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
41020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
4102006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
41020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
41020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
41020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
4102007c:	10000326 	beq	r2,zero,4102008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
41020080:	20000226 	beq	r4,zero,4102008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
41020084:	10200ec0 	call	410200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
41020088:	00000306 	br	41020098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
4102008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
41020090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
41020094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
41020098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
4102009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
410200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
410200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
410200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
410200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
410200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
410200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
410200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
410200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
410200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
410200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
410200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
410200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
410200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
410200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
410200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
410200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
410200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
410200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
410200e8:	ef80083a 	eret

410200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
410200ec:	defff904 	addi	sp,sp,-28
410200f0:	dfc00615 	stw	ra,24(sp)
410200f4:	df000515 	stw	fp,20(sp)
410200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
410200fc:	0005313a 	rdctl	r2,ipending
41020100:	e0bffc15 	stw	r2,-16(fp)

  return active;
41020104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
41020108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
4102010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
41020110:	00800044 	movi	r2,1
41020114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
41020118:	e0ffff17 	ldw	r3,-4(fp)
4102011c:	e0bffe17 	ldw	r2,-8(fp)
41020120:	1884703a 	and	r2,r3,r2
41020124:	1005003a 	cmpeq	r2,r2,zero
41020128:	1000161e 	bne	r2,zero,41020184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
4102012c:	e0bffd17 	ldw	r2,-12(fp)
41020130:	00c00034 	movhi	r3,0
41020134:	18cb4304 	addi	r3,r3,11532
41020138:	100490fa 	slli	r2,r2,3
4102013c:	10c5883a 	add	r2,r2,r3
41020140:	11400017 	ldw	r5,0(r2)
41020144:	e0bffd17 	ldw	r2,-12(fp)
41020148:	00c00034 	movhi	r3,0
4102014c:	18cb4304 	addi	r3,r3,11532
41020150:	100490fa 	slli	r2,r2,3
41020154:	10c5883a 	add	r2,r2,r3
41020158:	10800104 	addi	r2,r2,4
4102015c:	11000017 	ldw	r4,0(r2)
41020160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
41020164:	0005313a 	rdctl	r2,ipending
41020168:	e0bffb15 	stw	r2,-20(fp)

  return active;
4102016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
41020170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
41020174:	e0bfff17 	ldw	r2,-4(fp)
41020178:	1004c03a 	cmpne	r2,r2,zero
4102017c:	103fe31e 	bne	r2,zero,4102010c <alt_irq_handler+0x20>
41020180:	00000706 	br	410201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
41020184:	e0bffe17 	ldw	r2,-8(fp)
41020188:	1085883a 	add	r2,r2,r2
4102018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
41020190:	e0bffd17 	ldw	r2,-12(fp)
41020194:	10800044 	addi	r2,r2,1
41020198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
4102019c:	003fde06 	br	41020118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
410201a0:	e037883a 	mov	sp,fp
410201a4:	dfc00117 	ldw	ra,4(sp)
410201a8:	df000017 	ldw	fp,0(sp)
410201ac:	dec00204 	addi	sp,sp,8
410201b0:	f800283a 	ret

Disassembly of section .text:

410201b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
410201b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
410201b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
410201bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
410201c0:	00bffd16 	blt	zero,r2,410201b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
410201c4:	06d00034 	movhi	sp,16384
    ori sp, sp, %lo(__alt_stack_pointer)
410201c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
410201cc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
410201d0:	d6aad714 	ori	gp,gp,43868
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
410201d4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
410201d8:	108aea14 	ori	r2,r2,11176

    movhi r3, %hi(__bss_end)
410201dc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
410201e0:	18cbe714 	ori	r3,r3,12188

    beq r2, r3, 1f
410201e4:	10c00326 	beq	r2,r3,410201f4 <_start+0x40>

0:
    stw zero, (r2)
410201e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
410201ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
410201f0:	10fffd36 	bltu	r2,r3,410201e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
410201f4:	103184c0 	call	4103184c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
410201f8:	1031a880 	call	41031a88 <alt_main>

410201fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
410201fc:	003fff06 	br	410201fc <alt_after_alt_main>

41020200 <MenuHeader>:
*
*  Purpose: Prints the menu header.
*
******************************************************************/
static void MenuHeader(void)
{
41020200:	defffe04 	addi	sp,sp,-8
41020204:	dfc00115 	stw	ra,4(sp)
41020208:	df000015 	stw	fp,0(sp)
4102020c:	d839883a 	mov	fp,sp
  printf("\n\n");
41020210:	01000034 	movhi	r4,0
41020214:	21000004 	addi	r4,r4,0
41020218:	1022e5c0 	call	41022e5c <puts>
  printf("             <---->   Nios II Memory Test.   <---->\n");
4102021c:	01000034 	movhi	r4,0
41020220:	21000104 	addi	r4,r4,4
41020224:	1022e5c0 	call	41022e5c <puts>
  printf("This software example tests the memory in your system to assure it\n");
41020228:	01000034 	movhi	r4,0
4102022c:	21000e04 	addi	r4,r4,56
41020230:	1022e5c0 	call	41022e5c <puts>
  printf("is working properly.  This test is destructive to the contents of\n");
41020234:	01000034 	movhi	r4,0
41020238:	21001f04 	addi	r4,r4,124
4102023c:	1022e5c0 	call	41022e5c <puts>
  printf("the memory it tests. Assure the memory being tested does not contain\n");
41020240:	01000034 	movhi	r4,0
41020244:	21003004 	addi	r4,r4,192
41020248:	1022e5c0 	call	41022e5c <puts>
  printf("the executable or data sections of this code or the exception address\n");
4102024c:	01000034 	movhi	r4,0
41020250:	21004204 	addi	r4,r4,264
41020254:	1022e5c0 	call	41022e5c <puts>
  printf("of the system.\n");
41020258:	01000034 	movhi	r4,0
4102025c:	21005404 	addi	r4,r4,336
41020260:	1022e5c0 	call	41022e5c <puts>
}
41020264:	e037883a 	mov	sp,fp
41020268:	dfc00117 	ldw	ra,4(sp)
4102026c:	df000017 	ldw	fp,0(sp)
41020270:	dec00204 	addi	sp,sp,8
41020274:	f800283a 	ret

41020278 <MenuBegin>:
*
*  Purpose: Prints the top portion of the menu.
*
******************************************************************/
static void MenuBegin( char *title )
{
41020278:	defffd04 	addi	sp,sp,-12
4102027c:	dfc00215 	stw	ra,8(sp)
41020280:	df000115 	stw	fp,4(sp)
41020284:	df000104 	addi	fp,sp,4
41020288:	e13fff15 	stw	r4,-4(fp)
  printf("\n\n");
4102028c:	01000034 	movhi	r4,0
41020290:	21000004 	addi	r4,r4,0
41020294:	1022e5c0 	call	41022e5c <puts>
  printf("----------------------------------\n");
41020298:	01000034 	movhi	r4,0
4102029c:	21005804 	addi	r4,r4,352
410202a0:	1022e5c0 	call	41022e5c <puts>
  printf("%s\n",title);
410202a4:	e13fff17 	ldw	r4,-4(fp)
410202a8:	1022e5c0 	call	41022e5c <puts>
  printf("----------------------------------\n");
410202ac:	01000034 	movhi	r4,0
410202b0:	21005804 	addi	r4,r4,352
410202b4:	1022e5c0 	call	41022e5c <puts>
}
410202b8:	e037883a 	mov	sp,fp
410202bc:	dfc00117 	ldw	ra,4(sp)
410202c0:	df000017 	ldw	fp,0(sp)
410202c4:	dec00204 	addi	sp,sp,8
410202c8:	f800283a 	ret

410202cc <MenuItem>:
*  Purpose: Prints selection items in the menu, enumerated by the 
*           specified letter.
*
******************************************************************/
static void MenuItem( char letter, char *name )
{
410202cc:	defffc04 	addi	sp,sp,-16
410202d0:	dfc00315 	stw	ra,12(sp)
410202d4:	df000215 	stw	fp,8(sp)
410202d8:	df000204 	addi	fp,sp,8
410202dc:	e17fff15 	stw	r5,-4(fp)
410202e0:	e13ffe05 	stb	r4,-8(fp)
  printf("     %c:  %s\n" ,letter, name);
410202e4:	e17ffe07 	ldb	r5,-8(fp)
410202e8:	01000034 	movhi	r4,0
410202ec:	21006104 	addi	r4,r4,388
410202f0:	e1bfff17 	ldw	r6,-4(fp)
410202f4:	1022d200 	call	41022d20 <printf>
}
410202f8:	e037883a 	mov	sp,fp
410202fc:	dfc00117 	ldw	ra,4(sp)
41020300:	df000017 	ldw	fp,0(sp)
41020304:	dec00204 	addi	sp,sp,8
41020308:	f800283a 	ret

4102030c <GetInputString>:
*           returns the string, minus any '\r' characters it 
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
4102030c:	defff904 	addi	sp,sp,-28
41020310:	dfc00615 	stw	ra,24(sp)
41020314:	df000515 	stw	fp,20(sp)
41020318:	df000504 	addi	fp,sp,20
4102031c:	e13ffd15 	stw	r4,-12(fp)
41020320:	e17ffe15 	stw	r5,-8(fp)
41020324:	e1bfff15 	stw	r6,-4(fp)
  int i;
  int ch = 0;
41020328:	e03ffb15 	stw	zero,-20(fp)
  
  for(i = 0; (ch != '\n') && (i < size); )
4102032c:	e03ffc15 	stw	zero,-16(fp)
41020330:	00000f06 	br	41020370 <GetInputString+0x64>
  {
    if( (ch = getc(stream)) != '\r')
41020334:	e13fff17 	ldw	r4,-4(fp)
41020338:	102237c0 	call	4102237c <getc>
4102033c:	e0bffb15 	stw	r2,-20(fp)
41020340:	e0bffb17 	ldw	r2,-20(fp)
41020344:	10800360 	cmpeqi	r2,r2,13
41020348:	1000091e 	bne	r2,zero,41020370 <GetInputString+0x64>
    {
      entry[i] = ch;
4102034c:	e0bffc17 	ldw	r2,-16(fp)
41020350:	1007883a 	mov	r3,r2
41020354:	e0bffd17 	ldw	r2,-12(fp)
41020358:	1887883a 	add	r3,r3,r2
4102035c:	e0bffb17 	ldw	r2,-20(fp)
41020360:	18800005 	stb	r2,0(r3)
      i++;
41020364:	e0bffc17 	ldw	r2,-16(fp)
41020368:	10800044 	addi	r2,r2,1
4102036c:	e0bffc15 	stw	r2,-16(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;
  
  for(i = 0; (ch != '\n') && (i < size); )
41020370:	e0bffb17 	ldw	r2,-20(fp)
41020374:	108002a0 	cmpeqi	r2,r2,10
41020378:	1000031e 	bne	r2,zero,41020388 <GetInputString+0x7c>
4102037c:	e0fffc17 	ldw	r3,-16(fp)
41020380:	e0bffe17 	ldw	r2,-8(fp)
41020384:	18bfeb16 	blt	r3,r2,41020334 <GetInputString+0x28>
    {
      entry[i] = ch;
      i++;
    }
  }
}
41020388:	e037883a 	mov	sp,fp
4102038c:	dfc00117 	ldw	ra,4(sp)
41020390:	df000017 	ldw	fp,0(sp)
41020394:	dec00204 	addi	sp,sp,8
41020398:	f800283a 	ret

4102039c <MenuEnd>:
*  Purpose: Prints the end of the menu, then captures and returns
*           the user's selection.
*
******************************************************************/
static int MenuEnd( char lowLetter, char highLetter )
{
4102039c:	defffc04 	addi	sp,sp,-16
410203a0:	dfc00315 	stw	ra,12(sp)
410203a4:	df000215 	stw	fp,8(sp)
410203a8:	df000204 	addi	fp,sp,8
410203ac:	e13ffe05 	stb	r4,-8(fp)
410203b0:	e17fff05 	stb	r5,-4(fp)
  static char entry[4];
  static char ch;

  printf("     q:  Exit\n");
410203b4:	01000034 	movhi	r4,0
410203b8:	21006504 	addi	r4,r4,404
410203bc:	1022e5c0 	call	41022e5c <puts>
  printf("----------------------------------\n");
410203c0:	01000034 	movhi	r4,0
410203c4:	21005804 	addi	r4,r4,352
410203c8:	1022e5c0 	call	41022e5c <puts>
  printf("\nSelect Choice (%c-%c): [Followed by <enter>]",lowLetter,highLetter);
410203cc:	e17ffe07 	ldb	r5,-8(fp)
410203d0:	e1bfff07 	ldb	r6,-4(fp)
410203d4:	01000034 	movhi	r4,0
410203d8:	21006904 	addi	r4,r4,420
410203dc:	1022d200 	call	41022d20 <printf>

  GetInputString( entry, sizeof(entry), stdin );
410203e0:	00800034 	movhi	r2,0
410203e4:	108ad704 	addi	r2,r2,11100
410203e8:	10800017 	ldw	r2,0(r2)
410203ec:	11800117 	ldw	r6,4(r2)
410203f0:	d1201344 	addi	r4,gp,-32691
410203f4:	01400104 	movi	r5,4
410203f8:	102030c0 	call	4102030c <GetInputString>
  if(sscanf(entry, "%c\n", &ch))
410203fc:	d1201344 	addi	r4,gp,-32691
41020400:	01400034 	movhi	r5,0
41020404:	29407504 	addi	r5,r5,468
41020408:	d1a01304 	addi	r6,gp,-32692
4102040c:	1022fd00 	call	41022fd0 <sscanf>
41020410:	1005003a 	cmpeq	r2,r2,zero
41020414:	1000171e 	bne	r2,zero,41020474 <MenuEnd+0xd8>
  {
    if( ch >= 'A' && ch <= 'Z' )
41020418:	d0a01303 	ldbu	r2,-32692(gp)
4102041c:	10803fcc 	andi	r2,r2,255
41020420:	1080201c 	xori	r2,r2,128
41020424:	10bfe004 	addi	r2,r2,-128
41020428:	10801050 	cmplti	r2,r2,65
4102042c:	1000091e 	bne	r2,zero,41020454 <MenuEnd+0xb8>
41020430:	d0a01303 	ldbu	r2,-32692(gp)
41020434:	10803fcc 	andi	r2,r2,255
41020438:	1080201c 	xori	r2,r2,128
4102043c:	10bfe004 	addi	r2,r2,-128
41020440:	108016c8 	cmpgei	r2,r2,91
41020444:	1000031e 	bne	r2,zero,41020454 <MenuEnd+0xb8>
      ch += 'a' - 'A';
41020448:	d0a01303 	ldbu	r2,-32692(gp)
4102044c:	10800804 	addi	r2,r2,32
41020450:	d0a01305 	stb	r2,-32692(gp)
    if( ch == 27 )
41020454:	d0a01303 	ldbu	r2,-32692(gp)
41020458:	10803fcc 	andi	r2,r2,255
4102045c:	1080201c 	xori	r2,r2,128
41020460:	10bfe004 	addi	r2,r2,-128
41020464:	108006d8 	cmpnei	r2,r2,27
41020468:	1000021e 	bne	r2,zero,41020474 <MenuEnd+0xd8>
      ch = 'q';
4102046c:	00801c44 	movi	r2,113
41020470:	d0a01305 	stb	r2,-32692(gp)
  }
  return ch;
41020474:	d0a01303 	ldbu	r2,-32692(gp)
41020478:	10803fcc 	andi	r2,r2,255
4102047c:	1080201c 	xori	r2,r2,128
41020480:	10bfe004 	addi	r2,r2,-128
}
41020484:	e037883a 	mov	sp,fp
41020488:	dfc00117 	ldw	ra,4(sp)
4102048c:	df000017 	ldw	fp,0(sp)
41020490:	dec00204 	addi	sp,sp,8
41020494:	f800283a 	ret

41020498 <MemGetAddressRange>:
*
*  Purpose: Gathers a range of memory from the user.
*
******************************************************************/
static int MemGetAddressRange(int* base_address, int* end_address)
{
41020498:	defff904 	addi	sp,sp,-28
4102049c:	dfc00615 	stw	ra,24(sp)
410204a0:	df000515 	stw	fp,20(sp)
410204a4:	df000504 	addi	fp,sp,20
410204a8:	e13ffe15 	stw	r4,-8(fp)
410204ac:	e17fff15 	stw	r5,-4(fp)
410204b0:	00000006 	br	410204b4 <MemGetAddressRange+0x1c>
  char line[12];

  while(1)
  {
    /* Get the base address */
    printf("Base address to start memory test: (i.e. 0x800000)\n");
410204b4:	01000034 	movhi	r4,0
410204b8:	21007604 	addi	r4,r4,472
410204bc:	1022e5c0 	call	41022e5c <puts>
    printf(">");
410204c0:	01000f84 	movi	r4,62
410204c4:	1022d980 	call	41022d98 <putchar>

    GetInputString( line, sizeof(line), stdin );
410204c8:	00800034 	movhi	r2,0
410204cc:	108ad704 	addi	r2,r2,11100
410204d0:	10800017 	ldw	r2,0(r2)
410204d4:	11800117 	ldw	r6,4(r2)
410204d8:	e13ffb04 	addi	r4,fp,-20
410204dc:	01400304 	movi	r5,12
410204e0:	102030c0 	call	4102030c <GetInputString>
   
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", base_address) != 1)
410204e4:	e13ffb04 	addi	r4,fp,-20
410204e8:	01400034 	movhi	r5,0
410204ec:	29408304 	addi	r5,r5,524
410204f0:	e1bffe17 	ldw	r6,-8(fp)
410204f4:	1022fd00 	call	41022fd0 <sscanf>
410204f8:	10800060 	cmpeqi	r2,r2,1
410204fc:	1000061e 	bne	r2,zero,41020518 <MemGetAddressRange+0x80>
    {
      printf("%s\n", line);
41020500:	e13ffb04 	addi	r4,fp,-20
41020504:	1022e5c0 	call	41022e5c <puts>
      printf(" -ERROR: Invalid base address entered.  Address must be in the form '0x800000'\n\n");
41020508:	01000034 	movhi	r4,0
4102050c:	21008504 	addi	r4,r4,532
41020510:	1022e5c0 	call	41022e5c <puts>
      continue;
41020514:	003fe706 	br	410204b4 <MemGetAddressRange+0x1c>
    }
    
    /* Get the end address */
    printf("End Address:\n");
41020518:	01000034 	movhi	r4,0
4102051c:	21009904 	addi	r4,r4,612
41020520:	1022e5c0 	call	41022e5c <puts>
    printf(">");
41020524:	01000f84 	movi	r4,62
41020528:	1022d980 	call	41022d98 <putchar>

    GetInputString( line, sizeof(line), stdin );
4102052c:	00800034 	movhi	r2,0
41020530:	108ad704 	addi	r2,r2,11100
41020534:	10800017 	ldw	r2,0(r2)
41020538:	11800117 	ldw	r6,4(r2)
4102053c:	e13ffb04 	addi	r4,fp,-20
41020540:	01400304 	movi	r5,12
41020544:	102030c0 	call	4102030c <GetInputString>
    
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", end_address) != 1)
41020548:	e13ffb04 	addi	r4,fp,-20
4102054c:	01400034 	movhi	r5,0
41020550:	29408304 	addi	r5,r5,524
41020554:	e1bfff17 	ldw	r6,-4(fp)
41020558:	1022fd00 	call	41022fd0 <sscanf>
4102055c:	10800060 	cmpeqi	r2,r2,1
41020560:	1000041e 	bne	r2,zero,41020574 <MemGetAddressRange+0xdc>
    {
      printf(" -ERROR: Invalid end address entered.  Address must be in the form '0x8FFFFF'\n\n");
41020564:	01000034 	movhi	r4,0
41020568:	21009d04 	addi	r4,r4,628
4102056c:	1022e5c0 	call	41022e5c <puts>
      continue;
41020570:	003fd006 	br	410204b4 <MemGetAddressRange+0x1c>
    }
    
    /* Make sure end address is greater than base address. */
    if (*end_address <= *base_address)
41020574:	e0bfff17 	ldw	r2,-4(fp)
41020578:	10c00017 	ldw	r3,0(r2)
4102057c:	e0bffe17 	ldw	r2,-8(fp)
41020580:	10800017 	ldw	r2,0(r2)
41020584:	10c00416 	blt	r2,r3,41020598 <MemGetAddressRange+0x100>
    {
      printf(" -ERROR: End address must be greater than the start address\n\n");
41020588:	01000034 	movhi	r4,0
4102058c:	2100b104 	addi	r4,r4,708
41020590:	1022e5c0 	call	41022e5c <puts>

      continue;
41020594:	003fc706 	br	410204b4 <MemGetAddressRange+0x1c>
    }
    break;
  }

  return(0);
41020598:	0005883a 	mov	r2,zero
}
4102059c:	e037883a 	mov	sp,fp
410205a0:	dfc00117 	ldw	ra,4(sp)
410205a4:	df000017 	ldw	fp,0(sp)
410205a8:	dec00204 	addi	sp,sp,8
410205ac:	f800283a 	ret

410205b0 <MemTestDataBus>:
*  Purpose: Tests that the data bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestDataBus(unsigned int address)
{
410205b0:	defffc04 	addi	sp,sp,-16
410205b4:	df000315 	stw	fp,12(sp)
410205b8:	df000304 	addi	fp,sp,12
410205bc:	e13fff15 	stw	r4,-4(fp)
  unsigned int pattern;
  unsigned int ret_code = 0x0;
410205c0:	e03ffd15 	stw	zero,-12(fp)

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
410205c4:	00800044 	movi	r2,1
410205c8:	e0bffe15 	stw	r2,-8(fp)
410205cc:	00000e06 	br	41020608 <MemTestDataBus+0x58>
  {
    /* Write the test pattern. */
    IOWR_32DIRECT(address, 0, pattern);
410205d0:	e0bfff17 	ldw	r2,-4(fp)
410205d4:	e0fffe17 	ldw	r3,-8(fp)
410205d8:	10c00035 	stwio	r3,0(r2)

    /* Read it back (immediately is okay for this test). */
    if (IORD_32DIRECT(address, 0) != pattern)
410205dc:	e0bfff17 	ldw	r2,-4(fp)
410205e0:	10800037 	ldwio	r2,0(r2)
410205e4:	1007883a 	mov	r3,r2
410205e8:	e0bffe17 	ldw	r2,-8(fp)
410205ec:	18800326 	beq	r3,r2,410205fc <MemTestDataBus+0x4c>
    {
      ret_code = pattern;
410205f0:	e0bffe17 	ldw	r2,-8(fp)
410205f4:	e0bffd15 	stw	r2,-12(fp)
      break;
410205f8:	00000606 	br	41020614 <MemTestDataBus+0x64>
{
  unsigned int pattern;
  unsigned int ret_code = 0x0;

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
410205fc:	e0bffe17 	ldw	r2,-8(fp)
41020600:	1085883a 	add	r2,r2,r2
41020604:	e0bffe15 	stw	r2,-8(fp)
41020608:	e0bffe17 	ldw	r2,-8(fp)
4102060c:	1004c03a 	cmpne	r2,r2,zero
41020610:	103fef1e 	bne	r2,zero,410205d0 <MemTestDataBus+0x20>
    {
      ret_code = pattern;
      break;
    }
  }
  return ret_code;
41020614:	e0bffd17 	ldw	r2,-12(fp)
}
41020618:	e037883a 	mov	sp,fp
4102061c:	df000017 	ldw	fp,0(sp)
41020620:	dec00104 	addi	sp,sp,4
41020624:	f800283a 	ret

41020628 <MemTestAddressBus>:
*  Purpose: Tests that the address bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestAddressBus(unsigned int memory_base, unsigned int nBytes)
{
41020628:	defff704 	addi	sp,sp,-36
4102062c:	df000815 	stw	fp,32(sp)
41020630:	df000804 	addi	fp,sp,32
41020634:	e13ffe15 	stw	r4,-8(fp)
41020638:	e17fff15 	stw	r5,-4(fp)
  unsigned int address_mask = (nBytes - 1);
4102063c:	e0bfff17 	ldw	r2,-4(fp)
41020640:	10bfffc4 	addi	r2,r2,-1
41020644:	e0bffd15 	stw	r2,-12(fp)
  unsigned int offset;
  unsigned int test_offset;

  unsigned int pattern     = 0xAAAAAAAA;
41020648:	00aaaaf4 	movhi	r2,43691
4102064c:	10aaaa84 	addi	r2,r2,-21846
41020650:	e0bffa15 	stw	r2,-24(fp)
  unsigned int antipattern  = 0x55555555;
41020654:	00955574 	movhi	r2,21845
41020658:	10955544 	addi	r2,r2,21845
4102065c:	e0bff915 	stw	r2,-28(fp)

  unsigned int ret_code = 0x0;
41020660:	e03ff815 	stw	zero,-32(fp)

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
41020664:	00800104 	movi	r2,4
41020668:	e0bffc15 	stw	r2,-16(fp)
4102066c:	00000806 	br	41020690 <MemTestAddressBus+0x68>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
41020670:	e0fffe17 	ldw	r3,-8(fp)
41020674:	e0bffc17 	ldw	r2,-16(fp)
41020678:	1885883a 	add	r2,r3,r2
4102067c:	e0fffa17 	ldw	r3,-24(fp)
41020680:	10c00035 	stwio	r3,0(r2)
  unsigned int antipattern  = 0x55555555;

  unsigned int ret_code = 0x0;

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
41020684:	e0bffc17 	ldw	r2,-16(fp)
41020688:	1085883a 	add	r2,r2,r2
4102068c:	e0bffc15 	stw	r2,-16(fp)
41020690:	e0fffc17 	ldw	r3,-16(fp)
41020694:	e0bffd17 	ldw	r2,-12(fp)
41020698:	1884703a 	and	r2,r3,r2
4102069c:	1004c03a 	cmpne	r2,r2,zero
410206a0:	103ff31e 	bne	r2,zero,41020670 <MemTestAddressBus+0x48>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
410206a4:	e03ffb15 	stw	zero,-20(fp)
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
410206a8:	e0fffe17 	ldw	r3,-8(fp)
410206ac:	e0bffb17 	ldw	r2,-20(fp)
410206b0:	1885883a 	add	r2,r3,r2
410206b4:	e0fff917 	ldw	r3,-28(fp)
410206b8:	10c00035 	stwio	r3,0(r2)
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
410206bc:	00800104 	movi	r2,4
410206c0:	e0bffc15 	stw	r2,-16(fp)
410206c4:	00000f06 	br	41020704 <MemTestAddressBus+0xdc>
  {
     if (IORD_32DIRECT(memory_base, offset) != pattern)
410206c8:	e0fffe17 	ldw	r3,-8(fp)
410206cc:	e0bffc17 	ldw	r2,-16(fp)
410206d0:	1885883a 	add	r2,r3,r2
410206d4:	10800037 	ldwio	r2,0(r2)
410206d8:	1007883a 	mov	r3,r2
410206dc:	e0bffa17 	ldw	r2,-24(fp)
410206e0:	18800526 	beq	r3,r2,410206f8 <MemTestAddressBus+0xd0>
     {
        ret_code = (memory_base+offset);
410206e4:	e0bffe17 	ldw	r2,-8(fp)
410206e8:	e0fffc17 	ldw	r3,-16(fp)
410206ec:	10c5883a 	add	r2,r2,r3
410206f0:	e0bff815 	stw	r2,-32(fp)
        break;
410206f4:	00000806 	br	41020718 <MemTestAddressBus+0xf0>
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
410206f8:	e0bffc17 	ldw	r2,-16(fp)
410206fc:	1085883a 	add	r2,r2,r2
41020700:	e0bffc15 	stw	r2,-16(fp)
41020704:	e0fffc17 	ldw	r3,-16(fp)
41020708:	e0bffd17 	ldw	r2,-12(fp)
4102070c:	1884703a 	and	r2,r3,r2
41020710:	1004c03a 	cmpne	r2,r2,zero
41020714:	103fec1e 	bne	r2,zero,410206c8 <MemTestAddressBus+0xa0>
        break;
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
41020718:	e0fffe17 	ldw	r3,-8(fp)
4102071c:	e0bffb17 	ldw	r2,-20(fp)
41020720:	1885883a 	add	r2,r3,r2
41020724:	e0fffa17 	ldw	r3,-24(fp)
41020728:	10c00035 	stwio	r3,0(r2)
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
4102072c:	00800104 	movi	r2,4
41020730:	e0bffb15 	stw	r2,-20(fp)
41020734:	00002a06 	br	410207e0 <MemTestAddressBus+0x1b8>
  {
    if (!ret_code)
41020738:	e0bff817 	ldw	r2,-32(fp)
4102073c:	1004c03a 	cmpne	r2,r2,zero
41020740:	1000241e 	bne	r2,zero,410207d4 <MemTestAddressBus+0x1ac>
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
41020744:	e0fffe17 	ldw	r3,-8(fp)
41020748:	e0bffb17 	ldw	r2,-20(fp)
4102074c:	1885883a 	add	r2,r3,r2
41020750:	e0fff917 	ldw	r3,-28(fp)
41020754:	10c00035 	stwio	r3,0(r2)
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
41020758:	00800104 	movi	r2,4
4102075c:	e0bffc15 	stw	r2,-16(fp)
41020760:	00001206 	br	410207ac <MemTestAddressBus+0x184>
      {
        if ((IORD_32DIRECT(memory_base, offset) != pattern) && (offset != test_offset))
41020764:	e0fffe17 	ldw	r3,-8(fp)
41020768:	e0bffc17 	ldw	r2,-16(fp)
4102076c:	1885883a 	add	r2,r3,r2
41020770:	10800037 	ldwio	r2,0(r2)
41020774:	1007883a 	mov	r3,r2
41020778:	e0bffa17 	ldw	r2,-24(fp)
4102077c:	18800826 	beq	r3,r2,410207a0 <MemTestAddressBus+0x178>
41020780:	e0fffc17 	ldw	r3,-16(fp)
41020784:	e0bffb17 	ldw	r2,-20(fp)
41020788:	18800526 	beq	r3,r2,410207a0 <MemTestAddressBus+0x178>
        {
          ret_code = (memory_base + test_offset);
4102078c:	e0bffe17 	ldw	r2,-8(fp)
41020790:	e0fffb17 	ldw	r3,-20(fp)
41020794:	10c5883a 	add	r2,r2,r3
41020798:	e0bff815 	stw	r2,-32(fp)
          break;
4102079c:	00000806 	br	410207c0 <MemTestAddressBus+0x198>
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
  {
    if (!ret_code)
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
410207a0:	e0bffc17 	ldw	r2,-16(fp)
410207a4:	1085883a 	add	r2,r2,r2
410207a8:	e0bffc15 	stw	r2,-16(fp)
410207ac:	e0fffc17 	ldw	r3,-16(fp)
410207b0:	e0bffd17 	ldw	r2,-12(fp)
410207b4:	1884703a 	and	r2,r3,r2
410207b8:	1004c03a 	cmpne	r2,r2,zero
410207bc:	103fe91e 	bne	r2,zero,41020764 <MemTestAddressBus+0x13c>
        {
          ret_code = (memory_base + test_offset);
          break;
        }
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
410207c0:	e0fffe17 	ldw	r3,-8(fp)
410207c4:	e0bffb17 	ldw	r2,-20(fp)
410207c8:	1885883a 	add	r2,r3,r2
410207cc:	e0fffa17 	ldw	r3,-24(fp)
410207d0:	10c00035 	stwio	r3,0(r2)
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
410207d4:	e0bffb17 	ldw	r2,-20(fp)
410207d8:	1085883a 	add	r2,r2,r2
410207dc:	e0bffb15 	stw	r2,-20(fp)
410207e0:	e0fffb17 	ldw	r3,-20(fp)
410207e4:	e0bffd17 	ldw	r2,-12(fp)
410207e8:	1884703a 	and	r2,r3,r2
410207ec:	1004c03a 	cmpne	r2,r2,zero
410207f0:	103fd11e 	bne	r2,zero,41020738 <MemTestAddressBus+0x110>
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
    }
  }

  return ret_code;
410207f4:	e0bff817 	ldw	r2,-32(fp)
}
410207f8:	e037883a 	mov	sp,fp
410207fc:	df000017 	ldw	fp,0(sp)
41020800:	dec00104 	addi	sp,sp,4
41020804:	f800283a 	ret

41020808 <MemTest8_16BitAccess>:
*           can be read and written in both byte and half-word 
*           modes.
*
******************************************************************/
static int MemTest8_16BitAccess(unsigned int memory_base)
{
41020808:	defffd04 	addi	sp,sp,-12
4102080c:	df000215 	stw	fp,8(sp)
41020810:	df000204 	addi	fp,sp,8
41020814:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0x0;
41020818:	e03ffe15 	stw	zero,-8(fp)

  /* Write 4 bytes */
  IOWR_8DIRECT(memory_base, 0, 0x0A);
4102081c:	e0bfff17 	ldw	r2,-4(fp)
41020820:	1007883a 	mov	r3,r2
41020824:	00800284 	movi	r2,10
41020828:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 1, 0x05);
4102082c:	e0bfff17 	ldw	r2,-4(fp)
41020830:	10800044 	addi	r2,r2,1
41020834:	1007883a 	mov	r3,r2
41020838:	00800144 	movi	r2,5
4102083c:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 2, 0xA0);
41020840:	e0bfff17 	ldw	r2,-4(fp)
41020844:	10800084 	addi	r2,r2,2
41020848:	1007883a 	mov	r3,r2
4102084c:	00802804 	movi	r2,160
41020850:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 3, 0x50);
41020854:	e0bfff17 	ldw	r2,-4(fp)
41020858:	108000c4 	addi	r2,r2,3
4102085c:	1007883a 	mov	r3,r2
41020860:	00801404 	movi	r2,80
41020864:	18800025 	stbio	r2,0(r3)

  /* Read it back as one word */
  if(IORD_32DIRECT(memory_base, 0) != 0x50A0050A)
41020868:	e0bfff17 	ldw	r2,-4(fp)
4102086c:	10c00037 	ldwio	r3,0(r2)
41020870:	00942834 	movhi	r2,20640
41020874:	10814284 	addi	r2,r2,1290
41020878:	18800226 	beq	r3,r2,41020884 <MemTest8_16BitAccess+0x7c>
  {
    ret_code = memory_base;
4102087c:	e0bfff17 	ldw	r2,-4(fp)
41020880:	e0bffe15 	stw	r2,-8(fp)
  }

  /* Read it back as two half-words */
  if (!ret_code)
41020884:	e0bffe17 	ldw	r2,-8(fp)
41020888:	1004c03a 	cmpne	r2,r2,zero
4102088c:	10000b1e 	bne	r2,zero,410208bc <MemTest8_16BitAccess+0xb4>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
41020890:	e0bfff17 	ldw	r2,-4(fp)
41020894:	10800084 	addi	r2,r2,2
41020898:	1080002b 	ldhuio	r2,0(r2)
4102089c:	10942818 	cmpnei	r2,r2,20640
410208a0:	1000041e 	bne	r2,zero,410208b4 <MemTest8_16BitAccess+0xac>
410208a4:	e0bfff17 	ldw	r2,-4(fp)
410208a8:	1080002b 	ldhuio	r2,0(r2)
410208ac:	108142a0 	cmpeqi	r2,r2,1290
410208b0:	1000021e 	bne	r2,zero,410208bc <MemTest8_16BitAccess+0xb4>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
    {
      ret_code = memory_base;
410208b4:	e0bfff17 	ldw	r2,-4(fp)
410208b8:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
410208bc:	e0bffe17 	ldw	r2,-8(fp)
410208c0:	1004c03a 	cmpne	r2,r2,zero
410208c4:	1000151e 	bne	r2,zero,4102091c <MemTest8_16BitAccess+0x114>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
410208c8:	e0bfff17 	ldw	r2,-4(fp)
410208cc:	108000c4 	addi	r2,r2,3
410208d0:	10800023 	ldbuio	r2,0(r2)
410208d4:	10801418 	cmpnei	r2,r2,80
410208d8:	10000e1e 	bne	r2,zero,41020914 <MemTest8_16BitAccess+0x10c>
410208dc:	e0bfff17 	ldw	r2,-4(fp)
410208e0:	10800084 	addi	r2,r2,2
410208e4:	10800023 	ldbuio	r2,0(r2)
410208e8:	10802818 	cmpnei	r2,r2,160
410208ec:	1000091e 	bne	r2,zero,41020914 <MemTest8_16BitAccess+0x10c>
410208f0:	e0bfff17 	ldw	r2,-4(fp)
410208f4:	10800044 	addi	r2,r2,1
410208f8:	10800023 	ldbuio	r2,0(r2)
410208fc:	10800158 	cmpnei	r2,r2,5
41020900:	1000041e 	bne	r2,zero,41020914 <MemTest8_16BitAccess+0x10c>
41020904:	e0bfff17 	ldw	r2,-4(fp)
41020908:	10800023 	ldbuio	r2,0(r2)
4102090c:	108002a0 	cmpeqi	r2,r2,10
41020910:	1000021e 	bne	r2,zero,4102091c <MemTest8_16BitAccess+0x114>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
    {
    ret_code = memory_base;
41020914:	e0bfff17 	ldw	r2,-4(fp)
41020918:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Write 2 half-words */
  if (!ret_code)
4102091c:	e0bffe17 	ldw	r2,-8(fp)
41020920:	1004c03a 	cmpne	r2,r2,zero
41020924:	1000101e 	bne	r2,zero,41020968 <MemTest8_16BitAccess+0x160>
  {
    IOWR_16DIRECT(memory_base, 0, 0x50A0);
41020928:	e0bfff17 	ldw	r2,-4(fp)
4102092c:	1007883a 	mov	r3,r2
41020930:	00942804 	movi	r2,20640
41020934:	1880002d 	sthio	r2,0(r3)
    IOWR_16DIRECT(memory_base, 2, 0x050A);
41020938:	e0bfff17 	ldw	r2,-4(fp)
4102093c:	10800084 	addi	r2,r2,2
41020940:	1007883a 	mov	r3,r2
41020944:	00814284 	movi	r2,1290
41020948:	1880002d 	sthio	r2,0(r3)

    /* Read it back as one word */
    if(IORD_32DIRECT(memory_base, 0) != 0x050A50A0)
4102094c:	e0bfff17 	ldw	r2,-4(fp)
41020950:	10c00037 	ldwio	r3,0(r2)
41020954:	008142b4 	movhi	r2,1290
41020958:	10942804 	addi	r2,r2,20640
4102095c:	18800226 	beq	r3,r2,41020968 <MemTest8_16BitAccess+0x160>
    {
      ret_code = memory_base;
41020960:	e0bfff17 	ldw	r2,-4(fp)
41020964:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as two half-words */
  if (!ret_code)
41020968:	e0bffe17 	ldw	r2,-8(fp)
4102096c:	1004c03a 	cmpne	r2,r2,zero
41020970:	10000b1e 	bne	r2,zero,410209a0 <MemTest8_16BitAccess+0x198>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
41020974:	e0bfff17 	ldw	r2,-4(fp)
41020978:	10800084 	addi	r2,r2,2
4102097c:	1080002b 	ldhuio	r2,0(r2)
41020980:	10814298 	cmpnei	r2,r2,1290
41020984:	1000041e 	bne	r2,zero,41020998 <MemTest8_16BitAccess+0x190>
41020988:	e0bfff17 	ldw	r2,-4(fp)
4102098c:	1080002b 	ldhuio	r2,0(r2)
41020990:	10942820 	cmpeqi	r2,r2,20640
41020994:	1000021e 	bne	r2,zero,410209a0 <MemTest8_16BitAccess+0x198>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
    {
      ret_code = memory_base;
41020998:	e0bfff17 	ldw	r2,-4(fp)
4102099c:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
410209a0:	e0bffe17 	ldw	r2,-8(fp)
410209a4:	1004c03a 	cmpne	r2,r2,zero
410209a8:	1000151e 	bne	r2,zero,41020a00 <MemTest8_16BitAccess+0x1f8>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
410209ac:	e0bfff17 	ldw	r2,-4(fp)
410209b0:	108000c4 	addi	r2,r2,3
410209b4:	10800023 	ldbuio	r2,0(r2)
410209b8:	10800158 	cmpnei	r2,r2,5
410209bc:	10000e1e 	bne	r2,zero,410209f8 <MemTest8_16BitAccess+0x1f0>
410209c0:	e0bfff17 	ldw	r2,-4(fp)
410209c4:	10800084 	addi	r2,r2,2
410209c8:	10800023 	ldbuio	r2,0(r2)
410209cc:	10800298 	cmpnei	r2,r2,10
410209d0:	1000091e 	bne	r2,zero,410209f8 <MemTest8_16BitAccess+0x1f0>
410209d4:	e0bfff17 	ldw	r2,-4(fp)
410209d8:	10800044 	addi	r2,r2,1
410209dc:	10800023 	ldbuio	r2,0(r2)
410209e0:	10801418 	cmpnei	r2,r2,80
410209e4:	1000041e 	bne	r2,zero,410209f8 <MemTest8_16BitAccess+0x1f0>
410209e8:	e0bfff17 	ldw	r2,-4(fp)
410209ec:	10800023 	ldbuio	r2,0(r2)
410209f0:	10802820 	cmpeqi	r2,r2,160
410209f4:	1000021e 	bne	r2,zero,41020a00 <MemTest8_16BitAccess+0x1f8>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
    {
      ret_code = memory_base;
410209f8:	e0bfff17 	ldw	r2,-4(fp)
410209fc:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return(ret_code);
41020a00:	e0bffe17 	ldw	r2,-8(fp)
}
41020a04:	e037883a 	mov	sp,fp
41020a08:	df000017 	ldw	fp,0(sp)
41020a0c:	dec00104 	addi	sp,sp,4
41020a10:	f800283a 	ret

41020a14 <MemTestDevice>:
*  Purpose: Tests that every bit in the memory device within the 
*           specified address range can store both a '1' and a '0'.
*
******************************************************************/
static int MemTestDevice(unsigned int memory_base, unsigned int nBytes)
{
41020a14:	defff804 	addi	sp,sp,-32
41020a18:	dfc00715 	stw	ra,28(sp)
41020a1c:	df000615 	stw	fp,24(sp)
41020a20:	df000604 	addi	fp,sp,24
41020a24:	e13ffe15 	stw	r4,-8(fp)
41020a28:	e17fff15 	stw	r5,-4(fp)
  unsigned int offset;
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;
41020a2c:	e03ffa15 	stw	zero,-24(fp)

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
41020a30:	00800044 	movi	r2,1
41020a34:	e0bffc15 	stw	r2,-16(fp)
41020a38:	e03ffd15 	stw	zero,-12(fp)
41020a3c:	00000b06 	br	41020a6c <MemTestDevice+0x58>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
41020a40:	e0fffe17 	ldw	r3,-8(fp)
41020a44:	e0bffd17 	ldw	r2,-12(fp)
41020a48:	1885883a 	add	r2,r3,r2
41020a4c:	e0fffc17 	ldw	r3,-16(fp)
41020a50:	10c00035 	stwio	r3,0(r2)
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
41020a54:	e0bffc17 	ldw	r2,-16(fp)
41020a58:	10800044 	addi	r2,r2,1
41020a5c:	e0bffc15 	stw	r2,-16(fp)
41020a60:	e0bffd17 	ldw	r2,-12(fp)
41020a64:	10800104 	addi	r2,r2,4
41020a68:	e0bffd15 	stw	r2,-12(fp)
41020a6c:	e0fffd17 	ldw	r3,-12(fp)
41020a70:	e0bfff17 	ldw	r2,-4(fp)
41020a74:	18bff236 	bltu	r3,r2,41020a40 <MemTestDevice+0x2c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  printf(" .");
41020a78:	01000034 	movhi	r4,0
41020a7c:	2100c104 	addi	r4,r4,772
41020a80:	1022d200 	call	41022d20 <printf>

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
41020a84:	00800044 	movi	r2,1
41020a88:	e0bffc15 	stw	r2,-16(fp)
41020a8c:	e03ffd15 	stw	zero,-12(fp)
41020a90:	00001a06 	br	41020afc <MemTestDevice+0xe8>
  {
    if (IORD_32DIRECT(memory_base, offset) != pattern)
41020a94:	e0fffe17 	ldw	r3,-8(fp)
41020a98:	e0bffd17 	ldw	r2,-12(fp)
41020a9c:	1885883a 	add	r2,r3,r2
41020aa0:	10800037 	ldwio	r2,0(r2)
41020aa4:	1007883a 	mov	r3,r2
41020aa8:	e0bffc17 	ldw	r2,-16(fp)
41020aac:	18800526 	beq	r3,r2,41020ac4 <MemTestDevice+0xb0>
    {
      ret_code = (memory_base + offset);
41020ab0:	e0bffe17 	ldw	r2,-8(fp)
41020ab4:	e0fffd17 	ldw	r3,-12(fp)
41020ab8:	10c5883a 	add	r2,r2,r3
41020abc:	e0bffa15 	stw	r2,-24(fp)
      break;
41020ac0:	00001106 	br	41020b08 <MemTestDevice+0xf4>
    }
    antipattern = ~pattern;
41020ac4:	e0bffc17 	ldw	r2,-16(fp)
41020ac8:	0084303a 	nor	r2,zero,r2
41020acc:	e0bffb15 	stw	r2,-20(fp)
    IOWR_32DIRECT(memory_base, offset, antipattern);
41020ad0:	e0fffe17 	ldw	r3,-8(fp)
41020ad4:	e0bffd17 	ldw	r2,-12(fp)
41020ad8:	1885883a 	add	r2,r3,r2
41020adc:	e0fffb17 	ldw	r3,-20(fp)
41020ae0:	10c00035 	stwio	r3,0(r2)
  }

  printf(" .");

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
41020ae4:	e0bffc17 	ldw	r2,-16(fp)
41020ae8:	10800044 	addi	r2,r2,1
41020aec:	e0bffc15 	stw	r2,-16(fp)
41020af0:	e0bffd17 	ldw	r2,-12(fp)
41020af4:	10800104 	addi	r2,r2,4
41020af8:	e0bffd15 	stw	r2,-12(fp)
41020afc:	e0fffd17 	ldw	r3,-12(fp)
41020b00:	e0bfff17 	ldw	r2,-4(fp)
41020b04:	18bfe336 	bltu	r3,r2,41020a94 <MemTestDevice+0x80>
    }
    antipattern = ~pattern;
    IOWR_32DIRECT(memory_base, offset, antipattern);
  }

  printf(" .");
41020b08:	01000034 	movhi	r4,0
41020b0c:	2100c104 	addi	r4,r4,772
41020b10:	1022d200 	call	41022d20 <printf>

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
41020b14:	00800044 	movi	r2,1
41020b18:	e0bffc15 	stw	r2,-16(fp)
41020b1c:	e03ffd15 	stw	zero,-12(fp)
41020b20:	00001906 	br	41020b88 <MemTestDevice+0x174>
  {
    antipattern = ~pattern;
41020b24:	e0bffc17 	ldw	r2,-16(fp)
41020b28:	0084303a 	nor	r2,zero,r2
41020b2c:	e0bffb15 	stw	r2,-20(fp)
    if (IORD_32DIRECT(memory_base, offset) != antipattern)
41020b30:	e0fffe17 	ldw	r3,-8(fp)
41020b34:	e0bffd17 	ldw	r2,-12(fp)
41020b38:	1885883a 	add	r2,r3,r2
41020b3c:	10800037 	ldwio	r2,0(r2)
41020b40:	1007883a 	mov	r3,r2
41020b44:	e0bffb17 	ldw	r2,-20(fp)
41020b48:	18800526 	beq	r3,r2,41020b60 <MemTestDevice+0x14c>
    {
      ret_code = (memory_base + offset);
41020b4c:	e0bffe17 	ldw	r2,-8(fp)
41020b50:	e0fffd17 	ldw	r3,-12(fp)
41020b54:	10c5883a 	add	r2,r2,r3
41020b58:	e0bffa15 	stw	r2,-24(fp)
      break;
41020b5c:	00000d06 	br	41020b94 <MemTestDevice+0x180>
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
41020b60:	e0fffe17 	ldw	r3,-8(fp)
41020b64:	e0bffd17 	ldw	r2,-12(fp)
41020b68:	1885883a 	add	r2,r3,r2
41020b6c:	10000035 	stwio	zero,0(r2)
  }

  printf(" .");

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
41020b70:	e0bffc17 	ldw	r2,-16(fp)
41020b74:	10800044 	addi	r2,r2,1
41020b78:	e0bffc15 	stw	r2,-16(fp)
41020b7c:	e0bffd17 	ldw	r2,-12(fp)
41020b80:	10800104 	addi	r2,r2,4
41020b84:	e0bffd15 	stw	r2,-12(fp)
41020b88:	e0fffd17 	ldw	r3,-12(fp)
41020b8c:	e0bfff17 	ldw	r2,-4(fp)
41020b90:	18bfe436 	bltu	r3,r2,41020b24 <MemTestDevice+0x110>
      ret_code = (memory_base + offset);
      break;
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
  }
  return ret_code;
41020b94:	e0bffa17 	ldw	r2,-24(fp)
}
41020b98:	e037883a 	mov	sp,fp
41020b9c:	dfc00117 	ldw	ra,4(sp)
41020ba0:	df000017 	ldw	fp,0(sp)
41020ba4:	dec00204 	addi	sp,sp,8
41020ba8:	f800283a 	ret

41020bac <TestRam>:
*             - MemTestDevice
*             - MemDMATest
*
******************************************************************/
static void TestRam(void)
{
41020bac:	defffa04 	addi	sp,sp,-24
41020bb0:	dfc00515 	stw	ra,20(sp)
41020bb4:	df000415 	stw	fp,16(sp)
41020bb8:	df000404 	addi	fp,sp,16
  
  int memory_base, memory_end, memory_size;
  int ret_code = 0x0;
41020bbc:	e03ffc15 	stw	zero,-16(fp)

  /* Find out what range of memory we are testing */
  MemGetAddressRange(&memory_base, &memory_end);
41020bc0:	e13ffe04 	addi	r4,fp,-8
41020bc4:	e17fff04 	addi	r5,fp,-4
41020bc8:	10204980 	call	41020498 <MemGetAddressRange>
  memory_size = (memory_end - memory_base);
41020bcc:	e0ffff17 	ldw	r3,-4(fp)
41020bd0:	e0bffe17 	ldw	r2,-8(fp)
41020bd4:	1885c83a 	sub	r2,r3,r2
41020bd8:	e0bffd15 	stw	r2,-12(fp)

  printf("\n");
41020bdc:	01000284 	movi	r4,10
41020be0:	1022d980 	call	41022d98 <putchar>
  printf("Testing RAM from 0x%X to 0x%X\n", memory_base, (memory_base + memory_size));
41020be4:	e17ffe17 	ldw	r5,-8(fp)
41020be8:	e0fffe17 	ldw	r3,-8(fp)
41020bec:	e0bffd17 	ldw	r2,-12(fp)
41020bf0:	188d883a 	add	r6,r3,r2
41020bf4:	01000034 	movhi	r4,0
41020bf8:	2100c204 	addi	r4,r4,776
41020bfc:	1022d200 	call	41022d20 <printf>

  /* Test Data Bus. */
  ret_code = MemTestDataBus(memory_base);
41020c00:	e0bffe17 	ldw	r2,-8(fp)
41020c04:	1009883a 	mov	r4,r2
41020c08:	10205b00 	call	410205b0 <MemTestDataBus>
41020c0c:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code)
41020c10:	e0bffc17 	ldw	r2,-16(fp)
41020c14:	1005003a 	cmpeq	r2,r2,zero
41020c18:	1000051e 	bne	r2,zero,41020c30 <TestRam+0x84>
   printf(" -Data bus test failed at bit 0x%X", (int)ret_code);
41020c1c:	01000034 	movhi	r4,0
41020c20:	2100ca04 	addi	r4,r4,808
41020c24:	e17ffc17 	ldw	r5,-16(fp)
41020c28:	1022d200 	call	41022d20 <printf>
41020c2c:	00000306 	br	41020c3c <TestRam+0x90>
  else
    printf(" -Data bus test passed\n");
41020c30:	01000034 	movhi	r4,0
41020c34:	2100d304 	addi	r4,r4,844
41020c38:	1022e5c0 	call	41022e5c <puts>

  /* Test Address Bus. */
  if (!ret_code)
41020c3c:	e0bffc17 	ldw	r2,-16(fp)
41020c40:	1004c03a 	cmpne	r2,r2,zero
41020c44:	1000101e 	bne	r2,zero,41020c88 <TestRam+0xdc>
  {
    ret_code  = MemTestAddressBus(memory_base, memory_size);
41020c48:	e0bffe17 	ldw	r2,-8(fp)
41020c4c:	1009883a 	mov	r4,r2
41020c50:	e17ffd17 	ldw	r5,-12(fp)
41020c54:	10206280 	call	41020628 <MemTestAddressBus>
41020c58:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
41020c5c:	e0bffc17 	ldw	r2,-16(fp)
41020c60:	1005003a 	cmpeq	r2,r2,zero
41020c64:	1000051e 	bne	r2,zero,41020c7c <TestRam+0xd0>
      printf(" -Address bus test failed at address 0x%X", (int)ret_code);
41020c68:	01000034 	movhi	r4,0
41020c6c:	2100d904 	addi	r4,r4,868
41020c70:	e17ffc17 	ldw	r5,-16(fp)
41020c74:	1022d200 	call	41022d20 <printf>
41020c78:	00000306 	br	41020c88 <TestRam+0xdc>
    else
      printf(" -Address bus test passed\n");
41020c7c:	01000034 	movhi	r4,0
41020c80:	2100e404 	addi	r4,r4,912
41020c84:	1022e5c0 	call	41022e5c <puts>
  }

  /* Test byte and half-word access. */
  if (!ret_code)
41020c88:	e0bffc17 	ldw	r2,-16(fp)
41020c8c:	1004c03a 	cmpne	r2,r2,zero
41020c90:	10000f1e 	bne	r2,zero,41020cd0 <TestRam+0x124>
  {
    ret_code = MemTest8_16BitAccess(memory_base);
41020c94:	e0bffe17 	ldw	r2,-8(fp)
41020c98:	1009883a 	mov	r4,r2
41020c9c:	10208080 	call	41020808 <MemTest8_16BitAccess>
41020ca0:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
41020ca4:	e0bffc17 	ldw	r2,-16(fp)
41020ca8:	1005003a 	cmpeq	r2,r2,zero
41020cac:	1000051e 	bne	r2,zero,41020cc4 <TestRam+0x118>
      printf(" -Byte and half-word access test failed at address 0x%X", (int)ret_code);
41020cb0:	01000034 	movhi	r4,0
41020cb4:	2100eb04 	addi	r4,r4,940
41020cb8:	e17ffc17 	ldw	r5,-16(fp)
41020cbc:	1022d200 	call	41022d20 <printf>
41020cc0:	00000306 	br	41020cd0 <TestRam+0x124>
    else
      printf(" -Byte and half-word access test passed\n");
41020cc4:	01000034 	movhi	r4,0
41020cc8:	2100f904 	addi	r4,r4,996
41020ccc:	1022e5c0 	call	41022e5c <puts>
  }

  /* Test that each bit in the device can store both 1 and 0. */
  if (!ret_code)
41020cd0:	e0bffc17 	ldw	r2,-16(fp)
41020cd4:	1004c03a 	cmpne	r2,r2,zero
41020cd8:	1000131e 	bne	r2,zero,41020d28 <TestRam+0x17c>
  {
    printf(" -Testing each bit in memory device.");
41020cdc:	01000034 	movhi	r4,0
41020ce0:	21010304 	addi	r4,r4,1036
41020ce4:	1022d200 	call	41022d20 <printf>
    ret_code = MemTestDevice(memory_base, memory_size);
41020ce8:	e0bffe17 	ldw	r2,-8(fp)
41020cec:	1009883a 	mov	r4,r2
41020cf0:	e17ffd17 	ldw	r5,-12(fp)
41020cf4:	1020a140 	call	41020a14 <MemTestDevice>
41020cf8:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
41020cfc:	e0bffc17 	ldw	r2,-16(fp)
41020d00:	1005003a 	cmpeq	r2,r2,zero
41020d04:	1000051e 	bne	r2,zero,41020d1c <TestRam+0x170>
      printf("  failed at address 0x%X", (int)ret_code);
41020d08:	01000034 	movhi	r4,0
41020d0c:	21010d04 	addi	r4,r4,1076
41020d10:	e17ffc17 	ldw	r5,-16(fp)
41020d14:	1022d200 	call	41022d20 <printf>
41020d18:	00000306 	br	41020d28 <TestRam+0x17c>
    else
      printf("  passed\n");
41020d1c:	01000034 	movhi	r4,0
41020d20:	21011404 	addi	r4,r4,1104
41020d24:	1022e5c0 	call	41022e5c <puts>
    else
      printf("  passed\n");
  }
#endif /* DMA_NAME */
      
  if (!ret_code)
41020d28:	e0bffc17 	ldw	r2,-16(fp)
41020d2c:	1004c03a 	cmpne	r2,r2,zero
41020d30:	1000041e 	bne	r2,zero,41020d44 <TestRam+0x198>
    printf("Memory at 0x%X Okay\n", memory_base);
41020d34:	e17ffe17 	ldw	r5,-8(fp)
41020d38:	01000034 	movhi	r4,0
41020d3c:	21011704 	addi	r4,r4,1116
41020d40:	1022d200 	call	41022d20 <printf>
}
41020d44:	e037883a 	mov	sp,fp
41020d48:	dfc00117 	ldw	ra,4(sp)
41020d4c:	df000017 	ldw	fp,0(sp)
41020d50:	dec00204 	addi	sp,sp,8
41020d54:	f800283a 	ret

41020d58 <FlashCheckIfBlockErased>:
*  Purpose: Checks the specified flash block to see if it is 
*           completely erased (all 0xFFFFFFFF).
*
******************************************************************/
static int FlashCheckIfBlockErased(alt_flash_fd* fd, int block, flash_region* regions)
{
41020d58:	defff204 	addi	sp,sp,-56
41020d5c:	dfc00d15 	stw	ra,52(sp)
41020d60:	df000c15 	stw	fp,48(sp)
41020d64:	df000c04 	addi	fp,sp,48
41020d68:	e13ffd15 	stw	r4,-12(fp)
41020d6c:	e17ffe15 	stw	r5,-8(fp)
41020d70:	e1bfff15 	stw	r6,-4(fp)
  int i, j;
  int ret_code = 0x0;
41020d74:	e03ffa15 	stw	zero,-24(fp)
  char block_is_erased = 0x1;
41020d78:	00800044 	movi	r2,1
41020d7c:	e0bff905 	stb	r2,-28(fp)
  alt_u8 *data_read;
 
  /* Get a buffer */
  data_read = malloc(64);
41020d80:	01001004 	movi	r4,64
41020d84:	10224b80 	call	410224b8 <malloc>
41020d88:	e0bff815 	stw	r2,-32(fp)
  
  /* Initialize the flag */
  block_is_erased = 0x1;
41020d8c:	00800044 	movi	r2,1
41020d90:	e0bff905 	stb	r2,-28(fp)

  for(i = 0; i < regions->block_size; i += 64)
41020d94:	e03ffc15 	stw	zero,-16(fp)
41020d98:	00002d06 	br	41020e50 <FlashCheckIfBlockErased+0xf8>
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);
41020d9c:	e0bfff17 	ldw	r2,-4(fp)
41020da0:	10c00317 	ldw	r3,12(r2)
41020da4:	e0bffe17 	ldw	r2,-8(fp)
41020da8:	1887383a 	mul	r3,r3,r2
41020dac:	e0bffc17 	ldw	r2,-16(fp)
41020db0:	1887883a 	add	r3,r3,r2
41020db4:	e0bffd17 	ldw	r2,-12(fp)
41020db8:	e0bff415 	stw	r2,-48(fp)
41020dbc:	e0fff515 	stw	r3,-44(fp)
41020dc0:	e0bff817 	ldw	r2,-32(fp)
41020dc4:	e0bff615 	stw	r2,-40(fp)
41020dc8:	00801004 	movi	r2,64
41020dcc:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
41020dd0:	e0bff417 	ldw	r2,-48(fp)
41020dd4:	10800617 	ldw	r2,24(r2)
41020dd8:	e13ff417 	ldw	r4,-48(fp)
41020ddc:	e17ff517 	ldw	r5,-44(fp)
41020de0:	e1bff617 	ldw	r6,-40(fp)
41020de4:	e1fff717 	ldw	r7,-36(fp)
41020de8:	103ee83a 	callr	r2
41020dec:	e0bffa15 	stw	r2,-24(fp)

    for(j=0; j < 64; j+=1)
41020df0:	e03ffb15 	stw	zero,-20(fp)
41020df4:	00000d06 	br	41020e2c <FlashCheckIfBlockErased+0xd4>
    {
      if(*(data_read+j) != 0xFF)
41020df8:	e0bffb17 	ldw	r2,-20(fp)
41020dfc:	1007883a 	mov	r3,r2
41020e00:	e0bff817 	ldw	r2,-32(fp)
41020e04:	1885883a 	add	r2,r3,r2
41020e08:	10800003 	ldbu	r2,0(r2)
41020e0c:	10803fcc 	andi	r2,r2,255
41020e10:	10803fe0 	cmpeqi	r2,r2,255
41020e14:	1000021e 	bne	r2,zero,41020e20 <FlashCheckIfBlockErased+0xc8>
      {
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
41020e18:	e03ff905 	stb	zero,-28(fp)
        break;
41020e1c:	00000606 	br	41020e38 <FlashCheckIfBlockErased+0xe0>

  for(i = 0; i < regions->block_size; i += 64)
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);

    for(j=0; j < 64; j+=1)
41020e20:	e0bffb17 	ldw	r2,-20(fp)
41020e24:	10800044 	addi	r2,r2,1
41020e28:	e0bffb15 	stw	r2,-20(fp)
41020e2c:	e0bffb17 	ldw	r2,-20(fp)
41020e30:	10801010 	cmplti	r2,r2,64
41020e34:	103ff01e 	bne	r2,zero,41020df8 <FlashCheckIfBlockErased+0xa0>
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
        break;
      }
    }
    if (block_is_erased == 0x0)
41020e38:	e0bff907 	ldb	r2,-28(fp)
41020e3c:	1005003a 	cmpeq	r2,r2,zero
41020e40:	1000071e 	bne	r2,zero,41020e60 <FlashCheckIfBlockErased+0x108>
  data_read = malloc(64);
  
  /* Initialize the flag */
  block_is_erased = 0x1;

  for(i = 0; i < regions->block_size; i += 64)
41020e44:	e0bffc17 	ldw	r2,-16(fp)
41020e48:	10801004 	addi	r2,r2,64
41020e4c:	e0bffc15 	stw	r2,-16(fp)
41020e50:	e0bfff17 	ldw	r2,-4(fp)
41020e54:	10c00317 	ldw	r3,12(r2)
41020e58:	e0bffc17 	ldw	r2,-16(fp)
41020e5c:	10ffcf16 	blt	r2,r3,41020d9c <FlashCheckIfBlockErased+0x44>
    }
    if (block_is_erased == 0x0)
      break;
  }
  /* Block is erased if we indexed through all block locations */
  if(i == regions->block_size)
41020e60:	e0bfff17 	ldw	r2,-4(fp)
41020e64:	10c00317 	ldw	r3,12(r2)
41020e68:	e0bffc17 	ldw	r2,-16(fp)
41020e6c:	1880031e 	bne	r3,r2,41020e7c <FlashCheckIfBlockErased+0x124>
    ret_code = 1;
41020e70:	00800044 	movi	r2,1
41020e74:	e0bffa15 	stw	r2,-24(fp)
41020e78:	00000106 	br	41020e80 <FlashCheckIfBlockErased+0x128>
  else
    ret_code = 0;
41020e7c:	e03ffa15 	stw	zero,-24(fp)
  
  free(data_read);
41020e80:	e13ff817 	ldw	r4,-32(fp)
41020e84:	10224a40 	call	410224a4 <free>
 
  return ret_code;
41020e88:	e0bffa17 	ldw	r2,-24(fp)
}
41020e8c:	e037883a 	mov	sp,fp
41020e90:	dfc00117 	ldw	ra,4(sp)
41020e94:	df000017 	ldw	fp,0(sp)
41020e98:	dec00204 	addi	sp,sp,8
41020e9c:	f800283a 	ret

41020ea0 <FlashTestBlockWrite>:
*  Purpose: Tests that the function alt_write_flash_block is
*           is working properly.
*
******************************************************************/
static int FlashTestBlockWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
41020ea0:	deffdc04 	addi	sp,sp,-144
41020ea4:	dfc02315 	stw	ra,140(sp)
41020ea8:	df002215 	stw	fp,136(sp)
41020eac:	df002204 	addi	fp,sp,136
41020eb0:	e13ffc15 	stw	r4,-16(fp)
41020eb4:	e17ffd15 	stw	r5,-12(fp)
41020eb8:	e1bffe15 	stw	r6,-8(fp)
41020ebc:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
41020ec0:	e03ffa15 	stw	zero,-24(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;


  /* Get a couple buffers for the test */
  data_written = malloc(100);
41020ec4:	01001904 	movi	r4,100
41020ec8:	10224b80 	call	410224b8 <malloc>
41020ecc:	e0bff815 	stw	r2,-32(fp)
  data_read = malloc(100);
41020ed0:	01001904 	movi	r4,100
41020ed4:	10224b80 	call	410224b8 <malloc>
41020ed8:	e0bff715 	stw	r2,-36(fp)

  test_offset = (regions->offset + (block * regions->block_size));
41020edc:	e0bfff17 	ldw	r2,-4(fp)
41020ee0:	11000017 	ldw	r4,0(r2)
41020ee4:	e0bfff17 	ldw	r2,-4(fp)
41020ee8:	10c00317 	ldw	r3,12(r2)
41020eec:	e0bffc17 	ldw	r2,-16(fp)
41020ef0:	1885383a 	mul	r2,r3,r2
41020ef4:	2085883a 	add	r2,r4,r2
41020ef8:	e0bff915 	stw	r2,-28(fp)

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
41020efc:	e03ffb15 	stw	zero,-20(fp)
41020f00:	00000c06 	br	41020f34 <FlashTestBlockWrite+0x94>
    *(data_written + i) = (i * 3);
41020f04:	e0bffb17 	ldw	r2,-20(fp)
41020f08:	1007883a 	mov	r3,r2
41020f0c:	e0bff817 	ldw	r2,-32(fp)
41020f10:	1889883a 	add	r4,r3,r2
41020f14:	e0fffb17 	ldw	r3,-20(fp)
41020f18:	1805883a 	mov	r2,r3
41020f1c:	1085883a 	add	r2,r2,r2
41020f20:	10c5883a 	add	r2,r2,r3
41020f24:	20800005 	stb	r2,0(r4)
  data_read = malloc(100);

  test_offset = (regions->offset + (block * regions->block_size));

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
41020f28:	e0bffb17 	ldw	r2,-20(fp)
41020f2c:	10800044 	addi	r2,r2,1
41020f30:	e0bffb15 	stw	r2,-20(fp)
41020f34:	e0bffb17 	ldw	r2,-20(fp)
41020f38:	10801910 	cmplti	r2,r2,100
41020f3c:	103ff11e 	bne	r2,zero,41020f04 <FlashTestBlockWrite+0x64>
    *(data_written + i) = (i * 3);

  /* Write the buffer to flash starting 0x40 bytes from the beginning of the block. */
  printf(" -Testing \"alt_write_flash_block\".");
41020f40:	01000034 	movhi	r4,0
41020f44:	21011d04 	addi	r4,r4,1140
41020f48:	1022d200 	call	41022d20 <printf>
  ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x40), data_written, 100);
41020f4c:	e0bff917 	ldw	r2,-28(fp)
41020f50:	10c01004 	addi	r3,r2,64
41020f54:	e0bffe17 	ldw	r2,-8(fp)
41020f58:	e0bff115 	stw	r2,-60(fp)
41020f5c:	e0bff917 	ldw	r2,-28(fp)
41020f60:	e0bff215 	stw	r2,-56(fp)
41020f64:	e0fff315 	stw	r3,-52(fp)
41020f68:	e0bff817 	ldw	r2,-32(fp)
41020f6c:	e0bff415 	stw	r2,-48(fp)
41020f70:	00801904 	movi	r2,100
41020f74:	e0bff515 	stw	r2,-44(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
41020f78:	e0bff117 	ldw	r2,-60(fp)
41020f7c:	10c00917 	ldw	r3,36(r2)
41020f80:	e0bff517 	ldw	r2,-44(fp)
41020f84:	d8800015 	stw	r2,0(sp)
41020f88:	e13ff117 	ldw	r4,-60(fp)
41020f8c:	e17ff217 	ldw	r5,-56(fp)
41020f90:	e1bff317 	ldw	r6,-52(fp)
41020f94:	e1fff417 	ldw	r7,-48(fp)
41020f98:	183ee83a 	callr	r3
41020f9c:	e0bff615 	stw	r2,-40(fp)

  if(!ret_code)
41020fa0:	e0bff617 	ldw	r2,-40(fp)
41020fa4:	1004c03a 	cmpne	r2,r2,zero
41020fa8:	1000071e 	bne	r2,zero,41020fc8 <FlashTestBlockWrite+0x128>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
41020fac:	e0bff117 	ldw	r2,-60(fp)
41020fb0:	10800a17 	ldw	r2,40(r2)
41020fb4:	1007883a 	mov	r3,r2
41020fb8:	e0bff317 	ldw	r2,-52(fp)
41020fbc:	1889883a 	add	r4,r3,r2
41020fc0:	e17ff517 	ldw	r5,-44(fp)
41020fc4:	10314840 	call	41031484 <alt_dcache_flush>

  return ret_code;
41020fc8:	e0bff617 	ldw	r2,-40(fp)
41020fcc:	e0bffa15 	stw	r2,-24(fp)
  if (!ret_code)
41020fd0:	e0bffa17 	ldw	r2,-24(fp)
41020fd4:	1004c03a 	cmpne	r2,r2,zero
41020fd8:	1000241e 	bne	r2,zero,4102106c <FlashTestBlockWrite+0x1cc>
  {
    /* Now read it back into the read_buffer */
    ret_code = alt_read_flash(fd, (test_offset + 0x40), data_read, 100);
41020fdc:	e0bff917 	ldw	r2,-28(fp)
41020fe0:	10c01004 	addi	r3,r2,64
41020fe4:	e0bffe17 	ldw	r2,-8(fp)
41020fe8:	e0bfed15 	stw	r2,-76(fp)
41020fec:	e0ffee15 	stw	r3,-72(fp)
41020ff0:	e0bff717 	ldw	r2,-36(fp)
41020ff4:	e0bfef15 	stw	r2,-68(fp)
41020ff8:	00801904 	movi	r2,100
41020ffc:	e0bff015 	stw	r2,-64(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
41021000:	e0bfed17 	ldw	r2,-76(fp)
41021004:	10800617 	ldw	r2,24(r2)
41021008:	e13fed17 	ldw	r4,-76(fp)
4102100c:	e17fee17 	ldw	r5,-72(fp)
41021010:	e1bfef17 	ldw	r6,-68(fp)
41021014:	e1fff017 	ldw	r7,-64(fp)
41021018:	103ee83a 	callr	r2
4102101c:	e0bffa15 	stw	r2,-24(fp)
    if(!ret_code)
41021020:	e0bffa17 	ldw	r2,-24(fp)
41021024:	1004c03a 	cmpne	r2,r2,zero
41021028:	1000101e 	bne	r2,zero,4102106c <FlashTestBlockWrite+0x1cc>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, 100))
4102102c:	e13ff817 	ldw	r4,-32(fp)
41021030:	e17ff717 	ldw	r5,-36(fp)
41021034:	01801904 	movi	r6,100
41021038:	1022c0c0 	call	41022c0c <memcmp>
4102103c:	1005003a 	cmpeq	r2,r2,zero
41021040:	1000071e 	bne	r2,zero,41021060 <FlashTestBlockWrite+0x1c0>
      {
        printf("  FAILED.\n");
41021044:	01000034 	movhi	r4,0
41021048:	21012604 	addi	r4,r4,1176
4102104c:	1022e5c0 	call	41022e5c <puts>
        *error++;
41021050:	e0bffd17 	ldw	r2,-12(fp)
41021054:	10800104 	addi	r2,r2,4
41021058:	e0bffd15 	stw	r2,-12(fp)
4102105c:	00000306 	br	4102106c <FlashTestBlockWrite+0x1cc>
      }
      else
        printf("  passed.\n");
41021060:	01000034 	movhi	r4,0
41021064:	21012904 	addi	r4,r4,1188
41021068:	1022e5c0 	call	41022e5c <puts>
    }
  }

  /* Test unaligned writes */
  if(!ret_code)
4102106c:	e0bffa17 	ldw	r2,-24(fp)
41021070:	1004c03a 	cmpne	r2,r2,zero
41021074:	1000641e 	bne	r2,zero,41021208 <FlashTestBlockWrite+0x368>
  {
    /* Erase the block */
    ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
41021078:	e0bfff17 	ldw	r2,-4(fp)
4102107c:	10c00317 	ldw	r3,12(r2)
41021080:	e0bffe17 	ldw	r2,-8(fp)
41021084:	e0bfe915 	stw	r2,-92(fp)
41021088:	e0bff917 	ldw	r2,-28(fp)
4102108c:	e0bfea15 	stw	r2,-88(fp)
41021090:	e0ffeb15 	stw	r3,-84(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
41021094:	e0bfe917 	ldw	r2,-92(fp)
41021098:	10800817 	ldw	r2,32(r2)
4102109c:	e13fe917 	ldw	r4,-92(fp)
410210a0:	e17fea17 	ldw	r5,-88(fp)
410210a4:	103ee83a 	callr	r2
410210a8:	e0bfec15 	stw	r2,-80(fp)
  
  if(!ret_code)
410210ac:	e0bfec17 	ldw	r2,-80(fp)
410210b0:	1004c03a 	cmpne	r2,r2,zero
410210b4:	1000071e 	bne	r2,zero,410210d4 <FlashTestBlockWrite+0x234>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
410210b8:	e0bfe917 	ldw	r2,-92(fp)
410210bc:	10800a17 	ldw	r2,40(r2)
410210c0:	1007883a 	mov	r3,r2
410210c4:	e0bfea17 	ldw	r2,-88(fp)
410210c8:	1889883a 	add	r4,r3,r2
410210cc:	e17feb17 	ldw	r5,-84(fp)
410210d0:	10314840 	call	41031484 <alt_dcache_flush>

  return ret_code;
410210d4:	e0bfec17 	ldw	r2,-80(fp)
410210d8:	e0bffa15 	stw	r2,-24(fp)
  
    /* Write the buffer to flash on an unaligned address. */
    printf(" -Testing unaligned writes.");
410210dc:	01000034 	movhi	r4,0
410210e0:	21012c04 	addi	r4,r4,1200
410210e4:	1022d200 	call	41022d20 <printf>
    ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x43), data_written, 100);
410210e8:	e0bff917 	ldw	r2,-28(fp)
410210ec:	10c010c4 	addi	r3,r2,67
410210f0:	e0bffe17 	ldw	r2,-8(fp)
410210f4:	e0bfe315 	stw	r2,-116(fp)
410210f8:	e0bff917 	ldw	r2,-28(fp)
410210fc:	e0bfe415 	stw	r2,-112(fp)
41021100:	e0ffe515 	stw	r3,-108(fp)
41021104:	e0bff817 	ldw	r2,-32(fp)
41021108:	e0bfe615 	stw	r2,-104(fp)
4102110c:	00801904 	movi	r2,100
41021110:	e0bfe715 	stw	r2,-100(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
41021114:	e0bfe317 	ldw	r2,-116(fp)
41021118:	10c00917 	ldw	r3,36(r2)
4102111c:	e0bfe717 	ldw	r2,-100(fp)
41021120:	d8800015 	stw	r2,0(sp)
41021124:	e13fe317 	ldw	r4,-116(fp)
41021128:	e17fe417 	ldw	r5,-112(fp)
4102112c:	e1bfe517 	ldw	r6,-108(fp)
41021130:	e1ffe617 	ldw	r7,-104(fp)
41021134:	183ee83a 	callr	r3
41021138:	e0bfe815 	stw	r2,-96(fp)

  if(!ret_code)
4102113c:	e0bfe817 	ldw	r2,-96(fp)
41021140:	1004c03a 	cmpne	r2,r2,zero
41021144:	1000071e 	bne	r2,zero,41021164 <FlashTestBlockWrite+0x2c4>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
41021148:	e0bfe317 	ldw	r2,-116(fp)
4102114c:	10800a17 	ldw	r2,40(r2)
41021150:	1007883a 	mov	r3,r2
41021154:	e0bfe517 	ldw	r2,-108(fp)
41021158:	1889883a 	add	r4,r3,r2
4102115c:	e17fe717 	ldw	r5,-100(fp)
41021160:	10314840 	call	41031484 <alt_dcache_flush>

  return ret_code;
41021164:	e0bfe817 	ldw	r2,-96(fp)
41021168:	e0bffa15 	stw	r2,-24(fp)
    if (!ret_code)
4102116c:	e0bffa17 	ldw	r2,-24(fp)
41021170:	1004c03a 	cmpne	r2,r2,zero
41021174:	1000241e 	bne	r2,zero,41021208 <FlashTestBlockWrite+0x368>
    {
      /* Now read it back into the read_buffer */
      ret_code = alt_read_flash(fd, (test_offset + 0x43), data_read, 100);
41021178:	e0bff917 	ldw	r2,-28(fp)
4102117c:	10c010c4 	addi	r3,r2,67
41021180:	e0bffe17 	ldw	r2,-8(fp)
41021184:	e0bfdf15 	stw	r2,-132(fp)
41021188:	e0ffe015 	stw	r3,-128(fp)
4102118c:	e0bff717 	ldw	r2,-36(fp)
41021190:	e0bfe115 	stw	r2,-124(fp)
41021194:	00801904 	movi	r2,100
41021198:	e0bfe215 	stw	r2,-120(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
4102119c:	e0bfdf17 	ldw	r2,-132(fp)
410211a0:	10800617 	ldw	r2,24(r2)
410211a4:	e13fdf17 	ldw	r4,-132(fp)
410211a8:	e17fe017 	ldw	r5,-128(fp)
410211ac:	e1bfe117 	ldw	r6,-124(fp)
410211b0:	e1ffe217 	ldw	r7,-120(fp)
410211b4:	103ee83a 	callr	r2
410211b8:	e0bffa15 	stw	r2,-24(fp)
      if(!ret_code)
410211bc:	e0bffa17 	ldw	r2,-24(fp)
410211c0:	1004c03a 	cmpne	r2,r2,zero
410211c4:	1000101e 	bne	r2,zero,41021208 <FlashTestBlockWrite+0x368>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, 100))
410211c8:	e13ff817 	ldw	r4,-32(fp)
410211cc:	e17ff717 	ldw	r5,-36(fp)
410211d0:	01801904 	movi	r6,100
410211d4:	1022c0c0 	call	41022c0c <memcmp>
410211d8:	1005003a 	cmpeq	r2,r2,zero
410211dc:	1000071e 	bne	r2,zero,410211fc <FlashTestBlockWrite+0x35c>
        {
          printf("  FAILED.\n");
410211e0:	01000034 	movhi	r4,0
410211e4:	21012604 	addi	r4,r4,1176
410211e8:	1022e5c0 	call	41022e5c <puts>
          *error++;
410211ec:	e0bffd17 	ldw	r2,-12(fp)
410211f0:	10800104 	addi	r2,r2,4
410211f4:	e0bffd15 	stw	r2,-12(fp)
410211f8:	00000306 	br	41021208 <FlashTestBlockWrite+0x368>
        }
        else
          printf("  passed.\n");
410211fc:	01000034 	movhi	r4,0
41021200:	21012904 	addi	r4,r4,1188
41021204:	1022e5c0 	call	41022e5c <puts>
      }
    }
  }

  /* Free up the buffers we allocated. */
  free(data_written);
41021208:	e13ff817 	ldw	r4,-32(fp)
4102120c:	10224a40 	call	410224a4 <free>
  free(data_read);
41021210:	e13ff717 	ldw	r4,-36(fp)
41021214:	10224a40 	call	410224a4 <free>
  
  return ret_code;
41021218:	e0bffa17 	ldw	r2,-24(fp)
}
4102121c:	e037883a 	mov	sp,fp
41021220:	dfc00117 	ldw	ra,4(sp)
41021224:	df000017 	ldw	fp,0(sp)
41021228:	dec00204 	addi	sp,sp,8
4102122c:	f800283a 	ret

41021230 <FlashTestReadWrite>:
*           that every bit in the specified block can store both
*           a '1' and '0'.
*
******************************************************************/
static int FlashTestReadWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
41021230:	deffe504 	addi	sp,sp,-108
41021234:	dfc01a15 	stw	ra,104(sp)
41021238:	df001915 	stw	fp,100(sp)
4102123c:	df001904 	addi	fp,sp,100
41021240:	e13ffc15 	stw	r4,-16(fp)
41021244:	e17ffd15 	stw	r5,-12(fp)
41021248:	e1bffe15 	stw	r6,-8(fp)
4102124c:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
41021250:	e03ffa15 	stw	zero,-24(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;
 

  /* Get a couple buffers for the tests */
  data_written = malloc(regions->block_size);
41021254:	e0bfff17 	ldw	r2,-4(fp)
41021258:	10800317 	ldw	r2,12(r2)
4102125c:	1009883a 	mov	r4,r2
41021260:	10224b80 	call	410224b8 <malloc>
41021264:	e0bff815 	stw	r2,-32(fp)
  data_read = malloc(regions->block_size);
41021268:	e0bfff17 	ldw	r2,-4(fp)
4102126c:	10800317 	ldw	r2,12(r2)
41021270:	1009883a 	mov	r4,r2
41021274:	10224b80 	call	410224b8 <malloc>
41021278:	e0bff715 	stw	r2,-36(fp)
 
  /* Calculate the offset at which the block lives */
  test_offset = (regions->offset + (block * regions->block_size));
4102127c:	e0bfff17 	ldw	r2,-4(fp)
41021280:	11000017 	ldw	r4,0(r2)
41021284:	e0bfff17 	ldw	r2,-4(fp)
41021288:	10c00317 	ldw	r3,12(r2)
4102128c:	e0bffc17 	ldw	r2,-16(fp)
41021290:	1885383a 	mul	r2,r3,r2
41021294:	2085883a 	add	r2,r4,r2
41021298:	e0bff915 	stw	r2,-28(fp)

  printf("\n -Starting Flash Test.\n");
4102129c:	01000034 	movhi	r4,0
410212a0:	21013304 	addi	r4,r4,1228
410212a4:	1022e5c0 	call	41022e5c <puts>
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
410212a8:	01000034 	movhi	r4,0
410212ac:	21013904 	addi	r4,r4,1252
410212b0:	1022e5c0 	call	41022e5c <puts>
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
410212b4:	e03ffb15 	stw	zero,-20(fp)
410212b8:	00000906 	br	410212e0 <FlashTestReadWrite+0xb0>
    *(data_written + i) = i;
410212bc:	e0bffb17 	ldw	r2,-20(fp)
410212c0:	1007883a 	mov	r3,r2
410212c4:	e0bff817 	ldw	r2,-32(fp)
410212c8:	1887883a 	add	r3,r3,r2
410212cc:	e0bffb17 	ldw	r2,-20(fp)
410212d0:	18800005 	stb	r2,0(r3)

  printf("\n -Starting Flash Test.\n");
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
410212d4:	e0bffb17 	ldw	r2,-20(fp)
410212d8:	10800044 	addi	r2,r2,1
410212dc:	e0bffb15 	stw	r2,-20(fp)
410212e0:	e0bfff17 	ldw	r2,-4(fp)
410212e4:	10c00317 	ldw	r3,12(r2)
410212e8:	e0bffb17 	ldw	r2,-20(fp)
410212ec:	10fff316 	blt	r2,r3,410212bc <FlashTestReadWrite+0x8c>
    *(data_written + i) = i;

  /* Write the buffer to flash block */
  ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
410212f0:	e0bfff17 	ldw	r2,-4(fp)
410212f4:	10c00317 	ldw	r3,12(r2)
410212f8:	e0bffe17 	ldw	r2,-8(fp)
410212fc:	e0bff315 	stw	r2,-52(fp)
41021300:	e0bff917 	ldw	r2,-28(fp)
41021304:	e0bff415 	stw	r2,-48(fp)
41021308:	e0bff817 	ldw	r2,-32(fp)
4102130c:	e0bff515 	stw	r2,-44(fp)
41021310:	e0fff615 	stw	r3,-40(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
41021314:	e0bff317 	ldw	r2,-52(fp)
41021318:	10800517 	ldw	r2,20(r2)
4102131c:	e13ff317 	ldw	r4,-52(fp)
41021320:	e17ff417 	ldw	r5,-48(fp)
41021324:	e1bff517 	ldw	r6,-44(fp)
41021328:	e1fff617 	ldw	r7,-40(fp)
4102132c:	103ee83a 	callr	r2
41021330:	e0bffa15 	stw	r2,-24(fp)
     
  if (!ret_code)
41021334:	e0bffa17 	ldw	r2,-24(fp)
41021338:	1004c03a 	cmpne	r2,r2,zero
4102133c:	1000761e 	bne	r2,zero,41021518 <FlashTestReadWrite+0x2e8>
  {
    /* Read flash block into read buffer */
    ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
41021340:	e0bfff17 	ldw	r2,-4(fp)
41021344:	10c00317 	ldw	r3,12(r2)
41021348:	e0bffe17 	ldw	r2,-8(fp)
4102134c:	e0bfef15 	stw	r2,-68(fp)
41021350:	e0bff917 	ldw	r2,-28(fp)
41021354:	e0bff015 	stw	r2,-64(fp)
41021358:	e0bff717 	ldw	r2,-36(fp)
4102135c:	e0bff115 	stw	r2,-60(fp)
41021360:	e0fff215 	stw	r3,-56(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
41021364:	e0bfef17 	ldw	r2,-68(fp)
41021368:	10800617 	ldw	r2,24(r2)
4102136c:	e13fef17 	ldw	r4,-68(fp)
41021370:	e17ff017 	ldw	r5,-64(fp)
41021374:	e1bff117 	ldw	r6,-60(fp)
41021378:	e1fff217 	ldw	r7,-56(fp)
4102137c:	103ee83a 	callr	r2
41021380:	e0bffa15 	stw	r2,-24(fp)
    if(!ret_code)
41021384:	e0bffa17 	ldw	r2,-24(fp)
41021388:	1004c03a 	cmpne	r2,r2,zero
4102138c:	1000121e 	bne	r2,zero,410213d8 <FlashTestReadWrite+0x1a8>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, regions->block_size))
41021390:	e0bfff17 	ldw	r2,-4(fp)
41021394:	10800317 	ldw	r2,12(r2)
41021398:	100d883a 	mov	r6,r2
4102139c:	e13ff817 	ldw	r4,-32(fp)
410213a0:	e17ff717 	ldw	r5,-36(fp)
410213a4:	1022c0c0 	call	41022c0c <memcmp>
410213a8:	1005003a 	cmpeq	r2,r2,zero
410213ac:	1000071e 	bne	r2,zero,410213cc <FlashTestReadWrite+0x19c>
      {
        printf("    pass 1 - FAILED.\n");
410213b0:	01000034 	movhi	r4,0
410213b4:	21014604 	addi	r4,r4,1304
410213b8:	1022e5c0 	call	41022e5c <puts>
        *error++;
410213bc:	e0bffd17 	ldw	r2,-12(fp)
410213c0:	10800104 	addi	r2,r2,4
410213c4:	e0bffd15 	stw	r2,-12(fp)
410213c8:	00000306 	br	410213d8 <FlashTestReadWrite+0x1a8>
      }
      else
        printf("    pass 1 - passed.\n");
410213cc:	01000034 	movhi	r4,0
410213d0:	21014c04 	addi	r4,r4,1328
410213d4:	1022e5c0 	call	41022e5c <puts>
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
410213d8:	e03ffb15 	stw	zero,-20(fp)
410213dc:	00000a06 	br	41021408 <FlashTestReadWrite+0x1d8>
      *(data_written + i) = ~((alt_u8)(i));
410213e0:	e0bffb17 	ldw	r2,-20(fp)
410213e4:	1007883a 	mov	r3,r2
410213e8:	e0bff817 	ldw	r2,-32(fp)
410213ec:	1887883a 	add	r3,r3,r2
410213f0:	e0bffb17 	ldw	r2,-20(fp)
410213f4:	0084303a 	nor	r2,zero,r2
410213f8:	18800005 	stb	r2,0(r3)
      else
        printf("    pass 1 - passed.\n");
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
410213fc:	e0bffb17 	ldw	r2,-20(fp)
41021400:	10800044 	addi	r2,r2,1
41021404:	e0bffb15 	stw	r2,-20(fp)
41021408:	e0bfff17 	ldw	r2,-4(fp)
4102140c:	10c00317 	ldw	r3,12(r2)
41021410:	e0bffb17 	ldw	r2,-20(fp)
41021414:	10fff216 	blt	r2,r3,410213e0 <FlashTestReadWrite+0x1b0>
      *(data_written + i) = ~((alt_u8)(i));
 
    /* Write the buffer to flash block */
    ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
41021418:	e0bfff17 	ldw	r2,-4(fp)
4102141c:	10c00317 	ldw	r3,12(r2)
41021420:	e0bffe17 	ldw	r2,-8(fp)
41021424:	e0bfeb15 	stw	r2,-84(fp)
41021428:	e0bff917 	ldw	r2,-28(fp)
4102142c:	e0bfec15 	stw	r2,-80(fp)
41021430:	e0bff817 	ldw	r2,-32(fp)
41021434:	e0bfed15 	stw	r2,-76(fp)
41021438:	e0ffee15 	stw	r3,-72(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
4102143c:	e0bfeb17 	ldw	r2,-84(fp)
41021440:	10800517 	ldw	r2,20(r2)
41021444:	e13feb17 	ldw	r4,-84(fp)
41021448:	e17fec17 	ldw	r5,-80(fp)
4102144c:	e1bfed17 	ldw	r6,-76(fp)
41021450:	e1ffee17 	ldw	r7,-72(fp)
41021454:	103ee83a 	callr	r2
41021458:	e0bffa15 	stw	r2,-24(fp)
    
    if (!ret_code)
4102145c:	e0bffa17 	ldw	r2,-24(fp)
41021460:	1004c03a 	cmpne	r2,r2,zero
41021464:	1000261e 	bne	r2,zero,41021500 <FlashTestReadWrite+0x2d0>
    {
      /* Read flash block into read buffer */
      ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
41021468:	e0bfff17 	ldw	r2,-4(fp)
4102146c:	10c00317 	ldw	r3,12(r2)
41021470:	e0bffe17 	ldw	r2,-8(fp)
41021474:	e0bfe715 	stw	r2,-100(fp)
41021478:	e0bff917 	ldw	r2,-28(fp)
4102147c:	e0bfe815 	stw	r2,-96(fp)
41021480:	e0bff717 	ldw	r2,-36(fp)
41021484:	e0bfe915 	stw	r2,-92(fp)
41021488:	e0ffea15 	stw	r3,-88(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
4102148c:	e0bfe717 	ldw	r2,-100(fp)
41021490:	10800617 	ldw	r2,24(r2)
41021494:	e13fe717 	ldw	r4,-100(fp)
41021498:	e17fe817 	ldw	r5,-96(fp)
4102149c:	e1bfe917 	ldw	r6,-92(fp)
410214a0:	e1ffea17 	ldw	r7,-88(fp)
410214a4:	103ee83a 	callr	r2
410214a8:	e0bffa15 	stw	r2,-24(fp)
      if(!ret_code)
410214ac:	e0bffa17 	ldw	r2,-24(fp)
410214b0:	1004c03a 	cmpne	r2,r2,zero
410214b4:	1000121e 	bne	r2,zero,41021500 <FlashTestReadWrite+0x2d0>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, regions->block_size))
410214b8:	e0bfff17 	ldw	r2,-4(fp)
410214bc:	10800317 	ldw	r2,12(r2)
410214c0:	100d883a 	mov	r6,r2
410214c4:	e13ff817 	ldw	r4,-32(fp)
410214c8:	e17ff717 	ldw	r5,-36(fp)
410214cc:	1022c0c0 	call	41022c0c <memcmp>
410214d0:	1005003a 	cmpeq	r2,r2,zero
410214d4:	1000071e 	bne	r2,zero,410214f4 <FlashTestReadWrite+0x2c4>
        {
          printf("    pass 2 - FAILED.\n");
410214d8:	01000034 	movhi	r4,0
410214dc:	21015204 	addi	r4,r4,1352
410214e0:	1022e5c0 	call	41022e5c <puts>
          *error++;
410214e4:	e0bffd17 	ldw	r2,-12(fp)
410214e8:	10800104 	addi	r2,r2,4
410214ec:	e0bffd15 	stw	r2,-12(fp)
410214f0:	00000306 	br	41021500 <FlashTestReadWrite+0x2d0>
        }
        else
          printf("    pass 2 - passed.\n");
410214f4:	01000034 	movhi	r4,0
410214f8:	21015804 	addi	r4,r4,1376
410214fc:	1022e5c0 	call	41022e5c <puts>
      }
    }
    if (*error)
41021500:	e0bffd17 	ldw	r2,-12(fp)
41021504:	10800017 	ldw	r2,0(r2)
41021508:	1005003a 	cmpeq	r2,r2,zero
4102150c:	1000021e 	bne	r2,zero,41021518 <FlashTestReadWrite+0x2e8>
      ret_code = 1;
41021510:	00800044 	movi	r2,1
41021514:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Free up the buffers we allocated */
  free(data_written);
41021518:	e13ff817 	ldw	r4,-32(fp)
4102151c:	10224a40 	call	410224a4 <free>
  free(data_read);
41021520:	e13ff717 	ldw	r4,-36(fp)
41021524:	10224a40 	call	410224a4 <free>
  
  return ret_code;
41021528:	e0bffa17 	ldw	r2,-24(fp)
}
4102152c:	e037883a 	mov	sp,fp
41021530:	dfc00117 	ldw	ra,4(sp)
41021534:	df000017 	ldw	fp,0(sp)
41021538:	dec00204 	addi	sp,sp,8
4102153c:	f800283a 	ret

41021540 <FlashTestBlockErase>:
*           flash block contains some non-0xFFFFFFFF data before
*           this function is called.
*
******************************************************************/
static int FlashTestBlockErase(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
41021540:	defff404 	addi	sp,sp,-48
41021544:	dfc00b15 	stw	ra,44(sp)
41021548:	df000a15 	stw	fp,40(sp)
4102154c:	df000a04 	addi	fp,sp,40
41021550:	e13ffc15 	stw	r4,-16(fp)
41021554:	e17ffd15 	stw	r5,-12(fp)
41021558:	e1bffe15 	stw	r6,-8(fp)
4102155c:	e1ffff15 	stw	r7,-4(fp)

  int ret_code = 0x0;
41021560:	e03ffb15 	stw	zero,-20(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
41021564:	e0bfff17 	ldw	r2,-4(fp)
41021568:	11000017 	ldw	r4,0(r2)
4102156c:	e0bfff17 	ldw	r2,-4(fp)
41021570:	10c00317 	ldw	r3,12(r2)
41021574:	e0bffc17 	ldw	r2,-16(fp)
41021578:	1885383a 	mul	r2,r3,r2
4102157c:	2085883a 	add	r2,r4,r2
41021580:	e0bffa15 	stw	r2,-24(fp)

  printf(" -Testing \"alt_erase_flash_block\".");
41021584:	01000034 	movhi	r4,0
41021588:	21015e04 	addi	r4,r4,1400
4102158c:	1022d200 	call	41022d20 <printf>
  ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
41021590:	e0bfff17 	ldw	r2,-4(fp)
41021594:	10c00317 	ldw	r3,12(r2)
41021598:	e0bffe17 	ldw	r2,-8(fp)
4102159c:	e0bff615 	stw	r2,-40(fp)
410215a0:	e0bffa17 	ldw	r2,-24(fp)
410215a4:	e0bff715 	stw	r2,-36(fp)
410215a8:	e0fff815 	stw	r3,-32(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
410215ac:	e0bff617 	ldw	r2,-40(fp)
410215b0:	10800817 	ldw	r2,32(r2)
410215b4:	e13ff617 	ldw	r4,-40(fp)
410215b8:	e17ff717 	ldw	r5,-36(fp)
410215bc:	103ee83a 	callr	r2
410215c0:	e0bff915 	stw	r2,-28(fp)
  
  if(!ret_code)
410215c4:	e0bff917 	ldw	r2,-28(fp)
410215c8:	1004c03a 	cmpne	r2,r2,zero
410215cc:	1000071e 	bne	r2,zero,410215ec <FlashTestBlockErase+0xac>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
410215d0:	e0bff617 	ldw	r2,-40(fp)
410215d4:	10800a17 	ldw	r2,40(r2)
410215d8:	1007883a 	mov	r3,r2
410215dc:	e0bff717 	ldw	r2,-36(fp)
410215e0:	1889883a 	add	r4,r3,r2
410215e4:	e17ff817 	ldw	r5,-32(fp)
410215e8:	10314840 	call	41031484 <alt_dcache_flush>

  return ret_code;
410215ec:	e0bff917 	ldw	r2,-28(fp)
410215f0:	e0bffb15 	stw	r2,-20(fp)
  /* Check that the erase was successful. */
  if (!ret_code)
410215f4:	e0bffb17 	ldw	r2,-20(fp)
410215f8:	1004c03a 	cmpne	r2,r2,zero
410215fc:	1000101e 	bne	r2,zero,41021640 <FlashTestBlockErase+0x100>
  {
    if(FlashCheckIfBlockErased(fd, block, regions))
41021600:	e13ffe17 	ldw	r4,-8(fp)
41021604:	e17ffc17 	ldw	r5,-16(fp)
41021608:	e1bfff17 	ldw	r6,-4(fp)
4102160c:	1020d580 	call	41020d58 <FlashCheckIfBlockErased>
41021610:	1005003a 	cmpeq	r2,r2,zero
41021614:	1000041e 	bne	r2,zero,41021628 <FlashTestBlockErase+0xe8>
      printf("  passed.\n");
41021618:	01000034 	movhi	r4,0
4102161c:	21012904 	addi	r4,r4,1188
41021620:	1022e5c0 	call	41022e5c <puts>
41021624:	00000606 	br	41021640 <FlashTestBlockErase+0x100>
    else
    {
      printf("  FAILED\n");  
41021628:	01000034 	movhi	r4,0
4102162c:	21016704 	addi	r4,r4,1436
41021630:	1022e5c0 	call	41022e5c <puts>
      *error++;
41021634:	e0bffd17 	ldw	r2,-12(fp)
41021638:	10800104 	addi	r2,r2,4
4102163c:	e0bffd15 	stw	r2,-12(fp)
    }
  }
  
  return ret_code;
41021640:	e0bffb17 	ldw	r2,-20(fp)
}
41021644:	e037883a 	mov	sp,fp
41021648:	dfc00117 	ldw	ra,4(sp)
4102164c:	df000017 	ldw	fp,0(sp)
41021650:	dec00204 	addi	sp,sp,8
41021654:	f800283a 	ret

41021658 <FlashRunTests>:
*             - alt_erase_flash_block
*             - alt_write_flash_block
* 
******************************************************************/
static void FlashRunTests(alt_flash_fd* fd, int block, flash_region* regions)
{
41021658:	defff404 	addi	sp,sp,-48
4102165c:	dfc00b15 	stw	ra,44(sp)
41021660:	df000a15 	stw	fp,40(sp)
41021664:	df000a04 	addi	fp,sp,40
41021668:	e13ffd15 	stw	r4,-12(fp)
4102166c:	e17ffe15 	stw	r5,-8(fp)
41021670:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0x0;
41021674:	e03ffb15 	stw	zero,-20(fp)
  int error = 0x0;
41021678:	e03ffc15 	stw	zero,-16(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
4102167c:	e0bfff17 	ldw	r2,-4(fp)
41021680:	11000017 	ldw	r4,0(r2)
41021684:	e0bfff17 	ldw	r2,-4(fp)
41021688:	10c00317 	ldw	r3,12(r2)
4102168c:	e0bffe17 	ldw	r2,-8(fp)
41021690:	1885383a 	mul	r2,r3,r2
41021694:	2085883a 	add	r2,r4,r2
41021698:	e0bffa15 	stw	r2,-24(fp)
  
  /* Test reading and writing functions */
  ret_code = FlashTestReadWrite(block, &error, fd, regions);
4102169c:	e17ffc04 	addi	r5,fp,-16
410216a0:	e13ffe17 	ldw	r4,-8(fp)
410216a4:	e1bffd17 	ldw	r6,-12(fp)
410216a8:	e1ffff17 	ldw	r7,-4(fp)
410216ac:	10212300 	call	41021230 <FlashTestReadWrite>
410216b0:	e0bffb15 	stw	r2,-20(fp)
 
  /* Test the erase function */
  if (!ret_code)
410216b4:	e0bffb17 	ldw	r2,-20(fp)
410216b8:	1004c03a 	cmpne	r2,r2,zero
410216bc:	1000061e 	bne	r2,zero,410216d8 <FlashRunTests+0x80>
  {
    ret_code = FlashTestBlockErase(block, &error, fd, regions);
410216c0:	e17ffc04 	addi	r5,fp,-16
410216c4:	e13ffe17 	ldw	r4,-8(fp)
410216c8:	e1bffd17 	ldw	r6,-12(fp)
410216cc:	e1ffff17 	ldw	r7,-4(fp)
410216d0:	10215400 	call	41021540 <FlashTestBlockErase>
410216d4:	e0bffb15 	stw	r2,-20(fp)
  }
  /* Test the block write function */
  if (!ret_code)
410216d8:	e0bffb17 	ldw	r2,-20(fp)
410216dc:	1004c03a 	cmpne	r2,r2,zero
410216e0:	1000061e 	bne	r2,zero,410216fc <FlashRunTests+0xa4>
  {
    ret_code = FlashTestBlockWrite(block, &error, fd, regions);
410216e4:	e17ffc04 	addi	r5,fp,-16
410216e8:	e13ffe17 	ldw	r4,-8(fp)
410216ec:	e1bffd17 	ldw	r6,-12(fp)
410216f0:	e1ffff17 	ldw	r7,-4(fp)
410216f4:	1020ea00 	call	41020ea0 <FlashTestBlockWrite>
410216f8:	e0bffb15 	stw	r2,-20(fp)
  }

  /* Erase the block so we dont fill one up each time we run the test */
  printf(" -Returning block %d to its erased state.\n", block);
410216fc:	01000034 	movhi	r4,0
41021700:	21016a04 	addi	r4,r4,1448
41021704:	e17ffe17 	ldw	r5,-8(fp)
41021708:	1022d200 	call	41022d20 <printf>
  alt_erase_flash_block(fd, test_offset, regions->block_size);
4102170c:	e0bfff17 	ldw	r2,-4(fp)
41021710:	10c00317 	ldw	r3,12(r2)
41021714:	e0bffd17 	ldw	r2,-12(fp)
41021718:	e0bff615 	stw	r2,-40(fp)
4102171c:	e0bffa17 	ldw	r2,-24(fp)
41021720:	e0bff715 	stw	r2,-36(fp)
41021724:	e0fff815 	stw	r3,-32(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
41021728:	e0bff617 	ldw	r2,-40(fp)
4102172c:	10800817 	ldw	r2,32(r2)
41021730:	e13ff617 	ldw	r4,-40(fp)
41021734:	e17ff717 	ldw	r5,-36(fp)
41021738:	103ee83a 	callr	r2
4102173c:	e0bff915 	stw	r2,-28(fp)
  
  if(!ret_code)
41021740:	e0bff917 	ldw	r2,-28(fp)
41021744:	1004c03a 	cmpne	r2,r2,zero
41021748:	1000071e 	bne	r2,zero,41021768 <FlashRunTests+0x110>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
4102174c:	e0bff617 	ldw	r2,-40(fp)
41021750:	10800a17 	ldw	r2,40(r2)
41021754:	1007883a 	mov	r3,r2
41021758:	e0bff717 	ldw	r2,-36(fp)
4102175c:	1889883a 	add	r4,r3,r2
41021760:	e17ff817 	ldw	r5,-32(fp)
41021764:	10314840 	call	41031484 <alt_dcache_flush>
 
  printf(" -Flash tests complete.\n");
41021768:	01000034 	movhi	r4,0
4102176c:	21017504 	addi	r4,r4,1492
41021770:	1022e5c0 	call	41022e5c <puts>
  if(ret_code || error)
41021774:	e0bffb17 	ldw	r2,-20(fp)
41021778:	1004c03a 	cmpne	r2,r2,zero
4102177c:	1000031e 	bne	r2,zero,4102178c <FlashRunTests+0x134>
41021780:	e0bffc17 	ldw	r2,-16(fp)
41021784:	1005003a 	cmpeq	r2,r2,zero
41021788:	1000031e 	bne	r2,zero,41021798 <FlashRunTests+0x140>
  {
    printf(" -At least one test failed.\n\n");
4102178c:	01000034 	movhi	r4,0
41021790:	21017b04 	addi	r4,r4,1516
41021794:	1022e5c0 	call	41022e5c <puts>
  }
}
41021798:	e037883a 	mov	sp,fp
4102179c:	dfc00117 	ldw	ra,4(sp)
410217a0:	df000017 	ldw	fp,0(sp)
410217a4:	dec00204 	addi	sp,sp,8
410217a8:	f800283a 	ret

410217ac <GetFlashName>:
*           Defaults to "/dev/ext_flash", the name of the flash
*           component in the Nios II example designs.
* 
******************************************************************/
static int GetFlashName(char line[30], int flash_type)
{
410217ac:	defffa04 	addi	sp,sp,-24
410217b0:	dfc00515 	stw	ra,20(sp)
410217b4:	df000415 	stw	fp,16(sp)
410217b8:	df000404 	addi	fp,sp,16
410217bc:	e13ffe15 	stw	r4,-8(fp)
410217c0:	e17fff15 	stw	r5,-4(fp)

  char ch = 0x0;
410217c4:	e03ffd05 	stb	zero,-12(fp)
  int i;

  if (flash_type == CFI)
410217c8:	e0bfff17 	ldw	r2,-4(fp)
410217cc:	108000d8 	cmpnei	r2,r2,3
410217d0:	1000091e 	bne	r2,zero,410217f8 <GetFlashName+0x4c>
  { 
    printf("\nEnter the name of the CFI flash device to be opened,\n");
410217d4:	01000034 	movhi	r4,0
410217d8:	21018304 	addi	r4,r4,1548
410217dc:	1022e5c0 	call	41022e5c <puts>
    printf("or just press <enter> to open \"/dev/ext_flash\"\n");
410217e0:	01000034 	movhi	r4,0
410217e4:	21019104 	addi	r4,r4,1604
410217e8:	1022e5c0 	call	41022e5c <puts>
    printf(">");
410217ec:	01000f84 	movi	r4,62
410217f0:	1022d980 	call	41022d98 <putchar>
410217f4:	00000b06 	br	41021824 <GetFlashName+0x78>
  }
  else if (flash_type == EPCS)
410217f8:	e0bfff17 	ldw	r2,-4(fp)
410217fc:	10800118 	cmpnei	r2,r2,4
41021800:	1000081e 	bne	r2,zero,41021824 <GetFlashName+0x78>
  {
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
41021804:	01000034 	movhi	r4,0
41021808:	21019d04 	addi	r4,r4,1652
4102180c:	1022e5c0 	call	41022e5c <puts>
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
41021810:	01000034 	movhi	r4,0
41021814:	2101ab04 	addi	r4,r4,1708
41021818:	1022e5c0 	call	41022e5c <puts>
    printf(">");
4102181c:	01000f84 	movi	r4,62
41021820:	1022d980 	call	41022d98 <putchar>
  }
 
  for(i = 0; ch != '\n'; i++)
41021824:	e03ffc15 	stw	zero,-16(fp)
41021828:	00003406 	br	410218fc <GetFlashName+0x150>
  {
    ch = getc(stdin);
4102182c:	00800034 	movhi	r2,0
41021830:	108ad704 	addi	r2,r2,11100
41021834:	10800017 	ldw	r2,0(r2)
41021838:	11000117 	ldw	r4,4(r2)
4102183c:	102237c0 	call	4102237c <getc>
41021840:	e0bffd05 	stb	r2,-12(fp)
    if(ch == '\r' || ch == '\n')
41021844:	e0bffd07 	ldb	r2,-12(fp)
41021848:	10800360 	cmpeqi	r2,r2,13
4102184c:	1000031e 	bne	r2,zero,4102185c <GetFlashName+0xb0>
41021850:	e0bffd07 	ldb	r2,-12(fp)
41021854:	10800298 	cmpnei	r2,r2,10
41021858:	10001f1e 	bne	r2,zero,410218d8 <GetFlashName+0x12c>
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
4102185c:	e0bffc17 	ldw	r2,-16(fp)
41021860:	10800088 	cmpgei	r2,r2,2
41021864:	1000161e 	bne	r2,zero,410218c0 <GetFlashName+0x114>
      {
        if (flash_type == CFI)
41021868:	e0bfff17 	ldw	r2,-4(fp)
4102186c:	108000d8 	cmpnei	r2,r2,3
41021870:	1000081e 	bne	r2,zero,41021894 <GetFlashName+0xe8>
          strcpy(line, "/dev/ext_flash\0");
41021874:	e0bffe17 	ldw	r2,-8(fp)
41021878:	00c00034 	movhi	r3,0
4102187c:	18c1b904 	addi	r3,r3,1764
41021880:	1009883a 	mov	r4,r2
41021884:	180b883a 	mov	r5,r3
41021888:	018003c4 	movi	r6,15
4102188c:	1022c800 	call	41022c80 <memcpy>
41021890:	00001706 	br	410218f0 <GetFlashName+0x144>
        else if (flash_type == EPCS)
41021894:	e0bfff17 	ldw	r2,-4(fp)
41021898:	10800118 	cmpnei	r2,r2,4
4102189c:	1000141e 	bne	r2,zero,410218f0 <GetFlashName+0x144>
          strcpy(line, "/dev/epcs_controller\0");
410218a0:	e0bffe17 	ldw	r2,-8(fp)
410218a4:	00c00034 	movhi	r3,0
410218a8:	18c1bd04 	addi	r3,r3,1780
410218ac:	1009883a 	mov	r4,r2
410218b0:	180b883a 	mov	r5,r3
410218b4:	01800544 	movi	r6,21
410218b8:	1022c800 	call	41022c80 <memcpy>
410218bc:	00000c06 	br	410218f0 <GetFlashName+0x144>
      }
         
      else
        /* Properly terminate the string. */
        line[i] = '\0';
410218c0:	e0bffc17 	ldw	r2,-16(fp)
410218c4:	1007883a 	mov	r3,r2
410218c8:	e0bffe17 	ldw	r2,-8(fp)
410218cc:	1885883a 	add	r2,r3,r2
410218d0:	10000005 	stb	zero,0(r2)
  }
 
  for(i = 0; ch != '\n'; i++)
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
410218d4:	00000606 	br	410218f0 <GetFlashName+0x144>
      else
        /* Properly terminate the string. */
        line[i] = '\0';
    }
    else
     line[i] = ch;
410218d8:	e0bffc17 	ldw	r2,-16(fp)
410218dc:	1007883a 	mov	r3,r2
410218e0:	e0bffe17 	ldw	r2,-8(fp)
410218e4:	1887883a 	add	r3,r3,r2
410218e8:	e0bffd03 	ldbu	r2,-12(fp)
410218ec:	18800005 	stb	r2,0(r3)
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
    printf(">");
  }
 
  for(i = 0; ch != '\n'; i++)
410218f0:	e0bffc17 	ldw	r2,-16(fp)
410218f4:	10800044 	addi	r2,r2,1
410218f8:	e0bffc15 	stw	r2,-16(fp)
410218fc:	e0bffd07 	ldb	r2,-12(fp)
41021900:	10800298 	cmpnei	r2,r2,10
41021904:	103fc91e 	bne	r2,zero,4102182c <GetFlashName+0x80>
    }
    else
     line[i] = ch;
  }
 
  return 0;
41021908:	0005883a 	mov	r2,zero
}
4102190c:	e037883a 	mov	sp,fp
41021910:	dfc00117 	ldw	ra,4(sp)
41021914:	df000017 	ldw	fp,0(sp)
41021918:	dec00204 	addi	sp,sp,8
4102191c:	f800283a 	ret

41021920 <FlashErase>:
*
*  Purpose: Erases 1 or all blocks in the specified flash device.
* 
******************************************************************/
static void FlashErase(int flash_type)
{
41021920:	deffe304 	addi	sp,sp,-116
41021924:	dfc01c15 	stw	ra,112(sp)
41021928:	df001b15 	stw	fp,108(sp)
4102192c:	df001b04 	addi	fp,sp,108
41021930:	e13fff15 	stw	r4,-4(fp)
  alt_u8 entry[4];
  alt_u8 flashname[30];
  unsigned int block;
 
  /* Get the name of the flash we are erasing */
  ret_code = GetFlashName(flashname, flash_type);
41021934:	e13ff604 	addi	r4,fp,-40
41021938:	e17fff17 	ldw	r5,-4(fp)
4102193c:	10217ac0 	call	410217ac <GetFlashName>
41021940:	e0bff015 	stw	r2,-64(fp)
 
  fd = alt_flash_open_dev(flashname);
41021944:	e13ff604 	addi	r4,fp,-40
41021948:	10315280 	call	41031528 <alt_flash_open_dev>
4102194c:	e0bff215 	stw	r2,-56(fp)
  if (fd)
41021950:	e0bff217 	ldw	r2,-56(fp)
41021954:	1005003a 	cmpeq	r2,r2,zero
41021958:	1000bf1e 	bne	r2,zero,41021c58 <FlashErase+0x338>
4102195c:	e0bff217 	ldw	r2,-56(fp)
41021960:	e0bfed15 	stw	r2,-76(fp)
41021964:	e0bff304 	addi	r2,fp,-52
41021968:	e0bfee15 	stw	r2,-72(fp)
4102196c:	e0bff404 	addi	r2,fp,-48
41021970:	e0bfef15 	stw	r2,-68(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
41021974:	e0bfed17 	ldw	r2,-76(fp)
41021978:	10800717 	ldw	r2,28(r2)
4102197c:	e13fed17 	ldw	r4,-76(fp)
41021980:	e17fee17 	ldw	r5,-72(fp)
41021984:	e1bfef17 	ldw	r6,-68(fp)
41021988:	103ee83a 	callr	r2
  {
    /* Find out some useful stuff about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
4102198c:	e0bff015 	stw	r2,-64(fp)
    if (!ret_code)
41021990:	e0bff017 	ldw	r2,-64(fp)
41021994:	1004c03a 	cmpne	r2,r2,zero
41021998:	1000a91e 	bne	r2,zero,41021c40 <FlashErase+0x320>
    {
      printf(" -Region has %d blocks.\n", regions->number_of_blocks);
4102199c:	e0bff317 	ldw	r2,-52(fp)
410219a0:	11400217 	ldw	r5,8(r2)
410219a4:	01000034 	movhi	r4,0
410219a8:	2101c304 	addi	r4,r4,1804
410219ac:	1022d200 	call	41022d20 <printf>
      printf(" -Which block would you like to erase?\n");
410219b0:	01000034 	movhi	r4,0
410219b4:	2101ca04 	addi	r4,r4,1832
410219b8:	1022e5c0 	call	41022e5c <puts>
      printf(" -> ");
410219bc:	01000034 	movhi	r4,0
410219c0:	2101d404 	addi	r4,r4,1872
410219c4:	1022d200 	call	41022d20 <printf>
      
      GetInputString( entry, sizeof(entry), stdin );
410219c8:	e13ff504 	addi	r4,fp,-44
410219cc:	00800034 	movhi	r2,0
410219d0:	108ad704 	addi	r2,r2,11100
410219d4:	10800017 	ldw	r2,0(r2)
410219d8:	11800117 	ldw	r6,4(r2)
410219dc:	01400104 	movi	r5,4
410219e0:	102030c0 	call	4102030c <GetInputString>

      if(entry[0] == 'a')
410219e4:	e0bff503 	ldbu	r2,-44(fp)
410219e8:	10803fcc 	andi	r2,r2,255
410219ec:	10801858 	cmpnei	r2,r2,97
410219f0:	1000561e 	bne	r2,zero,41021b4c <FlashErase+0x22c>
      {
        printf(" -Erase ALL blocks? (y/n) ");
410219f4:	01000034 	movhi	r4,0
410219f8:	2101d604 	addi	r4,r4,1880
410219fc:	1022d200 	call	41022d20 <printf>

        GetInputString( entry, sizeof(entry), stdin );
41021a00:	e13ff504 	addi	r4,fp,-44
41021a04:	00800034 	movhi	r2,0
41021a08:	108ad704 	addi	r2,r2,11100
41021a0c:	10800017 	ldw	r2,0(r2)
41021a10:	11800117 	ldw	r6,4(r2)
41021a14:	01400104 	movi	r5,4
41021a18:	102030c0 	call	4102030c <GetInputString>
        
        if(entry[0] == 'y')
41021a1c:	e0bff503 	ldbu	r2,-44(fp)
41021a20:	10803fcc 	andi	r2,r2,255
41021a24:	10801e58 	cmpnei	r2,r2,121
41021a28:	1000451e 	bne	r2,zero,41021b40 <FlashErase+0x220>
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
41021a2c:	e0bff317 	ldw	r2,-52(fp)
41021a30:	11400217 	ldw	r5,8(r2)
41021a34:	01000034 	movhi	r4,0
41021a38:	2101dd04 	addi	r4,r4,1908
41021a3c:	1022d200 	call	41022d20 <printf>
          for(block = 0; block < regions->number_of_blocks; block++)
41021a40:	e03ffe15 	stw	zero,-8(fp)
41021a44:	00003506 	br	41021b1c <FlashErase+0x1fc>
          {
            /* Dont erase it if it's already erased silly. */
            if ((FlashCheckIfBlockErased(fd, block, regions)) == 0)
41021a48:	e0bffe17 	ldw	r2,-8(fp)
41021a4c:	100b883a 	mov	r5,r2
41021a50:	e1bff317 	ldw	r6,-52(fp)
41021a54:	e13ff217 	ldw	r4,-56(fp)
41021a58:	1020d580 	call	41020d58 <FlashCheckIfBlockErased>
41021a5c:	1004c03a 	cmpne	r2,r2,zero
41021a60:	1000211e 	bne	r2,zero,41021ae8 <FlashErase+0x1c8>
            {
              test_offset = (regions->offset + (block * regions->block_size));
41021a64:	e0bff317 	ldw	r2,-52(fp)
41021a68:	10800017 	ldw	r2,0(r2)
41021a6c:	1009883a 	mov	r4,r2
41021a70:	e0bff317 	ldw	r2,-52(fp)
41021a74:	10800317 	ldw	r2,12(r2)
41021a78:	1007883a 	mov	r3,r2
41021a7c:	e0bffe17 	ldw	r2,-8(fp)
41021a80:	1885383a 	mul	r2,r3,r2
41021a84:	2085883a 	add	r2,r4,r2
41021a88:	e0bff115 	stw	r2,-60(fp)
              alt_erase_flash_block(fd, test_offset, regions->block_size);
41021a8c:	e0bff317 	ldw	r2,-52(fp)
41021a90:	10c00317 	ldw	r3,12(r2)
41021a94:	e0bff217 	ldw	r2,-56(fp)
41021a98:	e0bfe915 	stw	r2,-92(fp)
41021a9c:	e0bff117 	ldw	r2,-60(fp)
41021aa0:	e0bfea15 	stw	r2,-88(fp)
41021aa4:	e0ffeb15 	stw	r3,-84(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
41021aa8:	e0bfe917 	ldw	r2,-92(fp)
41021aac:	10800817 	ldw	r2,32(r2)
41021ab0:	e13fe917 	ldw	r4,-92(fp)
41021ab4:	e17fea17 	ldw	r5,-88(fp)
41021ab8:	103ee83a 	callr	r2
41021abc:	e0bfec15 	stw	r2,-80(fp)
  
  if(!ret_code)
41021ac0:	e0bfec17 	ldw	r2,-80(fp)
41021ac4:	1004c03a 	cmpne	r2,r2,zero
41021ac8:	1000071e 	bne	r2,zero,41021ae8 <FlashErase+0x1c8>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
41021acc:	e0bfe917 	ldw	r2,-92(fp)
41021ad0:	10800a17 	ldw	r2,40(r2)
41021ad4:	1007883a 	mov	r3,r2
41021ad8:	e0bfea17 	ldw	r2,-88(fp)
41021adc:	1889883a 	add	r4,r3,r2
41021ae0:	e17feb17 	ldw	r5,-84(fp)
41021ae4:	10314840 	call	41031484 <alt_dcache_flush>
            }
            /* Just a simple progress meter so we dont get bored waiting for the flash to erase. */
            printf(".");
41021ae8:	01000b84 	movi	r4,46
41021aec:	1022d980 	call	41022d98 <putchar>
            if(((block + 1) % 80) == 0)
41021af0:	e0bffe17 	ldw	r2,-8(fp)
41021af4:	11000044 	addi	r4,r2,1
41021af8:	01401404 	movi	r5,80
41021afc:	10223740 	call	41022374 <__umodsi3>
41021b00:	1004c03a 	cmpne	r2,r2,zero
41021b04:	1000021e 	bne	r2,zero,41021b10 <FlashErase+0x1f0>
            {
              printf("\n");
41021b08:	01000284 	movi	r4,10
41021b0c:	1022d980 	call	41022d98 <putchar>
        
        if(entry[0] == 'y')
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
          for(block = 0; block < regions->number_of_blocks; block++)
41021b10:	e0bffe17 	ldw	r2,-8(fp)
41021b14:	10800044 	addi	r2,r2,1
41021b18:	e0bffe15 	stw	r2,-8(fp)
41021b1c:	e0bff317 	ldw	r2,-52(fp)
41021b20:	10800217 	ldw	r2,8(r2)
41021b24:	1007883a 	mov	r3,r2
41021b28:	e0bffe17 	ldw	r2,-8(fp)
41021b2c:	10ffc636 	bltu	r2,r3,41021a48 <FlashErase+0x128>
            if(((block + 1) % 80) == 0)
            {
              printf("\n");
            }
          }
          printf("\n -All Blocks Erased.\n");
41021b30:	01000034 	movhi	r4,0
41021b34:	2101e604 	addi	r4,r4,1944
41021b38:	1022e5c0 	call	41022e5c <puts>
41021b3c:	00000306 	br	41021b4c <FlashErase+0x22c>
        }
        else
        {
          printf("Erased zero blocks.\n");
41021b40:	01000034 	movhi	r4,0
41021b44:	2101ec04 	addi	r4,r4,1968
41021b48:	1022e5c0 	call	41022e5c <puts>
        }
      }
      /* Just erase one block */
      if(sscanf(entry, "%d\n", &block))
41021b4c:	e13ff504 	addi	r4,fp,-44
41021b50:	e1bffe04 	addi	r6,fp,-8
41021b54:	01400034 	movhi	r5,0
41021b58:	2941f104 	addi	r5,r5,1988
41021b5c:	1022fd00 	call	41022fd0 <sscanf>
41021b60:	1005003a 	cmpeq	r2,r2,zero
41021b64:	1000361e 	bne	r2,zero,41021c40 <FlashErase+0x320>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
41021b68:	e0bff317 	ldw	r2,-52(fp)
41021b6c:	10800217 	ldw	r2,8(r2)
41021b70:	10bfffc4 	addi	r2,r2,-1
41021b74:	1007883a 	mov	r3,r2
41021b78:	e0bffe17 	ldw	r2,-8(fp)
41021b7c:	18802636 	bltu	r3,r2,41021c18 <FlashErase+0x2f8>
        {
          test_offset = (regions->offset + (block * regions->block_size));
41021b80:	e0bff317 	ldw	r2,-52(fp)
41021b84:	10800017 	ldw	r2,0(r2)
41021b88:	1009883a 	mov	r4,r2
41021b8c:	e0bff317 	ldw	r2,-52(fp)
41021b90:	10800317 	ldw	r2,12(r2)
41021b94:	1007883a 	mov	r3,r2
41021b98:	e0bffe17 	ldw	r2,-8(fp)
41021b9c:	1885383a 	mul	r2,r3,r2
41021ba0:	2085883a 	add	r2,r4,r2
41021ba4:	e0bff115 	stw	r2,-60(fp)
          alt_erase_flash_block(fd, test_offset, regions->block_size);
41021ba8:	e0bff317 	ldw	r2,-52(fp)
41021bac:	10c00317 	ldw	r3,12(r2)
41021bb0:	e0bff217 	ldw	r2,-56(fp)
41021bb4:	e0bfe515 	stw	r2,-108(fp)
41021bb8:	e0bff117 	ldw	r2,-60(fp)
41021bbc:	e0bfe615 	stw	r2,-104(fp)
41021bc0:	e0ffe715 	stw	r3,-100(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
41021bc4:	e0bfe517 	ldw	r2,-108(fp)
41021bc8:	10800817 	ldw	r2,32(r2)
41021bcc:	e13fe517 	ldw	r4,-108(fp)
41021bd0:	e17fe617 	ldw	r5,-104(fp)
41021bd4:	103ee83a 	callr	r2
41021bd8:	e0bfe815 	stw	r2,-96(fp)
  
  if(!ret_code)
41021bdc:	e0bfe817 	ldw	r2,-96(fp)
41021be0:	1004c03a 	cmpne	r2,r2,zero
41021be4:	1000071e 	bne	r2,zero,41021c04 <FlashErase+0x2e4>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
41021be8:	e0bfe517 	ldw	r2,-108(fp)
41021bec:	10800a17 	ldw	r2,40(r2)
41021bf0:	1007883a 	mov	r3,r2
41021bf4:	e0bfe617 	ldw	r2,-104(fp)
41021bf8:	1889883a 	add	r4,r3,r2
41021bfc:	e17fe717 	ldw	r5,-100(fp)
41021c00:	10314840 	call	41031484 <alt_dcache_flush>
          printf(" -Block %d erased.\n", block);
41021c04:	e17ffe17 	ldw	r5,-8(fp)
41021c08:	01000034 	movhi	r4,0
41021c0c:	2101f204 	addi	r4,r4,1992
41021c10:	1022d200 	call	41022d20 <printf>
41021c14:	00000a06 	br	41021c40 <FlashErase+0x320>
        }
        else
        {
          printf(" -Block number entered is %d\n", block);
41021c18:	e17ffe17 	ldw	r5,-8(fp)
41021c1c:	01000034 	movhi	r4,0
41021c20:	2101f704 	addi	r4,r4,2012
41021c24:	1022d200 	call	41022d20 <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
41021c28:	e0bff317 	ldw	r2,-52(fp)
41021c2c:	10800217 	ldw	r2,8(r2)
41021c30:	117fffc4 	addi	r5,r2,-1
41021c34:	01000034 	movhi	r4,0
41021c38:	2101ff04 	addi	r4,r4,2044
41021c3c:	1022d200 	call	41022d20 <printf>
        }
      }
    }
    printf(" -Closing flash \"%s\".\n", flashname);
41021c40:	e17ff604 	addi	r5,fp,-40
41021c44:	01000034 	movhi	r4,0
41021c48:	21020a04 	addi	r4,r4,2088
41021c4c:	1022d200 	call	41022d20 <printf>
    alt_flash_close_dev(fd);
41021c50:	e13ff217 	ldw	r4,-56(fp)
41021c54:	10315a40 	call	410315a4 <alt_flash_close_dev>
  }
}
41021c58:	e037883a 	mov	sp,fp
41021c5c:	dfc00117 	ldw	ra,4(sp)
41021c60:	df000017 	ldw	fp,0(sp)
41021c64:	dec00204 	addi	sp,sp,8
41021c68:	f800283a 	ret

41021c6c <FlashFindErasedBlocks>:
*           parameter is SHOWMAP, the function prints a list of 
*           all blocks, indicating which ones are erased.
* 
******************************************************************/
static int FlashFindErasedBlocks(alt_flash_fd* fd, flash_region* regions, int number_of_regions, int mode)
{ 
41021c6c:	defff404 	addi	sp,sp,-48
41021c70:	dfc00b15 	stw	ra,44(sp)
41021c74:	df000a15 	stw	fp,40(sp)
41021c78:	df000a04 	addi	fp,sp,40
41021c7c:	e13ffc15 	stw	r4,-16(fp)
41021c80:	e17ffd15 	stw	r5,-12(fp)
41021c84:	e1bffe15 	stw	r6,-8(fp)
41021c88:	e1ffff15 	stw	r7,-4(fp)
  int region_index, block_index;
  int block_erased = 0x0;
41021c8c:	e03ff615 	stw	zero,-40(fp)
  alt_u8 entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
41021c90:	e03ff815 	stw	zero,-32(fp)
41021c94:	00008506 	br	41021eac <FlashFindErasedBlocks+0x240>
  {
    printf(" -Checking Region %d for erased blocks.\n", region_index);
41021c98:	01000034 	movhi	r4,0
41021c9c:	21021004 	addi	r4,r4,2112
41021ca0:	e17ff817 	ldw	r5,-32(fp)
41021ca4:	1022d200 	call	41022d20 <printf>
    /* SHOWMAP mode has a legend reminding us what little plus and minus signs mean */
    if(mode == SHOWMAP)
41021ca8:	e0bfff17 	ldw	r2,-4(fp)
41021cac:	10800098 	cmpnei	r2,r2,2
41021cb0:	1000061e 	bne	r2,zero,41021ccc <FlashFindErasedBlocks+0x60>
    {
      printf("            erased block = '-'\n");     
41021cb4:	01000034 	movhi	r4,0
41021cb8:	21021b04 	addi	r4,r4,2156
41021cbc:	1022e5c0 	call	41022e5c <puts>
      printf("          unerased block = '+'\n\n");     
41021cc0:	01000034 	movhi	r4,0
41021cc4:	21022304 	addi	r4,r4,2188
41021cc8:	1022e5c0 	call	41022e5c <puts>
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
41021ccc:	e03ff715 	stw	zero,-36(fp)
41021cd0:	00003106 	br	41021d98 <FlashFindErasedBlocks+0x12c>
    {
      block_erased = FlashCheckIfBlockErased(fd, block_index, regions);
41021cd4:	e13ffc17 	ldw	r4,-16(fp)
41021cd8:	e17ff717 	ldw	r5,-36(fp)
41021cdc:	e1bffd17 	ldw	r6,-12(fp)
41021ce0:	1020d580 	call	41020d58 <FlashCheckIfBlockErased>
41021ce4:	e0bff615 	stw	r2,-40(fp)
      /* If it's erased and were running in TEST mode, we're done */
      if(block_erased && (mode == TEST))
41021ce8:	e0bff617 	ldw	r2,-40(fp)
41021cec:	1005003a 	cmpeq	r2,r2,zero
41021cf0:	1000031e 	bne	r2,zero,41021d00 <FlashFindErasedBlocks+0x94>
41021cf4:	e0bfff17 	ldw	r2,-4(fp)
41021cf8:	10800060 	cmpeqi	r2,r2,1
41021cfc:	10002a1e 	bne	r2,zero,41021da8 <FlashFindErasedBlocks+0x13c>
        break;
      /* If in SHOWMAP mode, mark block as either erased or not-erased. */
      else if(block_erased && (mode == SHOWMAP))
41021d00:	e0bff617 	ldw	r2,-40(fp)
41021d04:	1005003a 	cmpeq	r2,r2,zero
41021d08:	10000f1e 	bne	r2,zero,41021d48 <FlashFindErasedBlocks+0xdc>
41021d0c:	e0bfff17 	ldw	r2,-4(fp)
41021d10:	10800098 	cmpnei	r2,r2,2
41021d14:	10000c1e 	bne	r2,zero,41021d48 <FlashFindErasedBlocks+0xdc>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
41021d18:	e0bffd17 	ldw	r2,-12(fp)
41021d1c:	11000017 	ldw	r4,0(r2)
41021d20:	e0bffd17 	ldw	r2,-12(fp)
41021d24:	10c00317 	ldw	r3,12(r2)
41021d28:	e0bff717 	ldw	r2,-36(fp)
41021d2c:	1885383a 	mul	r2,r3,r2
41021d30:	208d883a 	add	r6,r4,r2
41021d34:	01000034 	movhi	r4,0
41021d38:	21022b04 	addi	r4,r4,2220
41021d3c:	e17ff717 	ldw	r5,-36(fp)
41021d40:	1022d200 	call	41022d20 <printf>
      block_erased = FlashCheckIfBlockErased(fd, block_index, regions);
      /* If it's erased and were running in TEST mode, we're done */
      if(block_erased && (mode == TEST))
        break;
      /* If in SHOWMAP mode, mark block as either erased or not-erased. */
      else if(block_erased && (mode == SHOWMAP))
41021d44:	00001106 	br	41021d8c <FlashFindErasedBlocks+0x120>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
      else if(!block_erased && (mode == SHOWMAP))
41021d48:	e0bff617 	ldw	r2,-40(fp)
41021d4c:	1004c03a 	cmpne	r2,r2,zero
41021d50:	10000e1e 	bne	r2,zero,41021d8c <FlashFindErasedBlocks+0x120>
41021d54:	e0bfff17 	ldw	r2,-4(fp)
41021d58:	10800098 	cmpnei	r2,r2,2
41021d5c:	10000b1e 	bne	r2,zero,41021d8c <FlashFindErasedBlocks+0x120>
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
41021d60:	e0bffd17 	ldw	r2,-12(fp)
41021d64:	11000017 	ldw	r4,0(r2)
41021d68:	e0bffd17 	ldw	r2,-12(fp)
41021d6c:	10c00317 	ldw	r3,12(r2)
41021d70:	e0bff717 	ldw	r2,-36(fp)
41021d74:	1885383a 	mul	r2,r3,r2
41021d78:	208d883a 	add	r6,r4,r2
41021d7c:	01000034 	movhi	r4,0
41021d80:	21023204 	addi	r4,r4,2248
41021d84:	e17ff717 	ldw	r5,-36(fp)
41021d88:	1022d200 	call	41022d20 <printf>
    {
      printf("            erased block = '-'\n");     
      printf("          unerased block = '+'\n\n");     
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
41021d8c:	e0bff717 	ldw	r2,-36(fp)
41021d90:	10800044 	addi	r2,r2,1
41021d94:	e0bff715 	stw	r2,-36(fp)
41021d98:	e0bffd17 	ldw	r2,-12(fp)
41021d9c:	10c00217 	ldw	r3,8(r2)
41021da0:	e0bff717 	ldw	r2,-36(fp)
41021da4:	10ffcb16 	blt	r2,r3,41021cd4 <FlashFindErasedBlocks+0x68>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
      else if(!block_erased && (mode == SHOWMAP))
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
    }
    /* Special case if no blocks are erased (TEST mode only)*/
    if(( block_index == ( regions->number_of_blocks )) && ( mode == TEST ))
41021da8:	e0bffd17 	ldw	r2,-12(fp)
41021dac:	10c00217 	ldw	r3,8(r2)
41021db0:	e0bff717 	ldw	r2,-36(fp)
41021db4:	1880341e 	bne	r3,r2,41021e88 <FlashFindErasedBlocks+0x21c>
41021db8:	e0bfff17 	ldw	r2,-4(fp)
41021dbc:	10800058 	cmpnei	r2,r2,1
41021dc0:	1000311e 	bne	r2,zero,41021e88 <FlashFindErasedBlocks+0x21c>
    {
      printf(" -Found no erased blocks.  Please enter the number of the block\n");
41021dc4:	01000034 	movhi	r4,0
41021dc8:	21023904 	addi	r4,r4,2276
41021dcc:	1022e5c0 	call	41022e5c <puts>
      printf("  you would like to test.  Enter 'q' to quit without testing flash.\n");
41021dd0:	01000034 	movhi	r4,0
41021dd4:	21024904 	addi	r4,r4,2340
41021dd8:	1022e5c0 	call	41022e5c <puts>
      printf(" -> ");
41021ddc:	01000034 	movhi	r4,0
41021de0:	2101d404 	addi	r4,r4,1872
41021de4:	1022d200 	call	41022d20 <printf>

      GetInputString( entry, sizeof(entry), stdin );
41021de8:	e13ff904 	addi	r4,fp,-28
41021dec:	00800034 	movhi	r2,0
41021df0:	108ad704 	addi	r2,r2,11100
41021df4:	10800017 	ldw	r2,0(r2)
41021df8:	11800117 	ldw	r6,4(r2)
41021dfc:	01400144 	movi	r5,5
41021e00:	102030c0 	call	4102030c <GetInputString>

      if(entry[0] == 'q')
41021e04:	e0bff903 	ldbu	r2,-28(fp)
41021e08:	10803fcc 	andi	r2,r2,255
41021e0c:	10801c58 	cmpnei	r2,r2,113
41021e10:	1000031e 	bne	r2,zero,41021e20 <FlashFindErasedBlocks+0x1b4>
      {
    		block_index = QUIT_WITHOUT_TESTING;
41021e14:	00bfffc4 	movi	r2,-1
41021e18:	e0bff715 	stw	r2,-36(fp)
    		break;
41021e1c:	00002606 	br	41021eb8 <FlashFindErasedBlocks+0x24c>
    	}
      else if(sscanf(entry, "%d\n", &block))
41021e20:	e13ff904 	addi	r4,fp,-28
41021e24:	e1bffb04 	addi	r6,fp,-20
41021e28:	01400034 	movhi	r5,0
41021e2c:	2941f104 	addi	r5,r5,1988
41021e30:	1022fd00 	call	41022fd0 <sscanf>
41021e34:	1005003a 	cmpeq	r2,r2,zero
41021e38:	1000131e 	bne	r2,zero,41021e88 <FlashFindErasedBlocks+0x21c>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
41021e3c:	e0bffd17 	ldw	r2,-12(fp)
41021e40:	10800217 	ldw	r2,8(r2)
41021e44:	10bfffc4 	addi	r2,r2,-1
41021e48:	1007883a 	mov	r3,r2
41021e4c:	e0bffb17 	ldw	r2,-20(fp)
41021e50:	18800336 	bltu	r3,r2,41021e60 <FlashFindErasedBlocks+0x1f4>
        {
        	block_index = block;
41021e54:	e0bffb17 	ldw	r2,-20(fp)
41021e58:	e0bff715 	stw	r2,-36(fp)
        	break;
41021e5c:	00001606 	br	41021eb8 <FlashFindErasedBlocks+0x24c>
        }
        else 
        {
          printf(" -Block number entered is %d\n", block);
41021e60:	e17ffb17 	ldw	r5,-20(fp)
41021e64:	01000034 	movhi	r4,0
41021e68:	2101f704 	addi	r4,r4,2012
41021e6c:	1022d200 	call	41022d20 <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
41021e70:	e0bffd17 	ldw	r2,-12(fp)
41021e74:	10800217 	ldw	r2,8(r2)
41021e78:	117fffc4 	addi	r5,r2,-1
41021e7c:	01000034 	movhi	r4,0
41021e80:	2101ff04 	addi	r4,r4,2044
41021e84:	1022d200 	call	41022d20 <printf>
        }
      }    	
    }
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
41021e88:	e0bff617 	ldw	r2,-40(fp)
41021e8c:	1005003a 	cmpeq	r2,r2,zero
41021e90:	1000031e 	bne	r2,zero,41021ea0 <FlashFindErasedBlocks+0x234>
41021e94:	e0bfff17 	ldw	r2,-4(fp)
41021e98:	10800060 	cmpeqi	r2,r2,1
41021e9c:	1000061e 	bne	r2,zero,41021eb8 <FlashFindErasedBlocks+0x24c>
  alt_u8 entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
41021ea0:	e0bff817 	ldw	r2,-32(fp)
41021ea4:	10800044 	addi	r2,r2,1
41021ea8:	e0bff815 	stw	r2,-32(fp)
41021eac:	e0fff817 	ldw	r3,-32(fp)
41021eb0:	e0bffe17 	ldw	r2,-8(fp)
41021eb4:	18bf7816 	blt	r3,r2,41021c98 <FlashFindErasedBlocks+0x2c>
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
      break;
  }

  return block_index;
41021eb8:	e0bff717 	ldw	r2,-36(fp)
}
41021ebc:	e037883a 	mov	sp,fp
41021ec0:	dfc00117 	ldw	ra,4(sp)
41021ec4:	df000017 	ldw	fp,0(sp)
41021ec8:	dec00204 	addi	sp,sp,8
41021ecc:	f800283a 	ret

41021ed0 <TestFlash>:
*           indicates which ones are erased.  The flash is closed
*           at the end of the function.
* 
******************************************************************/
static void TestFlash(int mode, int flash_type)
{
41021ed0:	deffeb04 	addi	sp,sp,-84
41021ed4:	dfc01415 	stw	ra,80(sp)
41021ed8:	df001315 	stw	fp,76(sp)
41021edc:	df001304 	addi	fp,sp,76
41021ee0:	e13ffe15 	stw	r4,-8(fp)
41021ee4:	e17fff15 	stw	r5,-4(fp)
  alt_flash_fd* fd;
  int number_of_regions;
  int block;
  flash_region* regions;
  int ret_code = 0x0;
41021ee8:	e03ff015 	stw	zero,-64(fp)
  alt_u8 entry[4];
  alt_u8 flashname[30];
  
  ret_code = GetFlashName(flashname, flash_type);
41021eec:	e13ff604 	addi	r4,fp,-40
41021ef0:	e17fff17 	ldw	r5,-4(fp)
41021ef4:	10217ac0 	call	410217ac <GetFlashName>
41021ef8:	e0bff015 	stw	r2,-64(fp)

  fd = alt_flash_open_dev(flashname);
41021efc:	e13ff604 	addi	r4,fp,-40
41021f00:	10315280 	call	41031528 <alt_flash_open_dev>
41021f04:	e0bff215 	stw	r2,-56(fp)
  if (fd)
41021f08:	e0bff217 	ldw	r2,-56(fp)
41021f0c:	1005003a 	cmpeq	r2,r2,zero
41021f10:	10004d1e 	bne	r2,zero,41022048 <TestFlash+0x178>
  {
    printf(" -Successfully opened %s\n", flashname);
41021f14:	e17ff604 	addi	r5,fp,-40
41021f18:	01000034 	movhi	r4,0
41021f1c:	21025a04 	addi	r4,r4,2408
41021f20:	1022d200 	call	41022d20 <printf>
41021f24:	e0bff217 	ldw	r2,-56(fp)
41021f28:	e0bfed15 	stw	r2,-76(fp)
41021f2c:	e0bff404 	addi	r2,fp,-48
41021f30:	e0bfee15 	stw	r2,-72(fp)
41021f34:	e0bff304 	addi	r2,fp,-52
41021f38:	e0bfef15 	stw	r2,-68(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
41021f3c:	e0bfed17 	ldw	r2,-76(fp)
41021f40:	10800717 	ldw	r2,28(r2)
41021f44:	e13fed17 	ldw	r4,-76(fp)
41021f48:	e17fee17 	ldw	r5,-72(fp)
41021f4c:	e1bfef17 	ldw	r6,-68(fp)
41021f50:	103ee83a 	callr	r2
    
    /* Get some useful info about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
41021f54:	e0bff015 	stw	r2,-64(fp)
      
    if (!ret_code)
41021f58:	e0bff017 	ldw	r2,-64(fp)
41021f5c:	1004c03a 	cmpne	r2,r2,zero
41021f60:	10003d1e 	bne	r2,zero,41022058 <TestFlash+0x188>
    {
      printf(" -Region 0 contains %d blocks.\n", regions->number_of_blocks);
41021f64:	e0bff417 	ldw	r2,-48(fp)
41021f68:	11400217 	ldw	r5,8(r2)
41021f6c:	01000034 	movhi	r4,0
41021f70:	21026104 	addi	r4,r4,2436
41021f74:	1022d200 	call	41022d20 <printf>
      
      block = FlashFindErasedBlocks(fd, regions, number_of_regions, mode);
41021f78:	e17ff417 	ldw	r5,-48(fp)
41021f7c:	e1bff317 	ldw	r6,-52(fp)
41021f80:	e13ff217 	ldw	r4,-56(fp)
41021f84:	e1fffe17 	ldw	r7,-8(fp)
41021f88:	1021c6c0 	call	41021c6c <FlashFindErasedBlocks>
41021f8c:	e0bff115 	stw	r2,-60(fp)

      /* If we're in TEST mode, ask if this block is okay to test. */
      if(( mode == TEST ) && ( block != QUIT_WITHOUT_TESTING ))
41021f90:	e0bffe17 	ldw	r2,-8(fp)
41021f94:	10800058 	cmpnei	r2,r2,1
41021f98:	10002f1e 	bne	r2,zero,41022058 <TestFlash+0x188>
41021f9c:	e0bff117 	ldw	r2,-60(fp)
41021fa0:	10bfffe0 	cmpeqi	r2,r2,-1
41021fa4:	10002c1e 	bne	r2,zero,41022058 <TestFlash+0x188>
      {
        printf(" -Block %d, at address 0x%X identified.\n", block, (regions->offset + (block * regions->block_size)));
41021fa8:	e0bff417 	ldw	r2,-48(fp)
41021fac:	11000017 	ldw	r4,0(r2)
41021fb0:	e0bff417 	ldw	r2,-48(fp)
41021fb4:	10c00317 	ldw	r3,12(r2)
41021fb8:	e0bff117 	ldw	r2,-60(fp)
41021fbc:	1885383a 	mul	r2,r3,r2
41021fc0:	208d883a 	add	r6,r4,r2
41021fc4:	01000034 	movhi	r4,0
41021fc8:	21026904 	addi	r4,r4,2468
41021fcc:	e17ff117 	ldw	r5,-60(fp)
41021fd0:	1022d200 	call	41022d20 <printf>
        printf(" -Would you like to test this block? (y/n)");
41021fd4:	01000034 	movhi	r4,0
41021fd8:	21027404 	addi	r4,r4,2512
41021fdc:	1022d200 	call	41022d20 <printf>

        GetInputString(entry, sizeof(entry), stdin);
41021fe0:	e13ff504 	addi	r4,fp,-44
41021fe4:	00800034 	movhi	r2,0
41021fe8:	108ad704 	addi	r2,r2,11100
41021fec:	10800017 	ldw	r2,0(r2)
41021ff0:	11800117 	ldw	r6,4(r2)
41021ff4:	01400104 	movi	r5,4
41021ff8:	102030c0 	call	4102030c <GetInputString>

        if ( entry[0] == 'y' && entry[1] == '\n' )
41021ffc:	e0bff503 	ldbu	r2,-44(fp)
41022000:	10803fcc 	andi	r2,r2,255
41022004:	10801e58 	cmpnei	r2,r2,121
41022008:	1000131e 	bne	r2,zero,41022058 <TestFlash+0x188>
4102200c:	e0bff543 	ldbu	r2,-43(fp)
41022010:	10803fcc 	andi	r2,r2,255
41022014:	10800298 	cmpnei	r2,r2,10
41022018:	10000f1e 	bne	r2,zero,41022058 <TestFlash+0x188>
        {
          /* Test that Flash! */
          FlashRunTests(fd, block, regions);
4102201c:	e1bff417 	ldw	r6,-48(fp)
41022020:	e13ff217 	ldw	r4,-56(fp)
41022024:	e17ff117 	ldw	r5,-60(fp)
41022028:	10216580 	call	41021658 <FlashRunTests>
          printf(" -Closing flash device \"%s\".\n", flashname);
4102202c:	e17ff604 	addi	r5,fp,-40
41022030:	01000034 	movhi	r4,0
41022034:	21027f04 	addi	r4,r4,2556
41022038:	1022d200 	call	41022d20 <printf>
          alt_flash_close_dev(fd);
4102203c:	e13ff217 	ldw	r4,-56(fp)
41022040:	10315a40 	call	410315a4 <alt_flash_close_dev>
41022044:	00000406 	br	41022058 <TestFlash+0x188>
      }
    }
  }
  else
  {
    printf(" -ERROR: Could not open %s\n", flashname);   
41022048:	e17ff604 	addi	r5,fp,-40
4102204c:	01000034 	movhi	r4,0
41022050:	21028704 	addi	r4,r4,2588
41022054:	1022d200 	call	41022d20 <printf>
  }
}
41022058:	e037883a 	mov	sp,fp
4102205c:	dfc00117 	ldw	ra,4(sp)
41022060:	df000017 	ldw	fp,0(sp)
41022064:	dec00204 	addi	sp,sp,8
41022068:	f800283a 	ret

4102206c <TopMenu>:
*
*  Purpose: Generates the top level menu.
* 
******************************************************************/
static int TopMenu( void )
{
4102206c:	defffc04 	addi	sp,sp,-16
41022070:	dfc00315 	stw	ra,12(sp)
41022074:	df000215 	stw	fp,8(sp)
41022078:	df000204 	addi	fp,sp,8
4102207c:	00000006 	br	41022080 <TopMenu+0x14>
  char ch;

  /* Print the top-level menu to stdout */
  while (1)
  {
    MenuBegin("      Memory Test Main Menu");
41022080:	01000034 	movhi	r4,0
41022084:	21028e04 	addi	r4,r4,2616
41022088:	10202780 	call	41020278 <MenuBegin>
    MenuItem( 'a', "Test RAM" );
4102208c:	01001844 	movi	r4,97
41022090:	01400034 	movhi	r5,0
41022094:	29429504 	addi	r5,r5,2644
41022098:	10202cc0 	call	410202cc <MenuItem>
    MenuItem( 'b', "Test Flash");
4102209c:	01001884 	movi	r4,98
410220a0:	01400034 	movhi	r5,0
410220a4:	29429804 	addi	r5,r5,2656
410220a8:	10202cc0 	call	410202cc <MenuItem>
#ifdef EPCS_CONTROLLER_NAME    
    MenuItem( 'c', "Test EPCS Serial Flash");
    ch = MenuEnd( 'a', 'c' );    
#else
    ch = MenuEnd( 'a', 'b' );
410220ac:	01001844 	movi	r4,97
410220b0:	01401884 	movi	r5,98
410220b4:	102039c0 	call	4102039c <MenuEnd>
410220b8:	e0bffe05 	stb	r2,-8(fp)
#endif /* EPCS_CONTROLLER_NAME */

    switch(ch)
410220bc:	e0bffe07 	ldb	r2,-8(fp)
410220c0:	10bfe7c4 	addi	r2,r2,-97
410220c4:	e0bfff15 	stw	r2,-4(fp)
410220c8:	e0ffff17 	ldw	r3,-4(fp)
410220cc:	18800468 	cmpgeui	r2,r3,17
410220d0:	1000271e 	bne	r2,zero,41022170 <TopMenu+0x104>
410220d4:	e13fff17 	ldw	r4,-4(fp)
410220d8:	e13fff17 	ldw	r4,-4(fp)
410220dc:	2105883a 	add	r2,r4,r4
410220e0:	1087883a 	add	r3,r2,r2
410220e4:	009040b4 	movhi	r2,16642
410220e8:	10883e04 	addi	r2,r2,8440
410220ec:	1885883a 	add	r2,r3,r2
410220f0:	10800017 	ldw	r2,0(r2)
410220f4:	1000683a 	jmp	r2
410220f8:	4102213c 	xorhi	r4,r8,2180
410220fc:	41022144 	addi	r4,r8,2181
41022100:	41022170 	cmpltui	r4,r8,2181
41022104:	41022170 	cmpltui	r4,r8,2181
41022108:	41022154 	ori	r4,r8,2181
4102210c:	41022170 	cmpltui	r4,r8,2181
41022110:	41022170 	cmpltui	r4,r8,2181
41022114:	41022170 	cmpltui	r4,r8,2181
41022118:	41022170 	cmpltui	r4,r8,2181
4102211c:	41022170 	cmpltui	r4,r8,2181
41022120:	41022170 	cmpltui	r4,r8,2181
41022124:	41022170 	cmpltui	r4,r8,2181
41022128:	41022160 	cmpeqi	r4,r8,2181
4102212c:	41022170 	cmpltui	r4,r8,2181
41022130:	41022170 	cmpltui	r4,r8,2181
41022134:	41022170 	cmpltui	r4,r8,2181
41022138:	41022180 	call	44102218 <__flash_rwdata_start+0x30cd278>
    {
      MenuCase('a',TestRam());
4102213c:	1020bac0 	call	41020bac <TestRam>
41022140:	00000f06 	br	41022180 <TopMenu+0x114>
      MenuCase('b',TestFlash(TEST, CFI));
41022144:	01000044 	movi	r4,1
41022148:	014000c4 	movi	r5,3
4102214c:	1021ed00 	call	41021ed0 <TestFlash>
41022150:	00000b06 	br	41022180 <TopMenu+0x114>
      MenuCase('e',FlashErase(CFI));       /* hidden option */
41022154:	010000c4 	movi	r4,3
41022158:	10219200 	call	41021920 <FlashErase>
4102215c:	00000806 	br	41022180 <TopMenu+0x114>
      MenuCase('m',TestFlash(SHOWMAP, CFI)); /* hidden option */
41022160:	01000084 	movi	r4,2
41022164:	014000c4 	movi	r5,3
41022168:	1021ed00 	call	41021ed0 <TestFlash>
4102216c:	00000406 	br	41022180 <TopMenu+0x114>
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
41022170:	e17ffe07 	ldb	r5,-8(fp)
41022174:	01000034 	movhi	r4,0
41022178:	21029b04 	addi	r4,r4,2668
4102217c:	1022d200 	call	41022d20 <printf>
    }
    if (ch == 'q')
41022180:	e0bffe07 	ldb	r2,-8(fp)
41022184:	10801c60 	cmpeqi	r2,r2,113
41022188:	1000101e 	bne	r2,zero,410221cc <TopMenu+0x160>
      break;
    printf("\nPress enter to continue...\n");
4102218c:	01000034 	movhi	r4,0
41022190:	2102a904 	addi	r4,r4,2724
41022194:	1022e5c0 	call	41022e5c <puts>
    while( (( ch = getc(stdin)) != '\n' ) && ( ch != EOF ));
41022198:	00800034 	movhi	r2,0
4102219c:	108ad704 	addi	r2,r2,11100
410221a0:	10800017 	ldw	r2,0(r2)
410221a4:	11000117 	ldw	r4,4(r2)
410221a8:	102237c0 	call	4102237c <getc>
410221ac:	e0bffe05 	stb	r2,-8(fp)
410221b0:	e0bffe07 	ldb	r2,-8(fp)
410221b4:	108002a0 	cmpeqi	r2,r2,10
410221b8:	103fb11e 	bne	r2,zero,41022080 <TopMenu+0x14>
410221bc:	e0bffe07 	ldb	r2,-8(fp)
410221c0:	10bfffd8 	cmpnei	r2,r2,-1
410221c4:	103ff41e 	bne	r2,zero,41022198 <TopMenu+0x12c>

  }
410221c8:	003fad06 	br	41022080 <TopMenu+0x14>
  return (ch);
410221cc:	e0bffe07 	ldb	r2,-8(fp)
}
410221d0:	e037883a 	mov	sp,fp
410221d4:	dfc00117 	ldw	ra,4(sp)
410221d8:	df000017 	ldw	fp,0(sp)
410221dc:	dec00204 	addi	sp,sp,8
410221e0:	f800283a 	ret

410221e4 <main>:
*  Purpose: Continually prints the menu and performs the actions
*           requested by the user.
* 
******************************************************************/
int main(void)
{
410221e4:	defffd04 	addi	sp,sp,-12
410221e8:	dfc00215 	stw	ra,8(sp)
410221ec:	df000115 	stw	fp,4(sp)
410221f0:	df000104 	addi	fp,sp,4

  int ch;

  /* Print the Header */
  MenuHeader();
410221f4:	10202000 	call	41020200 <MenuHeader>
  /* Print the menu and do what the user requests, until they hit 'q' */
  while (1)
  {
    ch = TopMenu();
410221f8:	102206c0 	call	4102206c <TopMenu>
410221fc:	e0bfff15 	stw	r2,-4(fp)
    if (ch == 'q')
41022200:	e0bfff17 	ldw	r2,-4(fp)
41022204:	10801c58 	cmpnei	r2,r2,113
41022208:	103ffb1e 	bne	r2,zero,410221f8 <main+0x14>
    {
      printf( "\nExiting from Memory Test.\n");
4102220c:	01000034 	movhi	r4,0
41022210:	2102b004 	addi	r4,r4,2752
41022214:	1022e5c0 	call	41022e5c <puts>
      break;
    }
  }
  return (0);
41022218:	0005883a 	mov	r2,zero
}
4102221c:	e037883a 	mov	sp,fp
41022220:	dfc00117 	ldw	ra,4(sp)
41022224:	df000017 	ldw	fp,0(sp)
41022228:	dec00204 	addi	sp,sp,8
4102222c:	f800283a 	ret

41022230 <udivmodsi4>:
41022230:	29001b2e 	bgeu	r5,r4,410222a0 <udivmodsi4+0x70>
41022234:	28001a16 	blt	r5,zero,410222a0 <udivmodsi4+0x70>
41022238:	00800044 	movi	r2,1
4102223c:	0007883a 	mov	r3,zero
41022240:	01c007c4 	movi	r7,31
41022244:	00000306 	br	41022254 <udivmodsi4+0x24>
41022248:	19c01326 	beq	r3,r7,41022298 <udivmodsi4+0x68>
4102224c:	18c00044 	addi	r3,r3,1
41022250:	28000416 	blt	r5,zero,41022264 <udivmodsi4+0x34>
41022254:	294b883a 	add	r5,r5,r5
41022258:	1085883a 	add	r2,r2,r2
4102225c:	293ffa36 	bltu	r5,r4,41022248 <udivmodsi4+0x18>
41022260:	10000d26 	beq	r2,zero,41022298 <udivmodsi4+0x68>
41022264:	0007883a 	mov	r3,zero
41022268:	21400236 	bltu	r4,r5,41022274 <udivmodsi4+0x44>
4102226c:	2149c83a 	sub	r4,r4,r5
41022270:	1886b03a 	or	r3,r3,r2
41022274:	1004d07a 	srli	r2,r2,1
41022278:	280ad07a 	srli	r5,r5,1
4102227c:	103ffa1e 	bne	r2,zero,41022268 <udivmodsi4+0x38>
41022280:	30000226 	beq	r6,zero,4102228c <udivmodsi4+0x5c>
41022284:	2005883a 	mov	r2,r4
41022288:	f800283a 	ret
4102228c:	1809883a 	mov	r4,r3
41022290:	2005883a 	mov	r2,r4
41022294:	f800283a 	ret
41022298:	0007883a 	mov	r3,zero
4102229c:	003ff806 	br	41022280 <udivmodsi4+0x50>
410222a0:	00800044 	movi	r2,1
410222a4:	0007883a 	mov	r3,zero
410222a8:	003fef06 	br	41022268 <udivmodsi4+0x38>

410222ac <__divsi3>:
410222ac:	defffe04 	addi	sp,sp,-8
410222b0:	dc000015 	stw	r16,0(sp)
410222b4:	dfc00115 	stw	ra,4(sp)
410222b8:	0021883a 	mov	r16,zero
410222bc:	20000c16 	blt	r4,zero,410222f0 <__divsi3+0x44>
410222c0:	000d883a 	mov	r6,zero
410222c4:	28000e16 	blt	r5,zero,41022300 <__divsi3+0x54>
410222c8:	10222300 	call	41022230 <udivmodsi4>
410222cc:	1007883a 	mov	r3,r2
410222d0:	8005003a 	cmpeq	r2,r16,zero
410222d4:	1000011e 	bne	r2,zero,410222dc <__divsi3+0x30>
410222d8:	00c7c83a 	sub	r3,zero,r3
410222dc:	1805883a 	mov	r2,r3
410222e0:	dfc00117 	ldw	ra,4(sp)
410222e4:	dc000017 	ldw	r16,0(sp)
410222e8:	dec00204 	addi	sp,sp,8
410222ec:	f800283a 	ret
410222f0:	0109c83a 	sub	r4,zero,r4
410222f4:	04000044 	movi	r16,1
410222f8:	000d883a 	mov	r6,zero
410222fc:	283ff20e 	bge	r5,zero,410222c8 <__divsi3+0x1c>
41022300:	014bc83a 	sub	r5,zero,r5
41022304:	8021003a 	cmpeq	r16,r16,zero
41022308:	003fef06 	br	410222c8 <__divsi3+0x1c>

4102230c <__modsi3>:
4102230c:	deffff04 	addi	sp,sp,-4
41022310:	dfc00015 	stw	ra,0(sp)
41022314:	01800044 	movi	r6,1
41022318:	2807883a 	mov	r3,r5
4102231c:	20000416 	blt	r4,zero,41022330 <__modsi3+0x24>
41022320:	28000c16 	blt	r5,zero,41022354 <__modsi3+0x48>
41022324:	dfc00017 	ldw	ra,0(sp)
41022328:	dec00104 	addi	sp,sp,4
4102232c:	10222301 	jmpi	41022230 <udivmodsi4>
41022330:	0109c83a 	sub	r4,zero,r4
41022334:	28000b16 	blt	r5,zero,41022364 <__modsi3+0x58>
41022338:	180b883a 	mov	r5,r3
4102233c:	01800044 	movi	r6,1
41022340:	10222300 	call	41022230 <udivmodsi4>
41022344:	0085c83a 	sub	r2,zero,r2
41022348:	dfc00017 	ldw	ra,0(sp)
4102234c:	dec00104 	addi	sp,sp,4
41022350:	f800283a 	ret
41022354:	014bc83a 	sub	r5,zero,r5
41022358:	dfc00017 	ldw	ra,0(sp)
4102235c:	dec00104 	addi	sp,sp,4
41022360:	10222301 	jmpi	41022230 <udivmodsi4>
41022364:	0147c83a 	sub	r3,zero,r5
41022368:	003ff306 	br	41022338 <__modsi3+0x2c>

4102236c <__udivsi3>:
4102236c:	000d883a 	mov	r6,zero
41022370:	10222301 	jmpi	41022230 <udivmodsi4>

41022374 <__umodsi3>:
41022374:	01800044 	movi	r6,1
41022378:	10222301 	jmpi	41022230 <udivmodsi4>

4102237c <getc>:
4102237c:	defffd04 	addi	sp,sp,-12
41022380:	dc400115 	stw	r17,4(sp)
41022384:	04400034 	movhi	r17,0
41022388:	8c4ad704 	addi	r17,r17,11100
4102238c:	88c00017 	ldw	r3,0(r17)
41022390:	dc000015 	stw	r16,0(sp)
41022394:	dfc00215 	stw	ra,8(sp)
41022398:	2021883a 	mov	r16,r4
4102239c:	18000326 	beq	r3,zero,410223ac <getc+0x30>
410223a0:	18800e17 	ldw	r2,56(r3)
410223a4:	1809883a 	mov	r4,r3
410223a8:	10000e26 	beq	r2,zero,410223e4 <getc+0x68>
410223ac:	80800117 	ldw	r2,4(r16)
410223b0:	800b883a 	mov	r5,r16
410223b4:	10bfffc4 	addi	r2,r2,-1
410223b8:	80800115 	stw	r2,4(r16)
410223bc:	10000f16 	blt	r2,zero,410223fc <getc+0x80>
410223c0:	80c00017 	ldw	r3,0(r16)
410223c4:	18800003 	ldbu	r2,0(r3)
410223c8:	18c00044 	addi	r3,r3,1
410223cc:	80c00015 	stw	r3,0(r16)
410223d0:	dfc00217 	ldw	ra,8(sp)
410223d4:	dc400117 	ldw	r17,4(sp)
410223d8:	dc000017 	ldw	r16,0(sp)
410223dc:	dec00304 	addi	sp,sp,12
410223e0:	f800283a 	ret
410223e4:	10283100 	call	41028310 <__sinit>
410223e8:	80800117 	ldw	r2,4(r16)
410223ec:	800b883a 	mov	r5,r16
410223f0:	10bfffc4 	addi	r2,r2,-1
410223f4:	80800115 	stw	r2,4(r16)
410223f8:	103ff10e 	bge	r2,zero,410223c0 <getc+0x44>
410223fc:	89000017 	ldw	r4,0(r17)
41022400:	dfc00217 	ldw	ra,8(sp)
41022404:	dc400117 	ldw	r17,4(sp)
41022408:	dc000017 	ldw	r16,0(sp)
4102240c:	dec00304 	addi	sp,sp,12
41022410:	1022e701 	jmpi	41022e70 <__srget_r>

41022414 <_getc_r>:
41022414:	defffd04 	addi	sp,sp,-12
41022418:	dc400115 	stw	r17,4(sp)
4102241c:	dc000015 	stw	r16,0(sp)
41022420:	dfc00215 	stw	ra,8(sp)
41022424:	2021883a 	mov	r16,r4
41022428:	2823883a 	mov	r17,r5
4102242c:	20000226 	beq	r4,zero,41022438 <_getc_r+0x24>
41022430:	20800e17 	ldw	r2,56(r4)
41022434:	10000f26 	beq	r2,zero,41022474 <_getc_r+0x60>
41022438:	88800117 	ldw	r2,4(r17)
4102243c:	8009883a 	mov	r4,r16
41022440:	880b883a 	mov	r5,r17
41022444:	10bfffc4 	addi	r2,r2,-1
41022448:	88800115 	stw	r2,4(r17)
4102244c:	10001016 	blt	r2,zero,41022490 <_getc_r+0x7c>
41022450:	88c00017 	ldw	r3,0(r17)
41022454:	18800003 	ldbu	r2,0(r3)
41022458:	18c00044 	addi	r3,r3,1
4102245c:	88c00015 	stw	r3,0(r17)
41022460:	dfc00217 	ldw	ra,8(sp)
41022464:	dc400117 	ldw	r17,4(sp)
41022468:	dc000017 	ldw	r16,0(sp)
4102246c:	dec00304 	addi	sp,sp,12
41022470:	f800283a 	ret
41022474:	10283100 	call	41028310 <__sinit>
41022478:	88800117 	ldw	r2,4(r17)
4102247c:	8009883a 	mov	r4,r16
41022480:	880b883a 	mov	r5,r17
41022484:	10bfffc4 	addi	r2,r2,-1
41022488:	88800115 	stw	r2,4(r17)
4102248c:	103ff00e 	bge	r2,zero,41022450 <_getc_r+0x3c>
41022490:	dfc00217 	ldw	ra,8(sp)
41022494:	dc400117 	ldw	r17,4(sp)
41022498:	dc000017 	ldw	r16,0(sp)
4102249c:	dec00304 	addi	sp,sp,12
410224a0:	1022e701 	jmpi	41022e70 <__srget_r>

410224a4 <free>:
410224a4:	00800034 	movhi	r2,0
410224a8:	108ad704 	addi	r2,r2,11100
410224ac:	200b883a 	mov	r5,r4
410224b0:	11000017 	ldw	r4,0(r2)
410224b4:	10288d01 	jmpi	410288d0 <_free_r>

410224b8 <malloc>:
410224b8:	00800034 	movhi	r2,0
410224bc:	108ad704 	addi	r2,r2,11100
410224c0:	200b883a 	mov	r5,r4
410224c4:	11000017 	ldw	r4,0(r2)
410224c8:	10224cc1 	jmpi	410224cc <_malloc_r>

410224cc <_malloc_r>:
410224cc:	defff604 	addi	sp,sp,-40
410224d0:	28c002c4 	addi	r3,r5,11
410224d4:	00800584 	movi	r2,22
410224d8:	dc800215 	stw	r18,8(sp)
410224dc:	dfc00915 	stw	ra,36(sp)
410224e0:	df000815 	stw	fp,32(sp)
410224e4:	ddc00715 	stw	r23,28(sp)
410224e8:	dd800615 	stw	r22,24(sp)
410224ec:	dd400515 	stw	r21,20(sp)
410224f0:	dd000415 	stw	r20,16(sp)
410224f4:	dcc00315 	stw	r19,12(sp)
410224f8:	dc400115 	stw	r17,4(sp)
410224fc:	dc000015 	stw	r16,0(sp)
41022500:	2025883a 	mov	r18,r4
41022504:	10c01236 	bltu	r2,r3,41022550 <_malloc_r+0x84>
41022508:	04400404 	movi	r17,16
4102250c:	8940142e 	bgeu	r17,r5,41022560 <_malloc_r+0x94>
41022510:	00800304 	movi	r2,12
41022514:	0007883a 	mov	r3,zero
41022518:	90800015 	stw	r2,0(r18)
4102251c:	1805883a 	mov	r2,r3
41022520:	dfc00917 	ldw	ra,36(sp)
41022524:	df000817 	ldw	fp,32(sp)
41022528:	ddc00717 	ldw	r23,28(sp)
4102252c:	dd800617 	ldw	r22,24(sp)
41022530:	dd400517 	ldw	r21,20(sp)
41022534:	dd000417 	ldw	r20,16(sp)
41022538:	dcc00317 	ldw	r19,12(sp)
4102253c:	dc800217 	ldw	r18,8(sp)
41022540:	dc400117 	ldw	r17,4(sp)
41022544:	dc000017 	ldw	r16,0(sp)
41022548:	dec00a04 	addi	sp,sp,40
4102254c:	f800283a 	ret
41022550:	00bffe04 	movi	r2,-8
41022554:	18a2703a 	and	r17,r3,r2
41022558:	883fed16 	blt	r17,zero,41022510 <_malloc_r+0x44>
4102255c:	897fec36 	bltu	r17,r5,41022510 <_malloc_r+0x44>
41022560:	9009883a 	mov	r4,r18
41022564:	1031af40 	call	41031af4 <__malloc_lock>
41022568:	00807dc4 	movi	r2,503
4102256c:	14402b2e 	bgeu	r2,r17,4102261c <_malloc_r+0x150>
41022570:	8806d27a 	srli	r3,r17,9
41022574:	18003f1e 	bne	r3,zero,41022674 <_malloc_r+0x1a8>
41022578:	880cd0fa 	srli	r6,r17,3
4102257c:	300490fa 	slli	r2,r6,3
41022580:	02c00034 	movhi	r11,0
41022584:	5ac54604 	addi	r11,r11,5400
41022588:	12cb883a 	add	r5,r2,r11
4102258c:	2c000317 	ldw	r16,12(r5)
41022590:	580f883a 	mov	r7,r11
41022594:	2c00041e 	bne	r5,r16,410225a8 <_malloc_r+0xdc>
41022598:	00000a06 	br	410225c4 <_malloc_r+0xf8>
4102259c:	1800860e 	bge	r3,zero,410227b8 <_malloc_r+0x2ec>
410225a0:	84000317 	ldw	r16,12(r16)
410225a4:	2c000726 	beq	r5,r16,410225c4 <_malloc_r+0xf8>
410225a8:	80800117 	ldw	r2,4(r16)
410225ac:	00ffff04 	movi	r3,-4
410225b0:	10c8703a 	and	r4,r2,r3
410225b4:	2447c83a 	sub	r3,r4,r17
410225b8:	008003c4 	movi	r2,15
410225bc:	10fff70e 	bge	r2,r3,4102259c <_malloc_r+0xd0>
410225c0:	31bfffc4 	addi	r6,r6,-1
410225c4:	32400044 	addi	r9,r6,1
410225c8:	02800034 	movhi	r10,0
410225cc:	52854804 	addi	r10,r10,5408
410225d0:	54000217 	ldw	r16,8(r10)
410225d4:	8280a026 	beq	r16,r10,41022858 <_malloc_r+0x38c>
410225d8:	80800117 	ldw	r2,4(r16)
410225dc:	00ffff04 	movi	r3,-4
410225e0:	10ca703a 	and	r5,r2,r3
410225e4:	2c4dc83a 	sub	r6,r5,r17
410225e8:	008003c4 	movi	r2,15
410225ec:	11808316 	blt	r2,r6,410227fc <_malloc_r+0x330>
410225f0:	52800315 	stw	r10,12(r10)
410225f4:	52800215 	stw	r10,8(r10)
410225f8:	30002916 	blt	r6,zero,410226a0 <_malloc_r+0x1d4>
410225fc:	8147883a 	add	r3,r16,r5
41022600:	18800117 	ldw	r2,4(r3)
41022604:	9009883a 	mov	r4,r18
41022608:	10800054 	ori	r2,r2,1
4102260c:	18800115 	stw	r2,4(r3)
41022610:	1031b140 	call	41031b14 <__malloc_unlock>
41022614:	80c00204 	addi	r3,r16,8
41022618:	003fc006 	br	4102251c <_malloc_r+0x50>
4102261c:	02c00034 	movhi	r11,0
41022620:	5ac54604 	addi	r11,r11,5400
41022624:	8ac5883a 	add	r2,r17,r11
41022628:	14000317 	ldw	r16,12(r2)
4102262c:	580f883a 	mov	r7,r11
41022630:	8806d0fa 	srli	r3,r17,3
41022634:	14006c26 	beq	r2,r16,410227e8 <_malloc_r+0x31c>
41022638:	80c00117 	ldw	r3,4(r16)
4102263c:	00bfff04 	movi	r2,-4
41022640:	81800317 	ldw	r6,12(r16)
41022644:	1886703a 	and	r3,r3,r2
41022648:	80c7883a 	add	r3,r16,r3
4102264c:	18800117 	ldw	r2,4(r3)
41022650:	81400217 	ldw	r5,8(r16)
41022654:	9009883a 	mov	r4,r18
41022658:	10800054 	ori	r2,r2,1
4102265c:	18800115 	stw	r2,4(r3)
41022660:	31400215 	stw	r5,8(r6)
41022664:	29800315 	stw	r6,12(r5)
41022668:	1031b140 	call	41031b14 <__malloc_unlock>
4102266c:	80c00204 	addi	r3,r16,8
41022670:	003faa06 	br	4102251c <_malloc_r+0x50>
41022674:	00800104 	movi	r2,4
41022678:	10c0052e 	bgeu	r2,r3,41022690 <_malloc_r+0x1c4>
4102267c:	00800504 	movi	r2,20
41022680:	10c07836 	bltu	r2,r3,41022864 <_malloc_r+0x398>
41022684:	198016c4 	addi	r6,r3,91
41022688:	300490fa 	slli	r2,r6,3
4102268c:	003fbc06 	br	41022580 <_malloc_r+0xb4>
41022690:	8804d1ba 	srli	r2,r17,6
41022694:	11800e04 	addi	r6,r2,56
41022698:	300490fa 	slli	r2,r6,3
4102269c:	003fb806 	br	41022580 <_malloc_r+0xb4>
410226a0:	00807fc4 	movi	r2,511
410226a4:	1140bb36 	bltu	r2,r5,41022994 <_malloc_r+0x4c8>
410226a8:	2806d0fa 	srli	r3,r5,3
410226ac:	573ffe04 	addi	fp,r10,-8
410226b0:	00800044 	movi	r2,1
410226b4:	180890fa 	slli	r4,r3,3
410226b8:	1807d0ba 	srai	r3,r3,2
410226bc:	e1c00117 	ldw	r7,4(fp)
410226c0:	5909883a 	add	r4,r11,r4
410226c4:	21400217 	ldw	r5,8(r4)
410226c8:	10c4983a 	sll	r2,r2,r3
410226cc:	81000315 	stw	r4,12(r16)
410226d0:	81400215 	stw	r5,8(r16)
410226d4:	388eb03a 	or	r7,r7,r2
410226d8:	2c000315 	stw	r16,12(r5)
410226dc:	24000215 	stw	r16,8(r4)
410226e0:	e1c00115 	stw	r7,4(fp)
410226e4:	4807883a 	mov	r3,r9
410226e8:	4800cd16 	blt	r9,zero,41022a20 <_malloc_r+0x554>
410226ec:	1807d0ba 	srai	r3,r3,2
410226f0:	00800044 	movi	r2,1
410226f4:	10c8983a 	sll	r4,r2,r3
410226f8:	39004436 	bltu	r7,r4,4102280c <_malloc_r+0x340>
410226fc:	21c4703a 	and	r2,r4,r7
41022700:	10000a1e 	bne	r2,zero,4102272c <_malloc_r+0x260>
41022704:	2109883a 	add	r4,r4,r4
41022708:	00bfff04 	movi	r2,-4
4102270c:	4884703a 	and	r2,r9,r2
41022710:	3906703a 	and	r3,r7,r4
41022714:	12400104 	addi	r9,r2,4
41022718:	1800041e 	bne	r3,zero,4102272c <_malloc_r+0x260>
4102271c:	2109883a 	add	r4,r4,r4
41022720:	3904703a 	and	r2,r7,r4
41022724:	4a400104 	addi	r9,r9,4
41022728:	103ffc26 	beq	r2,zero,4102271c <_malloc_r+0x250>
4102272c:	480490fa 	slli	r2,r9,3
41022730:	4819883a 	mov	r12,r9
41022734:	023fff04 	movi	r8,-4
41022738:	589b883a 	add	r13,r11,r2
4102273c:	6807883a 	mov	r3,r13
41022740:	014003c4 	movi	r5,15
41022744:	1c000317 	ldw	r16,12(r3)
41022748:	1c00041e 	bne	r3,r16,4102275c <_malloc_r+0x290>
4102274c:	0000a706 	br	410229ec <_malloc_r+0x520>
41022750:	3000ab0e 	bge	r6,zero,41022a00 <_malloc_r+0x534>
41022754:	84000317 	ldw	r16,12(r16)
41022758:	1c00a426 	beq	r3,r16,410229ec <_malloc_r+0x520>
4102275c:	80800117 	ldw	r2,4(r16)
41022760:	1204703a 	and	r2,r2,r8
41022764:	144dc83a 	sub	r6,r2,r17
41022768:	29bff90e 	bge	r5,r6,41022750 <_malloc_r+0x284>
4102276c:	81000317 	ldw	r4,12(r16)
41022770:	80c00217 	ldw	r3,8(r16)
41022774:	89400054 	ori	r5,r17,1
41022778:	8445883a 	add	r2,r16,r17
4102277c:	20c00215 	stw	r3,8(r4)
41022780:	19000315 	stw	r4,12(r3)
41022784:	81400115 	stw	r5,4(r16)
41022788:	1187883a 	add	r3,r2,r6
4102278c:	31000054 	ori	r4,r6,1
41022790:	50800315 	stw	r2,12(r10)
41022794:	50800215 	stw	r2,8(r10)
41022798:	19800015 	stw	r6,0(r3)
4102279c:	11000115 	stw	r4,4(r2)
410227a0:	12800215 	stw	r10,8(r2)
410227a4:	12800315 	stw	r10,12(r2)
410227a8:	9009883a 	mov	r4,r18
410227ac:	1031b140 	call	41031b14 <__malloc_unlock>
410227b0:	80c00204 	addi	r3,r16,8
410227b4:	003f5906 	br	4102251c <_malloc_r+0x50>
410227b8:	8109883a 	add	r4,r16,r4
410227bc:	20800117 	ldw	r2,4(r4)
410227c0:	80c00217 	ldw	r3,8(r16)
410227c4:	81400317 	ldw	r5,12(r16)
410227c8:	10800054 	ori	r2,r2,1
410227cc:	20800115 	stw	r2,4(r4)
410227d0:	28c00215 	stw	r3,8(r5)
410227d4:	19400315 	stw	r5,12(r3)
410227d8:	9009883a 	mov	r4,r18
410227dc:	1031b140 	call	41031b14 <__malloc_unlock>
410227e0:	80c00204 	addi	r3,r16,8
410227e4:	003f4d06 	br	4102251c <_malloc_r+0x50>
410227e8:	80800204 	addi	r2,r16,8
410227ec:	14000317 	ldw	r16,12(r2)
410227f0:	143f911e 	bne	r2,r16,41022638 <_malloc_r+0x16c>
410227f4:	1a400084 	addi	r9,r3,2
410227f8:	003f7306 	br	410225c8 <_malloc_r+0xfc>
410227fc:	88c00054 	ori	r3,r17,1
41022800:	8445883a 	add	r2,r16,r17
41022804:	80c00115 	stw	r3,4(r16)
41022808:	003fdf06 	br	41022788 <_malloc_r+0x2bc>
4102280c:	e4000217 	ldw	r16,8(fp)
41022810:	00bfff04 	movi	r2,-4
41022814:	80c00117 	ldw	r3,4(r16)
41022818:	802d883a 	mov	r22,r16
4102281c:	18aa703a 	and	r21,r3,r2
41022820:	ac401636 	bltu	r21,r17,4102287c <_malloc_r+0x3b0>
41022824:	ac49c83a 	sub	r4,r21,r17
41022828:	008003c4 	movi	r2,15
4102282c:	1100130e 	bge	r2,r4,4102287c <_malloc_r+0x3b0>
41022830:	88800054 	ori	r2,r17,1
41022834:	8447883a 	add	r3,r16,r17
41022838:	80800115 	stw	r2,4(r16)
4102283c:	20800054 	ori	r2,r4,1
41022840:	18800115 	stw	r2,4(r3)
41022844:	e0c00215 	stw	r3,8(fp)
41022848:	9009883a 	mov	r4,r18
4102284c:	1031b140 	call	41031b14 <__malloc_unlock>
41022850:	80c00204 	addi	r3,r16,8
41022854:	003f3106 	br	4102251c <_malloc_r+0x50>
41022858:	39c00117 	ldw	r7,4(r7)
4102285c:	573ffe04 	addi	fp,r10,-8
41022860:	003fa006 	br	410226e4 <_malloc_r+0x218>
41022864:	00801504 	movi	r2,84
41022868:	10c06736 	bltu	r2,r3,41022a08 <_malloc_r+0x53c>
4102286c:	8804d33a 	srli	r2,r17,12
41022870:	11801b84 	addi	r6,r2,110
41022874:	300490fa 	slli	r2,r6,3
41022878:	003f4106 	br	41022580 <_malloc_r+0xb4>
4102287c:	d0a01517 	ldw	r2,-32684(gp)
41022880:	d0e00317 	ldw	r3,-32756(gp)
41022884:	053fffc4 	movi	r20,-1
41022888:	10800404 	addi	r2,r2,16
4102288c:	88a7883a 	add	r19,r17,r2
41022890:	1d000326 	beq	r3,r20,410228a0 <_malloc_r+0x3d4>
41022894:	98c3ffc4 	addi	r3,r19,4095
41022898:	00bc0004 	movi	r2,-4096
4102289c:	18a6703a 	and	r19,r3,r2
410228a0:	9009883a 	mov	r4,r18
410228a4:	980b883a 	mov	r5,r19
410228a8:	1022ed00 	call	41022ed0 <_sbrk_r>
410228ac:	1009883a 	mov	r4,r2
410228b0:	15000426 	beq	r2,r20,410228c4 <_malloc_r+0x3f8>
410228b4:	854b883a 	add	r5,r16,r21
410228b8:	1029883a 	mov	r20,r2
410228bc:	11405a2e 	bgeu	r2,r5,41022a28 <_malloc_r+0x55c>
410228c0:	87000c26 	beq	r16,fp,410228f4 <_malloc_r+0x428>
410228c4:	e4000217 	ldw	r16,8(fp)
410228c8:	80c00117 	ldw	r3,4(r16)
410228cc:	00bfff04 	movi	r2,-4
410228d0:	1884703a 	and	r2,r3,r2
410228d4:	14400336 	bltu	r2,r17,410228e4 <_malloc_r+0x418>
410228d8:	1449c83a 	sub	r4,r2,r17
410228dc:	008003c4 	movi	r2,15
410228e0:	113fd316 	blt	r2,r4,41022830 <_malloc_r+0x364>
410228e4:	9009883a 	mov	r4,r18
410228e8:	1031b140 	call	41031b14 <__malloc_unlock>
410228ec:	0007883a 	mov	r3,zero
410228f0:	003f0a06 	br	4102251c <_malloc_r+0x50>
410228f4:	05c00034 	movhi	r23,0
410228f8:	bdcaf904 	addi	r23,r23,11236
410228fc:	b8800017 	ldw	r2,0(r23)
41022900:	988d883a 	add	r6,r19,r2
41022904:	b9800015 	stw	r6,0(r23)
41022908:	d0e00317 	ldw	r3,-32756(gp)
4102290c:	00bfffc4 	movi	r2,-1
41022910:	18808e26 	beq	r3,r2,41022b4c <_malloc_r+0x680>
41022914:	2145c83a 	sub	r2,r4,r5
41022918:	3085883a 	add	r2,r6,r2
4102291c:	b8800015 	stw	r2,0(r23)
41022920:	20c001cc 	andi	r3,r4,7
41022924:	18005f1e 	bne	r3,zero,41022aa4 <_malloc_r+0x5d8>
41022928:	000b883a 	mov	r5,zero
4102292c:	a4c5883a 	add	r2,r20,r19
41022930:	1083ffcc 	andi	r2,r2,4095
41022934:	00c40004 	movi	r3,4096
41022938:	1887c83a 	sub	r3,r3,r2
4102293c:	28e7883a 	add	r19,r5,r3
41022940:	9009883a 	mov	r4,r18
41022944:	980b883a 	mov	r5,r19
41022948:	1022ed00 	call	41022ed0 <_sbrk_r>
4102294c:	1007883a 	mov	r3,r2
41022950:	00bfffc4 	movi	r2,-1
41022954:	18807a26 	beq	r3,r2,41022b40 <_malloc_r+0x674>
41022958:	1d05c83a 	sub	r2,r3,r20
4102295c:	9885883a 	add	r2,r19,r2
41022960:	10c00054 	ori	r3,r2,1
41022964:	b8800017 	ldw	r2,0(r23)
41022968:	a021883a 	mov	r16,r20
4102296c:	a0c00115 	stw	r3,4(r20)
41022970:	9885883a 	add	r2,r19,r2
41022974:	b8800015 	stw	r2,0(r23)
41022978:	e5000215 	stw	r20,8(fp)
4102297c:	b7003626 	beq	r22,fp,41022a58 <_malloc_r+0x58c>
41022980:	018003c4 	movi	r6,15
41022984:	35404b36 	bltu	r6,r21,41022ab4 <_malloc_r+0x5e8>
41022988:	00800044 	movi	r2,1
4102298c:	a0800115 	stw	r2,4(r20)
41022990:	003fcd06 	br	410228c8 <_malloc_r+0x3fc>
41022994:	2808d27a 	srli	r4,r5,9
41022998:	2000371e 	bne	r4,zero,41022a78 <_malloc_r+0x5ac>
4102299c:	2808d0fa 	srli	r4,r5,3
410229a0:	200690fa 	slli	r3,r4,3
410229a4:	1ad1883a 	add	r8,r3,r11
410229a8:	41800217 	ldw	r6,8(r8)
410229ac:	41805b26 	beq	r8,r6,41022b1c <_malloc_r+0x650>
410229b0:	30800117 	ldw	r2,4(r6)
410229b4:	00ffff04 	movi	r3,-4
410229b8:	10c4703a 	and	r2,r2,r3
410229bc:	2880022e 	bgeu	r5,r2,410229c8 <_malloc_r+0x4fc>
410229c0:	31800217 	ldw	r6,8(r6)
410229c4:	41bffa1e 	bne	r8,r6,410229b0 <_malloc_r+0x4e4>
410229c8:	32000317 	ldw	r8,12(r6)
410229cc:	39c00117 	ldw	r7,4(r7)
410229d0:	82000315 	stw	r8,12(r16)
410229d4:	81800215 	stw	r6,8(r16)
410229d8:	07000034 	movhi	fp,0
410229dc:	e7054604 	addi	fp,fp,5400
410229e0:	34000315 	stw	r16,12(r6)
410229e4:	44000215 	stw	r16,8(r8)
410229e8:	003f3e06 	br	410226e4 <_malloc_r+0x218>
410229ec:	63000044 	addi	r12,r12,1
410229f0:	608000cc 	andi	r2,r12,3
410229f4:	10005d26 	beq	r2,zero,41022b6c <_malloc_r+0x6a0>
410229f8:	18c00204 	addi	r3,r3,8
410229fc:	003f5106 	br	41022744 <_malloc_r+0x278>
41022a00:	8089883a 	add	r4,r16,r2
41022a04:	003f6d06 	br	410227bc <_malloc_r+0x2f0>
41022a08:	00805504 	movi	r2,340
41022a0c:	10c02036 	bltu	r2,r3,41022a90 <_malloc_r+0x5c4>
41022a10:	8804d3fa 	srli	r2,r17,15
41022a14:	11801dc4 	addi	r6,r2,119
41022a18:	300490fa 	slli	r2,r6,3
41022a1c:	003ed806 	br	41022580 <_malloc_r+0xb4>
41022a20:	48c000c4 	addi	r3,r9,3
41022a24:	003f3106 	br	410226ec <_malloc_r+0x220>
41022a28:	05c00034 	movhi	r23,0
41022a2c:	bdcaf904 	addi	r23,r23,11236
41022a30:	b8800017 	ldw	r2,0(r23)
41022a34:	988d883a 	add	r6,r19,r2
41022a38:	b9800015 	stw	r6,0(r23)
41022a3c:	293fb21e 	bne	r5,r4,41022908 <_malloc_r+0x43c>
41022a40:	2083ffcc 	andi	r2,r4,4095
41022a44:	103fb01e 	bne	r2,zero,41022908 <_malloc_r+0x43c>
41022a48:	e4000217 	ldw	r16,8(fp)
41022a4c:	9d45883a 	add	r2,r19,r21
41022a50:	10800054 	ori	r2,r2,1
41022a54:	80800115 	stw	r2,4(r16)
41022a58:	b8c00017 	ldw	r3,0(r23)
41022a5c:	d0a01617 	ldw	r2,-32680(gp)
41022a60:	10c0012e 	bgeu	r2,r3,41022a68 <_malloc_r+0x59c>
41022a64:	d0e01615 	stw	r3,-32680(gp)
41022a68:	d0a01717 	ldw	r2,-32676(gp)
41022a6c:	10ff962e 	bgeu	r2,r3,410228c8 <_malloc_r+0x3fc>
41022a70:	d0e01715 	stw	r3,-32676(gp)
41022a74:	003f9406 	br	410228c8 <_malloc_r+0x3fc>
41022a78:	00800104 	movi	r2,4
41022a7c:	11001e36 	bltu	r2,r4,41022af8 <_malloc_r+0x62c>
41022a80:	2804d1ba 	srli	r2,r5,6
41022a84:	11000e04 	addi	r4,r2,56
41022a88:	200690fa 	slli	r3,r4,3
41022a8c:	003fc506 	br	410229a4 <_malloc_r+0x4d8>
41022a90:	00815504 	movi	r2,1364
41022a94:	10c01d2e 	bgeu	r2,r3,41022b0c <_malloc_r+0x640>
41022a98:	01801f84 	movi	r6,126
41022a9c:	0080fc04 	movi	r2,1008
41022aa0:	003eb706 	br	41022580 <_malloc_r+0xb4>
41022aa4:	00800204 	movi	r2,8
41022aa8:	10cbc83a 	sub	r5,r2,r3
41022aac:	2169883a 	add	r20,r4,r5
41022ab0:	003f9e06 	br	4102292c <_malloc_r+0x460>
41022ab4:	00bffe04 	movi	r2,-8
41022ab8:	a93ffd04 	addi	r4,r21,-12
41022abc:	2088703a 	and	r4,r4,r2
41022ac0:	b10b883a 	add	r5,r22,r4
41022ac4:	00c00144 	movi	r3,5
41022ac8:	28c00215 	stw	r3,8(r5)
41022acc:	28c00115 	stw	r3,4(r5)
41022ad0:	b0800117 	ldw	r2,4(r22)
41022ad4:	1080004c 	andi	r2,r2,1
41022ad8:	2084b03a 	or	r2,r4,r2
41022adc:	b0800115 	stw	r2,4(r22)
41022ae0:	313fdd2e 	bgeu	r6,r4,41022a58 <_malloc_r+0x58c>
41022ae4:	b1400204 	addi	r5,r22,8
41022ae8:	9009883a 	mov	r4,r18
41022aec:	10288d00 	call	410288d0 <_free_r>
41022af0:	e4000217 	ldw	r16,8(fp)
41022af4:	003fd806 	br	41022a58 <_malloc_r+0x58c>
41022af8:	00800504 	movi	r2,20
41022afc:	11001536 	bltu	r2,r4,41022b54 <_malloc_r+0x688>
41022b00:	210016c4 	addi	r4,r4,91
41022b04:	200690fa 	slli	r3,r4,3
41022b08:	003fa606 	br	410229a4 <_malloc_r+0x4d8>
41022b0c:	8804d4ba 	srli	r2,r17,18
41022b10:	11801f04 	addi	r6,r2,124
41022b14:	300490fa 	slli	r2,r6,3
41022b18:	003e9906 	br	41022580 <_malloc_r+0xb4>
41022b1c:	2009d0ba 	srai	r4,r4,2
41022b20:	01400034 	movhi	r5,0
41022b24:	29454604 	addi	r5,r5,5400
41022b28:	00c00044 	movi	r3,1
41022b2c:	28800117 	ldw	r2,4(r5)
41022b30:	1906983a 	sll	r3,r3,r4
41022b34:	10c4b03a 	or	r2,r2,r3
41022b38:	28800115 	stw	r2,4(r5)
41022b3c:	003fa306 	br	410229cc <_malloc_r+0x500>
41022b40:	0027883a 	mov	r19,zero
41022b44:	00c00044 	movi	r3,1
41022b48:	003f8606 	br	41022964 <_malloc_r+0x498>
41022b4c:	d1200315 	stw	r4,-32756(gp)
41022b50:	003f7306 	br	41022920 <_malloc_r+0x454>
41022b54:	00801504 	movi	r2,84
41022b58:	11001936 	bltu	r2,r4,41022bc0 <_malloc_r+0x6f4>
41022b5c:	2804d33a 	srli	r2,r5,12
41022b60:	11001b84 	addi	r4,r2,110
41022b64:	200690fa 	slli	r3,r4,3
41022b68:	003f8e06 	br	410229a4 <_malloc_r+0x4d8>
41022b6c:	480b883a 	mov	r5,r9
41022b70:	6807883a 	mov	r3,r13
41022b74:	288000cc 	andi	r2,r5,3
41022b78:	18fffe04 	addi	r3,r3,-8
41022b7c:	297fffc4 	addi	r5,r5,-1
41022b80:	10001526 	beq	r2,zero,41022bd8 <_malloc_r+0x70c>
41022b84:	18800217 	ldw	r2,8(r3)
41022b88:	10fffa26 	beq	r2,r3,41022b74 <_malloc_r+0x6a8>
41022b8c:	2109883a 	add	r4,r4,r4
41022b90:	393f1e36 	bltu	r7,r4,4102280c <_malloc_r+0x340>
41022b94:	203f1d26 	beq	r4,zero,4102280c <_malloc_r+0x340>
41022b98:	21c4703a 	and	r2,r4,r7
41022b9c:	10000226 	beq	r2,zero,41022ba8 <_malloc_r+0x6dc>
41022ba0:	6013883a 	mov	r9,r12
41022ba4:	003ee106 	br	4102272c <_malloc_r+0x260>
41022ba8:	2109883a 	add	r4,r4,r4
41022bac:	3904703a 	and	r2,r7,r4
41022bb0:	63000104 	addi	r12,r12,4
41022bb4:	103ffc26 	beq	r2,zero,41022ba8 <_malloc_r+0x6dc>
41022bb8:	6013883a 	mov	r9,r12
41022bbc:	003edb06 	br	4102272c <_malloc_r+0x260>
41022bc0:	00805504 	movi	r2,340
41022bc4:	11000836 	bltu	r2,r4,41022be8 <_malloc_r+0x71c>
41022bc8:	2804d3fa 	srli	r2,r5,15
41022bcc:	11001dc4 	addi	r4,r2,119
41022bd0:	200690fa 	slli	r3,r4,3
41022bd4:	003f7306 	br	410229a4 <_malloc_r+0x4d8>
41022bd8:	0104303a 	nor	r2,zero,r4
41022bdc:	388e703a 	and	r7,r7,r2
41022be0:	e1c00115 	stw	r7,4(fp)
41022be4:	003fe906 	br	41022b8c <_malloc_r+0x6c0>
41022be8:	00815504 	movi	r2,1364
41022bec:	1100032e 	bgeu	r2,r4,41022bfc <_malloc_r+0x730>
41022bf0:	01001f84 	movi	r4,126
41022bf4:	00c0fc04 	movi	r3,1008
41022bf8:	003f6a06 	br	410229a4 <_malloc_r+0x4d8>
41022bfc:	2804d4ba 	srli	r2,r5,18
41022c00:	11001f04 	addi	r4,r2,124
41022c04:	200690fa 	slli	r3,r4,3
41022c08:	003f6606 	br	410229a4 <_malloc_r+0x4d8>

41022c0c <memcmp>:
41022c0c:	00c000c4 	movi	r3,3
41022c10:	1980032e 	bgeu	r3,r6,41022c20 <memcmp+0x14>
41022c14:	2144b03a 	or	r2,r4,r5
41022c18:	10c4703a 	and	r2,r2,r3
41022c1c:	10000f26 	beq	r2,zero,41022c5c <memcmp+0x50>
41022c20:	31ffffc4 	addi	r7,r6,-1
41022c24:	3000061e 	bne	r6,zero,41022c40 <memcmp+0x34>
41022c28:	00000a06 	br	41022c54 <memcmp+0x48>
41022c2c:	39ffffc4 	addi	r7,r7,-1
41022c30:	00bfffc4 	movi	r2,-1
41022c34:	21000044 	addi	r4,r4,1
41022c38:	29400044 	addi	r5,r5,1
41022c3c:	38800526 	beq	r7,r2,41022c54 <memcmp+0x48>
41022c40:	20c00003 	ldbu	r3,0(r4)
41022c44:	28800003 	ldbu	r2,0(r5)
41022c48:	18bff826 	beq	r3,r2,41022c2c <memcmp+0x20>
41022c4c:	1885c83a 	sub	r2,r3,r2
41022c50:	f800283a 	ret
41022c54:	0005883a 	mov	r2,zero
41022c58:	f800283a 	ret
41022c5c:	180f883a 	mov	r7,r3
41022c60:	20c00017 	ldw	r3,0(r4)
41022c64:	28800017 	ldw	r2,0(r5)
41022c68:	18bfed1e 	bne	r3,r2,41022c20 <memcmp+0x14>
41022c6c:	31bfff04 	addi	r6,r6,-4
41022c70:	21000104 	addi	r4,r4,4
41022c74:	29400104 	addi	r5,r5,4
41022c78:	39bff936 	bltu	r7,r6,41022c60 <memcmp+0x54>
41022c7c:	003fe806 	br	41022c20 <memcmp+0x14>

41022c80 <memcpy>:
41022c80:	01c003c4 	movi	r7,15
41022c84:	2007883a 	mov	r3,r4
41022c88:	3980032e 	bgeu	r7,r6,41022c98 <memcpy+0x18>
41022c8c:	2904b03a 	or	r2,r5,r4
41022c90:	108000cc 	andi	r2,r2,3
41022c94:	10000926 	beq	r2,zero,41022cbc <memcpy+0x3c>
41022c98:	30000626 	beq	r6,zero,41022cb4 <memcpy+0x34>
41022c9c:	30cd883a 	add	r6,r6,r3
41022ca0:	28800003 	ldbu	r2,0(r5)
41022ca4:	29400044 	addi	r5,r5,1
41022ca8:	18800005 	stb	r2,0(r3)
41022cac:	18c00044 	addi	r3,r3,1
41022cb0:	30fffb1e 	bne	r6,r3,41022ca0 <memcpy+0x20>
41022cb4:	2005883a 	mov	r2,r4
41022cb8:	f800283a 	ret
41022cbc:	3811883a 	mov	r8,r7
41022cc0:	200f883a 	mov	r7,r4
41022cc4:	28c00017 	ldw	r3,0(r5)
41022cc8:	31bffc04 	addi	r6,r6,-16
41022ccc:	38c00015 	stw	r3,0(r7)
41022cd0:	28800117 	ldw	r2,4(r5)
41022cd4:	38800115 	stw	r2,4(r7)
41022cd8:	28c00217 	ldw	r3,8(r5)
41022cdc:	38c00215 	stw	r3,8(r7)
41022ce0:	28800317 	ldw	r2,12(r5)
41022ce4:	29400404 	addi	r5,r5,16
41022ce8:	38800315 	stw	r2,12(r7)
41022cec:	39c00404 	addi	r7,r7,16
41022cf0:	41bff436 	bltu	r8,r6,41022cc4 <memcpy+0x44>
41022cf4:	008000c4 	movi	r2,3
41022cf8:	1180072e 	bgeu	r2,r6,41022d18 <memcpy+0x98>
41022cfc:	1007883a 	mov	r3,r2
41022d00:	28800017 	ldw	r2,0(r5)
41022d04:	31bfff04 	addi	r6,r6,-4
41022d08:	29400104 	addi	r5,r5,4
41022d0c:	38800015 	stw	r2,0(r7)
41022d10:	39c00104 	addi	r7,r7,4
41022d14:	19bffa36 	bltu	r3,r6,41022d00 <memcpy+0x80>
41022d18:	3807883a 	mov	r3,r7
41022d1c:	003fde06 	br	41022c98 <memcpy+0x18>

41022d20 <printf>:
41022d20:	defffb04 	addi	sp,sp,-20
41022d24:	dfc00115 	stw	ra,4(sp)
41022d28:	d9400215 	stw	r5,8(sp)
41022d2c:	d9800315 	stw	r6,12(sp)
41022d30:	d9c00415 	stw	r7,16(sp)
41022d34:	00800034 	movhi	r2,0
41022d38:	108ad704 	addi	r2,r2,11100
41022d3c:	10c00017 	ldw	r3,0(r2)
41022d40:	200b883a 	mov	r5,r4
41022d44:	d8800204 	addi	r2,sp,8
41022d48:	19000217 	ldw	r4,8(r3)
41022d4c:	100d883a 	mov	r6,r2
41022d50:	d8800015 	stw	r2,0(sp)
41022d54:	1024fcc0 	call	41024fcc <__vfprintf_internal>
41022d58:	dfc00117 	ldw	ra,4(sp)
41022d5c:	dec00504 	addi	sp,sp,20
41022d60:	f800283a 	ret

41022d64 <_printf_r>:
41022d64:	defffc04 	addi	sp,sp,-16
41022d68:	dfc00115 	stw	ra,4(sp)
41022d6c:	d9800215 	stw	r6,8(sp)
41022d70:	d9c00315 	stw	r7,12(sp)
41022d74:	280d883a 	mov	r6,r5
41022d78:	21400217 	ldw	r5,8(r4)
41022d7c:	d8c00204 	addi	r3,sp,8
41022d80:	180f883a 	mov	r7,r3
41022d84:	d8c00015 	stw	r3,0(sp)
41022d88:	10231200 	call	41023120 <___vfprintf_internal_r>
41022d8c:	dfc00117 	ldw	ra,4(sp)
41022d90:	dec00404 	addi	sp,sp,16
41022d94:	f800283a 	ret

41022d98 <putchar>:
41022d98:	00800034 	movhi	r2,0
41022d9c:	108ad704 	addi	r2,r2,11100
41022da0:	11800017 	ldw	r6,0(r2)
41022da4:	200b883a 	mov	r5,r4
41022da8:	3009883a 	mov	r4,r6
41022dac:	31800217 	ldw	r6,8(r6)
41022db0:	102a8d81 	jmpi	4102a8d8 <_putc_r>

41022db4 <_putchar_r>:
41022db4:	21800217 	ldw	r6,8(r4)
41022db8:	102a8d81 	jmpi	4102a8d8 <_putc_r>

41022dbc <_puts_r>:
41022dbc:	defff604 	addi	sp,sp,-40
41022dc0:	dc400715 	stw	r17,28(sp)
41022dc4:	2023883a 	mov	r17,r4
41022dc8:	2809883a 	mov	r4,r5
41022dcc:	dfc00915 	stw	ra,36(sp)
41022dd0:	dcc00815 	stw	r19,32(sp)
41022dd4:	2827883a 	mov	r19,r5
41022dd8:	10230540 	call	41023054 <strlen>
41022ddc:	89400217 	ldw	r5,8(r17)
41022de0:	00c00034 	movhi	r3,0
41022de4:	18c2b804 	addi	r3,r3,2784
41022de8:	01c00044 	movi	r7,1
41022dec:	12000044 	addi	r8,r2,1
41022df0:	d8c00515 	stw	r3,20(sp)
41022df4:	d9c00615 	stw	r7,24(sp)
41022df8:	d8c00304 	addi	r3,sp,12
41022dfc:	01c00084 	movi	r7,2
41022e00:	8809883a 	mov	r4,r17
41022e04:	d80d883a 	mov	r6,sp
41022e08:	d8c00015 	stw	r3,0(sp)
41022e0c:	dcc00315 	stw	r19,12(sp)
41022e10:	da000215 	stw	r8,8(sp)
41022e14:	d9c00115 	stw	r7,4(sp)
41022e18:	d8800415 	stw	r2,16(sp)
41022e1c:	1028be40 	call	41028be4 <__sfvwrite_r>
41022e20:	00ffffc4 	movi	r3,-1
41022e24:	10000626 	beq	r2,zero,41022e40 <_puts_r+0x84>
41022e28:	1805883a 	mov	r2,r3
41022e2c:	dfc00917 	ldw	ra,36(sp)
41022e30:	dcc00817 	ldw	r19,32(sp)
41022e34:	dc400717 	ldw	r17,28(sp)
41022e38:	dec00a04 	addi	sp,sp,40
41022e3c:	f800283a 	ret
41022e40:	00c00284 	movi	r3,10
41022e44:	1805883a 	mov	r2,r3
41022e48:	dfc00917 	ldw	ra,36(sp)
41022e4c:	dcc00817 	ldw	r19,32(sp)
41022e50:	dc400717 	ldw	r17,28(sp)
41022e54:	dec00a04 	addi	sp,sp,40
41022e58:	f800283a 	ret

41022e5c <puts>:
41022e5c:	00800034 	movhi	r2,0
41022e60:	108ad704 	addi	r2,r2,11100
41022e64:	200b883a 	mov	r5,r4
41022e68:	11000017 	ldw	r4,0(r2)
41022e6c:	1022dbc1 	jmpi	41022dbc <_puts_r>

41022e70 <__srget_r>:
41022e70:	defffe04 	addi	sp,sp,-8
41022e74:	dc000015 	stw	r16,0(sp)
41022e78:	dfc00115 	stw	ra,4(sp)
41022e7c:	2821883a 	mov	r16,r5
41022e80:	102afb40 	call	4102afb4 <__srefill_r>
41022e84:	013fffc4 	movi	r4,-1
41022e88:	1000071e 	bne	r2,zero,41022ea8 <__srget_r+0x38>
41022e8c:	80800117 	ldw	r2,4(r16)
41022e90:	81000017 	ldw	r4,0(r16)
41022e94:	10bfffc4 	addi	r2,r2,-1
41022e98:	20c00044 	addi	r3,r4,1
41022e9c:	80800115 	stw	r2,4(r16)
41022ea0:	21000003 	ldbu	r4,0(r4)
41022ea4:	80c00015 	stw	r3,0(r16)
41022ea8:	2005883a 	mov	r2,r4
41022eac:	dfc00117 	ldw	ra,4(sp)
41022eb0:	dc000017 	ldw	r16,0(sp)
41022eb4:	dec00204 	addi	sp,sp,8
41022eb8:	f800283a 	ret

41022ebc <__srget>:
41022ebc:	00800034 	movhi	r2,0
41022ec0:	108ad704 	addi	r2,r2,11100
41022ec4:	200b883a 	mov	r5,r4
41022ec8:	11000017 	ldw	r4,0(r2)
41022ecc:	1022e701 	jmpi	41022e70 <__srget_r>

41022ed0 <_sbrk_r>:
41022ed0:	defffd04 	addi	sp,sp,-12
41022ed4:	dc000015 	stw	r16,0(sp)
41022ed8:	04000034 	movhi	r16,0
41022edc:	840aef04 	addi	r16,r16,11196
41022ee0:	dc400115 	stw	r17,4(sp)
41022ee4:	80000015 	stw	zero,0(r16)
41022ee8:	2023883a 	mov	r17,r4
41022eec:	2809883a 	mov	r4,r5
41022ef0:	dfc00215 	stw	ra,8(sp)
41022ef4:	1031d140 	call	41031d14 <sbrk>
41022ef8:	1007883a 	mov	r3,r2
41022efc:	00bfffc4 	movi	r2,-1
41022f00:	18800626 	beq	r3,r2,41022f1c <_sbrk_r+0x4c>
41022f04:	1805883a 	mov	r2,r3
41022f08:	dfc00217 	ldw	ra,8(sp)
41022f0c:	dc400117 	ldw	r17,4(sp)
41022f10:	dc000017 	ldw	r16,0(sp)
41022f14:	dec00304 	addi	sp,sp,12
41022f18:	f800283a 	ret
41022f1c:	80800017 	ldw	r2,0(r16)
41022f20:	103ff826 	beq	r2,zero,41022f04 <_sbrk_r+0x34>
41022f24:	88800015 	stw	r2,0(r17)
41022f28:	1805883a 	mov	r2,r3
41022f2c:	dfc00217 	ldw	ra,8(sp)
41022f30:	dc400117 	ldw	r17,4(sp)
41022f34:	dc000017 	ldw	r16,0(sp)
41022f38:	dec00304 	addi	sp,sp,12
41022f3c:	f800283a 	ret

41022f40 <eofread>:
41022f40:	0005883a 	mov	r2,zero
41022f44:	f800283a 	ret

41022f48 <_sscanf_r>:
41022f48:	deffe404 	addi	sp,sp,-112
41022f4c:	dcc01915 	stw	r19,100(sp)
41022f50:	2027883a 	mov	r19,r4
41022f54:	dfc01a15 	stw	ra,104(sp)
41022f58:	dc401815 	stw	r17,96(sp)
41022f5c:	d9c01b15 	stw	r7,108(sp)
41022f60:	00808104 	movi	r2,516
41022f64:	2809883a 	mov	r4,r5
41022f68:	3023883a 	mov	r17,r6
41022f6c:	d9400115 	stw	r5,4(sp)
41022f70:	d9400515 	stw	r5,20(sp)
41022f74:	d880040d 	sth	r2,16(sp)
41022f78:	10230540 	call	41023054 <strlen>
41022f7c:	d8c01b04 	addi	r3,sp,108
41022f80:	d8c00015 	stw	r3,0(sp)
41022f84:	180f883a 	mov	r7,r3
41022f88:	023fffc4 	movi	r8,-1
41022f8c:	00d040b4 	movhi	r3,16642
41022f90:	18cbd004 	addi	r3,r3,12096
41022f94:	9809883a 	mov	r4,r19
41022f98:	880d883a 	mov	r6,r17
41022f9c:	d9400104 	addi	r5,sp,4
41022fa0:	d8800615 	stw	r2,24(sp)
41022fa4:	d8c00915 	stw	r3,36(sp)
41022fa8:	da00048d 	sth	r8,18(sp)
41022fac:	d8800215 	stw	r2,8(sp)
41022fb0:	d8000d15 	stw	zero,52(sp)
41022fb4:	d8001215 	stw	zero,72(sp)
41022fb8:	1024ff00 	call	41024ff0 <__svfscanf_r>
41022fbc:	dfc01a17 	ldw	ra,104(sp)
41022fc0:	dcc01917 	ldw	r19,100(sp)
41022fc4:	dc401817 	ldw	r17,96(sp)
41022fc8:	dec01c04 	addi	sp,sp,112
41022fcc:	f800283a 	ret

41022fd0 <sscanf>:
41022fd0:	deffe404 	addi	sp,sp,-112
41022fd4:	dfc01915 	stw	ra,100(sp)
41022fd8:	dc401815 	stw	r17,96(sp)
41022fdc:	d9801a15 	stw	r6,104(sp)
41022fe0:	d9c01b15 	stw	r7,108(sp)
41022fe4:	00808104 	movi	r2,516
41022fe8:	2823883a 	mov	r17,r5
41022fec:	d9000515 	stw	r4,20(sp)
41022ff0:	d9000115 	stw	r4,4(sp)
41022ff4:	d880040d 	sth	r2,16(sp)
41022ff8:	10230540 	call	41023054 <strlen>
41022ffc:	d8c01a04 	addi	r3,sp,104
41023000:	d8c00015 	stw	r3,0(sp)
41023004:	00c00034 	movhi	r3,0
41023008:	18cad704 	addi	r3,r3,11100
4102300c:	19000017 	ldw	r4,0(r3)
41023010:	d9c00017 	ldw	r7,0(sp)
41023014:	00d040b4 	movhi	r3,16642
41023018:	18cbd004 	addi	r3,r3,12096
4102301c:	023fffc4 	movi	r8,-1
41023020:	880d883a 	mov	r6,r17
41023024:	d9400104 	addi	r5,sp,4
41023028:	d8800615 	stw	r2,24(sp)
4102302c:	d8c00915 	stw	r3,36(sp)
41023030:	da00048d 	sth	r8,18(sp)
41023034:	d8800215 	stw	r2,8(sp)
41023038:	d8000d15 	stw	zero,52(sp)
4102303c:	d8001215 	stw	zero,72(sp)
41023040:	1024ff00 	call	41024ff0 <__svfscanf_r>
41023044:	dfc01917 	ldw	ra,100(sp)
41023048:	dc401817 	ldw	r17,96(sp)
4102304c:	dec01c04 	addi	sp,sp,112
41023050:	f800283a 	ret

41023054 <strlen>:
41023054:	208000cc 	andi	r2,r4,3
41023058:	2011883a 	mov	r8,r4
4102305c:	1000161e 	bne	r2,zero,410230b8 <strlen+0x64>
41023060:	20c00017 	ldw	r3,0(r4)
41023064:	017fbff4 	movhi	r5,65279
41023068:	297fbfc4 	addi	r5,r5,-257
4102306c:	01e02074 	movhi	r7,32897
41023070:	39e02004 	addi	r7,r7,-32640
41023074:	1945883a 	add	r2,r3,r5
41023078:	11c4703a 	and	r2,r2,r7
4102307c:	00c6303a 	nor	r3,zero,r3
41023080:	1886703a 	and	r3,r3,r2
41023084:	18000c1e 	bne	r3,zero,410230b8 <strlen+0x64>
41023088:	280d883a 	mov	r6,r5
4102308c:	380b883a 	mov	r5,r7
41023090:	21000104 	addi	r4,r4,4
41023094:	20800017 	ldw	r2,0(r4)
41023098:	1187883a 	add	r3,r2,r6
4102309c:	1946703a 	and	r3,r3,r5
410230a0:	0084303a 	nor	r2,zero,r2
410230a4:	10c4703a 	and	r2,r2,r3
410230a8:	103ff926 	beq	r2,zero,41023090 <strlen+0x3c>
410230ac:	20800007 	ldb	r2,0(r4)
410230b0:	10000326 	beq	r2,zero,410230c0 <strlen+0x6c>
410230b4:	21000044 	addi	r4,r4,1
410230b8:	20800007 	ldb	r2,0(r4)
410230bc:	103ffd1e 	bne	r2,zero,410230b4 <strlen+0x60>
410230c0:	2205c83a 	sub	r2,r4,r8
410230c4:	f800283a 	ret

410230c8 <__sprint_r>:
410230c8:	30800217 	ldw	r2,8(r6)
410230cc:	defffe04 	addi	sp,sp,-8
410230d0:	dc000015 	stw	r16,0(sp)
410230d4:	dfc00115 	stw	ra,4(sp)
410230d8:	3021883a 	mov	r16,r6
410230dc:	0007883a 	mov	r3,zero
410230e0:	1000061e 	bne	r2,zero,410230fc <__sprint_r+0x34>
410230e4:	1805883a 	mov	r2,r3
410230e8:	30000115 	stw	zero,4(r6)
410230ec:	dfc00117 	ldw	ra,4(sp)
410230f0:	dc000017 	ldw	r16,0(sp)
410230f4:	dec00204 	addi	sp,sp,8
410230f8:	f800283a 	ret
410230fc:	1028be40 	call	41028be4 <__sfvwrite_r>
41023100:	1007883a 	mov	r3,r2
41023104:	1805883a 	mov	r2,r3
41023108:	80000115 	stw	zero,4(r16)
4102310c:	80000215 	stw	zero,8(r16)
41023110:	dfc00117 	ldw	ra,4(sp)
41023114:	dc000017 	ldw	r16,0(sp)
41023118:	dec00204 	addi	sp,sp,8
4102311c:	f800283a 	ret

41023120 <___vfprintf_internal_r>:
41023120:	defea404 	addi	sp,sp,-1392
41023124:	dd815815 	stw	r22,1376(sp)
41023128:	dc015215 	stw	r16,1352(sp)
4102312c:	d9c15115 	stw	r7,1348(sp)
41023130:	dfc15b15 	stw	ra,1388(sp)
41023134:	df015a15 	stw	fp,1384(sp)
41023138:	ddc15915 	stw	r23,1380(sp)
4102313c:	dd415715 	stw	r21,1372(sp)
41023140:	dd015615 	stw	r20,1368(sp)
41023144:	dcc15515 	stw	r19,1364(sp)
41023148:	dc815415 	stw	r18,1360(sp)
4102314c:	dc415315 	stw	r17,1356(sp)
41023150:	282d883a 	mov	r22,r5
41023154:	3021883a 	mov	r16,r6
41023158:	d9014f15 	stw	r4,1340(sp)
4102315c:	10292340 	call	41029234 <_localeconv_r>
41023160:	10800017 	ldw	r2,0(r2)
41023164:	d9c15117 	ldw	r7,1348(sp)
41023168:	d8814915 	stw	r2,1316(sp)
4102316c:	d8814f17 	ldw	r2,1340(sp)
41023170:	10000226 	beq	r2,zero,4102317c <___vfprintf_internal_r+0x5c>
41023174:	10800e17 	ldw	r2,56(r2)
41023178:	10020d26 	beq	r2,zero,410239b0 <___vfprintf_internal_r+0x890>
4102317c:	b080030b 	ldhu	r2,12(r22)
41023180:	1080020c 	andi	r2,r2,8
41023184:	10020e26 	beq	r2,zero,410239c0 <___vfprintf_internal_r+0x8a0>
41023188:	b0800417 	ldw	r2,16(r22)
4102318c:	10020c26 	beq	r2,zero,410239c0 <___vfprintf_internal_r+0x8a0>
41023190:	b200030b 	ldhu	r8,12(r22)
41023194:	00800284 	movi	r2,10
41023198:	40c0068c 	andi	r3,r8,26
4102319c:	18802f1e 	bne	r3,r2,4102325c <___vfprintf_internal_r+0x13c>
410231a0:	b080038f 	ldh	r2,14(r22)
410231a4:	10002d16 	blt	r2,zero,4102325c <___vfprintf_internal_r+0x13c>
410231a8:	b240038b 	ldhu	r9,14(r22)
410231ac:	b2800717 	ldw	r10,28(r22)
410231b0:	b2c00917 	ldw	r11,36(r22)
410231b4:	d9014f17 	ldw	r4,1340(sp)
410231b8:	dc402904 	addi	r17,sp,164
410231bc:	d8804004 	addi	r2,sp,256
410231c0:	00c10004 	movi	r3,1024
410231c4:	423fff4c 	andi	r8,r8,65533
410231c8:	800d883a 	mov	r6,r16
410231cc:	880b883a 	mov	r5,r17
410231d0:	da002c0d 	sth	r8,176(sp)
410231d4:	da402c8d 	sth	r9,178(sp)
410231d8:	da803015 	stw	r10,192(sp)
410231dc:	dac03215 	stw	r11,200(sp)
410231e0:	d8802d15 	stw	r2,180(sp)
410231e4:	d8c02e15 	stw	r3,184(sp)
410231e8:	d8802915 	stw	r2,164(sp)
410231ec:	d8c02b15 	stw	r3,172(sp)
410231f0:	d8002f15 	stw	zero,188(sp)
410231f4:	10231200 	call	41023120 <___vfprintf_internal_r>
410231f8:	d8814b15 	stw	r2,1324(sp)
410231fc:	10000416 	blt	r2,zero,41023210 <___vfprintf_internal_r+0xf0>
41023200:	d9014f17 	ldw	r4,1340(sp)
41023204:	880b883a 	mov	r5,r17
41023208:	10280780 	call	41028078 <_fflush_r>
4102320c:	1002321e 	bne	r2,zero,41023ad8 <___vfprintf_internal_r+0x9b8>
41023210:	d8802c0b 	ldhu	r2,176(sp)
41023214:	1080100c 	andi	r2,r2,64
41023218:	10000326 	beq	r2,zero,41023228 <___vfprintf_internal_r+0x108>
4102321c:	b080030b 	ldhu	r2,12(r22)
41023220:	10801014 	ori	r2,r2,64
41023224:	b080030d 	sth	r2,12(r22)
41023228:	d8814b17 	ldw	r2,1324(sp)
4102322c:	dfc15b17 	ldw	ra,1388(sp)
41023230:	df015a17 	ldw	fp,1384(sp)
41023234:	ddc15917 	ldw	r23,1380(sp)
41023238:	dd815817 	ldw	r22,1376(sp)
4102323c:	dd415717 	ldw	r21,1372(sp)
41023240:	dd015617 	ldw	r20,1368(sp)
41023244:	dcc15517 	ldw	r19,1364(sp)
41023248:	dc815417 	ldw	r18,1360(sp)
4102324c:	dc415317 	ldw	r17,1356(sp)
41023250:	dc015217 	ldw	r16,1352(sp)
41023254:	dec15c04 	addi	sp,sp,1392
41023258:	f800283a 	ret
4102325c:	0005883a 	mov	r2,zero
41023260:	0007883a 	mov	r3,zero
41023264:	dd401904 	addi	r21,sp,100
41023268:	d8814215 	stw	r2,1288(sp)
4102326c:	802f883a 	mov	r23,r16
41023270:	d8c14315 	stw	r3,1292(sp)
41023274:	d8014b15 	stw	zero,1324(sp)
41023278:	d8014815 	stw	zero,1312(sp)
4102327c:	d8014415 	stw	zero,1296(sp)
41023280:	d8014715 	stw	zero,1308(sp)
41023284:	dd400c15 	stw	r21,48(sp)
41023288:	d8000e15 	stw	zero,56(sp)
4102328c:	d8000d15 	stw	zero,52(sp)
41023290:	b8800007 	ldb	r2,0(r23)
41023294:	10001926 	beq	r2,zero,410232fc <___vfprintf_internal_r+0x1dc>
41023298:	00c00944 	movi	r3,37
4102329c:	10c01726 	beq	r2,r3,410232fc <___vfprintf_internal_r+0x1dc>
410232a0:	b821883a 	mov	r16,r23
410232a4:	00000106 	br	410232ac <___vfprintf_internal_r+0x18c>
410232a8:	10c00326 	beq	r2,r3,410232b8 <___vfprintf_internal_r+0x198>
410232ac:	84000044 	addi	r16,r16,1
410232b0:	80800007 	ldb	r2,0(r16)
410232b4:	103ffc1e 	bne	r2,zero,410232a8 <___vfprintf_internal_r+0x188>
410232b8:	85e7c83a 	sub	r19,r16,r23
410232bc:	98000e26 	beq	r19,zero,410232f8 <___vfprintf_internal_r+0x1d8>
410232c0:	dc800e17 	ldw	r18,56(sp)
410232c4:	dc400d17 	ldw	r17,52(sp)
410232c8:	008001c4 	movi	r2,7
410232cc:	94e5883a 	add	r18,r18,r19
410232d0:	8c400044 	addi	r17,r17,1
410232d4:	adc00015 	stw	r23,0(r21)
410232d8:	dc800e15 	stw	r18,56(sp)
410232dc:	acc00115 	stw	r19,4(r21)
410232e0:	dc400d15 	stw	r17,52(sp)
410232e4:	14428b16 	blt	r2,r17,41023d14 <___vfprintf_internal_r+0xbf4>
410232e8:	ad400204 	addi	r21,r21,8
410232ec:	d9014b17 	ldw	r4,1324(sp)
410232f0:	24c9883a 	add	r4,r4,r19
410232f4:	d9014b15 	stw	r4,1324(sp)
410232f8:	802f883a 	mov	r23,r16
410232fc:	b8800007 	ldb	r2,0(r23)
41023300:	10013c26 	beq	r2,zero,410237f4 <___vfprintf_internal_r+0x6d4>
41023304:	bdc00044 	addi	r23,r23,1
41023308:	d8000405 	stb	zero,16(sp)
4102330c:	b8c00007 	ldb	r3,0(r23)
41023310:	04ffffc4 	movi	r19,-1
41023314:	d8014c15 	stw	zero,1328(sp)
41023318:	d8014a15 	stw	zero,1320(sp)
4102331c:	d8c14d15 	stw	r3,1332(sp)
41023320:	bdc00044 	addi	r23,r23,1
41023324:	d9414d17 	ldw	r5,1332(sp)
41023328:	00801604 	movi	r2,88
4102332c:	28fff804 	addi	r3,r5,-32
41023330:	10c06036 	bltu	r2,r3,410234b4 <___vfprintf_internal_r+0x394>
41023334:	18c5883a 	add	r2,r3,r3
41023338:	1085883a 	add	r2,r2,r2
4102333c:	00d040b4 	movhi	r3,16642
41023340:	18ccd404 	addi	r3,r3,13136
41023344:	10c5883a 	add	r2,r2,r3
41023348:	11000017 	ldw	r4,0(r2)
4102334c:	2000683a 	jmp	r4
41023350:	410242c4 	addi	r4,r8,2315
41023354:	410234b4 	orhi	r4,r8,2258
41023358:	410234b4 	orhi	r4,r8,2258
4102335c:	410242b0 	cmpltui	r4,r8,2314
41023360:	410234b4 	orhi	r4,r8,2258
41023364:	410234b4 	orhi	r4,r8,2258
41023368:	410234b4 	orhi	r4,r8,2258
4102336c:	410234b4 	orhi	r4,r8,2258
41023370:	410234b4 	orhi	r4,r8,2258
41023374:	410234b4 	orhi	r4,r8,2258
41023378:	41024090 	cmplti	r4,r8,2306
4102337c:	410242a0 	cmpeqi	r4,r8,2314
41023380:	410234b4 	orhi	r4,r8,2258
41023384:	410240a8 	cmpgeui	r4,r8,2306
41023388:	4102433c 	xorhi	r4,r8,2316
4102338c:	410234b4 	orhi	r4,r8,2258
41023390:	41024328 	cmpgeui	r4,r8,2316
41023394:	410242f0 	cmpltui	r4,r8,2315
41023398:	410242f0 	cmpltui	r4,r8,2315
4102339c:	410242f0 	cmpltui	r4,r8,2315
410233a0:	410242f0 	cmpltui	r4,r8,2315
410233a4:	410242f0 	cmpltui	r4,r8,2315
410233a8:	410242f0 	cmpltui	r4,r8,2315
410233ac:	410242f0 	cmpltui	r4,r8,2315
410233b0:	410242f0 	cmpltui	r4,r8,2315
410233b4:	410242f0 	cmpltui	r4,r8,2315
410233b8:	410234b4 	orhi	r4,r8,2258
410233bc:	410234b4 	orhi	r4,r8,2258
410233c0:	410234b4 	orhi	r4,r8,2258
410233c4:	410234b4 	orhi	r4,r8,2258
410233c8:	410234b4 	orhi	r4,r8,2258
410233cc:	410234b4 	orhi	r4,r8,2258
410233d0:	410234b4 	orhi	r4,r8,2258
410233d4:	410234b4 	orhi	r4,r8,2258
410233d8:	410234b4 	orhi	r4,r8,2258
410233dc:	410234b4 	orhi	r4,r8,2258
410233e0:	41023b0c 	andi	r4,r8,2284
410233e4:	41024178 	rdprs	r4,r8,2309
410233e8:	410234b4 	orhi	r4,r8,2258
410233ec:	41024178 	rdprs	r4,r8,2309
410233f0:	410234b4 	orhi	r4,r8,2258
410233f4:	410234b4 	orhi	r4,r8,2258
410233f8:	410234b4 	orhi	r4,r8,2258
410233fc:	410234b4 	orhi	r4,r8,2258
41023400:	410242dc 	xori	r4,r8,2315
41023404:	410234b4 	orhi	r4,r8,2258
41023408:	410234b4 	orhi	r4,r8,2258
4102340c:	41023bc0 	call	441023bc <__flash_rwdata_start+0x30cd41c>
41023410:	410234b4 	orhi	r4,r8,2258
41023414:	410234b4 	orhi	r4,r8,2258
41023418:	410234b4 	orhi	r4,r8,2258
4102341c:	410234b4 	orhi	r4,r8,2258
41023420:	410234b4 	orhi	r4,r8,2258
41023424:	41023c0c 	andi	r4,r8,2288
41023428:	410234b4 	orhi	r4,r8,2258
4102342c:	410234b4 	orhi	r4,r8,2258
41023430:	4102422c 	andhi	r4,r8,2312
41023434:	410234b4 	orhi	r4,r8,2258
41023438:	410234b4 	orhi	r4,r8,2258
4102343c:	410234b4 	orhi	r4,r8,2258
41023440:	410234b4 	orhi	r4,r8,2258
41023444:	410234b4 	orhi	r4,r8,2258
41023448:	410234b4 	orhi	r4,r8,2258
4102344c:	410234b4 	orhi	r4,r8,2258
41023450:	410234b4 	orhi	r4,r8,2258
41023454:	410234b4 	orhi	r4,r8,2258
41023458:	410234b4 	orhi	r4,r8,2258
4102345c:	41024200 	call	44102420 <__flash_rwdata_start+0x30cd480>
41023460:	41023b18 	cmpnei	r4,r8,2284
41023464:	41024178 	rdprs	r4,r8,2309
41023468:	41024178 	rdprs	r4,r8,2309
4102346c:	41024178 	rdprs	r4,r8,2309
41023470:	41024164 	muli	r4,r8,2309
41023474:	41023b18 	cmpnei	r4,r8,2284
41023478:	410234b4 	orhi	r4,r8,2258
4102347c:	410234b4 	orhi	r4,r8,2258
41023480:	410240ec 	andhi	r4,r8,2307
41023484:	410234b4 	orhi	r4,r8,2258
41023488:	410240bc 	xorhi	r4,r8,2306
4102348c:	41023bcc 	andi	r4,r8,2287
41023490:	4102411c 	xori	r4,r8,2308
41023494:	41024108 	cmpgei	r4,r8,2308
41023498:	410234b4 	orhi	r4,r8,2258
4102349c:	41024398 	cmpnei	r4,r8,2318
410234a0:	410234b4 	orhi	r4,r8,2258
410234a4:	41023c18 	cmpnei	r4,r8,2288
410234a8:	410234b4 	orhi	r4,r8,2258
410234ac:	410234b4 	orhi	r4,r8,2258
410234b0:	41024290 	cmplti	r4,r8,2314
410234b4:	d9014d17 	ldw	r4,1332(sp)
410234b8:	2000ce26 	beq	r4,zero,410237f4 <___vfprintf_internal_r+0x6d4>
410234bc:	01400044 	movi	r5,1
410234c0:	d9800f04 	addi	r6,sp,60
410234c4:	d9c14015 	stw	r7,1280(sp)
410234c8:	d9414515 	stw	r5,1300(sp)
410234cc:	d9814115 	stw	r6,1284(sp)
410234d0:	280f883a 	mov	r7,r5
410234d4:	d9000f05 	stb	r4,60(sp)
410234d8:	d8000405 	stb	zero,16(sp)
410234dc:	d8014615 	stw	zero,1304(sp)
410234e0:	d8c14c17 	ldw	r3,1328(sp)
410234e4:	1880008c 	andi	r2,r3,2
410234e8:	1005003a 	cmpeq	r2,r2,zero
410234ec:	d8815015 	stw	r2,1344(sp)
410234f0:	1000031e 	bne	r2,zero,41023500 <___vfprintf_internal_r+0x3e0>
410234f4:	d9014517 	ldw	r4,1300(sp)
410234f8:	21000084 	addi	r4,r4,2
410234fc:	d9014515 	stw	r4,1300(sp)
41023500:	d9414c17 	ldw	r5,1328(sp)
41023504:	2940210c 	andi	r5,r5,132
41023508:	d9414e15 	stw	r5,1336(sp)
4102350c:	28002d1e 	bne	r5,zero,410235c4 <___vfprintf_internal_r+0x4a4>
41023510:	d9814a17 	ldw	r6,1320(sp)
41023514:	d8814517 	ldw	r2,1300(sp)
41023518:	30a1c83a 	sub	r16,r6,r2
4102351c:	0400290e 	bge	zero,r16,410235c4 <___vfprintf_internal_r+0x4a4>
41023520:	00800404 	movi	r2,16
41023524:	1404580e 	bge	r2,r16,41024688 <___vfprintf_internal_r+0x1568>
41023528:	dc800e17 	ldw	r18,56(sp)
4102352c:	dc400d17 	ldw	r17,52(sp)
41023530:	1027883a 	mov	r19,r2
41023534:	07000034 	movhi	fp,0
41023538:	e702d484 	addi	fp,fp,2898
4102353c:	050001c4 	movi	r20,7
41023540:	00000306 	br	41023550 <___vfprintf_internal_r+0x430>
41023544:	843ffc04 	addi	r16,r16,-16
41023548:	ad400204 	addi	r21,r21,8
4102354c:	9c00130e 	bge	r19,r16,4102359c <___vfprintf_internal_r+0x47c>
41023550:	94800404 	addi	r18,r18,16
41023554:	8c400044 	addi	r17,r17,1
41023558:	af000015 	stw	fp,0(r21)
4102355c:	acc00115 	stw	r19,4(r21)
41023560:	dc800e15 	stw	r18,56(sp)
41023564:	dc400d15 	stw	r17,52(sp)
41023568:	a47ff60e 	bge	r20,r17,41023544 <___vfprintf_internal_r+0x424>
4102356c:	d9014f17 	ldw	r4,1340(sp)
41023570:	b00b883a 	mov	r5,r22
41023574:	d9800c04 	addi	r6,sp,48
41023578:	d9c15115 	stw	r7,1348(sp)
4102357c:	10230c80 	call	410230c8 <__sprint_r>
41023580:	d9c15117 	ldw	r7,1348(sp)
41023584:	10009e1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023588:	843ffc04 	addi	r16,r16,-16
4102358c:	dc800e17 	ldw	r18,56(sp)
41023590:	dc400d17 	ldw	r17,52(sp)
41023594:	dd401904 	addi	r21,sp,100
41023598:	9c3fed16 	blt	r19,r16,41023550 <___vfprintf_internal_r+0x430>
4102359c:	9425883a 	add	r18,r18,r16
410235a0:	8c400044 	addi	r17,r17,1
410235a4:	008001c4 	movi	r2,7
410235a8:	af000015 	stw	fp,0(r21)
410235ac:	ac000115 	stw	r16,4(r21)
410235b0:	dc800e15 	stw	r18,56(sp)
410235b4:	dc400d15 	stw	r17,52(sp)
410235b8:	1441f516 	blt	r2,r17,41023d90 <___vfprintf_internal_r+0xc70>
410235bc:	ad400204 	addi	r21,r21,8
410235c0:	00000206 	br	410235cc <___vfprintf_internal_r+0x4ac>
410235c4:	dc800e17 	ldw	r18,56(sp)
410235c8:	dc400d17 	ldw	r17,52(sp)
410235cc:	d8800407 	ldb	r2,16(sp)
410235d0:	10000b26 	beq	r2,zero,41023600 <___vfprintf_internal_r+0x4e0>
410235d4:	00800044 	movi	r2,1
410235d8:	94800044 	addi	r18,r18,1
410235dc:	8c400044 	addi	r17,r17,1
410235e0:	a8800115 	stw	r2,4(r21)
410235e4:	d8c00404 	addi	r3,sp,16
410235e8:	008001c4 	movi	r2,7
410235ec:	a8c00015 	stw	r3,0(r21)
410235f0:	dc800e15 	stw	r18,56(sp)
410235f4:	dc400d15 	stw	r17,52(sp)
410235f8:	1441da16 	blt	r2,r17,41023d64 <___vfprintf_internal_r+0xc44>
410235fc:	ad400204 	addi	r21,r21,8
41023600:	d9015017 	ldw	r4,1344(sp)
41023604:	20000b1e 	bne	r4,zero,41023634 <___vfprintf_internal_r+0x514>
41023608:	d8800444 	addi	r2,sp,17
4102360c:	94800084 	addi	r18,r18,2
41023610:	8c400044 	addi	r17,r17,1
41023614:	a8800015 	stw	r2,0(r21)
41023618:	00c00084 	movi	r3,2
4102361c:	008001c4 	movi	r2,7
41023620:	a8c00115 	stw	r3,4(r21)
41023624:	dc800e15 	stw	r18,56(sp)
41023628:	dc400d15 	stw	r17,52(sp)
4102362c:	1441c216 	blt	r2,r17,41023d38 <___vfprintf_internal_r+0xc18>
41023630:	ad400204 	addi	r21,r21,8
41023634:	d9414e17 	ldw	r5,1336(sp)
41023638:	00802004 	movi	r2,128
4102363c:	2880b126 	beq	r5,r2,41023904 <___vfprintf_internal_r+0x7e4>
41023640:	d8c14617 	ldw	r3,1304(sp)
41023644:	19e1c83a 	sub	r16,r3,r7
41023648:	0400260e 	bge	zero,r16,410236e4 <___vfprintf_internal_r+0x5c4>
4102364c:	00800404 	movi	r2,16
41023650:	1403c90e 	bge	r2,r16,41024578 <___vfprintf_internal_r+0x1458>
41023654:	1027883a 	mov	r19,r2
41023658:	07000034 	movhi	fp,0
4102365c:	e702d084 	addi	fp,fp,2882
41023660:	050001c4 	movi	r20,7
41023664:	00000306 	br	41023674 <___vfprintf_internal_r+0x554>
41023668:	843ffc04 	addi	r16,r16,-16
4102366c:	ad400204 	addi	r21,r21,8
41023670:	9c00130e 	bge	r19,r16,410236c0 <___vfprintf_internal_r+0x5a0>
41023674:	94800404 	addi	r18,r18,16
41023678:	8c400044 	addi	r17,r17,1
4102367c:	af000015 	stw	fp,0(r21)
41023680:	acc00115 	stw	r19,4(r21)
41023684:	dc800e15 	stw	r18,56(sp)
41023688:	dc400d15 	stw	r17,52(sp)
4102368c:	a47ff60e 	bge	r20,r17,41023668 <___vfprintf_internal_r+0x548>
41023690:	d9014f17 	ldw	r4,1340(sp)
41023694:	b00b883a 	mov	r5,r22
41023698:	d9800c04 	addi	r6,sp,48
4102369c:	d9c15115 	stw	r7,1348(sp)
410236a0:	10230c80 	call	410230c8 <__sprint_r>
410236a4:	d9c15117 	ldw	r7,1348(sp)
410236a8:	1000551e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
410236ac:	843ffc04 	addi	r16,r16,-16
410236b0:	dc800e17 	ldw	r18,56(sp)
410236b4:	dc400d17 	ldw	r17,52(sp)
410236b8:	dd401904 	addi	r21,sp,100
410236bc:	9c3fed16 	blt	r19,r16,41023674 <___vfprintf_internal_r+0x554>
410236c0:	9425883a 	add	r18,r18,r16
410236c4:	8c400044 	addi	r17,r17,1
410236c8:	008001c4 	movi	r2,7
410236cc:	af000015 	stw	fp,0(r21)
410236d0:	ac000115 	stw	r16,4(r21)
410236d4:	dc800e15 	stw	r18,56(sp)
410236d8:	dc400d15 	stw	r17,52(sp)
410236dc:	14418216 	blt	r2,r17,41023ce8 <___vfprintf_internal_r+0xbc8>
410236e0:	ad400204 	addi	r21,r21,8
410236e4:	d9014c17 	ldw	r4,1328(sp)
410236e8:	2080400c 	andi	r2,r4,256
410236ec:	10004a1e 	bne	r2,zero,41023818 <___vfprintf_internal_r+0x6f8>
410236f0:	d9414117 	ldw	r5,1284(sp)
410236f4:	91e5883a 	add	r18,r18,r7
410236f8:	8c400044 	addi	r17,r17,1
410236fc:	008001c4 	movi	r2,7
41023700:	a9400015 	stw	r5,0(r21)
41023704:	a9c00115 	stw	r7,4(r21)
41023708:	dc800e15 	stw	r18,56(sp)
4102370c:	dc400d15 	stw	r17,52(sp)
41023710:	14416716 	blt	r2,r17,41023cb0 <___vfprintf_internal_r+0xb90>
41023714:	a8c00204 	addi	r3,r21,8
41023718:	d9814c17 	ldw	r6,1328(sp)
4102371c:	3080010c 	andi	r2,r6,4
41023720:	10002826 	beq	r2,zero,410237c4 <___vfprintf_internal_r+0x6a4>
41023724:	d8814a17 	ldw	r2,1320(sp)
41023728:	d9014517 	ldw	r4,1300(sp)
4102372c:	1121c83a 	sub	r16,r2,r4
41023730:	0400240e 	bge	zero,r16,410237c4 <___vfprintf_internal_r+0x6a4>
41023734:	00800404 	movi	r2,16
41023738:	14044f0e 	bge	r2,r16,41024878 <___vfprintf_internal_r+0x1758>
4102373c:	dc400d17 	ldw	r17,52(sp)
41023740:	1027883a 	mov	r19,r2
41023744:	07000034 	movhi	fp,0
41023748:	e702d484 	addi	fp,fp,2898
4102374c:	050001c4 	movi	r20,7
41023750:	00000306 	br	41023760 <___vfprintf_internal_r+0x640>
41023754:	843ffc04 	addi	r16,r16,-16
41023758:	18c00204 	addi	r3,r3,8
4102375c:	9c00110e 	bge	r19,r16,410237a4 <___vfprintf_internal_r+0x684>
41023760:	94800404 	addi	r18,r18,16
41023764:	8c400044 	addi	r17,r17,1
41023768:	1f000015 	stw	fp,0(r3)
4102376c:	1cc00115 	stw	r19,4(r3)
41023770:	dc800e15 	stw	r18,56(sp)
41023774:	dc400d15 	stw	r17,52(sp)
41023778:	a47ff60e 	bge	r20,r17,41023754 <___vfprintf_internal_r+0x634>
4102377c:	d9014f17 	ldw	r4,1340(sp)
41023780:	b00b883a 	mov	r5,r22
41023784:	d9800c04 	addi	r6,sp,48
41023788:	10230c80 	call	410230c8 <__sprint_r>
4102378c:	10001c1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023790:	843ffc04 	addi	r16,r16,-16
41023794:	dc800e17 	ldw	r18,56(sp)
41023798:	dc400d17 	ldw	r17,52(sp)
4102379c:	d8c01904 	addi	r3,sp,100
410237a0:	9c3fef16 	blt	r19,r16,41023760 <___vfprintf_internal_r+0x640>
410237a4:	9425883a 	add	r18,r18,r16
410237a8:	8c400044 	addi	r17,r17,1
410237ac:	008001c4 	movi	r2,7
410237b0:	1f000015 	stw	fp,0(r3)
410237b4:	1c000115 	stw	r16,4(r3)
410237b8:	dc800e15 	stw	r18,56(sp)
410237bc:	dc400d15 	stw	r17,52(sp)
410237c0:	1440cb16 	blt	r2,r17,41023af0 <___vfprintf_internal_r+0x9d0>
410237c4:	d8814a17 	ldw	r2,1320(sp)
410237c8:	d9414517 	ldw	r5,1300(sp)
410237cc:	1140010e 	bge	r2,r5,410237d4 <___vfprintf_internal_r+0x6b4>
410237d0:	2805883a 	mov	r2,r5
410237d4:	d9814b17 	ldw	r6,1324(sp)
410237d8:	308d883a 	add	r6,r6,r2
410237dc:	d9814b15 	stw	r6,1324(sp)
410237e0:	90013b1e 	bne	r18,zero,41023cd0 <___vfprintf_internal_r+0xbb0>
410237e4:	d9c14017 	ldw	r7,1280(sp)
410237e8:	dd401904 	addi	r21,sp,100
410237ec:	d8000d15 	stw	zero,52(sp)
410237f0:	003ea706 	br	41023290 <___vfprintf_internal_r+0x170>
410237f4:	d8800e17 	ldw	r2,56(sp)
410237f8:	10053f1e 	bne	r2,zero,41024cf8 <___vfprintf_internal_r+0x1bd8>
410237fc:	d8000d15 	stw	zero,52(sp)
41023800:	b080030b 	ldhu	r2,12(r22)
41023804:	1080100c 	andi	r2,r2,64
41023808:	103e8726 	beq	r2,zero,41023228 <___vfprintf_internal_r+0x108>
4102380c:	00bfffc4 	movi	r2,-1
41023810:	d8814b15 	stw	r2,1324(sp)
41023814:	003e8406 	br	41023228 <___vfprintf_internal_r+0x108>
41023818:	d9814d17 	ldw	r6,1332(sp)
4102381c:	00801944 	movi	r2,101
41023820:	11806e16 	blt	r2,r6,410239dc <___vfprintf_internal_r+0x8bc>
41023824:	d9414717 	ldw	r5,1308(sp)
41023828:	00c00044 	movi	r3,1
4102382c:	1943430e 	bge	r3,r5,4102453c <___vfprintf_internal_r+0x141c>
41023830:	d8814117 	ldw	r2,1284(sp)
41023834:	94800044 	addi	r18,r18,1
41023838:	8c400044 	addi	r17,r17,1
4102383c:	a8800015 	stw	r2,0(r21)
41023840:	008001c4 	movi	r2,7
41023844:	a8c00115 	stw	r3,4(r21)
41023848:	dc800e15 	stw	r18,56(sp)
4102384c:	dc400d15 	stw	r17,52(sp)
41023850:	1441ca16 	blt	r2,r17,41023f7c <___vfprintf_internal_r+0xe5c>
41023854:	a8c00204 	addi	r3,r21,8
41023858:	d9014917 	ldw	r4,1316(sp)
4102385c:	00800044 	movi	r2,1
41023860:	94800044 	addi	r18,r18,1
41023864:	8c400044 	addi	r17,r17,1
41023868:	18800115 	stw	r2,4(r3)
4102386c:	008001c4 	movi	r2,7
41023870:	19000015 	stw	r4,0(r3)
41023874:	dc800e15 	stw	r18,56(sp)
41023878:	dc400d15 	stw	r17,52(sp)
4102387c:	1441b616 	blt	r2,r17,41023f58 <___vfprintf_internal_r+0xe38>
41023880:	1cc00204 	addi	r19,r3,8
41023884:	d9014217 	ldw	r4,1288(sp)
41023888:	d9414317 	ldw	r5,1292(sp)
4102388c:	000d883a 	mov	r6,zero
41023890:	000f883a 	mov	r7,zero
41023894:	10304180 	call	41030418 <__nedf2>
41023898:	10017426 	beq	r2,zero,41023e6c <___vfprintf_internal_r+0xd4c>
4102389c:	d9414717 	ldw	r5,1308(sp)
410238a0:	d9814117 	ldw	r6,1284(sp)
410238a4:	8c400044 	addi	r17,r17,1
410238a8:	2c85883a 	add	r2,r5,r18
410238ac:	14bfffc4 	addi	r18,r2,-1
410238b0:	28bfffc4 	addi	r2,r5,-1
410238b4:	30c00044 	addi	r3,r6,1
410238b8:	98800115 	stw	r2,4(r19)
410238bc:	008001c4 	movi	r2,7
410238c0:	98c00015 	stw	r3,0(r19)
410238c4:	dc800e15 	stw	r18,56(sp)
410238c8:	dc400d15 	stw	r17,52(sp)
410238cc:	14418e16 	blt	r2,r17,41023f08 <___vfprintf_internal_r+0xde8>
410238d0:	9cc00204 	addi	r19,r19,8
410238d4:	d9414817 	ldw	r5,1312(sp)
410238d8:	d8800804 	addi	r2,sp,32
410238dc:	8c400044 	addi	r17,r17,1
410238e0:	9165883a 	add	r18,r18,r5
410238e4:	98800015 	stw	r2,0(r19)
410238e8:	008001c4 	movi	r2,7
410238ec:	99400115 	stw	r5,4(r19)
410238f0:	dc800e15 	stw	r18,56(sp)
410238f4:	dc400d15 	stw	r17,52(sp)
410238f8:	1440ed16 	blt	r2,r17,41023cb0 <___vfprintf_internal_r+0xb90>
410238fc:	98c00204 	addi	r3,r19,8
41023900:	003f8506 	br	41023718 <___vfprintf_internal_r+0x5f8>
41023904:	d9814a17 	ldw	r6,1320(sp)
41023908:	d8814517 	ldw	r2,1300(sp)
4102390c:	30a1c83a 	sub	r16,r6,r2
41023910:	043f4b0e 	bge	zero,r16,41023640 <___vfprintf_internal_r+0x520>
41023914:	00800404 	movi	r2,16
41023918:	1404340e 	bge	r2,r16,410249ec <___vfprintf_internal_r+0x18cc>
4102391c:	1027883a 	mov	r19,r2
41023920:	07000034 	movhi	fp,0
41023924:	e702d084 	addi	fp,fp,2882
41023928:	050001c4 	movi	r20,7
4102392c:	00000306 	br	4102393c <___vfprintf_internal_r+0x81c>
41023930:	843ffc04 	addi	r16,r16,-16
41023934:	ad400204 	addi	r21,r21,8
41023938:	9c00130e 	bge	r19,r16,41023988 <___vfprintf_internal_r+0x868>
4102393c:	94800404 	addi	r18,r18,16
41023940:	8c400044 	addi	r17,r17,1
41023944:	af000015 	stw	fp,0(r21)
41023948:	acc00115 	stw	r19,4(r21)
4102394c:	dc800e15 	stw	r18,56(sp)
41023950:	dc400d15 	stw	r17,52(sp)
41023954:	a47ff60e 	bge	r20,r17,41023930 <___vfprintf_internal_r+0x810>
41023958:	d9014f17 	ldw	r4,1340(sp)
4102395c:	b00b883a 	mov	r5,r22
41023960:	d9800c04 	addi	r6,sp,48
41023964:	d9c15115 	stw	r7,1348(sp)
41023968:	10230c80 	call	410230c8 <__sprint_r>
4102396c:	d9c15117 	ldw	r7,1348(sp)
41023970:	103fa31e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023974:	843ffc04 	addi	r16,r16,-16
41023978:	dc800e17 	ldw	r18,56(sp)
4102397c:	dc400d17 	ldw	r17,52(sp)
41023980:	dd401904 	addi	r21,sp,100
41023984:	9c3fed16 	blt	r19,r16,4102393c <___vfprintf_internal_r+0x81c>
41023988:	9425883a 	add	r18,r18,r16
4102398c:	8c400044 	addi	r17,r17,1
41023990:	008001c4 	movi	r2,7
41023994:	af000015 	stw	fp,0(r21)
41023998:	ac000115 	stw	r16,4(r21)
4102399c:	dc800e15 	stw	r18,56(sp)
410239a0:	dc400d15 	stw	r17,52(sp)
410239a4:	14416116 	blt	r2,r17,41023f2c <___vfprintf_internal_r+0xe0c>
410239a8:	ad400204 	addi	r21,r21,8
410239ac:	003f2406 	br	41023640 <___vfprintf_internal_r+0x520>
410239b0:	d9014f17 	ldw	r4,1340(sp)
410239b4:	10283100 	call	41028310 <__sinit>
410239b8:	d9c15117 	ldw	r7,1348(sp)
410239bc:	003def06 	br	4102317c <___vfprintf_internal_r+0x5c>
410239c0:	d9014f17 	ldw	r4,1340(sp)
410239c4:	b00b883a 	mov	r5,r22
410239c8:	d9c15115 	stw	r7,1348(sp)
410239cc:	10267700 	call	41026770 <__swsetup_r>
410239d0:	d9c15117 	ldw	r7,1348(sp)
410239d4:	103dee26 	beq	r2,zero,41023190 <___vfprintf_internal_r+0x70>
410239d8:	003f8c06 	br	4102380c <___vfprintf_internal_r+0x6ec>
410239dc:	d9014217 	ldw	r4,1288(sp)
410239e0:	d9414317 	ldw	r5,1292(sp)
410239e4:	000d883a 	mov	r6,zero
410239e8:	000f883a 	mov	r7,zero
410239ec:	10303900 	call	41030390 <__eqdf2>
410239f0:	1000f21e 	bne	r2,zero,41023dbc <___vfprintf_internal_r+0xc9c>
410239f4:	00800034 	movhi	r2,0
410239f8:	1082d004 	addi	r2,r2,2880
410239fc:	94800044 	addi	r18,r18,1
41023a00:	8c400044 	addi	r17,r17,1
41023a04:	a8800015 	stw	r2,0(r21)
41023a08:	00c00044 	movi	r3,1
41023a0c:	008001c4 	movi	r2,7
41023a10:	a8c00115 	stw	r3,4(r21)
41023a14:	dc800e15 	stw	r18,56(sp)
41023a18:	dc400d15 	stw	r17,52(sp)
41023a1c:	1442fa16 	blt	r2,r17,41024608 <___vfprintf_internal_r+0x14e8>
41023a20:	a8c00204 	addi	r3,r21,8
41023a24:	d8800517 	ldw	r2,20(sp)
41023a28:	d9014717 	ldw	r4,1308(sp)
41023a2c:	11015c0e 	bge	r2,r4,41023fa0 <___vfprintf_internal_r+0xe80>
41023a30:	dc400d17 	ldw	r17,52(sp)
41023a34:	d9814917 	ldw	r6,1316(sp)
41023a38:	00800044 	movi	r2,1
41023a3c:	94800044 	addi	r18,r18,1
41023a40:	8c400044 	addi	r17,r17,1
41023a44:	18800115 	stw	r2,4(r3)
41023a48:	008001c4 	movi	r2,7
41023a4c:	19800015 	stw	r6,0(r3)
41023a50:	dc800e15 	stw	r18,56(sp)
41023a54:	dc400d15 	stw	r17,52(sp)
41023a58:	14431016 	blt	r2,r17,4102469c <___vfprintf_internal_r+0x157c>
41023a5c:	18c00204 	addi	r3,r3,8
41023a60:	d8814717 	ldw	r2,1308(sp)
41023a64:	143fffc4 	addi	r16,r2,-1
41023a68:	043f2b0e 	bge	zero,r16,41023718 <___vfprintf_internal_r+0x5f8>
41023a6c:	00800404 	movi	r2,16
41023a70:	1402a20e 	bge	r2,r16,410244fc <___vfprintf_internal_r+0x13dc>
41023a74:	dc400d17 	ldw	r17,52(sp)
41023a78:	1027883a 	mov	r19,r2
41023a7c:	07000034 	movhi	fp,0
41023a80:	e702d084 	addi	fp,fp,2882
41023a84:	050001c4 	movi	r20,7
41023a88:	00000306 	br	41023a98 <___vfprintf_internal_r+0x978>
41023a8c:	18c00204 	addi	r3,r3,8
41023a90:	843ffc04 	addi	r16,r16,-16
41023a94:	9c029c0e 	bge	r19,r16,41024508 <___vfprintf_internal_r+0x13e8>
41023a98:	94800404 	addi	r18,r18,16
41023a9c:	8c400044 	addi	r17,r17,1
41023aa0:	1f000015 	stw	fp,0(r3)
41023aa4:	1cc00115 	stw	r19,4(r3)
41023aa8:	dc800e15 	stw	r18,56(sp)
41023aac:	dc400d15 	stw	r17,52(sp)
41023ab0:	a47ff60e 	bge	r20,r17,41023a8c <___vfprintf_internal_r+0x96c>
41023ab4:	d9014f17 	ldw	r4,1340(sp)
41023ab8:	b00b883a 	mov	r5,r22
41023abc:	d9800c04 	addi	r6,sp,48
41023ac0:	10230c80 	call	410230c8 <__sprint_r>
41023ac4:	103f4e1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023ac8:	dc800e17 	ldw	r18,56(sp)
41023acc:	dc400d17 	ldw	r17,52(sp)
41023ad0:	d8c01904 	addi	r3,sp,100
41023ad4:	003fee06 	br	41023a90 <___vfprintf_internal_r+0x970>
41023ad8:	d8802c0b 	ldhu	r2,176(sp)
41023adc:	00ffffc4 	movi	r3,-1
41023ae0:	d8c14b15 	stw	r3,1324(sp)
41023ae4:	1080100c 	andi	r2,r2,64
41023ae8:	103dcc1e 	bne	r2,zero,4102321c <___vfprintf_internal_r+0xfc>
41023aec:	003dce06 	br	41023228 <___vfprintf_internal_r+0x108>
41023af0:	d9014f17 	ldw	r4,1340(sp)
41023af4:	b00b883a 	mov	r5,r22
41023af8:	d9800c04 	addi	r6,sp,48
41023afc:	10230c80 	call	410230c8 <__sprint_r>
41023b00:	103f3f1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023b04:	dc800e17 	ldw	r18,56(sp)
41023b08:	003f2e06 	br	410237c4 <___vfprintf_internal_r+0x6a4>
41023b0c:	d9414c17 	ldw	r5,1328(sp)
41023b10:	29400414 	ori	r5,r5,16
41023b14:	d9414c15 	stw	r5,1328(sp)
41023b18:	d9814c17 	ldw	r6,1328(sp)
41023b1c:	3080080c 	andi	r2,r6,32
41023b20:	10014f1e 	bne	r2,zero,41024060 <___vfprintf_internal_r+0xf40>
41023b24:	d8c14c17 	ldw	r3,1328(sp)
41023b28:	1880040c 	andi	r2,r3,16
41023b2c:	1002ea1e 	bne	r2,zero,410246d8 <___vfprintf_internal_r+0x15b8>
41023b30:	d9014c17 	ldw	r4,1328(sp)
41023b34:	2080100c 	andi	r2,r4,64
41023b38:	1002e726 	beq	r2,zero,410246d8 <___vfprintf_internal_r+0x15b8>
41023b3c:	3880000f 	ldh	r2,0(r7)
41023b40:	39c00104 	addi	r7,r7,4
41023b44:	d9c14015 	stw	r7,1280(sp)
41023b48:	1023d7fa 	srai	r17,r2,31
41023b4c:	1021883a 	mov	r16,r2
41023b50:	88037216 	blt	r17,zero,4102491c <___vfprintf_internal_r+0x17fc>
41023b54:	01000044 	movi	r4,1
41023b58:	98000416 	blt	r19,zero,41023b6c <___vfprintf_internal_r+0xa4c>
41023b5c:	d8c14c17 	ldw	r3,1328(sp)
41023b60:	00bfdfc4 	movi	r2,-129
41023b64:	1886703a 	and	r3,r3,r2
41023b68:	d8c14c15 	stw	r3,1328(sp)
41023b6c:	8444b03a 	or	r2,r16,r17
41023b70:	1002261e 	bne	r2,zero,4102440c <___vfprintf_internal_r+0x12ec>
41023b74:	9802251e 	bne	r19,zero,4102440c <___vfprintf_internal_r+0x12ec>
41023b78:	20803fcc 	andi	r2,r4,255
41023b7c:	10029b26 	beq	r2,zero,410245ec <___vfprintf_internal_r+0x14cc>
41023b80:	d8c01904 	addi	r3,sp,100
41023b84:	dd000f04 	addi	r20,sp,60
41023b88:	d8c14115 	stw	r3,1284(sp)
41023b8c:	d8c14117 	ldw	r3,1284(sp)
41023b90:	dcc14515 	stw	r19,1300(sp)
41023b94:	a0c5c83a 	sub	r2,r20,r3
41023b98:	11c00a04 	addi	r7,r2,40
41023b9c:	99c0010e 	bge	r19,r7,41023ba4 <___vfprintf_internal_r+0xa84>
41023ba0:	d9c14515 	stw	r7,1300(sp)
41023ba4:	dcc14615 	stw	r19,1304(sp)
41023ba8:	d8800407 	ldb	r2,16(sp)
41023bac:	103e4c26 	beq	r2,zero,410234e0 <___vfprintf_internal_r+0x3c0>
41023bb0:	d8814517 	ldw	r2,1300(sp)
41023bb4:	10800044 	addi	r2,r2,1
41023bb8:	d8814515 	stw	r2,1300(sp)
41023bbc:	003e4806 	br	410234e0 <___vfprintf_internal_r+0x3c0>
41023bc0:	d9814c17 	ldw	r6,1328(sp)
41023bc4:	31800414 	ori	r6,r6,16
41023bc8:	d9814c15 	stw	r6,1328(sp)
41023bcc:	d8c14c17 	ldw	r3,1328(sp)
41023bd0:	1880080c 	andi	r2,r3,32
41023bd4:	1001271e 	bne	r2,zero,41024074 <___vfprintf_internal_r+0xf54>
41023bd8:	d9414c17 	ldw	r5,1328(sp)
41023bdc:	2880040c 	andi	r2,r5,16
41023be0:	1002b61e 	bne	r2,zero,410246bc <___vfprintf_internal_r+0x159c>
41023be4:	d9814c17 	ldw	r6,1328(sp)
41023be8:	3080100c 	andi	r2,r6,64
41023bec:	1002b326 	beq	r2,zero,410246bc <___vfprintf_internal_r+0x159c>
41023bf0:	3c00000b 	ldhu	r16,0(r7)
41023bf4:	0009883a 	mov	r4,zero
41023bf8:	39c00104 	addi	r7,r7,4
41023bfc:	0023883a 	mov	r17,zero
41023c00:	d9c14015 	stw	r7,1280(sp)
41023c04:	d8000405 	stb	zero,16(sp)
41023c08:	003fd306 	br	41023b58 <___vfprintf_internal_r+0xa38>
41023c0c:	d9014c17 	ldw	r4,1328(sp)
41023c10:	21000414 	ori	r4,r4,16
41023c14:	d9014c15 	stw	r4,1328(sp)
41023c18:	d9414c17 	ldw	r5,1328(sp)
41023c1c:	2880080c 	andi	r2,r5,32
41023c20:	1001081e 	bne	r2,zero,41024044 <___vfprintf_internal_r+0xf24>
41023c24:	d8c14c17 	ldw	r3,1328(sp)
41023c28:	1880040c 	andi	r2,r3,16
41023c2c:	1002b01e 	bne	r2,zero,410246f0 <___vfprintf_internal_r+0x15d0>
41023c30:	d9014c17 	ldw	r4,1328(sp)
41023c34:	2080100c 	andi	r2,r4,64
41023c38:	1002ad26 	beq	r2,zero,410246f0 <___vfprintf_internal_r+0x15d0>
41023c3c:	3c00000b 	ldhu	r16,0(r7)
41023c40:	01000044 	movi	r4,1
41023c44:	39c00104 	addi	r7,r7,4
41023c48:	0023883a 	mov	r17,zero
41023c4c:	d9c14015 	stw	r7,1280(sp)
41023c50:	d8000405 	stb	zero,16(sp)
41023c54:	003fc006 	br	41023b58 <___vfprintf_internal_r+0xa38>
41023c58:	d9014f17 	ldw	r4,1340(sp)
41023c5c:	b00b883a 	mov	r5,r22
41023c60:	d9800c04 	addi	r6,sp,48
41023c64:	10230c80 	call	410230c8 <__sprint_r>
41023c68:	103ee51e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023c6c:	dc800e17 	ldw	r18,56(sp)
41023c70:	d8c01904 	addi	r3,sp,100
41023c74:	d9814c17 	ldw	r6,1328(sp)
41023c78:	3080004c 	andi	r2,r6,1
41023c7c:	1005003a 	cmpeq	r2,r2,zero
41023c80:	103ea51e 	bne	r2,zero,41023718 <___vfprintf_internal_r+0x5f8>
41023c84:	00800044 	movi	r2,1
41023c88:	dc400d17 	ldw	r17,52(sp)
41023c8c:	18800115 	stw	r2,4(r3)
41023c90:	d8814917 	ldw	r2,1316(sp)
41023c94:	94800044 	addi	r18,r18,1
41023c98:	8c400044 	addi	r17,r17,1
41023c9c:	18800015 	stw	r2,0(r3)
41023ca0:	008001c4 	movi	r2,7
41023ca4:	dc800e15 	stw	r18,56(sp)
41023ca8:	dc400d15 	stw	r17,52(sp)
41023cac:	14421e0e 	bge	r2,r17,41024528 <___vfprintf_internal_r+0x1408>
41023cb0:	d9014f17 	ldw	r4,1340(sp)
41023cb4:	b00b883a 	mov	r5,r22
41023cb8:	d9800c04 	addi	r6,sp,48
41023cbc:	10230c80 	call	410230c8 <__sprint_r>
41023cc0:	103ecf1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023cc4:	dc800e17 	ldw	r18,56(sp)
41023cc8:	d8c01904 	addi	r3,sp,100
41023ccc:	003e9206 	br	41023718 <___vfprintf_internal_r+0x5f8>
41023cd0:	d9014f17 	ldw	r4,1340(sp)
41023cd4:	b00b883a 	mov	r5,r22
41023cd8:	d9800c04 	addi	r6,sp,48
41023cdc:	10230c80 	call	410230c8 <__sprint_r>
41023ce0:	103ec026 	beq	r2,zero,410237e4 <___vfprintf_internal_r+0x6c4>
41023ce4:	003ec606 	br	41023800 <___vfprintf_internal_r+0x6e0>
41023ce8:	d9014f17 	ldw	r4,1340(sp)
41023cec:	b00b883a 	mov	r5,r22
41023cf0:	d9800c04 	addi	r6,sp,48
41023cf4:	d9c15115 	stw	r7,1348(sp)
41023cf8:	10230c80 	call	410230c8 <__sprint_r>
41023cfc:	d9c15117 	ldw	r7,1348(sp)
41023d00:	103ebf1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023d04:	dc800e17 	ldw	r18,56(sp)
41023d08:	dc400d17 	ldw	r17,52(sp)
41023d0c:	dd401904 	addi	r21,sp,100
41023d10:	003e7406 	br	410236e4 <___vfprintf_internal_r+0x5c4>
41023d14:	d9014f17 	ldw	r4,1340(sp)
41023d18:	b00b883a 	mov	r5,r22
41023d1c:	d9800c04 	addi	r6,sp,48
41023d20:	d9c15115 	stw	r7,1348(sp)
41023d24:	10230c80 	call	410230c8 <__sprint_r>
41023d28:	d9c15117 	ldw	r7,1348(sp)
41023d2c:	103eb41e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023d30:	dd401904 	addi	r21,sp,100
41023d34:	003d6d06 	br	410232ec <___vfprintf_internal_r+0x1cc>
41023d38:	d9014f17 	ldw	r4,1340(sp)
41023d3c:	b00b883a 	mov	r5,r22
41023d40:	d9800c04 	addi	r6,sp,48
41023d44:	d9c15115 	stw	r7,1348(sp)
41023d48:	10230c80 	call	410230c8 <__sprint_r>
41023d4c:	d9c15117 	ldw	r7,1348(sp)
41023d50:	103eab1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023d54:	dc800e17 	ldw	r18,56(sp)
41023d58:	dc400d17 	ldw	r17,52(sp)
41023d5c:	dd401904 	addi	r21,sp,100
41023d60:	003e3406 	br	41023634 <___vfprintf_internal_r+0x514>
41023d64:	d9014f17 	ldw	r4,1340(sp)
41023d68:	b00b883a 	mov	r5,r22
41023d6c:	d9800c04 	addi	r6,sp,48
41023d70:	d9c15115 	stw	r7,1348(sp)
41023d74:	10230c80 	call	410230c8 <__sprint_r>
41023d78:	d9c15117 	ldw	r7,1348(sp)
41023d7c:	103ea01e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023d80:	dc800e17 	ldw	r18,56(sp)
41023d84:	dc400d17 	ldw	r17,52(sp)
41023d88:	dd401904 	addi	r21,sp,100
41023d8c:	003e1c06 	br	41023600 <___vfprintf_internal_r+0x4e0>
41023d90:	d9014f17 	ldw	r4,1340(sp)
41023d94:	b00b883a 	mov	r5,r22
41023d98:	d9800c04 	addi	r6,sp,48
41023d9c:	d9c15115 	stw	r7,1348(sp)
41023da0:	10230c80 	call	410230c8 <__sprint_r>
41023da4:	d9c15117 	ldw	r7,1348(sp)
41023da8:	103e951e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023dac:	dc800e17 	ldw	r18,56(sp)
41023db0:	dc400d17 	ldw	r17,52(sp)
41023db4:	dd401904 	addi	r21,sp,100
41023db8:	003e0406 	br	410235cc <___vfprintf_internal_r+0x4ac>
41023dbc:	d9000517 	ldw	r4,20(sp)
41023dc0:	0102520e 	bge	zero,r4,4102470c <___vfprintf_internal_r+0x15ec>
41023dc4:	d9814717 	ldw	r6,1308(sp)
41023dc8:	21807a16 	blt	r4,r6,41023fb4 <___vfprintf_internal_r+0xe94>
41023dcc:	d8814117 	ldw	r2,1284(sp)
41023dd0:	91a5883a 	add	r18,r18,r6
41023dd4:	8c400044 	addi	r17,r17,1
41023dd8:	a8800015 	stw	r2,0(r21)
41023ddc:	008001c4 	movi	r2,7
41023de0:	a9800115 	stw	r6,4(r21)
41023de4:	dc800e15 	stw	r18,56(sp)
41023de8:	dc400d15 	stw	r17,52(sp)
41023dec:	1442f616 	blt	r2,r17,410249c8 <___vfprintf_internal_r+0x18a8>
41023df0:	a8c00204 	addi	r3,r21,8
41023df4:	d9414717 	ldw	r5,1308(sp)
41023df8:	2161c83a 	sub	r16,r4,r5
41023dfc:	043f9d0e 	bge	zero,r16,41023c74 <___vfprintf_internal_r+0xb54>
41023e00:	00800404 	movi	r2,16
41023e04:	1402130e 	bge	r2,r16,41024654 <___vfprintf_internal_r+0x1534>
41023e08:	dc400d17 	ldw	r17,52(sp)
41023e0c:	1027883a 	mov	r19,r2
41023e10:	07000034 	movhi	fp,0
41023e14:	e702d084 	addi	fp,fp,2882
41023e18:	050001c4 	movi	r20,7
41023e1c:	00000306 	br	41023e2c <___vfprintf_internal_r+0xd0c>
41023e20:	18c00204 	addi	r3,r3,8
41023e24:	843ffc04 	addi	r16,r16,-16
41023e28:	9c020d0e 	bge	r19,r16,41024660 <___vfprintf_internal_r+0x1540>
41023e2c:	94800404 	addi	r18,r18,16
41023e30:	8c400044 	addi	r17,r17,1
41023e34:	1f000015 	stw	fp,0(r3)
41023e38:	1cc00115 	stw	r19,4(r3)
41023e3c:	dc800e15 	stw	r18,56(sp)
41023e40:	dc400d15 	stw	r17,52(sp)
41023e44:	a47ff60e 	bge	r20,r17,41023e20 <___vfprintf_internal_r+0xd00>
41023e48:	d9014f17 	ldw	r4,1340(sp)
41023e4c:	b00b883a 	mov	r5,r22
41023e50:	d9800c04 	addi	r6,sp,48
41023e54:	10230c80 	call	410230c8 <__sprint_r>
41023e58:	103e691e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023e5c:	dc800e17 	ldw	r18,56(sp)
41023e60:	dc400d17 	ldw	r17,52(sp)
41023e64:	d8c01904 	addi	r3,sp,100
41023e68:	003fee06 	br	41023e24 <___vfprintf_internal_r+0xd04>
41023e6c:	d8814717 	ldw	r2,1308(sp)
41023e70:	143fffc4 	addi	r16,r2,-1
41023e74:	043e970e 	bge	zero,r16,410238d4 <___vfprintf_internal_r+0x7b4>
41023e78:	00800404 	movi	r2,16
41023e7c:	1400180e 	bge	r2,r16,41023ee0 <___vfprintf_internal_r+0xdc0>
41023e80:	1029883a 	mov	r20,r2
41023e84:	07000034 	movhi	fp,0
41023e88:	e702d084 	addi	fp,fp,2882
41023e8c:	054001c4 	movi	r21,7
41023e90:	00000306 	br	41023ea0 <___vfprintf_internal_r+0xd80>
41023e94:	9cc00204 	addi	r19,r19,8
41023e98:	843ffc04 	addi	r16,r16,-16
41023e9c:	a400120e 	bge	r20,r16,41023ee8 <___vfprintf_internal_r+0xdc8>
41023ea0:	94800404 	addi	r18,r18,16
41023ea4:	8c400044 	addi	r17,r17,1
41023ea8:	9f000015 	stw	fp,0(r19)
41023eac:	9d000115 	stw	r20,4(r19)
41023eb0:	dc800e15 	stw	r18,56(sp)
41023eb4:	dc400d15 	stw	r17,52(sp)
41023eb8:	ac7ff60e 	bge	r21,r17,41023e94 <___vfprintf_internal_r+0xd74>
41023ebc:	d9014f17 	ldw	r4,1340(sp)
41023ec0:	b00b883a 	mov	r5,r22
41023ec4:	d9800c04 	addi	r6,sp,48
41023ec8:	10230c80 	call	410230c8 <__sprint_r>
41023ecc:	103e4c1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023ed0:	dc800e17 	ldw	r18,56(sp)
41023ed4:	dc400d17 	ldw	r17,52(sp)
41023ed8:	dcc01904 	addi	r19,sp,100
41023edc:	003fee06 	br	41023e98 <___vfprintf_internal_r+0xd78>
41023ee0:	07000034 	movhi	fp,0
41023ee4:	e702d084 	addi	fp,fp,2882
41023ee8:	9425883a 	add	r18,r18,r16
41023eec:	8c400044 	addi	r17,r17,1
41023ef0:	008001c4 	movi	r2,7
41023ef4:	9f000015 	stw	fp,0(r19)
41023ef8:	9c000115 	stw	r16,4(r19)
41023efc:	dc800e15 	stw	r18,56(sp)
41023f00:	dc400d15 	stw	r17,52(sp)
41023f04:	147e720e 	bge	r2,r17,410238d0 <___vfprintf_internal_r+0x7b0>
41023f08:	d9014f17 	ldw	r4,1340(sp)
41023f0c:	b00b883a 	mov	r5,r22
41023f10:	d9800c04 	addi	r6,sp,48
41023f14:	10230c80 	call	410230c8 <__sprint_r>
41023f18:	103e391e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023f1c:	dc800e17 	ldw	r18,56(sp)
41023f20:	dc400d17 	ldw	r17,52(sp)
41023f24:	dcc01904 	addi	r19,sp,100
41023f28:	003e6a06 	br	410238d4 <___vfprintf_internal_r+0x7b4>
41023f2c:	d9014f17 	ldw	r4,1340(sp)
41023f30:	b00b883a 	mov	r5,r22
41023f34:	d9800c04 	addi	r6,sp,48
41023f38:	d9c15115 	stw	r7,1348(sp)
41023f3c:	10230c80 	call	410230c8 <__sprint_r>
41023f40:	d9c15117 	ldw	r7,1348(sp)
41023f44:	103e2e1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023f48:	dc800e17 	ldw	r18,56(sp)
41023f4c:	dc400d17 	ldw	r17,52(sp)
41023f50:	dd401904 	addi	r21,sp,100
41023f54:	003dba06 	br	41023640 <___vfprintf_internal_r+0x520>
41023f58:	d9014f17 	ldw	r4,1340(sp)
41023f5c:	b00b883a 	mov	r5,r22
41023f60:	d9800c04 	addi	r6,sp,48
41023f64:	10230c80 	call	410230c8 <__sprint_r>
41023f68:	103e251e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023f6c:	dc800e17 	ldw	r18,56(sp)
41023f70:	dc400d17 	ldw	r17,52(sp)
41023f74:	dcc01904 	addi	r19,sp,100
41023f78:	003e4206 	br	41023884 <___vfprintf_internal_r+0x764>
41023f7c:	d9014f17 	ldw	r4,1340(sp)
41023f80:	b00b883a 	mov	r5,r22
41023f84:	d9800c04 	addi	r6,sp,48
41023f88:	10230c80 	call	410230c8 <__sprint_r>
41023f8c:	103e1c1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41023f90:	dc800e17 	ldw	r18,56(sp)
41023f94:	dc400d17 	ldw	r17,52(sp)
41023f98:	d8c01904 	addi	r3,sp,100
41023f9c:	003e2e06 	br	41023858 <___vfprintf_internal_r+0x738>
41023fa0:	d9414c17 	ldw	r5,1328(sp)
41023fa4:	2880004c 	andi	r2,r5,1
41023fa8:	1005003a 	cmpeq	r2,r2,zero
41023fac:	103dda1e 	bne	r2,zero,41023718 <___vfprintf_internal_r+0x5f8>
41023fb0:	003e9f06 	br	41023a30 <___vfprintf_internal_r+0x910>
41023fb4:	d8c14117 	ldw	r3,1284(sp)
41023fb8:	9125883a 	add	r18,r18,r4
41023fbc:	8c400044 	addi	r17,r17,1
41023fc0:	008001c4 	movi	r2,7
41023fc4:	a8c00015 	stw	r3,0(r21)
41023fc8:	a9000115 	stw	r4,4(r21)
41023fcc:	dc800e15 	stw	r18,56(sp)
41023fd0:	dc400d15 	stw	r17,52(sp)
41023fd4:	14426616 	blt	r2,r17,41024970 <___vfprintf_internal_r+0x1850>
41023fd8:	a8c00204 	addi	r3,r21,8
41023fdc:	d9414917 	ldw	r5,1316(sp)
41023fe0:	00800044 	movi	r2,1
41023fe4:	94800044 	addi	r18,r18,1
41023fe8:	8c400044 	addi	r17,r17,1
41023fec:	18800115 	stw	r2,4(r3)
41023ff0:	008001c4 	movi	r2,7
41023ff4:	19400015 	stw	r5,0(r3)
41023ff8:	dc800e15 	stw	r18,56(sp)
41023ffc:	dc400d15 	stw	r17,52(sp)
41024000:	2021883a 	mov	r16,r4
41024004:	14425016 	blt	r2,r17,41024948 <___vfprintf_internal_r+0x1828>
41024008:	19400204 	addi	r5,r3,8
4102400c:	d9814717 	ldw	r6,1308(sp)
41024010:	8c400044 	addi	r17,r17,1
41024014:	dc400d15 	stw	r17,52(sp)
41024018:	3107c83a 	sub	r3,r6,r4
4102401c:	d9014117 	ldw	r4,1284(sp)
41024020:	90e5883a 	add	r18,r18,r3
41024024:	28c00115 	stw	r3,4(r5)
41024028:	8105883a 	add	r2,r16,r4
4102402c:	28800015 	stw	r2,0(r5)
41024030:	008001c4 	movi	r2,7
41024034:	dc800e15 	stw	r18,56(sp)
41024038:	147f1d16 	blt	r2,r17,41023cb0 <___vfprintf_internal_r+0xb90>
4102403c:	28c00204 	addi	r3,r5,8
41024040:	003db506 	br	41023718 <___vfprintf_internal_r+0x5f8>
41024044:	3c000017 	ldw	r16,0(r7)
41024048:	3c400117 	ldw	r17,4(r7)
4102404c:	39800204 	addi	r6,r7,8
41024050:	01000044 	movi	r4,1
41024054:	d9814015 	stw	r6,1280(sp)
41024058:	d8000405 	stb	zero,16(sp)
4102405c:	003ebe06 	br	41023b58 <___vfprintf_internal_r+0xa38>
41024060:	3c000017 	ldw	r16,0(r7)
41024064:	3c400117 	ldw	r17,4(r7)
41024068:	38800204 	addi	r2,r7,8
4102406c:	d8814015 	stw	r2,1280(sp)
41024070:	003eb706 	br	41023b50 <___vfprintf_internal_r+0xa30>
41024074:	3c000017 	ldw	r16,0(r7)
41024078:	3c400117 	ldw	r17,4(r7)
4102407c:	39000204 	addi	r4,r7,8
41024080:	d9014015 	stw	r4,1280(sp)
41024084:	0009883a 	mov	r4,zero
41024088:	d8000405 	stb	zero,16(sp)
4102408c:	003eb206 	br	41023b58 <___vfprintf_internal_r+0xa38>
41024090:	38c00017 	ldw	r3,0(r7)
41024094:	39c00104 	addi	r7,r7,4
41024098:	d8c14a15 	stw	r3,1320(sp)
4102409c:	1800d10e 	bge	r3,zero,410243e4 <___vfprintf_internal_r+0x12c4>
410240a0:	00c7c83a 	sub	r3,zero,r3
410240a4:	d8c14a15 	stw	r3,1320(sp)
410240a8:	d9014c17 	ldw	r4,1328(sp)
410240ac:	b8c00007 	ldb	r3,0(r23)
410240b0:	21000114 	ori	r4,r4,4
410240b4:	d9014c15 	stw	r4,1328(sp)
410240b8:	003c9806 	br	4102331c <___vfprintf_internal_r+0x1fc>
410240bc:	d9814c17 	ldw	r6,1328(sp)
410240c0:	3080080c 	andi	r2,r6,32
410240c4:	1001f026 	beq	r2,zero,41024888 <___vfprintf_internal_r+0x1768>
410240c8:	d9014b17 	ldw	r4,1324(sp)
410240cc:	38800017 	ldw	r2,0(r7)
410240d0:	39c00104 	addi	r7,r7,4
410240d4:	d9c14015 	stw	r7,1280(sp)
410240d8:	2007d7fa 	srai	r3,r4,31
410240dc:	d9c14017 	ldw	r7,1280(sp)
410240e0:	11000015 	stw	r4,0(r2)
410240e4:	10c00115 	stw	r3,4(r2)
410240e8:	003c6906 	br	41023290 <___vfprintf_internal_r+0x170>
410240ec:	b8c00007 	ldb	r3,0(r23)
410240f0:	00801b04 	movi	r2,108
410240f4:	18824f26 	beq	r3,r2,41024a34 <___vfprintf_internal_r+0x1914>
410240f8:	d9414c17 	ldw	r5,1328(sp)
410240fc:	29400414 	ori	r5,r5,16
41024100:	d9414c15 	stw	r5,1328(sp)
41024104:	003c8506 	br	4102331c <___vfprintf_internal_r+0x1fc>
41024108:	d9814c17 	ldw	r6,1328(sp)
4102410c:	b8c00007 	ldb	r3,0(r23)
41024110:	31800814 	ori	r6,r6,32
41024114:	d9814c15 	stw	r6,1328(sp)
41024118:	003c8006 	br	4102331c <___vfprintf_internal_r+0x1fc>
4102411c:	d8814c17 	ldw	r2,1328(sp)
41024120:	3c000017 	ldw	r16,0(r7)
41024124:	00c01e04 	movi	r3,120
41024128:	10800094 	ori	r2,r2,2
4102412c:	d8814c15 	stw	r2,1328(sp)
41024130:	39c00104 	addi	r7,r7,4
41024134:	01400034 	movhi	r5,0
41024138:	2942b904 	addi	r5,r5,2788
4102413c:	00800c04 	movi	r2,48
41024140:	0023883a 	mov	r17,zero
41024144:	01000084 	movi	r4,2
41024148:	d9c14015 	stw	r7,1280(sp)
4102414c:	d8c14d15 	stw	r3,1332(sp)
41024150:	d9414415 	stw	r5,1296(sp)
41024154:	d8800445 	stb	r2,17(sp)
41024158:	d8c00485 	stb	r3,18(sp)
4102415c:	d8000405 	stb	zero,16(sp)
41024160:	003e7d06 	br	41023b58 <___vfprintf_internal_r+0xa38>
41024164:	d8814c17 	ldw	r2,1328(sp)
41024168:	b8c00007 	ldb	r3,0(r23)
4102416c:	10801014 	ori	r2,r2,64
41024170:	d8814c15 	stw	r2,1328(sp)
41024174:	003c6906 	br	4102331c <___vfprintf_internal_r+0x1fc>
41024178:	d9414c17 	ldw	r5,1328(sp)
4102417c:	2880020c 	andi	r2,r5,8
41024180:	1001df26 	beq	r2,zero,41024900 <___vfprintf_internal_r+0x17e0>
41024184:	39800017 	ldw	r6,0(r7)
41024188:	38800204 	addi	r2,r7,8
4102418c:	d8814015 	stw	r2,1280(sp)
41024190:	d9814215 	stw	r6,1288(sp)
41024194:	39c00117 	ldw	r7,4(r7)
41024198:	d9c14315 	stw	r7,1292(sp)
4102419c:	d9014217 	ldw	r4,1288(sp)
410241a0:	d9414317 	ldw	r5,1292(sp)
410241a4:	102b1940 	call	4102b194 <__isinfd>
410241a8:	10021726 	beq	r2,zero,41024a08 <___vfprintf_internal_r+0x18e8>
410241ac:	d9014217 	ldw	r4,1288(sp)
410241b0:	d9414317 	ldw	r5,1292(sp)
410241b4:	000d883a 	mov	r6,zero
410241b8:	000f883a 	mov	r7,zero
410241bc:	10305b00 	call	410305b0 <__ltdf2>
410241c0:	1002ca16 	blt	r2,zero,41024cec <___vfprintf_internal_r+0x1bcc>
410241c4:	d9414d17 	ldw	r5,1332(sp)
410241c8:	008011c4 	movi	r2,71
410241cc:	11420a16 	blt	r2,r5,410249f8 <___vfprintf_internal_r+0x18d8>
410241d0:	01800034 	movhi	r6,0
410241d4:	3182be04 	addi	r6,r6,2808
410241d8:	d9814115 	stw	r6,1284(sp)
410241dc:	d9014c17 	ldw	r4,1328(sp)
410241e0:	00c000c4 	movi	r3,3
410241e4:	00bfdfc4 	movi	r2,-129
410241e8:	2088703a 	and	r4,r4,r2
410241ec:	180f883a 	mov	r7,r3
410241f0:	d8c14515 	stw	r3,1300(sp)
410241f4:	d9014c15 	stw	r4,1328(sp)
410241f8:	d8014615 	stw	zero,1304(sp)
410241fc:	003e6a06 	br	41023ba8 <___vfprintf_internal_r+0xa88>
41024200:	38800017 	ldw	r2,0(r7)
41024204:	00c00044 	movi	r3,1
41024208:	39c00104 	addi	r7,r7,4
4102420c:	d9c14015 	stw	r7,1280(sp)
41024210:	d9000f04 	addi	r4,sp,60
41024214:	180f883a 	mov	r7,r3
41024218:	d8c14515 	stw	r3,1300(sp)
4102421c:	d9014115 	stw	r4,1284(sp)
41024220:	d8800f05 	stb	r2,60(sp)
41024224:	d8000405 	stb	zero,16(sp)
41024228:	003cac06 	br	410234dc <___vfprintf_internal_r+0x3bc>
4102422c:	01400034 	movhi	r5,0
41024230:	2942c404 	addi	r5,r5,2832
41024234:	d9414415 	stw	r5,1296(sp)
41024238:	d9814c17 	ldw	r6,1328(sp)
4102423c:	3080080c 	andi	r2,r6,32
41024240:	1000f926 	beq	r2,zero,41024628 <___vfprintf_internal_r+0x1508>
41024244:	3c000017 	ldw	r16,0(r7)
41024248:	3c400117 	ldw	r17,4(r7)
4102424c:	38800204 	addi	r2,r7,8
41024250:	d8814015 	stw	r2,1280(sp)
41024254:	d9414c17 	ldw	r5,1328(sp)
41024258:	2880004c 	andi	r2,r5,1
4102425c:	1005003a 	cmpeq	r2,r2,zero
41024260:	1000b31e 	bne	r2,zero,41024530 <___vfprintf_internal_r+0x1410>
41024264:	8444b03a 	or	r2,r16,r17
41024268:	1000b126 	beq	r2,zero,41024530 <___vfprintf_internal_r+0x1410>
4102426c:	d9814d17 	ldw	r6,1332(sp)
41024270:	29400094 	ori	r5,r5,2
41024274:	00800c04 	movi	r2,48
41024278:	01000084 	movi	r4,2
4102427c:	d9414c15 	stw	r5,1328(sp)
41024280:	d8800445 	stb	r2,17(sp)
41024284:	d9800485 	stb	r6,18(sp)
41024288:	d8000405 	stb	zero,16(sp)
4102428c:	003e3206 	br	41023b58 <___vfprintf_internal_r+0xa38>
41024290:	01800034 	movhi	r6,0
41024294:	3182b904 	addi	r6,r6,2788
41024298:	d9814415 	stw	r6,1296(sp)
4102429c:	003fe606 	br	41024238 <___vfprintf_internal_r+0x1118>
410242a0:	00800ac4 	movi	r2,43
410242a4:	d8800405 	stb	r2,16(sp)
410242a8:	b8c00007 	ldb	r3,0(r23)
410242ac:	003c1b06 	br	4102331c <___vfprintf_internal_r+0x1fc>
410242b0:	d8814c17 	ldw	r2,1328(sp)
410242b4:	b8c00007 	ldb	r3,0(r23)
410242b8:	10800054 	ori	r2,r2,1
410242bc:	d8814c15 	stw	r2,1328(sp)
410242c0:	003c1606 	br	4102331c <___vfprintf_internal_r+0x1fc>
410242c4:	d8800407 	ldb	r2,16(sp)
410242c8:	1000461e 	bne	r2,zero,410243e4 <___vfprintf_internal_r+0x12c4>
410242cc:	00800804 	movi	r2,32
410242d0:	d8800405 	stb	r2,16(sp)
410242d4:	b8c00007 	ldb	r3,0(r23)
410242d8:	003c1006 	br	4102331c <___vfprintf_internal_r+0x1fc>
410242dc:	d9814c17 	ldw	r6,1328(sp)
410242e0:	b8c00007 	ldb	r3,0(r23)
410242e4:	31800214 	ori	r6,r6,8
410242e8:	d9814c15 	stw	r6,1328(sp)
410242ec:	003c0b06 	br	4102331c <___vfprintf_internal_r+0x1fc>
410242f0:	0007883a 	mov	r3,zero
410242f4:	01000244 	movi	r4,9
410242f8:	188002a4 	muli	r2,r3,10
410242fc:	b8c00007 	ldb	r3,0(r23)
41024300:	d9814d17 	ldw	r6,1332(sp)
41024304:	bdc00044 	addi	r23,r23,1
41024308:	d8c14d15 	stw	r3,1332(sp)
4102430c:	d9414d17 	ldw	r5,1332(sp)
41024310:	3085883a 	add	r2,r6,r2
41024314:	10fff404 	addi	r3,r2,-48
41024318:	28bff404 	addi	r2,r5,-48
4102431c:	20bff62e 	bgeu	r4,r2,410242f8 <___vfprintf_internal_r+0x11d8>
41024320:	d8c14a15 	stw	r3,1320(sp)
41024324:	003bff06 	br	41023324 <___vfprintf_internal_r+0x204>
41024328:	d9414c17 	ldw	r5,1328(sp)
4102432c:	b8c00007 	ldb	r3,0(r23)
41024330:	29402014 	ori	r5,r5,128
41024334:	d9414c15 	stw	r5,1328(sp)
41024338:	003bf806 	br	4102331c <___vfprintf_internal_r+0x1fc>
4102433c:	b8c00007 	ldb	r3,0(r23)
41024340:	00800a84 	movi	r2,42
41024344:	bdc00044 	addi	r23,r23,1
41024348:	18831526 	beq	r3,r2,41024fa0 <___vfprintf_internal_r+0x1e80>
4102434c:	d8c14d15 	stw	r3,1332(sp)
41024350:	18bff404 	addi	r2,r3,-48
41024354:	00c00244 	movi	r3,9
41024358:	18827836 	bltu	r3,r2,41024d3c <___vfprintf_internal_r+0x1c1c>
4102435c:	000d883a 	mov	r6,zero
41024360:	308002a4 	muli	r2,r6,10
41024364:	b9800007 	ldb	r6,0(r23)
41024368:	d9414d17 	ldw	r5,1332(sp)
4102436c:	bdc00044 	addi	r23,r23,1
41024370:	d9814d15 	stw	r6,1332(sp)
41024374:	d9014d17 	ldw	r4,1332(sp)
41024378:	1145883a 	add	r2,r2,r5
4102437c:	11bff404 	addi	r6,r2,-48
41024380:	20bff404 	addi	r2,r4,-48
41024384:	18bff62e 	bgeu	r3,r2,41024360 <___vfprintf_internal_r+0x1240>
41024388:	3027883a 	mov	r19,r6
4102438c:	303be50e 	bge	r6,zero,41023324 <___vfprintf_internal_r+0x204>
41024390:	04ffffc4 	movi	r19,-1
41024394:	003be306 	br	41023324 <___vfprintf_internal_r+0x204>
41024398:	d8000405 	stb	zero,16(sp)
4102439c:	39800017 	ldw	r6,0(r7)
410243a0:	39c00104 	addi	r7,r7,4
410243a4:	d9c14015 	stw	r7,1280(sp)
410243a8:	d9814115 	stw	r6,1284(sp)
410243ac:	3001c926 	beq	r6,zero,41024ad4 <___vfprintf_internal_r+0x19b4>
410243b0:	98000e16 	blt	r19,zero,410243ec <___vfprintf_internal_r+0x12cc>
410243b4:	d9014117 	ldw	r4,1284(sp)
410243b8:	000b883a 	mov	r5,zero
410243bc:	980d883a 	mov	r6,r19
410243c0:	10295840 	call	41029584 <memchr>
410243c4:	10025926 	beq	r2,zero,41024d2c <___vfprintf_internal_r+0x1c0c>
410243c8:	d8c14117 	ldw	r3,1284(sp)
410243cc:	10cfc83a 	sub	r7,r2,r3
410243d0:	99c19e16 	blt	r19,r7,41024a4c <___vfprintf_internal_r+0x192c>
410243d4:	d9c14515 	stw	r7,1300(sp)
410243d8:	38000916 	blt	r7,zero,41024400 <___vfprintf_internal_r+0x12e0>
410243dc:	d8014615 	stw	zero,1304(sp)
410243e0:	003df106 	br	41023ba8 <___vfprintf_internal_r+0xa88>
410243e4:	b8c00007 	ldb	r3,0(r23)
410243e8:	003bcc06 	br	4102331c <___vfprintf_internal_r+0x1fc>
410243ec:	d9014117 	ldw	r4,1284(sp)
410243f0:	10230540 	call	41023054 <strlen>
410243f4:	d8814515 	stw	r2,1300(sp)
410243f8:	100f883a 	mov	r7,r2
410243fc:	103ff70e 	bge	r2,zero,410243dc <___vfprintf_internal_r+0x12bc>
41024400:	d8014515 	stw	zero,1300(sp)
41024404:	d8014615 	stw	zero,1304(sp)
41024408:	003de706 	br	41023ba8 <___vfprintf_internal_r+0xa88>
4102440c:	20c03fcc 	andi	r3,r4,255
41024410:	00800044 	movi	r2,1
41024414:	18802d26 	beq	r3,r2,410244cc <___vfprintf_internal_r+0x13ac>
41024418:	18800e36 	bltu	r3,r2,41024454 <___vfprintf_internal_r+0x1334>
4102441c:	00800084 	movi	r2,2
41024420:	1880fa26 	beq	r3,r2,4102480c <___vfprintf_internal_r+0x16ec>
41024424:	01000034 	movhi	r4,0
41024428:	2102c904 	addi	r4,r4,2852
4102442c:	10230540 	call	41023054 <strlen>
41024430:	100f883a 	mov	r7,r2
41024434:	dcc14515 	stw	r19,1300(sp)
41024438:	9880010e 	bge	r19,r2,41024440 <___vfprintf_internal_r+0x1320>
4102443c:	d8814515 	stw	r2,1300(sp)
41024440:	00800034 	movhi	r2,0
41024444:	1082c904 	addi	r2,r2,2852
41024448:	dcc14615 	stw	r19,1304(sp)
4102444c:	d8814115 	stw	r2,1284(sp)
41024450:	003dd506 	br	41023ba8 <___vfprintf_internal_r+0xa88>
41024454:	d9401904 	addi	r5,sp,100
41024458:	dd000f04 	addi	r20,sp,60
4102445c:	d9414115 	stw	r5,1284(sp)
41024460:	880a977a 	slli	r5,r17,29
41024464:	d9814117 	ldw	r6,1284(sp)
41024468:	8004d0fa 	srli	r2,r16,3
4102446c:	8806d0fa 	srli	r3,r17,3
41024470:	810001cc 	andi	r4,r16,7
41024474:	2884b03a 	or	r2,r5,r2
41024478:	31bfffc4 	addi	r6,r6,-1
4102447c:	21000c04 	addi	r4,r4,48
41024480:	d9814115 	stw	r6,1284(sp)
41024484:	10cab03a 	or	r5,r2,r3
41024488:	31000005 	stb	r4,0(r6)
4102448c:	1021883a 	mov	r16,r2
41024490:	1823883a 	mov	r17,r3
41024494:	283ff21e 	bne	r5,zero,41024460 <___vfprintf_internal_r+0x1340>
41024498:	d8c14c17 	ldw	r3,1328(sp)
4102449c:	1880004c 	andi	r2,r3,1
410244a0:	1005003a 	cmpeq	r2,r2,zero
410244a4:	103db91e 	bne	r2,zero,41023b8c <___vfprintf_internal_r+0xa6c>
410244a8:	20803fcc 	andi	r2,r4,255
410244ac:	1080201c 	xori	r2,r2,128
410244b0:	10bfe004 	addi	r2,r2,-128
410244b4:	00c00c04 	movi	r3,48
410244b8:	10fdb426 	beq	r2,r3,41023b8c <___vfprintf_internal_r+0xa6c>
410244bc:	31bfffc4 	addi	r6,r6,-1
410244c0:	d9814115 	stw	r6,1284(sp)
410244c4:	30c00005 	stb	r3,0(r6)
410244c8:	003db006 	br	41023b8c <___vfprintf_internal_r+0xa6c>
410244cc:	88800068 	cmpgeui	r2,r17,1
410244d0:	10002c1e 	bne	r2,zero,41024584 <___vfprintf_internal_r+0x1464>
410244d4:	8800021e 	bne	r17,zero,410244e0 <___vfprintf_internal_r+0x13c0>
410244d8:	00800244 	movi	r2,9
410244dc:	14002936 	bltu	r2,r16,41024584 <___vfprintf_internal_r+0x1464>
410244e0:	d90018c4 	addi	r4,sp,99
410244e4:	dd000f04 	addi	r20,sp,60
410244e8:	d9014115 	stw	r4,1284(sp)
410244ec:	d9014117 	ldw	r4,1284(sp)
410244f0:	80800c04 	addi	r2,r16,48
410244f4:	20800005 	stb	r2,0(r4)
410244f8:	003da406 	br	41023b8c <___vfprintf_internal_r+0xa6c>
410244fc:	dc400d17 	ldw	r17,52(sp)
41024500:	07000034 	movhi	fp,0
41024504:	e702d084 	addi	fp,fp,2882
41024508:	9425883a 	add	r18,r18,r16
4102450c:	8c400044 	addi	r17,r17,1
41024510:	008001c4 	movi	r2,7
41024514:	1f000015 	stw	fp,0(r3)
41024518:	1c000115 	stw	r16,4(r3)
4102451c:	dc800e15 	stw	r18,56(sp)
41024520:	dc400d15 	stw	r17,52(sp)
41024524:	147de216 	blt	r2,r17,41023cb0 <___vfprintf_internal_r+0xb90>
41024528:	18c00204 	addi	r3,r3,8
4102452c:	003c7a06 	br	41023718 <___vfprintf_internal_r+0x5f8>
41024530:	01000084 	movi	r4,2
41024534:	d8000405 	stb	zero,16(sp)
41024538:	003d8706 	br	41023b58 <___vfprintf_internal_r+0xa38>
4102453c:	d9814c17 	ldw	r6,1328(sp)
41024540:	30c4703a 	and	r2,r6,r3
41024544:	1005003a 	cmpeq	r2,r2,zero
41024548:	103cb926 	beq	r2,zero,41023830 <___vfprintf_internal_r+0x710>
4102454c:	d9014117 	ldw	r4,1284(sp)
41024550:	94800044 	addi	r18,r18,1
41024554:	8c400044 	addi	r17,r17,1
41024558:	008001c4 	movi	r2,7
4102455c:	a9000015 	stw	r4,0(r21)
41024560:	a8c00115 	stw	r3,4(r21)
41024564:	dc800e15 	stw	r18,56(sp)
41024568:	dc400d15 	stw	r17,52(sp)
4102456c:	147e6616 	blt	r2,r17,41023f08 <___vfprintf_internal_r+0xde8>
41024570:	acc00204 	addi	r19,r21,8
41024574:	003cd706 	br	410238d4 <___vfprintf_internal_r+0x7b4>
41024578:	07000034 	movhi	fp,0
4102457c:	e702d084 	addi	fp,fp,2882
41024580:	003c4f06 	br	410236c0 <___vfprintf_internal_r+0x5a0>
41024584:	dd000f04 	addi	r20,sp,60
41024588:	dc801904 	addi	r18,sp,100
4102458c:	8009883a 	mov	r4,r16
41024590:	880b883a 	mov	r5,r17
41024594:	01800284 	movi	r6,10
41024598:	000f883a 	mov	r7,zero
4102459c:	102f1680 	call	4102f168 <__umoddi3>
410245a0:	12000c04 	addi	r8,r2,48
410245a4:	94bfffc4 	addi	r18,r18,-1
410245a8:	8009883a 	mov	r4,r16
410245ac:	880b883a 	mov	r5,r17
410245b0:	01800284 	movi	r6,10
410245b4:	000f883a 	mov	r7,zero
410245b8:	92000005 	stb	r8,0(r18)
410245bc:	102eb8c0 	call	4102eb8c <__udivdi3>
410245c0:	1009883a 	mov	r4,r2
410245c4:	1021883a 	mov	r16,r2
410245c8:	18800068 	cmpgeui	r2,r3,1
410245cc:	1823883a 	mov	r17,r3
410245d0:	103fee1e 	bne	r2,zero,4102458c <___vfprintf_internal_r+0x146c>
410245d4:	1800021e 	bne	r3,zero,410245e0 <___vfprintf_internal_r+0x14c0>
410245d8:	00800244 	movi	r2,9
410245dc:	113feb36 	bltu	r2,r4,4102458c <___vfprintf_internal_r+0x146c>
410245e0:	94bfffc4 	addi	r18,r18,-1
410245e4:	dc814115 	stw	r18,1284(sp)
410245e8:	003fc006 	br	410244ec <___vfprintf_internal_r+0x13cc>
410245ec:	d9014c17 	ldw	r4,1328(sp)
410245f0:	2080004c 	andi	r2,r4,1
410245f4:	10009a1e 	bne	r2,zero,41024860 <___vfprintf_internal_r+0x1740>
410245f8:	d9401904 	addi	r5,sp,100
410245fc:	dd000f04 	addi	r20,sp,60
41024600:	d9414115 	stw	r5,1284(sp)
41024604:	003d6106 	br	41023b8c <___vfprintf_internal_r+0xa6c>
41024608:	d9014f17 	ldw	r4,1340(sp)
4102460c:	b00b883a 	mov	r5,r22
41024610:	d9800c04 	addi	r6,sp,48
41024614:	10230c80 	call	410230c8 <__sprint_r>
41024618:	103c791e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
4102461c:	dc800e17 	ldw	r18,56(sp)
41024620:	d8c01904 	addi	r3,sp,100
41024624:	003cff06 	br	41023a24 <___vfprintf_internal_r+0x904>
41024628:	d8c14c17 	ldw	r3,1328(sp)
4102462c:	1880040c 	andi	r2,r3,16
41024630:	1000711e 	bne	r2,zero,410247f8 <___vfprintf_internal_r+0x16d8>
41024634:	d9014c17 	ldw	r4,1328(sp)
41024638:	2080100c 	andi	r2,r4,64
4102463c:	10006e26 	beq	r2,zero,410247f8 <___vfprintf_internal_r+0x16d8>
41024640:	3c00000b 	ldhu	r16,0(r7)
41024644:	0023883a 	mov	r17,zero
41024648:	39c00104 	addi	r7,r7,4
4102464c:	d9c14015 	stw	r7,1280(sp)
41024650:	003f0006 	br	41024254 <___vfprintf_internal_r+0x1134>
41024654:	dc400d17 	ldw	r17,52(sp)
41024658:	07000034 	movhi	fp,0
4102465c:	e702d084 	addi	fp,fp,2882
41024660:	9425883a 	add	r18,r18,r16
41024664:	8c400044 	addi	r17,r17,1
41024668:	008001c4 	movi	r2,7
4102466c:	1f000015 	stw	fp,0(r3)
41024670:	1c000115 	stw	r16,4(r3)
41024674:	dc800e15 	stw	r18,56(sp)
41024678:	dc400d15 	stw	r17,52(sp)
4102467c:	147d7616 	blt	r2,r17,41023c58 <___vfprintf_internal_r+0xb38>
41024680:	18c00204 	addi	r3,r3,8
41024684:	003d7b06 	br	41023c74 <___vfprintf_internal_r+0xb54>
41024688:	dc800e17 	ldw	r18,56(sp)
4102468c:	dc400d17 	ldw	r17,52(sp)
41024690:	07000034 	movhi	fp,0
41024694:	e702d484 	addi	fp,fp,2898
41024698:	003bc006 	br	4102359c <___vfprintf_internal_r+0x47c>
4102469c:	d9014f17 	ldw	r4,1340(sp)
410246a0:	b00b883a 	mov	r5,r22
410246a4:	d9800c04 	addi	r6,sp,48
410246a8:	10230c80 	call	410230c8 <__sprint_r>
410246ac:	103c541e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
410246b0:	dc800e17 	ldw	r18,56(sp)
410246b4:	d8c01904 	addi	r3,sp,100
410246b8:	003ce906 	br	41023a60 <___vfprintf_internal_r+0x940>
410246bc:	3c000017 	ldw	r16,0(r7)
410246c0:	0009883a 	mov	r4,zero
410246c4:	39c00104 	addi	r7,r7,4
410246c8:	0023883a 	mov	r17,zero
410246cc:	d9c14015 	stw	r7,1280(sp)
410246d0:	d8000405 	stb	zero,16(sp)
410246d4:	003d2006 	br	41023b58 <___vfprintf_internal_r+0xa38>
410246d8:	38800017 	ldw	r2,0(r7)
410246dc:	39c00104 	addi	r7,r7,4
410246e0:	d9c14015 	stw	r7,1280(sp)
410246e4:	1023d7fa 	srai	r17,r2,31
410246e8:	1021883a 	mov	r16,r2
410246ec:	003d1806 	br	41023b50 <___vfprintf_internal_r+0xa30>
410246f0:	3c000017 	ldw	r16,0(r7)
410246f4:	01000044 	movi	r4,1
410246f8:	39c00104 	addi	r7,r7,4
410246fc:	0023883a 	mov	r17,zero
41024700:	d9c14015 	stw	r7,1280(sp)
41024704:	d8000405 	stb	zero,16(sp)
41024708:	003d1306 	br	41023b58 <___vfprintf_internal_r+0xa38>
4102470c:	00800034 	movhi	r2,0
41024710:	1082d004 	addi	r2,r2,2880
41024714:	94800044 	addi	r18,r18,1
41024718:	8c400044 	addi	r17,r17,1
4102471c:	a8800015 	stw	r2,0(r21)
41024720:	00c00044 	movi	r3,1
41024724:	008001c4 	movi	r2,7
41024728:	a8c00115 	stw	r3,4(r21)
4102472c:	dc800e15 	stw	r18,56(sp)
41024730:	dc400d15 	stw	r17,52(sp)
41024734:	1440ca16 	blt	r2,r17,41024a60 <___vfprintf_internal_r+0x1940>
41024738:	a8c00204 	addi	r3,r21,8
4102473c:	2000061e 	bne	r4,zero,41024758 <___vfprintf_internal_r+0x1638>
41024740:	d9414717 	ldw	r5,1308(sp)
41024744:	2800041e 	bne	r5,zero,41024758 <___vfprintf_internal_r+0x1638>
41024748:	d9814c17 	ldw	r6,1328(sp)
4102474c:	3080004c 	andi	r2,r6,1
41024750:	1005003a 	cmpeq	r2,r2,zero
41024754:	103bf01e 	bne	r2,zero,41023718 <___vfprintf_internal_r+0x5f8>
41024758:	00800044 	movi	r2,1
4102475c:	dc400d17 	ldw	r17,52(sp)
41024760:	18800115 	stw	r2,4(r3)
41024764:	d8814917 	ldw	r2,1316(sp)
41024768:	94800044 	addi	r18,r18,1
4102476c:	8c400044 	addi	r17,r17,1
41024770:	18800015 	stw	r2,0(r3)
41024774:	008001c4 	movi	r2,7
41024778:	dc800e15 	stw	r18,56(sp)
4102477c:	dc400d15 	stw	r17,52(sp)
41024780:	1440ca16 	blt	r2,r17,41024aac <___vfprintf_internal_r+0x198c>
41024784:	18c00204 	addi	r3,r3,8
41024788:	0121c83a 	sub	r16,zero,r4
4102478c:	0400500e 	bge	zero,r16,410248d0 <___vfprintf_internal_r+0x17b0>
41024790:	00800404 	movi	r2,16
41024794:	1400800e 	bge	r2,r16,41024998 <___vfprintf_internal_r+0x1878>
41024798:	1027883a 	mov	r19,r2
4102479c:	07000034 	movhi	fp,0
410247a0:	e702d084 	addi	fp,fp,2882
410247a4:	050001c4 	movi	r20,7
410247a8:	00000306 	br	410247b8 <___vfprintf_internal_r+0x1698>
410247ac:	18c00204 	addi	r3,r3,8
410247b0:	843ffc04 	addi	r16,r16,-16
410247b4:	9c007a0e 	bge	r19,r16,410249a0 <___vfprintf_internal_r+0x1880>
410247b8:	94800404 	addi	r18,r18,16
410247bc:	8c400044 	addi	r17,r17,1
410247c0:	1f000015 	stw	fp,0(r3)
410247c4:	1cc00115 	stw	r19,4(r3)
410247c8:	dc800e15 	stw	r18,56(sp)
410247cc:	dc400d15 	stw	r17,52(sp)
410247d0:	a47ff60e 	bge	r20,r17,410247ac <___vfprintf_internal_r+0x168c>
410247d4:	d9014f17 	ldw	r4,1340(sp)
410247d8:	b00b883a 	mov	r5,r22
410247dc:	d9800c04 	addi	r6,sp,48
410247e0:	10230c80 	call	410230c8 <__sprint_r>
410247e4:	103c061e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
410247e8:	dc800e17 	ldw	r18,56(sp)
410247ec:	dc400d17 	ldw	r17,52(sp)
410247f0:	d8c01904 	addi	r3,sp,100
410247f4:	003fee06 	br	410247b0 <___vfprintf_internal_r+0x1690>
410247f8:	3c000017 	ldw	r16,0(r7)
410247fc:	0023883a 	mov	r17,zero
41024800:	39c00104 	addi	r7,r7,4
41024804:	d9c14015 	stw	r7,1280(sp)
41024808:	003e9206 	br	41024254 <___vfprintf_internal_r+0x1134>
4102480c:	d9401904 	addi	r5,sp,100
41024810:	dd000f04 	addi	r20,sp,60
41024814:	d9414115 	stw	r5,1284(sp)
41024818:	d9814417 	ldw	r6,1296(sp)
4102481c:	880a973a 	slli	r5,r17,28
41024820:	8004d13a 	srli	r2,r16,4
41024824:	810003cc 	andi	r4,r16,15
41024828:	3109883a 	add	r4,r6,r4
4102482c:	2884b03a 	or	r2,r5,r2
41024830:	21400003 	ldbu	r5,0(r4)
41024834:	d9014117 	ldw	r4,1284(sp)
41024838:	8806d13a 	srli	r3,r17,4
4102483c:	1021883a 	mov	r16,r2
41024840:	213fffc4 	addi	r4,r4,-1
41024844:	d9014115 	stw	r4,1284(sp)
41024848:	d9814117 	ldw	r6,1284(sp)
4102484c:	10c8b03a 	or	r4,r2,r3
41024850:	1823883a 	mov	r17,r3
41024854:	31400005 	stb	r5,0(r6)
41024858:	203fef1e 	bne	r4,zero,41024818 <___vfprintf_internal_r+0x16f8>
4102485c:	003ccb06 	br	41023b8c <___vfprintf_internal_r+0xa6c>
41024860:	00800c04 	movi	r2,48
41024864:	d98018c4 	addi	r6,sp,99
41024868:	dd000f04 	addi	r20,sp,60
4102486c:	d88018c5 	stb	r2,99(sp)
41024870:	d9814115 	stw	r6,1284(sp)
41024874:	003cc506 	br	41023b8c <___vfprintf_internal_r+0xa6c>
41024878:	dc400d17 	ldw	r17,52(sp)
4102487c:	07000034 	movhi	fp,0
41024880:	e702d484 	addi	fp,fp,2898
41024884:	003bc706 	br	410237a4 <___vfprintf_internal_r+0x684>
41024888:	d9414c17 	ldw	r5,1328(sp)
4102488c:	2880040c 	andi	r2,r5,16
41024890:	10007c26 	beq	r2,zero,41024a84 <___vfprintf_internal_r+0x1964>
41024894:	38800017 	ldw	r2,0(r7)
41024898:	39c00104 	addi	r7,r7,4
4102489c:	d9c14015 	stw	r7,1280(sp)
410248a0:	d9814b17 	ldw	r6,1324(sp)
410248a4:	d9c14017 	ldw	r7,1280(sp)
410248a8:	11800015 	stw	r6,0(r2)
410248ac:	003a7806 	br	41023290 <___vfprintf_internal_r+0x170>
410248b0:	d9014f17 	ldw	r4,1340(sp)
410248b4:	b00b883a 	mov	r5,r22
410248b8:	d9800c04 	addi	r6,sp,48
410248bc:	10230c80 	call	410230c8 <__sprint_r>
410248c0:	103bcf1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
410248c4:	dc800e17 	ldw	r18,56(sp)
410248c8:	dc400d17 	ldw	r17,52(sp)
410248cc:	d8c01904 	addi	r3,sp,100
410248d0:	d9014717 	ldw	r4,1308(sp)
410248d4:	d9414117 	ldw	r5,1284(sp)
410248d8:	8c400044 	addi	r17,r17,1
410248dc:	9125883a 	add	r18,r18,r4
410248e0:	008001c4 	movi	r2,7
410248e4:	19400015 	stw	r5,0(r3)
410248e8:	19000115 	stw	r4,4(r3)
410248ec:	dc800e15 	stw	r18,56(sp)
410248f0:	dc400d15 	stw	r17,52(sp)
410248f4:	147cee16 	blt	r2,r17,41023cb0 <___vfprintf_internal_r+0xb90>
410248f8:	18c00204 	addi	r3,r3,8
410248fc:	003b8606 	br	41023718 <___vfprintf_internal_r+0x5f8>
41024900:	38c00017 	ldw	r3,0(r7)
41024904:	39000204 	addi	r4,r7,8
41024908:	d9014015 	stw	r4,1280(sp)
4102490c:	d8c14215 	stw	r3,1288(sp)
41024910:	39c00117 	ldw	r7,4(r7)
41024914:	d9c14315 	stw	r7,1292(sp)
41024918:	003e2006 	br	4102419c <___vfprintf_internal_r+0x107c>
4102491c:	0005883a 	mov	r2,zero
41024920:	1409c83a 	sub	r4,r2,r16
41024924:	1105803a 	cmpltu	r2,r2,r4
41024928:	044bc83a 	sub	r5,zero,r17
4102492c:	2885c83a 	sub	r2,r5,r2
41024930:	2021883a 	mov	r16,r4
41024934:	1023883a 	mov	r17,r2
41024938:	01000044 	movi	r4,1
4102493c:	00800b44 	movi	r2,45
41024940:	d8800405 	stb	r2,16(sp)
41024944:	003c8406 	br	41023b58 <___vfprintf_internal_r+0xa38>
41024948:	d9014f17 	ldw	r4,1340(sp)
4102494c:	b00b883a 	mov	r5,r22
41024950:	d9800c04 	addi	r6,sp,48
41024954:	10230c80 	call	410230c8 <__sprint_r>
41024958:	103ba91e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
4102495c:	dc800e17 	ldw	r18,56(sp)
41024960:	dc400d17 	ldw	r17,52(sp)
41024964:	d9000517 	ldw	r4,20(sp)
41024968:	d9401904 	addi	r5,sp,100
4102496c:	003da706 	br	4102400c <___vfprintf_internal_r+0xeec>
41024970:	d9014f17 	ldw	r4,1340(sp)
41024974:	b00b883a 	mov	r5,r22
41024978:	d9800c04 	addi	r6,sp,48
4102497c:	10230c80 	call	410230c8 <__sprint_r>
41024980:	103b9f1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41024984:	dc800e17 	ldw	r18,56(sp)
41024988:	dc400d17 	ldw	r17,52(sp)
4102498c:	d9000517 	ldw	r4,20(sp)
41024990:	d8c01904 	addi	r3,sp,100
41024994:	003d9106 	br	41023fdc <___vfprintf_internal_r+0xebc>
41024998:	07000034 	movhi	fp,0
4102499c:	e702d084 	addi	fp,fp,2882
410249a0:	9425883a 	add	r18,r18,r16
410249a4:	8c400044 	addi	r17,r17,1
410249a8:	008001c4 	movi	r2,7
410249ac:	1f000015 	stw	fp,0(r3)
410249b0:	1c000115 	stw	r16,4(r3)
410249b4:	dc800e15 	stw	r18,56(sp)
410249b8:	dc400d15 	stw	r17,52(sp)
410249bc:	147fbc16 	blt	r2,r17,410248b0 <___vfprintf_internal_r+0x1790>
410249c0:	18c00204 	addi	r3,r3,8
410249c4:	003fc206 	br	410248d0 <___vfprintf_internal_r+0x17b0>
410249c8:	d9014f17 	ldw	r4,1340(sp)
410249cc:	b00b883a 	mov	r5,r22
410249d0:	d9800c04 	addi	r6,sp,48
410249d4:	10230c80 	call	410230c8 <__sprint_r>
410249d8:	103b891e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
410249dc:	dc800e17 	ldw	r18,56(sp)
410249e0:	d9000517 	ldw	r4,20(sp)
410249e4:	d8c01904 	addi	r3,sp,100
410249e8:	003d0206 	br	41023df4 <___vfprintf_internal_r+0xcd4>
410249ec:	07000034 	movhi	fp,0
410249f0:	e702d084 	addi	fp,fp,2882
410249f4:	003be406 	br	41023988 <___vfprintf_internal_r+0x868>
410249f8:	00800034 	movhi	r2,0
410249fc:	1082bf04 	addi	r2,r2,2812
41024a00:	d8814115 	stw	r2,1284(sp)
41024a04:	003df506 	br	410241dc <___vfprintf_internal_r+0x10bc>
41024a08:	d9014217 	ldw	r4,1288(sp)
41024a0c:	d9414317 	ldw	r5,1292(sp)
41024a10:	102b1d40 	call	4102b1d4 <__isnand>
41024a14:	10003926 	beq	r2,zero,41024afc <___vfprintf_internal_r+0x19dc>
41024a18:	d9414d17 	ldw	r5,1332(sp)
41024a1c:	008011c4 	movi	r2,71
41024a20:	1140ce16 	blt	r2,r5,41024d5c <___vfprintf_internal_r+0x1c3c>
41024a24:	01800034 	movhi	r6,0
41024a28:	3182c004 	addi	r6,r6,2816
41024a2c:	d9814115 	stw	r6,1284(sp)
41024a30:	003dea06 	br	410241dc <___vfprintf_internal_r+0x10bc>
41024a34:	d9014c17 	ldw	r4,1328(sp)
41024a38:	bdc00044 	addi	r23,r23,1
41024a3c:	b8c00007 	ldb	r3,0(r23)
41024a40:	21000814 	ori	r4,r4,32
41024a44:	d9014c15 	stw	r4,1328(sp)
41024a48:	003a3406 	br	4102331c <___vfprintf_internal_r+0x1fc>
41024a4c:	dcc14515 	stw	r19,1300(sp)
41024a50:	98011016 	blt	r19,zero,41024e94 <___vfprintf_internal_r+0x1d74>
41024a54:	980f883a 	mov	r7,r19
41024a58:	d8014615 	stw	zero,1304(sp)
41024a5c:	003c5206 	br	41023ba8 <___vfprintf_internal_r+0xa88>
41024a60:	d9014f17 	ldw	r4,1340(sp)
41024a64:	b00b883a 	mov	r5,r22
41024a68:	d9800c04 	addi	r6,sp,48
41024a6c:	10230c80 	call	410230c8 <__sprint_r>
41024a70:	103b631e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41024a74:	dc800e17 	ldw	r18,56(sp)
41024a78:	d9000517 	ldw	r4,20(sp)
41024a7c:	d8c01904 	addi	r3,sp,100
41024a80:	003f2e06 	br	4102473c <___vfprintf_internal_r+0x161c>
41024a84:	d8c14c17 	ldw	r3,1328(sp)
41024a88:	1880100c 	andi	r2,r3,64
41024a8c:	1000a026 	beq	r2,zero,41024d10 <___vfprintf_internal_r+0x1bf0>
41024a90:	38800017 	ldw	r2,0(r7)
41024a94:	39c00104 	addi	r7,r7,4
41024a98:	d9c14015 	stw	r7,1280(sp)
41024a9c:	d9014b17 	ldw	r4,1324(sp)
41024aa0:	d9c14017 	ldw	r7,1280(sp)
41024aa4:	1100000d 	sth	r4,0(r2)
41024aa8:	0039f906 	br	41023290 <___vfprintf_internal_r+0x170>
41024aac:	d9014f17 	ldw	r4,1340(sp)
41024ab0:	b00b883a 	mov	r5,r22
41024ab4:	d9800c04 	addi	r6,sp,48
41024ab8:	10230c80 	call	410230c8 <__sprint_r>
41024abc:	103b501e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41024ac0:	dc800e17 	ldw	r18,56(sp)
41024ac4:	dc400d17 	ldw	r17,52(sp)
41024ac8:	d9000517 	ldw	r4,20(sp)
41024acc:	d8c01904 	addi	r3,sp,100
41024ad0:	003f2d06 	br	41024788 <___vfprintf_internal_r+0x1668>
41024ad4:	00800184 	movi	r2,6
41024ad8:	14c09a36 	bltu	r2,r19,41024d44 <___vfprintf_internal_r+0x1c24>
41024adc:	dcc14515 	stw	r19,1300(sp)
41024ae0:	9800010e 	bge	r19,zero,41024ae8 <___vfprintf_internal_r+0x19c8>
41024ae4:	d8014515 	stw	zero,1300(sp)
41024ae8:	00800034 	movhi	r2,0
41024aec:	1082c204 	addi	r2,r2,2824
41024af0:	980f883a 	mov	r7,r19
41024af4:	d8814115 	stw	r2,1284(sp)
41024af8:	003a7806 	br	410234dc <___vfprintf_internal_r+0x3bc>
41024afc:	00bfffc4 	movi	r2,-1
41024b00:	9880e226 	beq	r19,r2,41024e8c <___vfprintf_internal_r+0x1d6c>
41024b04:	d9414d17 	ldw	r5,1332(sp)
41024b08:	008019c4 	movi	r2,103
41024b0c:	2880dc26 	beq	r5,r2,41024e80 <___vfprintf_internal_r+0x1d60>
41024b10:	008011c4 	movi	r2,71
41024b14:	2880da26 	beq	r5,r2,41024e80 <___vfprintf_internal_r+0x1d60>
41024b18:	d9414c17 	ldw	r5,1328(sp)
41024b1c:	d9014317 	ldw	r4,1292(sp)
41024b20:	d9814217 	ldw	r6,1288(sp)
41024b24:	29404014 	ori	r5,r5,256
41024b28:	d9414c15 	stw	r5,1328(sp)
41024b2c:	2000cc16 	blt	r4,zero,41024e60 <___vfprintf_internal_r+0x1d40>
41024b30:	3021883a 	mov	r16,r6
41024b34:	2023883a 	mov	r17,r4
41024b38:	0039883a 	mov	fp,zero
41024b3c:	d9414d17 	ldw	r5,1332(sp)
41024b40:	00801984 	movi	r2,102
41024b44:	2880b726 	beq	r5,r2,41024e24 <___vfprintf_internal_r+0x1d04>
41024b48:	00801184 	movi	r2,70
41024b4c:	2880b526 	beq	r5,r2,41024e24 <___vfprintf_internal_r+0x1d04>
41024b50:	00801944 	movi	r2,101
41024b54:	2880c826 	beq	r5,r2,41024e78 <___vfprintf_internal_r+0x1d58>
41024b58:	00801144 	movi	r2,69
41024b5c:	2880c626 	beq	r5,r2,41024e78 <___vfprintf_internal_r+0x1d58>
41024b60:	9829883a 	mov	r20,r19
41024b64:	d9014f17 	ldw	r4,1340(sp)
41024b68:	d8800504 	addi	r2,sp,20
41024b6c:	880d883a 	mov	r6,r17
41024b70:	d8800115 	stw	r2,4(sp)
41024b74:	d8c00604 	addi	r3,sp,24
41024b78:	d8800704 	addi	r2,sp,28
41024b7c:	800b883a 	mov	r5,r16
41024b80:	01c00084 	movi	r7,2
41024b84:	d8c00215 	stw	r3,8(sp)
41024b88:	d8800315 	stw	r2,12(sp)
41024b8c:	dd000015 	stw	r20,0(sp)
41024b90:	1026ac40 	call	41026ac4 <_dtoa_r>
41024b94:	d9814d17 	ldw	r6,1332(sp)
41024b98:	d8814115 	stw	r2,1284(sp)
41024b9c:	008019c4 	movi	r2,103
41024ba0:	30809526 	beq	r6,r2,41024df8 <___vfprintf_internal_r+0x1cd8>
41024ba4:	d8c14d17 	ldw	r3,1332(sp)
41024ba8:	008011c4 	movi	r2,71
41024bac:	18809226 	beq	r3,r2,41024df8 <___vfprintf_internal_r+0x1cd8>
41024bb0:	d9414117 	ldw	r5,1284(sp)
41024bb4:	d9814d17 	ldw	r6,1332(sp)
41024bb8:	00801984 	movi	r2,102
41024bbc:	2d25883a 	add	r18,r5,r20
41024bc0:	30808626 	beq	r6,r2,41024ddc <___vfprintf_internal_r+0x1cbc>
41024bc4:	00801184 	movi	r2,70
41024bc8:	30808426 	beq	r6,r2,41024ddc <___vfprintf_internal_r+0x1cbc>
41024bcc:	000d883a 	mov	r6,zero
41024bd0:	000f883a 	mov	r7,zero
41024bd4:	880b883a 	mov	r5,r17
41024bd8:	8009883a 	mov	r4,r16
41024bdc:	10303900 	call	41030390 <__eqdf2>
41024be0:	1000751e 	bne	r2,zero,41024db8 <___vfprintf_internal_r+0x1c98>
41024be4:	9005883a 	mov	r2,r18
41024be8:	dc800715 	stw	r18,28(sp)
41024bec:	d9014117 	ldw	r4,1284(sp)
41024bf0:	d9414d17 	ldw	r5,1332(sp)
41024bf4:	00c019c4 	movi	r3,103
41024bf8:	1125c83a 	sub	r18,r2,r4
41024bfc:	28c06826 	beq	r5,r3,41024da0 <___vfprintf_internal_r+0x1c80>
41024c00:	008011c4 	movi	r2,71
41024c04:	28806626 	beq	r5,r2,41024da0 <___vfprintf_internal_r+0x1c80>
41024c08:	d9000517 	ldw	r4,20(sp)
41024c0c:	d8c14d17 	ldw	r3,1332(sp)
41024c10:	00801944 	movi	r2,101
41024c14:	10c05516 	blt	r2,r3,41024d6c <___vfprintf_internal_r+0x1c4c>
41024c18:	213fffc4 	addi	r4,r4,-1
41024c1c:	d9000515 	stw	r4,20(sp)
41024c20:	d8c00805 	stb	r3,32(sp)
41024c24:	2021883a 	mov	r16,r4
41024c28:	2000c116 	blt	r4,zero,41024f30 <___vfprintf_internal_r+0x1e10>
41024c2c:	00800ac4 	movi	r2,43
41024c30:	d8800845 	stb	r2,33(sp)
41024c34:	00800244 	movi	r2,9
41024c38:	1400af0e 	bge	r2,r16,41024ef8 <___vfprintf_internal_r+0x1dd8>
41024c3c:	1027883a 	mov	r19,r2
41024c40:	dc400b84 	addi	r17,sp,46
41024c44:	8009883a 	mov	r4,r16
41024c48:	01400284 	movi	r5,10
41024c4c:	102230c0 	call	4102230c <__modsi3>
41024c50:	10800c04 	addi	r2,r2,48
41024c54:	8c7fffc4 	addi	r17,r17,-1
41024c58:	8009883a 	mov	r4,r16
41024c5c:	01400284 	movi	r5,10
41024c60:	88800005 	stb	r2,0(r17)
41024c64:	10222ac0 	call	410222ac <__divsi3>
41024c68:	1021883a 	mov	r16,r2
41024c6c:	98bff516 	blt	r19,r2,41024c44 <___vfprintf_internal_r+0x1b24>
41024c70:	10c00c04 	addi	r3,r2,48
41024c74:	d88009c4 	addi	r2,sp,39
41024c78:	108001c4 	addi	r2,r2,7
41024c7c:	897fffc4 	addi	r5,r17,-1
41024c80:	88ffffc5 	stb	r3,-1(r17)
41024c84:	2880a72e 	bgeu	r5,r2,41024f24 <___vfprintf_internal_r+0x1e04>
41024c88:	1009883a 	mov	r4,r2
41024c8c:	d9800804 	addi	r6,sp,32
41024c90:	d8c00884 	addi	r3,sp,34
41024c94:	28800003 	ldbu	r2,0(r5)
41024c98:	29400044 	addi	r5,r5,1
41024c9c:	18800005 	stb	r2,0(r3)
41024ca0:	18c00044 	addi	r3,r3,1
41024ca4:	293ffb36 	bltu	r5,r4,41024c94 <___vfprintf_internal_r+0x1b74>
41024ca8:	1987c83a 	sub	r3,r3,r6
41024cac:	00800044 	movi	r2,1
41024cb0:	d8c14815 	stw	r3,1312(sp)
41024cb4:	90cf883a 	add	r7,r18,r3
41024cb8:	1480960e 	bge	r2,r18,41024f14 <___vfprintf_internal_r+0x1df4>
41024cbc:	39c00044 	addi	r7,r7,1
41024cc0:	d9c14515 	stw	r7,1300(sp)
41024cc4:	38003416 	blt	r7,zero,41024d98 <___vfprintf_internal_r+0x1c78>
41024cc8:	e0803fcc 	andi	r2,fp,255
41024ccc:	1080201c 	xori	r2,r2,128
41024cd0:	10bfe004 	addi	r2,r2,-128
41024cd4:	10004e26 	beq	r2,zero,41024e10 <___vfprintf_internal_r+0x1cf0>
41024cd8:	00800b44 	movi	r2,45
41024cdc:	dc814715 	stw	r18,1308(sp)
41024ce0:	d8014615 	stw	zero,1304(sp)
41024ce4:	d8800405 	stb	r2,16(sp)
41024ce8:	003bb106 	br	41023bb0 <___vfprintf_internal_r+0xa90>
41024cec:	00800b44 	movi	r2,45
41024cf0:	d8800405 	stb	r2,16(sp)
41024cf4:	003d3306 	br	410241c4 <___vfprintf_internal_r+0x10a4>
41024cf8:	d9014f17 	ldw	r4,1340(sp)
41024cfc:	b00b883a 	mov	r5,r22
41024d00:	d9800c04 	addi	r6,sp,48
41024d04:	10230c80 	call	410230c8 <__sprint_r>
41024d08:	103abd1e 	bne	r2,zero,41023800 <___vfprintf_internal_r+0x6e0>
41024d0c:	003abb06 	br	410237fc <___vfprintf_internal_r+0x6dc>
41024d10:	38800017 	ldw	r2,0(r7)
41024d14:	39c00104 	addi	r7,r7,4
41024d18:	d9c14015 	stw	r7,1280(sp)
41024d1c:	d9414b17 	ldw	r5,1324(sp)
41024d20:	d9c14017 	ldw	r7,1280(sp)
41024d24:	11400015 	stw	r5,0(r2)
41024d28:	00395906 	br	41023290 <___vfprintf_internal_r+0x170>
41024d2c:	980f883a 	mov	r7,r19
41024d30:	dcc14515 	stw	r19,1300(sp)
41024d34:	d8014615 	stw	zero,1304(sp)
41024d38:	003b9b06 	br	41023ba8 <___vfprintf_internal_r+0xa88>
41024d3c:	0027883a 	mov	r19,zero
41024d40:	00397806 	br	41023324 <___vfprintf_internal_r+0x204>
41024d44:	00c00034 	movhi	r3,0
41024d48:	18c2c204 	addi	r3,r3,2824
41024d4c:	100f883a 	mov	r7,r2
41024d50:	d8814515 	stw	r2,1300(sp)
41024d54:	d8c14115 	stw	r3,1284(sp)
41024d58:	0039e006 	br	410234dc <___vfprintf_internal_r+0x3bc>
41024d5c:	00800034 	movhi	r2,0
41024d60:	1082c104 	addi	r2,r2,2820
41024d64:	d8814115 	stw	r2,1284(sp)
41024d68:	003d1c06 	br	410241dc <___vfprintf_internal_r+0x10bc>
41024d6c:	d9414d17 	ldw	r5,1332(sp)
41024d70:	00801984 	movi	r2,102
41024d74:	28804926 	beq	r5,r2,41024e9c <___vfprintf_internal_r+0x1d7c>
41024d78:	200f883a 	mov	r7,r4
41024d7c:	24805716 	blt	r4,r18,41024edc <___vfprintf_internal_r+0x1dbc>
41024d80:	d9414c17 	ldw	r5,1328(sp)
41024d84:	2880004c 	andi	r2,r5,1
41024d88:	10000126 	beq	r2,zero,41024d90 <___vfprintf_internal_r+0x1c70>
41024d8c:	21c00044 	addi	r7,r4,1
41024d90:	d9c14515 	stw	r7,1300(sp)
41024d94:	383fcc0e 	bge	r7,zero,41024cc8 <___vfprintf_internal_r+0x1ba8>
41024d98:	d8014515 	stw	zero,1300(sp)
41024d9c:	003fca06 	br	41024cc8 <___vfprintf_internal_r+0x1ba8>
41024da0:	d9000517 	ldw	r4,20(sp)
41024da4:	00bfff04 	movi	r2,-4
41024da8:	1100480e 	bge	r2,r4,41024ecc <___vfprintf_internal_r+0x1dac>
41024dac:	99004716 	blt	r19,r4,41024ecc <___vfprintf_internal_r+0x1dac>
41024db0:	d8c14d15 	stw	r3,1332(sp)
41024db4:	003ff006 	br	41024d78 <___vfprintf_internal_r+0x1c58>
41024db8:	d8800717 	ldw	r2,28(sp)
41024dbc:	14bf8b2e 	bgeu	r2,r18,41024bec <___vfprintf_internal_r+0x1acc>
41024dc0:	9007883a 	mov	r3,r18
41024dc4:	01000c04 	movi	r4,48
41024dc8:	11000005 	stb	r4,0(r2)
41024dcc:	10800044 	addi	r2,r2,1
41024dd0:	d8800715 	stw	r2,28(sp)
41024dd4:	18bffc1e 	bne	r3,r2,41024dc8 <___vfprintf_internal_r+0x1ca8>
41024dd8:	003f8406 	br	41024bec <___vfprintf_internal_r+0x1acc>
41024ddc:	d8814117 	ldw	r2,1284(sp)
41024de0:	10c00007 	ldb	r3,0(r2)
41024de4:	00800c04 	movi	r2,48
41024de8:	18805b26 	beq	r3,r2,41024f58 <___vfprintf_internal_r+0x1e38>
41024dec:	d9000517 	ldw	r4,20(sp)
41024df0:	9125883a 	add	r18,r18,r4
41024df4:	003f7506 	br	41024bcc <___vfprintf_internal_r+0x1aac>
41024df8:	d9014c17 	ldw	r4,1328(sp)
41024dfc:	2080004c 	andi	r2,r4,1
41024e00:	1005003a 	cmpeq	r2,r2,zero
41024e04:	103f6a26 	beq	r2,zero,41024bb0 <___vfprintf_internal_r+0x1a90>
41024e08:	d8800717 	ldw	r2,28(sp)
41024e0c:	003f7706 	br	41024bec <___vfprintf_internal_r+0x1acc>
41024e10:	d9c14515 	stw	r7,1300(sp)
41024e14:	38004d16 	blt	r7,zero,41024f4c <___vfprintf_internal_r+0x1e2c>
41024e18:	dc814715 	stw	r18,1308(sp)
41024e1c:	d8014615 	stw	zero,1304(sp)
41024e20:	003b6106 	br	41023ba8 <___vfprintf_internal_r+0xa88>
41024e24:	d9014f17 	ldw	r4,1340(sp)
41024e28:	d8800504 	addi	r2,sp,20
41024e2c:	d8800115 	stw	r2,4(sp)
41024e30:	d8c00604 	addi	r3,sp,24
41024e34:	d8800704 	addi	r2,sp,28
41024e38:	800b883a 	mov	r5,r16
41024e3c:	880d883a 	mov	r6,r17
41024e40:	01c000c4 	movi	r7,3
41024e44:	d8c00215 	stw	r3,8(sp)
41024e48:	d8800315 	stw	r2,12(sp)
41024e4c:	dcc00015 	stw	r19,0(sp)
41024e50:	9829883a 	mov	r20,r19
41024e54:	1026ac40 	call	41026ac4 <_dtoa_r>
41024e58:	d8814115 	stw	r2,1284(sp)
41024e5c:	003f5106 	br	41024ba4 <___vfprintf_internal_r+0x1a84>
41024e60:	d8c14217 	ldw	r3,1288(sp)
41024e64:	d9014317 	ldw	r4,1292(sp)
41024e68:	07000b44 	movi	fp,45
41024e6c:	1821883a 	mov	r16,r3
41024e70:	2460003c 	xorhi	r17,r4,32768
41024e74:	003f3106 	br	41024b3c <___vfprintf_internal_r+0x1a1c>
41024e78:	9d000044 	addi	r20,r19,1
41024e7c:	003f3906 	br	41024b64 <___vfprintf_internal_r+0x1a44>
41024e80:	983f251e 	bne	r19,zero,41024b18 <___vfprintf_internal_r+0x19f8>
41024e84:	04c00044 	movi	r19,1
41024e88:	003f2306 	br	41024b18 <___vfprintf_internal_r+0x19f8>
41024e8c:	04c00184 	movi	r19,6
41024e90:	003f2106 	br	41024b18 <___vfprintf_internal_r+0x19f8>
41024e94:	d8014515 	stw	zero,1300(sp)
41024e98:	003eee06 	br	41024a54 <___vfprintf_internal_r+0x1934>
41024e9c:	200f883a 	mov	r7,r4
41024ea0:	0100370e 	bge	zero,r4,41024f80 <___vfprintf_internal_r+0x1e60>
41024ea4:	9800031e 	bne	r19,zero,41024eb4 <___vfprintf_internal_r+0x1d94>
41024ea8:	d9814c17 	ldw	r6,1328(sp)
41024eac:	3080004c 	andi	r2,r6,1
41024eb0:	103fb726 	beq	r2,zero,41024d90 <___vfprintf_internal_r+0x1c70>
41024eb4:	20800044 	addi	r2,r4,1
41024eb8:	98a7883a 	add	r19,r19,r2
41024ebc:	dcc14515 	stw	r19,1300(sp)
41024ec0:	980f883a 	mov	r7,r19
41024ec4:	983f800e 	bge	r19,zero,41024cc8 <___vfprintf_internal_r+0x1ba8>
41024ec8:	003fb306 	br	41024d98 <___vfprintf_internal_r+0x1c78>
41024ecc:	d9814d17 	ldw	r6,1332(sp)
41024ed0:	31bfff84 	addi	r6,r6,-2
41024ed4:	d9814d15 	stw	r6,1332(sp)
41024ed8:	003f4c06 	br	41024c0c <___vfprintf_internal_r+0x1aec>
41024edc:	0100180e 	bge	zero,r4,41024f40 <___vfprintf_internal_r+0x1e20>
41024ee0:	00800044 	movi	r2,1
41024ee4:	1485883a 	add	r2,r2,r18
41024ee8:	d8814515 	stw	r2,1300(sp)
41024eec:	100f883a 	mov	r7,r2
41024ef0:	103f750e 	bge	r2,zero,41024cc8 <___vfprintf_internal_r+0x1ba8>
41024ef4:	003fa806 	br	41024d98 <___vfprintf_internal_r+0x1c78>
41024ef8:	80c00c04 	addi	r3,r16,48
41024efc:	00800c04 	movi	r2,48
41024f00:	d8c008c5 	stb	r3,35(sp)
41024f04:	d9800804 	addi	r6,sp,32
41024f08:	d8c00904 	addi	r3,sp,36
41024f0c:	d8800885 	stb	r2,34(sp)
41024f10:	003f6506 	br	41024ca8 <___vfprintf_internal_r+0x1b88>
41024f14:	d9014c17 	ldw	r4,1328(sp)
41024f18:	2084703a 	and	r2,r4,r2
41024f1c:	103f9c26 	beq	r2,zero,41024d90 <___vfprintf_internal_r+0x1c70>
41024f20:	003f6606 	br	41024cbc <___vfprintf_internal_r+0x1b9c>
41024f24:	d9800804 	addi	r6,sp,32
41024f28:	d8c00884 	addi	r3,sp,34
41024f2c:	003f5e06 	br	41024ca8 <___vfprintf_internal_r+0x1b88>
41024f30:	00800b44 	movi	r2,45
41024f34:	0121c83a 	sub	r16,zero,r4
41024f38:	d8800845 	stb	r2,33(sp)
41024f3c:	003f3d06 	br	41024c34 <___vfprintf_internal_r+0x1b14>
41024f40:	00800084 	movi	r2,2
41024f44:	1105c83a 	sub	r2,r2,r4
41024f48:	003fe606 	br	41024ee4 <___vfprintf_internal_r+0x1dc4>
41024f4c:	d8014515 	stw	zero,1300(sp)
41024f50:	dc814715 	stw	r18,1308(sp)
41024f54:	003fb106 	br	41024e1c <___vfprintf_internal_r+0x1cfc>
41024f58:	000d883a 	mov	r6,zero
41024f5c:	000f883a 	mov	r7,zero
41024f60:	8009883a 	mov	r4,r16
41024f64:	880b883a 	mov	r5,r17
41024f68:	10304180 	call	41030418 <__nedf2>
41024f6c:	103f9f26 	beq	r2,zero,41024dec <___vfprintf_internal_r+0x1ccc>
41024f70:	00800044 	movi	r2,1
41024f74:	1509c83a 	sub	r4,r2,r20
41024f78:	d9000515 	stw	r4,20(sp)
41024f7c:	003f9b06 	br	41024dec <___vfprintf_internal_r+0x1ccc>
41024f80:	98000d1e 	bne	r19,zero,41024fb8 <___vfprintf_internal_r+0x1e98>
41024f84:	d8c14c17 	ldw	r3,1328(sp)
41024f88:	1880004c 	andi	r2,r3,1
41024f8c:	10000a1e 	bne	r2,zero,41024fb8 <___vfprintf_internal_r+0x1e98>
41024f90:	01000044 	movi	r4,1
41024f94:	200f883a 	mov	r7,r4
41024f98:	d9014515 	stw	r4,1300(sp)
41024f9c:	003f4a06 	br	41024cc8 <___vfprintf_internal_r+0x1ba8>
41024fa0:	3cc00017 	ldw	r19,0(r7)
41024fa4:	39c00104 	addi	r7,r7,4
41024fa8:	983d0e0e 	bge	r19,zero,410243e4 <___vfprintf_internal_r+0x12c4>
41024fac:	b8c00007 	ldb	r3,0(r23)
41024fb0:	04ffffc4 	movi	r19,-1
41024fb4:	0038d906 	br	4102331c <___vfprintf_internal_r+0x1fc>
41024fb8:	9cc00084 	addi	r19,r19,2
41024fbc:	dcc14515 	stw	r19,1300(sp)
41024fc0:	980f883a 	mov	r7,r19
41024fc4:	983f400e 	bge	r19,zero,41024cc8 <___vfprintf_internal_r+0x1ba8>
41024fc8:	003f7306 	br	41024d98 <___vfprintf_internal_r+0x1c78>

41024fcc <__vfprintf_internal>:
41024fcc:	00800034 	movhi	r2,0
41024fd0:	108ad704 	addi	r2,r2,11100
41024fd4:	2013883a 	mov	r9,r4
41024fd8:	11000017 	ldw	r4,0(r2)
41024fdc:	2805883a 	mov	r2,r5
41024fe0:	300f883a 	mov	r7,r6
41024fe4:	480b883a 	mov	r5,r9
41024fe8:	100d883a 	mov	r6,r2
41024fec:	10231201 	jmpi	41023120 <___vfprintf_internal_r>

41024ff0 <__svfscanf_r>:
41024ff0:	deff4e04 	addi	sp,sp,-712
41024ff4:	dd80ae15 	stw	r22,696(sp)
41024ff8:	dd00ac15 	stw	r20,688(sp)
41024ffc:	dc40a915 	stw	r17,676(sp)
41025000:	dc00a815 	stw	r16,672(sp)
41025004:	dfc0b115 	stw	ra,708(sp)
41025008:	df00b015 	stw	fp,704(sp)
4102500c:	ddc0af15 	stw	r23,700(sp)
41025010:	dd40ad15 	stw	r21,692(sp)
41025014:	dcc0ab15 	stw	r19,684(sp)
41025018:	dc80aa15 	stw	r18,680(sp)
4102501c:	202d883a 	mov	r22,r4
41025020:	2821883a 	mov	r16,r5
41025024:	d9c0a415 	stw	r7,656(sp)
41025028:	3029883a 	mov	r20,r6
4102502c:	d800a215 	stw	zero,648(sp)
41025030:	0023883a 	mov	r17,zero
41025034:	d800a115 	stw	zero,644(sp)
41025038:	d800a015 	stw	zero,640(sp)
4102503c:	a1000007 	ldb	r4,0(r20)
41025040:	d9000115 	stw	r4,4(sp)
41025044:	20001f26 	beq	r4,zero,410250c4 <__svfscanf_r+0xd4>
41025048:	04800034 	movhi	r18,0
4102504c:	948adb04 	addi	r18,r18,11116
41025050:	91800017 	ldw	r6,0(r18)
41025054:	a5000044 	addi	r20,r20,1
41025058:	3107883a 	add	r3,r6,r4
4102505c:	18800003 	ldbu	r2,0(r3)
41025060:	1080020c 	andi	r2,r2,8
41025064:	10002426 	beq	r2,zero,410250f8 <__svfscanf_r+0x108>
41025068:	80c00117 	ldw	r3,4(r16)
4102506c:	00c00e0e 	bge	zero,r3,410250a8 <__svfscanf_r+0xb8>
41025070:	81400017 	ldw	r5,0(r16)
41025074:	90800017 	ldw	r2,0(r18)
41025078:	28c00003 	ldbu	r3,0(r5)
4102507c:	1887883a 	add	r3,r3,r2
41025080:	19000003 	ldbu	r4,0(r3)
41025084:	2100020c 	andi	r4,r4,8
41025088:	203fec26 	beq	r4,zero,4102503c <__svfscanf_r+0x4c>
4102508c:	80c00117 	ldw	r3,4(r16)
41025090:	29800044 	addi	r6,r5,1
41025094:	8c400044 	addi	r17,r17,1
41025098:	18ffffc4 	addi	r3,r3,-1
4102509c:	81800015 	stw	r6,0(r16)
410250a0:	80c00115 	stw	r3,4(r16)
410250a4:	00fff216 	blt	zero,r3,41025070 <__svfscanf_r+0x80>
410250a8:	b009883a 	mov	r4,r22
410250ac:	800b883a 	mov	r5,r16
410250b0:	102afb40 	call	4102afb4 <__srefill_r>
410250b4:	103fee26 	beq	r2,zero,41025070 <__svfscanf_r+0x80>
410250b8:	a1000007 	ldb	r4,0(r20)
410250bc:	d9000115 	stw	r4,4(sp)
410250c0:	203fe11e 	bne	r4,zero,41025048 <__svfscanf_r+0x58>
410250c4:	d880a217 	ldw	r2,648(sp)
410250c8:	dfc0b117 	ldw	ra,708(sp)
410250cc:	df00b017 	ldw	fp,704(sp)
410250d0:	ddc0af17 	ldw	r23,700(sp)
410250d4:	dd80ae17 	ldw	r22,696(sp)
410250d8:	dd40ad17 	ldw	r21,692(sp)
410250dc:	dd00ac17 	ldw	r20,688(sp)
410250e0:	dcc0ab17 	ldw	r19,684(sp)
410250e4:	dc80aa17 	ldw	r18,680(sp)
410250e8:	dc40a917 	ldw	r17,676(sp)
410250ec:	dc00a817 	ldw	r16,672(sp)
410250f0:	dec0b204 	addi	sp,sp,712
410250f4:	f800283a 	ret
410250f8:	00800944 	movi	r2,37
410250fc:	20801626 	beq	r4,r2,41025158 <__svfscanf_r+0x168>
41025100:	80800117 	ldw	r2,4(r16)
41025104:	00800b0e 	bge	zero,r2,41025134 <__svfscanf_r+0x144>
41025108:	81000017 	ldw	r4,0(r16)
4102510c:	a0ffffc7 	ldb	r3,-1(r20)
41025110:	20800003 	ldbu	r2,0(r4)
41025114:	10ffeb1e 	bne	r2,r3,410250c4 <__svfscanf_r+0xd4>
41025118:	80c00117 	ldw	r3,4(r16)
4102511c:	21800044 	addi	r6,r4,1
41025120:	8c400044 	addi	r17,r17,1
41025124:	18ffffc4 	addi	r3,r3,-1
41025128:	80c00115 	stw	r3,4(r16)
4102512c:	81800015 	stw	r6,0(r16)
41025130:	003fc206 	br	4102503c <__svfscanf_r+0x4c>
41025134:	b009883a 	mov	r4,r22
41025138:	800b883a 	mov	r5,r16
4102513c:	102afb40 	call	4102afb4 <__srefill_r>
41025140:	103ff126 	beq	r2,zero,41025108 <__svfscanf_r+0x118>
41025144:	d900a217 	ldw	r4,648(sp)
41025148:	2004c91e 	bne	r4,zero,41026470 <__svfscanf_r+0x1480>
4102514c:	00bfffc4 	movi	r2,-1
41025150:	d880a215 	stw	r2,648(sp)
41025154:	003fdb06 	br	410250c4 <__svfscanf_r+0xd4>
41025158:	d800a315 	stw	zero,652(sp)
4102515c:	0027883a 	mov	r19,zero
41025160:	a0c00003 	ldbu	r3,0(r20)
41025164:	00801e04 	movi	r2,120
41025168:	a5000044 	addi	r20,r20,1
4102516c:	19403fcc 	andi	r5,r3,255
41025170:	2940201c 	xori	r5,r5,128
41025174:	297fe004 	addi	r5,r5,-128
41025178:	10c08036 	bltu	r2,r3,4102537c <__svfscanf_r+0x38c>
4102517c:	18c5883a 	add	r2,r3,r3
41025180:	1085883a 	add	r2,r2,r2
41025184:	00d040b4 	movhi	r3,16642
41025188:	18d46604 	addi	r3,r3,20888
4102518c:	10c5883a 	add	r2,r2,r3
41025190:	11000017 	ldw	r4,0(r2)
41025194:	2000683a 	jmp	r4
41025198:	4102514c 	andi	r4,r8,2373
4102519c:	4102537c 	xorhi	r4,r8,2381
410251a0:	4102537c 	xorhi	r4,r8,2381
410251a4:	4102537c 	xorhi	r4,r8,2381
410251a8:	4102537c 	xorhi	r4,r8,2381
410251ac:	4102537c 	xorhi	r4,r8,2381
410251b0:	4102537c 	xorhi	r4,r8,2381
410251b4:	4102537c 	xorhi	r4,r8,2381
410251b8:	4102537c 	xorhi	r4,r8,2381
410251bc:	4102537c 	xorhi	r4,r8,2381
410251c0:	4102537c 	xorhi	r4,r8,2381
410251c4:	4102537c 	xorhi	r4,r8,2381
410251c8:	4102537c 	xorhi	r4,r8,2381
410251cc:	4102537c 	xorhi	r4,r8,2381
410251d0:	4102537c 	xorhi	r4,r8,2381
410251d4:	4102537c 	xorhi	r4,r8,2381
410251d8:	4102537c 	xorhi	r4,r8,2381
410251dc:	4102537c 	xorhi	r4,r8,2381
410251e0:	4102537c 	xorhi	r4,r8,2381
410251e4:	4102537c 	xorhi	r4,r8,2381
410251e8:	4102537c 	xorhi	r4,r8,2381
410251ec:	4102537c 	xorhi	r4,r8,2381
410251f0:	4102537c 	xorhi	r4,r8,2381
410251f4:	4102537c 	xorhi	r4,r8,2381
410251f8:	4102537c 	xorhi	r4,r8,2381
410251fc:	4102537c 	xorhi	r4,r8,2381
41025200:	4102537c 	xorhi	r4,r8,2381
41025204:	4102537c 	xorhi	r4,r8,2381
41025208:	4102537c 	xorhi	r4,r8,2381
4102520c:	4102537c 	xorhi	r4,r8,2381
41025210:	4102537c 	xorhi	r4,r8,2381
41025214:	4102537c 	xorhi	r4,r8,2381
41025218:	4102537c 	xorhi	r4,r8,2381
4102521c:	4102537c 	xorhi	r4,r8,2381
41025220:	4102537c 	xorhi	r4,r8,2381
41025224:	4102537c 	xorhi	r4,r8,2381
41025228:	4102537c 	xorhi	r4,r8,2381
4102522c:	41025100 	call	44102510 <__flash_rwdata_start+0x30cd570>
41025230:	4102537c 	xorhi	r4,r8,2381
41025234:	4102537c 	xorhi	r4,r8,2381
41025238:	4102537c 	xorhi	r4,r8,2381
4102523c:	4102537c 	xorhi	r4,r8,2381
41025240:	410263a0 	cmpeqi	r4,r8,2446
41025244:	4102537c 	xorhi	r4,r8,2381
41025248:	4102537c 	xorhi	r4,r8,2381
4102524c:	4102537c 	xorhi	r4,r8,2381
41025250:	4102537c 	xorhi	r4,r8,2381
41025254:	4102537c 	xorhi	r4,r8,2381
41025258:	41025d9c 	xori	r4,r8,2422
4102525c:	41025d9c 	xori	r4,r8,2422
41025260:	41025d9c 	xori	r4,r8,2422
41025264:	41025d9c 	xori	r4,r8,2422
41025268:	41025d9c 	xori	r4,r8,2422
4102526c:	41025d9c 	xori	r4,r8,2422
41025270:	41025d9c 	xori	r4,r8,2422
41025274:	41025d9c 	xori	r4,r8,2422
41025278:	41025d9c 	xori	r4,r8,2422
4102527c:	41025d9c 	xori	r4,r8,2422
41025280:	4102537c 	xorhi	r4,r8,2381
41025284:	4102537c 	xorhi	r4,r8,2381
41025288:	4102537c 	xorhi	r4,r8,2381
4102528c:	4102537c 	xorhi	r4,r8,2381
41025290:	4102537c 	xorhi	r4,r8,2381
41025294:	4102537c 	xorhi	r4,r8,2381
41025298:	4102537c 	xorhi	r4,r8,2381
4102529c:	4102537c 	xorhi	r4,r8,2381
410252a0:	4102537c 	xorhi	r4,r8,2381
410252a4:	4102537c 	xorhi	r4,r8,2381
410252a8:	4102651c 	xori	r4,r8,2452
410252ac:	41026514 	ori	r4,r8,2452
410252b0:	4102537c 	xorhi	r4,r8,2381
410252b4:	41026514 	ori	r4,r8,2452
410252b8:	4102537c 	xorhi	r4,r8,2381
410252bc:	4102537c 	xorhi	r4,r8,2381
410252c0:	4102537c 	xorhi	r4,r8,2381
410252c4:	4102537c 	xorhi	r4,r8,2381
410252c8:	410265ac 	andhi	r4,r8,2454
410252cc:	4102537c 	xorhi	r4,r8,2381
410252d0:	4102537c 	xorhi	r4,r8,2381
410252d4:	41026564 	muli	r4,r8,2453
410252d8:	4102537c 	xorhi	r4,r8,2381
410252dc:	4102537c 	xorhi	r4,r8,2381
410252e0:	4102537c 	xorhi	r4,r8,2381
410252e4:	4102537c 	xorhi	r4,r8,2381
410252e8:	4102537c 	xorhi	r4,r8,2381
410252ec:	4102537c 	xorhi	r4,r8,2381
410252f0:	4102537c 	xorhi	r4,r8,2381
410252f4:	4102537c 	xorhi	r4,r8,2381
410252f8:	410263a8 	cmpgeui	r4,r8,2446
410252fc:	4102537c 	xorhi	r4,r8,2381
41025300:	4102537c 	xorhi	r4,r8,2381
41025304:	41026548 	cmpgei	r4,r8,2453
41025308:	4102537c 	xorhi	r4,r8,2381
4102530c:	4102537c 	xorhi	r4,r8,2381
41025310:	4102537c 	xorhi	r4,r8,2381
41025314:	4102537c 	xorhi	r4,r8,2381
41025318:	4102537c 	xorhi	r4,r8,2381
4102531c:	4102537c 	xorhi	r4,r8,2381
41025320:	4102537c 	xorhi	r4,r8,2381
41025324:	4102653c 	xorhi	r4,r8,2452
41025328:	41026520 	cmpeqi	r4,r8,2452
4102532c:	41026514 	ori	r4,r8,2452
41025330:	41026514 	ori	r4,r8,2452
41025334:	41026514 	ori	r4,r8,2452
41025338:	4102650c 	andi	r4,r8,2452
4102533c:	41026600 	call	44102660 <__flash_rwdata_start+0x30cd6c0>
41025340:	4102537c 	xorhi	r4,r8,2381
41025344:	4102537c 	xorhi	r4,r8,2381
41025348:	410265ec 	andhi	r4,r8,2455
4102534c:	4102537c 	xorhi	r4,r8,2381
41025350:	41026584 	addi	r4,r8,2454
41025354:	41026568 	cmpgeui	r4,r8,2453
41025358:	410265bc 	xorhi	r4,r8,2454
4102535c:	4102537c 	xorhi	r4,r8,2381
41025360:	4102537c 	xorhi	r4,r8,2381
41025364:	410265b4 	orhi	r4,r8,2454
41025368:	4102537c 	xorhi	r4,r8,2381
4102536c:	410258ec 	andhi	r4,r8,2403
41025370:	4102537c 	xorhi	r4,r8,2381
41025374:	4102537c 	xorhi	r4,r8,2381
41025378:	410263a8 	cmpgeui	r4,r8,2446
4102537c:	2987883a 	add	r3,r5,r6
41025380:	18800003 	ldbu	r2,0(r3)
41025384:	1080004c 	andi	r2,r2,1
41025388:	1005003a 	cmpeq	r2,r2,zero
4102538c:	10002c26 	beq	r2,zero,41025440 <__svfscanf_r+0x450>
41025390:	011040f4 	movhi	r4,16643
41025394:	21330504 	addi	r4,r4,-13292
41025398:	00800284 	movi	r2,10
4102539c:	d900a015 	stw	r4,640(sp)
410253a0:	054000c4 	movi	r21,3
410253a4:	d880a115 	stw	r2,644(sp)
410253a8:	80c00117 	ldw	r3,4(r16)
410253ac:	00c14a0e 	bge	zero,r3,410258d8 <__svfscanf_r+0x8e8>
410253b0:	9880100c 	andi	r2,r19,64
410253b4:	10001326 	beq	r2,zero,41025404 <__svfscanf_r+0x414>
410253b8:	00800104 	movi	r2,4
410253bc:	157f1f36 	bltu	r2,r21,4102503c <__svfscanf_r+0x4c>
410253c0:	ad45883a 	add	r2,r21,r21
410253c4:	1085883a 	add	r2,r2,r2
410253c8:	00d040b4 	movhi	r3,16642
410253cc:	18d4f704 	addi	r3,r3,21468
410253d0:	10c5883a 	add	r2,r2,r3
410253d4:	11000017 	ldw	r4,0(r2)
410253d8:	2000683a 	jmp	r4
410253dc:	41025448 	cmpgei	r4,r8,2385
410253e0:	41025554 	ori	r4,r8,2389
410253e4:	410255c8 	cmpgei	r4,r8,2391
410253e8:	410258b4 	orhi	r4,r8,2402
410253ec:	41025700 	call	44102570 <__flash_rwdata_start+0x30cd5d0>
410253f0:	b009883a 	mov	r4,r22
410253f4:	800b883a 	mov	r5,r16
410253f8:	102afb40 	call	4102afb4 <__srefill_r>
410253fc:	103f511e 	bne	r2,zero,41025144 <__svfscanf_r+0x154>
41025400:	8c400044 	addi	r17,r17,1
41025404:	81400017 	ldw	r5,0(r16)
41025408:	90800017 	ldw	r2,0(r18)
4102540c:	28c00003 	ldbu	r3,0(r5)
41025410:	1887883a 	add	r3,r3,r2
41025414:	19000003 	ldbu	r4,0(r3)
41025418:	2100020c 	andi	r4,r4,8
4102541c:	203fe626 	beq	r4,zero,410253b8 <__svfscanf_r+0x3c8>
41025420:	80c00117 	ldw	r3,4(r16)
41025424:	18ffffc4 	addi	r3,r3,-1
41025428:	80c00115 	stw	r3,4(r16)
4102542c:	00fff00e 	bge	zero,r3,410253f0 <__svfscanf_r+0x400>
41025430:	29800044 	addi	r6,r5,1
41025434:	8c400044 	addi	r17,r17,1
41025438:	81800015 	stw	r6,0(r16)
4102543c:	003ff106 	br	41025404 <__svfscanf_r+0x414>
41025440:	9cc00054 	ori	r19,r19,1
41025444:	003fd206 	br	41025390 <__svfscanf_r+0x3a0>
41025448:	d8c0a317 	ldw	r3,652(sp)
4102544c:	1800021e 	bne	r3,zero,41025458 <__svfscanf_r+0x468>
41025450:	01000044 	movi	r4,1
41025454:	d900a315 	stw	r4,652(sp)
41025458:	9880004c 	andi	r2,r19,1
4102545c:	1005003a 	cmpeq	r2,r2,zero
41025460:	1003d91e 	bne	r2,zero,410263c8 <__svfscanf_r+0x13d8>
41025464:	9d40040c 	andi	r21,r19,16
41025468:	a839003a 	cmpeq	fp,r21,zero
4102546c:	e0042526 	beq	fp,zero,41026504 <__svfscanf_r+0x1514>
41025470:	d880a417 	ldw	r2,656(sp)
41025474:	14c00017 	ldw	r19,0(r2)
41025478:	10800104 	addi	r2,r2,4
4102547c:	d880a415 	stw	r2,656(sp)
41025480:	d8c0a317 	ldw	r3,652(sp)
41025484:	18041a26 	beq	r3,zero,410264f0 <__svfscanf_r+0x1500>
41025488:	01000034 	movhi	r4,0
4102548c:	210adc04 	addi	r4,r4,11120
41025490:	20800017 	ldw	r2,0(r4)
41025494:	103f2b26 	beq	r2,zero,41025144 <__svfscanf_r+0x154>
41025498:	d8804404 	addi	r2,sp,272
4102549c:	0025883a 	mov	r18,zero
410254a0:	d880a615 	stw	r2,664(sp)
410254a4:	05ffffc4 	movi	r23,-1
410254a8:	80800017 	ldw	r2,0(r16)
410254ac:	80c00117 	ldw	r3,4(r16)
410254b0:	d900a617 	ldw	r4,664(sp)
410254b4:	12000003 	ldbu	r8,0(r2)
410254b8:	18ffffc4 	addi	r3,r3,-1
410254bc:	11800044 	addi	r6,r2,1
410254c0:	248f883a 	add	r7,r4,r18
410254c4:	80c00115 	stw	r3,4(r16)
410254c8:	81800015 	stw	r6,0(r16)
410254cc:	3a000005 	stb	r8,0(r7)
410254d0:	d9000204 	addi	r4,sp,8
410254d4:	000b883a 	mov	r5,zero
410254d8:	01800204 	movi	r6,8
410254dc:	10297480 	call	41029748 <memset>
410254e0:	d980a617 	ldw	r6,664(sp)
410254e4:	94800044 	addi	r18,r18,1
410254e8:	d8800204 	addi	r2,sp,8
410254ec:	b009883a 	mov	r4,r22
410254f0:	980b883a 	mov	r5,r19
410254f4:	900f883a 	mov	r7,r18
410254f8:	d8800015 	stw	r2,0(sp)
410254fc:	10294840 	call	41029484 <_mbrtowc_r>
41025500:	1007883a 	mov	r3,r2
41025504:	15ff0f26 	beq	r2,r23,41025144 <__svfscanf_r+0x154>
41025508:	1003f11e 	bne	r2,zero,410264d0 <__svfscanf_r+0x14e0>
4102550c:	a800011e 	bne	r21,zero,41025514 <__svfscanf_r+0x524>
41025510:	98000015 	stw	zero,0(r19)
41025514:	d8c0a317 	ldw	r3,652(sp)
41025518:	8ca3883a 	add	r17,r17,r18
4102551c:	18ffffc4 	addi	r3,r3,-1
41025520:	d8c0a315 	stw	r3,652(sp)
41025524:	e0000126 	beq	fp,zero,4102552c <__svfscanf_r+0x53c>
41025528:	9cc00104 	addi	r19,r19,4
4102552c:	0025883a 	mov	r18,zero
41025530:	80c00117 	ldw	r3,4(r16)
41025534:	00c3e90e 	bge	zero,r3,410264dc <__svfscanf_r+0x14ec>
41025538:	d900a317 	ldw	r4,652(sp)
4102553c:	2003ec26 	beq	r4,zero,410264f0 <__svfscanf_r+0x1500>
41025540:	00c00034 	movhi	r3,0
41025544:	18cadc04 	addi	r3,r3,11120
41025548:	18800017 	ldw	r2,0(r3)
4102554c:	90bfd61e 	bne	r18,r2,410254a8 <__svfscanf_r+0x4b8>
41025550:	003efc06 	br	41025144 <__svfscanf_r+0x154>
41025554:	d880a317 	ldw	r2,652(sp)
41025558:	1000021e 	bne	r2,zero,41025564 <__svfscanf_r+0x574>
4102555c:	00ffffc4 	movi	r3,-1
41025560:	d8c0a315 	stw	r3,652(sp)
41025564:	9880040c 	andi	r2,r19,16
41025568:	10036526 	beq	r2,zero,41026300 <__svfscanf_r+0x1310>
4102556c:	0027883a 	mov	r19,zero
41025570:	dd400404 	addi	r21,sp,16
41025574:	81000017 	ldw	r4,0(r16)
41025578:	20800003 	ldbu	r2,0(r4)
4102557c:	a885883a 	add	r2,r21,r2
41025580:	10c00007 	ldb	r3,0(r2)
41025584:	1803be26 	beq	r3,zero,41026480 <__svfscanf_r+0x1490>
41025588:	80c00117 	ldw	r3,4(r16)
4102558c:	21800044 	addi	r6,r4,1
41025590:	d900a317 	ldw	r4,652(sp)
41025594:	18ffffc4 	addi	r3,r3,-1
41025598:	9cc00044 	addi	r19,r19,1
4102559c:	81800015 	stw	r6,0(r16)
410255a0:	80c00115 	stw	r3,4(r16)
410255a4:	24c3b626 	beq	r4,r19,41026480 <__svfscanf_r+0x1490>
410255a8:	00fff216 	blt	zero,r3,41025574 <__svfscanf_r+0x584>
410255ac:	b009883a 	mov	r4,r22
410255b0:	800b883a 	mov	r5,r16
410255b4:	102afb40 	call	4102afb4 <__srefill_r>
410255b8:	103fee26 	beq	r2,zero,41025574 <__svfscanf_r+0x584>
410255bc:	983ee126 	beq	r19,zero,41025144 <__svfscanf_r+0x154>
410255c0:	8ce3883a 	add	r17,r17,r19
410255c4:	003e9d06 	br	4102503c <__svfscanf_r+0x4c>
410255c8:	d900a317 	ldw	r4,652(sp)
410255cc:	2000021e 	bne	r4,zero,410255d8 <__svfscanf_r+0x5e8>
410255d0:	00bfffc4 	movi	r2,-1
410255d4:	d880a315 	stw	r2,652(sp)
410255d8:	9880004c 	andi	r2,r19,1
410255dc:	1005003a 	cmpeq	r2,r2,zero
410255e0:	1001f41e 	bne	r2,zero,41025db4 <__svfscanf_r+0xdc4>
410255e4:	9dc0040c 	andi	r23,r19,16
410255e8:	b807003a 	cmpeq	r3,r23,zero
410255ec:	d8c0a515 	stw	r3,660(sp)
410255f0:	1803b21e 	bne	r3,zero,410264bc <__svfscanf_r+0x14cc>
410255f4:	dd400104 	addi	r21,sp,4
410255f8:	0027883a 	mov	r19,zero
410255fc:	073fffc4 	movi	fp,-1
41025600:	81400017 	ldw	r5,0(r16)
41025604:	90800017 	ldw	r2,0(r18)
41025608:	29c00003 	ldbu	r7,0(r5)
4102560c:	38c03fcc 	andi	r3,r7,255
41025610:	1887883a 	add	r3,r3,r2
41025614:	19000003 	ldbu	r4,0(r3)
41025618:	2100020c 	andi	r4,r4,8
4102561c:	2000321e 	bne	r4,zero,410256e8 <__svfscanf_r+0x6f8>
41025620:	d8c0a317 	ldw	r3,652(sp)
41025624:	18003026 	beq	r3,zero,410256e8 <__svfscanf_r+0x6f8>
41025628:	00800034 	movhi	r2,0
4102562c:	108adc04 	addi	r2,r2,11120
41025630:	10c00017 	ldw	r3,0(r2)
41025634:	98fec326 	beq	r19,r3,41025144 <__svfscanf_r+0x154>
41025638:	d8c04404 	addi	r3,sp,272
4102563c:	80800117 	ldw	r2,4(r16)
41025640:	d8c0a615 	stw	r3,664(sp)
41025644:	d900a617 	ldw	r4,664(sp)
41025648:	10ffffc4 	addi	r3,r2,-1
4102564c:	29800044 	addi	r6,r5,1
41025650:	80c00115 	stw	r3,4(r16)
41025654:	24c5883a 	add	r2,r4,r19
41025658:	81800015 	stw	r6,0(r16)
4102565c:	d9000204 	addi	r4,sp,8
41025660:	000b883a 	mov	r5,zero
41025664:	01800204 	movi	r6,8
41025668:	11c00005 	stb	r7,0(r2)
4102566c:	10297480 	call	41029748 <memset>
41025670:	d980a617 	ldw	r6,664(sp)
41025674:	9cc00044 	addi	r19,r19,1
41025678:	d8800204 	addi	r2,sp,8
4102567c:	b009883a 	mov	r4,r22
41025680:	a80b883a 	mov	r5,r21
41025684:	980f883a 	mov	r7,r19
41025688:	d8800015 	stw	r2,0(sp)
4102568c:	10294840 	call	41029484 <_mbrtowc_r>
41025690:	1007883a 	mov	r3,r2
41025694:	173eab26 	beq	r2,fp,41025144 <__svfscanf_r+0x154>
41025698:	1003851e 	bne	r2,zero,410264b0 <__svfscanf_r+0x14c0>
4102569c:	a8000015 	stw	zero,0(r21)
410256a0:	a9000017 	ldw	r4,0(r21)
410256a4:	10292000 	call	41029200 <iswspace>
410256a8:	1003781e 	bne	r2,zero,4102648c <__svfscanf_r+0x149c>
410256ac:	d900a317 	ldw	r4,652(sp)
410256b0:	d880a517 	ldw	r2,660(sp)
410256b4:	8ce3883a 	add	r17,r17,r19
410256b8:	213fffc4 	addi	r4,r4,-1
410256bc:	d900a315 	stw	r4,652(sp)
410256c0:	10000126 	beq	r2,zero,410256c8 <__svfscanf_r+0x6d8>
410256c4:	ad400104 	addi	r21,r21,4
410256c8:	0027883a 	mov	r19,zero
410256cc:	80c00117 	ldw	r3,4(r16)
410256d0:	00ffcb16 	blt	zero,r3,41025600 <__svfscanf_r+0x610>
410256d4:	b009883a 	mov	r4,r22
410256d8:	800b883a 	mov	r5,r16
410256dc:	102afb40 	call	4102afb4 <__srefill_r>
410256e0:	103fc726 	beq	r2,zero,41025600 <__svfscanf_r+0x610>
410256e4:	983e971e 	bne	r19,zero,41025144 <__svfscanf_r+0x154>
410256e8:	b83e541e 	bne	r23,zero,4102503c <__svfscanf_r+0x4c>
410256ec:	d900a217 	ldw	r4,648(sp)
410256f0:	a8000015 	stw	zero,0(r21)
410256f4:	21000044 	addi	r4,r4,1
410256f8:	d900a215 	stw	r4,648(sp)
410256fc:	003e4f06 	br	4102503c <__svfscanf_r+0x4c>
41025700:	d900a317 	ldw	r4,652(sp)
41025704:	00805704 	movi	r2,348
41025708:	20ffffc4 	addi	r3,r4,-1
4102570c:	10c1ed2e 	bgeu	r2,r3,41025ec4 <__svfscanf_r+0xed4>
41025710:	00805744 	movi	r2,349
41025714:	21bfa8c4 	addi	r6,r4,-349
41025718:	9d41e014 	ori	r21,r19,1920
4102571c:	d880a315 	stw	r2,652(sp)
41025720:	d8c04404 	addi	r3,sp,272
41025724:	d8c0a615 	stw	r3,664(sp)
41025728:	182f883a 	mov	r23,r3
4102572c:	d8009f15 	stw	zero,636(sp)
41025730:	d8009e15 	stw	zero,632(sp)
41025734:	d8009d15 	stw	zero,628(sp)
41025738:	d8009c15 	stw	zero,624(sp)
4102573c:	0039883a 	mov	fp,zero
41025740:	0025883a 	mov	r18,zero
41025744:	80800017 	ldw	r2,0(r16)
41025748:	11400003 	ldbu	r5,0(r2)
4102574c:	00801384 	movi	r2,78
41025750:	28fff544 	addi	r3,r5,-43
41025754:	18c03fcc 	andi	r3,r3,255
41025758:	10c07d36 	bltu	r2,r3,41025950 <__svfscanf_r+0x960>
4102575c:	18c5883a 	add	r2,r3,r3
41025760:	1085883a 	add	r2,r2,r2
41025764:	00d040b4 	movhi	r3,16642
41025768:	18d5de04 	addi	r3,r3,22392
4102576c:	10c5883a 	add	r2,r2,r3
41025770:	11000017 	ldw	r4,0(r2)
41025774:	2000683a 	jmp	r4
41025778:	41025908 	cmpgei	r4,r8,2404
4102577c:	41025950 	cmplti	r4,r8,2405
41025780:	41025908 	cmpgei	r4,r8,2404
41025784:	41025a9c 	xori	r4,r8,2410
41025788:	41025950 	cmplti	r4,r8,2405
4102578c:	41025ad4 	ori	r4,r8,2411
41025790:	41025b08 	cmpgei	r4,r8,2412
41025794:	41025b08 	cmpgei	r4,r8,2412
41025798:	41025b08 	cmpgei	r4,r8,2412
4102579c:	41025b08 	cmpgei	r4,r8,2412
410257a0:	41025b08 	cmpgei	r4,r8,2412
410257a4:	41025b08 	cmpgei	r4,r8,2412
410257a8:	41025b08 	cmpgei	r4,r8,2412
410257ac:	41025b08 	cmpgei	r4,r8,2412
410257b0:	41025b08 	cmpgei	r4,r8,2412
410257b4:	41025950 	cmplti	r4,r8,2405
410257b8:	41025950 	cmplti	r4,r8,2405
410257bc:	41025950 	cmplti	r4,r8,2405
410257c0:	41025950 	cmplti	r4,r8,2405
410257c4:	41025950 	cmplti	r4,r8,2405
410257c8:	41025950 	cmplti	r4,r8,2405
410257cc:	41025950 	cmplti	r4,r8,2405
410257d0:	41025b28 	cmpgeui	r4,r8,2412
410257d4:	41025950 	cmplti	r4,r8,2405
410257d8:	41025950 	cmplti	r4,r8,2405
410257dc:	41025950 	cmplti	r4,r8,2405
410257e0:	41025b38 	rdprs	r4,r8,2412
410257e4:	41025bd4 	ori	r4,r8,2415
410257e8:	41025950 	cmplti	r4,r8,2405
410257ec:	41025950 	cmplti	r4,r8,2405
410257f0:	41025bf0 	cmpltui	r4,r8,2415
410257f4:	41025950 	cmplti	r4,r8,2405
410257f8:	41025950 	cmplti	r4,r8,2405
410257fc:	41025950 	cmplti	r4,r8,2405
41025800:	41025950 	cmplti	r4,r8,2405
41025804:	41025c1c 	xori	r4,r8,2416
41025808:	41025950 	cmplti	r4,r8,2405
4102580c:	41025950 	cmplti	r4,r8,2405
41025810:	41025950 	cmplti	r4,r8,2405
41025814:	41025950 	cmplti	r4,r8,2405
41025818:	41025950 	cmplti	r4,r8,2405
4102581c:	41025c70 	cmpltui	r4,r8,2417
41025820:	41025950 	cmplti	r4,r8,2405
41025824:	41025950 	cmplti	r4,r8,2405
41025828:	41025950 	cmplti	r4,r8,2405
4102582c:	41025950 	cmplti	r4,r8,2405
41025830:	41025d80 	call	441025d8 <__flash_rwdata_start+0x30cd638>
41025834:	41025950 	cmplti	r4,r8,2405
41025838:	41025950 	cmplti	r4,r8,2405
4102583c:	41025950 	cmplti	r4,r8,2405
41025840:	41025950 	cmplti	r4,r8,2405
41025844:	41025950 	cmplti	r4,r8,2405
41025848:	41025950 	cmplti	r4,r8,2405
4102584c:	41025950 	cmplti	r4,r8,2405
41025850:	41025b28 	cmpgeui	r4,r8,2412
41025854:	41025950 	cmplti	r4,r8,2405
41025858:	41025950 	cmplti	r4,r8,2405
4102585c:	41025950 	cmplti	r4,r8,2405
41025860:	41025b38 	rdprs	r4,r8,2412
41025864:	41025bd4 	ori	r4,r8,2415
41025868:	41025950 	cmplti	r4,r8,2405
4102586c:	41025950 	cmplti	r4,r8,2405
41025870:	41025bf0 	cmpltui	r4,r8,2415
41025874:	41025950 	cmplti	r4,r8,2405
41025878:	41025950 	cmplti	r4,r8,2405
4102587c:	41025950 	cmplti	r4,r8,2405
41025880:	41025950 	cmplti	r4,r8,2405
41025884:	41025c1c 	xori	r4,r8,2416
41025888:	41025950 	cmplti	r4,r8,2405
4102588c:	41025950 	cmplti	r4,r8,2405
41025890:	41025950 	cmplti	r4,r8,2405
41025894:	41025950 	cmplti	r4,r8,2405
41025898:	41025950 	cmplti	r4,r8,2405
4102589c:	41025c70 	cmpltui	r4,r8,2417
410258a0:	41025950 	cmplti	r4,r8,2405
410258a4:	41025950 	cmplti	r4,r8,2405
410258a8:	41025950 	cmplti	r4,r8,2405
410258ac:	41025950 	cmplti	r4,r8,2405
410258b0:	41025d80 	call	441025d8 <__flash_rwdata_start+0x30cd638>
410258b4:	d900a317 	ldw	r4,652(sp)
410258b8:	00805704 	movi	r2,348
410258bc:	20ffffc4 	addi	r3,r4,-1
410258c0:	10c18c2e 	bgeu	r2,r3,41025ef4 <__svfscanf_r+0xf04>
410258c4:	00805744 	movi	r2,349
410258c8:	257fa8c4 	addi	r21,r4,-349
410258cc:	9c836014 	ori	r18,r19,3456
410258d0:	d880a315 	stw	r2,652(sp)
410258d4:	0001a106 	br	41025f5c <__svfscanf_r+0xf6c>
410258d8:	b009883a 	mov	r4,r22
410258dc:	800b883a 	mov	r5,r16
410258e0:	102afb40 	call	4102afb4 <__srefill_r>
410258e4:	103eb226 	beq	r2,zero,410253b0 <__svfscanf_r+0x3c0>
410258e8:	003e1606 	br	41025144 <__svfscanf_r+0x154>
410258ec:	01000284 	movi	r4,10
410258f0:	009040f4 	movhi	r2,16643
410258f4:	10b46804 	addi	r2,r2,-11872
410258f8:	054000c4 	movi	r21,3
410258fc:	d900a115 	stw	r4,644(sp)
41025900:	d880a015 	stw	r2,640(sp)
41025904:	003ea806 	br	410253a8 <__svfscanf_r+0x3b8>
41025908:	a880200c 	andi	r2,r21,128
4102590c:	10001026 	beq	r2,zero,41025950 <__svfscanf_r+0x960>
41025910:	00bfdfc4 	movi	r2,-129
41025914:	a8aa703a 	and	r21,r21,r2
41025918:	b9400005 	stb	r5,0(r23)
4102591c:	bdc00044 	addi	r23,r23,1
41025920:	80c00117 	ldw	r3,4(r16)
41025924:	8c400044 	addi	r17,r17,1
41025928:	18bfffc4 	addi	r2,r3,-1
4102592c:	80800115 	stw	r2,4(r16)
41025930:	0080610e 	bge	zero,r2,41025ab8 <__svfscanf_r+0xac8>
41025934:	80800017 	ldw	r2,0(r16)
41025938:	10800044 	addi	r2,r2,1
4102593c:	80800015 	stw	r2,0(r16)
41025940:	d880a317 	ldw	r2,652(sp)
41025944:	10bfffc4 	addi	r2,r2,-1
41025948:	d880a315 	stw	r2,652(sp)
4102594c:	103f7d1e 	bne	r2,zero,41025744 <__svfscanf_r+0x754>
41025950:	d8c09e17 	ldw	r3,632(sp)
41025954:	18000226 	beq	r3,zero,41025960 <__svfscanf_r+0x970>
41025958:	00bfbfc4 	movi	r2,-257
4102595c:	a8aa703a 	and	r21,r21,r2
41025960:	90ffffc4 	addi	r3,r18,-1
41025964:	00800044 	movi	r2,1
41025968:	10c0cd2e 	bgeu	r2,r3,41025ca0 <__svfscanf_r+0xcb0>
4102596c:	e1003fcc 	andi	r4,fp,255
41025970:	2100201c 	xori	r4,r4,128
41025974:	213fe004 	addi	r4,r4,-128
41025978:	20ffffc4 	addi	r3,r4,-1
4102597c:	00800184 	movi	r2,6
41025980:	10c01736 	bltu	r2,r3,410259e0 <__svfscanf_r+0x9f0>
41025984:	00c00084 	movi	r3,2
41025988:	1900880e 	bge	r3,r4,41025bac <__svfscanf_r+0xbbc>
4102598c:	008000c4 	movi	r2,3
41025990:	1100130e 	bge	r2,r4,410259e0 <__svfscanf_r+0x9f0>
41025994:	e4ffffc4 	addi	r19,fp,-1
41025998:	b825883a 	mov	r18,r23
4102599c:	94bfffc4 	addi	r18,r18,-1
410259a0:	91400007 	ldb	r5,0(r18)
410259a4:	b009883a 	mov	r4,r22
410259a8:	800d883a 	mov	r6,r16
410259ac:	102d7c80 	call	4102d7c8 <_ungetc_r>
410259b0:	9cffffc4 	addi	r19,r19,-1
410259b4:	98c03fcc 	andi	r3,r19,255
410259b8:	18c0201c 	xori	r3,r3,128
410259bc:	18ffe004 	addi	r3,r3,-128
410259c0:	00800084 	movi	r2,2
410259c4:	18bff51e 	bne	r3,r2,4102599c <__svfscanf_r+0x9ac>
410259c8:	e0bfff04 	addi	r2,fp,-4
410259cc:	10803fcc 	andi	r2,r2,255
410259d0:	b887c83a 	sub	r3,r23,r2
410259d4:	8885c83a 	sub	r2,r17,r2
410259d8:	147fffc4 	addi	r17,r2,-1
410259dc:	1dffffc4 	addi	r23,r3,-1
410259e0:	a880400c 	andi	r2,r21,256
410259e4:	10001226 	beq	r2,zero,41025a30 <__svfscanf_r+0xa40>
410259e8:	a881000c 	andi	r2,r21,1024
410259ec:	1000651e 	bne	r2,zero,41025b84 <__svfscanf_r+0xb94>
410259f0:	bdffffc4 	addi	r23,r23,-1
410259f4:	b9400007 	ldb	r5,0(r23)
410259f8:	00801944 	movi	r2,101
410259fc:	8c7fffc4 	addi	r17,r17,-1
41025a00:	28800826 	beq	r5,r2,41025a24 <__svfscanf_r+0xa34>
41025a04:	00801144 	movi	r2,69
41025a08:	28800626 	beq	r5,r2,41025a24 <__svfscanf_r+0xa34>
41025a0c:	bdffffc4 	addi	r23,r23,-1
41025a10:	b009883a 	mov	r4,r22
41025a14:	800d883a 	mov	r6,r16
41025a18:	102d7c80 	call	4102d7c8 <_ungetc_r>
41025a1c:	b9400007 	ldb	r5,0(r23)
41025a20:	8c7fffc4 	addi	r17,r17,-1
41025a24:	b009883a 	mov	r4,r22
41025a28:	800d883a 	mov	r6,r16
41025a2c:	102d7c80 	call	4102d7c8 <_ungetc_r>
41025a30:	a880040c 	andi	r2,r21,16
41025a34:	103d811e 	bne	r2,zero,4102503c <__svfscanf_r+0x4c>
41025a38:	a8c1800c 	andi	r3,r21,1536
41025a3c:	00810004 	movi	r2,1024
41025a40:	b8000005 	stb	zero,0(r23)
41025a44:	1880bb26 	beq	r3,r2,41025d34 <__svfscanf_r+0xd44>
41025a48:	d8809d17 	ldw	r2,628(sp)
41025a4c:	1000a61e 	bne	r2,zero,41025ce8 <__svfscanf_r+0xcf8>
41025a50:	d940a617 	ldw	r5,664(sp)
41025a54:	b009883a 	mov	r4,r22
41025a58:	000d883a 	mov	r6,zero
41025a5c:	102b5f00 	call	4102b5f0 <_strtod_r>
41025a60:	a900004c 	andi	r4,r21,1
41025a64:	2009003a 	cmpeq	r4,r4,zero
41025a68:	1025883a 	mov	r18,r2
41025a6c:	1827883a 	mov	r19,r3
41025a70:	2000951e 	bne	r4,zero,41025cc8 <__svfscanf_r+0xcd8>
41025a74:	d8c0a417 	ldw	r3,656(sp)
41025a78:	18800017 	ldw	r2,0(r3)
41025a7c:	1d400104 	addi	r21,r3,4
41025a80:	14c00115 	stw	r19,4(r2)
41025a84:	14800015 	stw	r18,0(r2)
41025a88:	d8c0a217 	ldw	r3,648(sp)
41025a8c:	dd40a415 	stw	r21,656(sp)
41025a90:	18c00044 	addi	r3,r3,1
41025a94:	d8c0a215 	stw	r3,648(sp)
41025a98:	003d6806 	br	4102503c <__svfscanf_r+0x4c>
41025a9c:	a880800c 	andi	r2,r21,512
41025aa0:	103fab26 	beq	r2,zero,41025950 <__svfscanf_r+0x960>
41025aa4:	d9009e17 	ldw	r4,632(sp)
41025aa8:	00bf5fc4 	movi	r2,-641
41025aac:	a8aa703a 	and	r21,r21,r2
41025ab0:	d9009f15 	stw	r4,636(sp)
41025ab4:	003f9806 	br	41025918 <__svfscanf_r+0x928>
41025ab8:	b009883a 	mov	r4,r22
41025abc:	800b883a 	mov	r5,r16
41025ac0:	d980a715 	stw	r6,668(sp)
41025ac4:	102afb40 	call	4102afb4 <__srefill_r>
41025ac8:	d980a717 	ldw	r6,668(sp)
41025acc:	103f9c26 	beq	r2,zero,41025940 <__svfscanf_r+0x950>
41025ad0:	003f9f06 	br	41025950 <__svfscanf_r+0x960>
41025ad4:	a880400c 	andi	r2,r21,256
41025ad8:	10000b26 	beq	r2,zero,41025b08 <__svfscanf_r+0xb18>
41025adc:	00bfdfc4 	movi	r2,-129
41025ae0:	a8aa703a 	and	r21,r21,r2
41025ae4:	d8809e17 	ldw	r2,632(sp)
41025ae8:	10800044 	addi	r2,r2,1
41025aec:	d8809e15 	stw	r2,632(sp)
41025af0:	303f8b26 	beq	r6,zero,41025920 <__svfscanf_r+0x930>
41025af4:	d8c0a317 	ldw	r3,652(sp)
41025af8:	31bfffc4 	addi	r6,r6,-1
41025afc:	18c00044 	addi	r3,r3,1
41025b00:	d8c0a315 	stw	r3,652(sp)
41025b04:	003f8606 	br	41025920 <__svfscanf_r+0x930>
41025b08:	e0803fcc 	andi	r2,fp,255
41025b0c:	1080201c 	xori	r2,r2,128
41025b10:	10bfe004 	addi	r2,r2,-128
41025b14:	9085883a 	add	r2,r18,r2
41025b18:	103f8d1e 	bne	r2,zero,41025950 <__svfscanf_r+0x960>
41025b1c:	00bf9fc4 	movi	r2,-385
41025b20:	a8aa703a 	and	r21,r21,r2
41025b24:	003f7c06 	br	41025918 <__svfscanf_r+0x928>
41025b28:	00800044 	movi	r2,1
41025b2c:	90bf881e 	bne	r18,r2,41025950 <__svfscanf_r+0x960>
41025b30:	04800084 	movi	r18,2
41025b34:	003f7806 	br	41025918 <__svfscanf_r+0x928>
41025b38:	a8c1400c 	andi	r3,r21,1280
41025b3c:	00810004 	movi	r2,1024
41025b40:	18800426 	beq	r3,r2,41025b54 <__svfscanf_r+0xb64>
41025b44:	a884703a 	and	r2,r21,r2
41025b48:	103f8126 	beq	r2,zero,41025950 <__svfscanf_r+0x960>
41025b4c:	d8809e17 	ldw	r2,632(sp)
41025b50:	103f8326 	beq	r2,zero,41025960 <__svfscanf_r+0x970>
41025b54:	a880800c 	andi	r2,r21,512
41025b58:	1000051e 	bne	r2,zero,41025b70 <__svfscanf_r+0xb80>
41025b5c:	d8c09e17 	ldw	r3,632(sp)
41025b60:	d9009f17 	ldw	r4,636(sp)
41025b64:	ddc09c15 	stw	r23,624(sp)
41025b68:	1907c83a 	sub	r3,r3,r4
41025b6c:	d8c09d15 	stw	r3,628(sp)
41025b70:	00be7fc4 	movi	r2,-1537
41025b74:	a884703a 	and	r2,r21,r2
41025b78:	15406014 	ori	r21,r2,384
41025b7c:	d8009e15 	stw	zero,632(sp)
41025b80:	003f6506 	br	41025918 <__svfscanf_r+0x928>
41025b84:	d900a617 	ldw	r4,664(sp)
41025b88:	25fd4e2e 	bgeu	r4,r23,410250c4 <__svfscanf_r+0xd4>
41025b8c:	bdffffc4 	addi	r23,r23,-1
41025b90:	b9400007 	ldb	r5,0(r23)
41025b94:	b009883a 	mov	r4,r22
41025b98:	800d883a 	mov	r6,r16
41025b9c:	102d7c80 	call	4102d7c8 <_ungetc_r>
41025ba0:	d880a617 	ldw	r2,664(sp)
41025ba4:	15fff936 	bltu	r2,r23,41025b8c <__svfscanf_r+0xb9c>
41025ba8:	003d4606 	br	410250c4 <__svfscanf_r+0xd4>
41025bac:	d900a617 	ldw	r4,664(sp)
41025bb0:	25fd442e 	bgeu	r4,r23,410250c4 <__svfscanf_r+0xd4>
41025bb4:	bdffffc4 	addi	r23,r23,-1
41025bb8:	b9400007 	ldb	r5,0(r23)
41025bbc:	b009883a 	mov	r4,r22
41025bc0:	800d883a 	mov	r6,r16
41025bc4:	102d7c80 	call	4102d7c8 <_ungetc_r>
41025bc8:	d8c0a617 	ldw	r3,664(sp)
41025bcc:	1dfff936 	bltu	r3,r23,41025bb4 <__svfscanf_r+0xbc4>
41025bd0:	003d3c06 	br	410250c4 <__svfscanf_r+0xd4>
41025bd4:	e0c03fcc 	andi	r3,fp,255
41025bd8:	18c0201c 	xori	r3,r3,128
41025bdc:	18ffe004 	addi	r3,r3,-128
41025be0:	00800084 	movi	r2,2
41025be4:	18bf5a1e 	bne	r3,r2,41025950 <__svfscanf_r+0x960>
41025be8:	070000c4 	movi	fp,3
41025bec:	003f4a06 	br	41025918 <__svfscanf_r+0x928>
41025bf0:	e0c03fcc 	andi	r3,fp,255
41025bf4:	18c0201c 	xori	r3,r3,128
41025bf8:	18ffe004 	addi	r3,r3,-128
41025bfc:	1800231e 	bne	r3,zero,41025c8c <__svfscanf_r+0xc9c>
41025c00:	a8c1c00c 	andi	r3,r21,1792
41025c04:	0081c004 	movi	r2,1792
41025c08:	18bf511e 	bne	r3,r2,41025950 <__svfscanf_r+0x960>
41025c0c:	00be1fc4 	movi	r2,-1921
41025c10:	a8aa703a 	and	r21,r21,r2
41025c14:	07000044 	movi	fp,1
41025c18:	003f3f06 	br	41025918 <__svfscanf_r+0x928>
41025c1c:	9000101e 	bne	r18,zero,41025c60 <__svfscanf_r+0xc70>
41025c20:	a8c1c00c 	andi	r3,r21,1792
41025c24:	0081c004 	movi	r2,1792
41025c28:	18800926 	beq	r3,r2,41025c50 <__svfscanf_r+0xc60>
41025c2c:	e0c03fcc 	andi	r3,fp,255
41025c30:	18c0201c 	xori	r3,r3,128
41025c34:	18ffe004 	addi	r3,r3,-128
41025c38:	00800044 	movi	r2,1
41025c3c:	18800226 	beq	r3,r2,41025c48 <__svfscanf_r+0xc58>
41025c40:	00800104 	movi	r2,4
41025c44:	18bf421e 	bne	r3,r2,41025950 <__svfscanf_r+0x960>
41025c48:	e7000044 	addi	fp,fp,1
41025c4c:	003f3206 	br	41025918 <__svfscanf_r+0x928>
41025c50:	00be1fc4 	movi	r2,-1921
41025c54:	a8aa703a 	and	r21,r21,r2
41025c58:	04800044 	movi	r18,1
41025c5c:	003f2e06 	br	41025918 <__svfscanf_r+0x928>
41025c60:	00800084 	movi	r2,2
41025c64:	90bff11e 	bne	r18,r2,41025c2c <__svfscanf_r+0xc3c>
41025c68:	048000c4 	movi	r18,3
41025c6c:	003f2a06 	br	41025918 <__svfscanf_r+0x928>
41025c70:	e0c03fcc 	andi	r3,fp,255
41025c74:	18c0201c 	xori	r3,r3,128
41025c78:	18ffe004 	addi	r3,r3,-128
41025c7c:	00800184 	movi	r2,6
41025c80:	18bf331e 	bne	r3,r2,41025950 <__svfscanf_r+0x960>
41025c84:	070001c4 	movi	fp,7
41025c88:	003f2306 	br	41025918 <__svfscanf_r+0x928>
41025c8c:	008000c4 	movi	r2,3
41025c90:	18bfed26 	beq	r3,r2,41025c48 <__svfscanf_r+0xc58>
41025c94:	00800144 	movi	r2,5
41025c98:	18bfeb26 	beq	r3,r2,41025c48 <__svfscanf_r+0xc58>
41025c9c:	003f2c06 	br	41025950 <__svfscanf_r+0x960>
41025ca0:	d900a617 	ldw	r4,664(sp)
41025ca4:	25fd072e 	bgeu	r4,r23,410250c4 <__svfscanf_r+0xd4>
41025ca8:	bdffffc4 	addi	r23,r23,-1
41025cac:	b9400007 	ldb	r5,0(r23)
41025cb0:	b009883a 	mov	r4,r22
41025cb4:	800d883a 	mov	r6,r16
41025cb8:	102d7c80 	call	4102d7c8 <_ungetc_r>
41025cbc:	d880a617 	ldw	r2,664(sp)
41025cc0:	15fff936 	bltu	r2,r23,41025ca8 <__svfscanf_r+0xcb8>
41025cc4:	003cff06 	br	410250c4 <__svfscanf_r+0xd4>
41025cc8:	a880008c 	andi	r2,r21,2
41025ccc:	10002026 	beq	r2,zero,41025d50 <__svfscanf_r+0xd60>
41025cd0:	d900a417 	ldw	r4,656(sp)
41025cd4:	20800017 	ldw	r2,0(r4)
41025cd8:	25400104 	addi	r21,r4,4
41025cdc:	10c00115 	stw	r3,4(r2)
41025ce0:	14800015 	stw	r18,0(r2)
41025ce4:	003f6806 	br	41025a88 <__svfscanf_r+0xa98>
41025ce8:	d8c09c17 	ldw	r3,624(sp)
41025cec:	b009883a 	mov	r4,r22
41025cf0:	000d883a 	mov	r6,zero
41025cf4:	19400044 	addi	r5,r3,1
41025cf8:	01c00284 	movi	r7,10
41025cfc:	102cc140 	call	4102cc14 <_strtol_r>
41025d00:	d9009d17 	ldw	r4,628(sp)
41025d04:	110dc83a 	sub	r6,r2,r4
41025d08:	d8c0a617 	ldw	r3,664(sp)
41025d0c:	d9009c17 	ldw	r4,624(sp)
41025d10:	188054c4 	addi	r2,r3,339
41025d14:	20800236 	bltu	r4,r2,41025d20 <__svfscanf_r+0xd30>
41025d18:	18805484 	addi	r2,r3,338
41025d1c:	d8809c15 	stw	r2,624(sp)
41025d20:	d9009c17 	ldw	r4,624(sp)
41025d24:	01400034 	movhi	r5,0
41025d28:	2942d904 	addi	r5,r5,2916
41025d2c:	102b2cc0 	call	4102b2cc <sprintf>
41025d30:	003f4706 	br	41025a50 <__svfscanf_r+0xa60>
41025d34:	d8c09e17 	ldw	r3,632(sp)
41025d38:	d9009f17 	ldw	r4,636(sp)
41025d3c:	1905c83a 	sub	r2,r3,r4
41025d40:	103f4326 	beq	r2,zero,41025a50 <__svfscanf_r+0xa60>
41025d44:	008dc83a 	sub	r6,zero,r2
41025d48:	ddc09c15 	stw	r23,624(sp)
41025d4c:	003fee06 	br	41025d08 <__svfscanf_r+0xd18>
41025d50:	d880a417 	ldw	r2,656(sp)
41025d54:	9009883a 	mov	r4,r18
41025d58:	180b883a 	mov	r5,r3
41025d5c:	15c00017 	ldw	r23,0(r2)
41025d60:	15400104 	addi	r21,r2,4
41025d64:	102b1d40 	call	4102b1d4 <__isnand>
41025d68:	10021c1e 	bne	r2,zero,410265dc <__svfscanf_r+0x15ec>
41025d6c:	980b883a 	mov	r5,r19
41025d70:	9009883a 	mov	r4,r18
41025d74:	10308900 	call	41030890 <__truncdfsf2>
41025d78:	b8800015 	stw	r2,0(r23)
41025d7c:	003f4206 	br	41025a88 <__svfscanf_r+0xa98>
41025d80:	e0c03fcc 	andi	r3,fp,255
41025d84:	18c0201c 	xori	r3,r3,128
41025d88:	18ffe004 	addi	r3,r3,-128
41025d8c:	008001c4 	movi	r2,7
41025d90:	18beef1e 	bne	r3,r2,41025950 <__svfscanf_r+0x960>
41025d94:	07000204 	movi	fp,8
41025d98:	003edf06 	br	41025918 <__svfscanf_r+0x928>
41025d9c:	d900a317 	ldw	r4,652(sp)
41025da0:	208002a4 	muli	r2,r4,10
41025da4:	1145883a 	add	r2,r2,r5
41025da8:	10bff404 	addi	r2,r2,-48
41025dac:	d880a315 	stw	r2,652(sp)
41025db0:	003ceb06 	br	41025160 <__svfscanf_r+0x170>
41025db4:	9880040c 	andi	r2,r19,16
41025db8:	10001426 	beq	r2,zero,41025e0c <__svfscanf_r+0xe1c>
41025dbc:	0027883a 	mov	r19,zero
41025dc0:	00000906 	br	41025de8 <__svfscanf_r+0xdf8>
41025dc4:	80c00117 	ldw	r3,4(r16)
41025dc8:	d880a317 	ldw	r2,652(sp)
41025dcc:	29800044 	addi	r6,r5,1
41025dd0:	18ffffc4 	addi	r3,r3,-1
41025dd4:	9cc00044 	addi	r19,r19,1
41025dd8:	81800015 	stw	r6,0(r16)
41025ddc:	80c00115 	stw	r3,4(r16)
41025de0:	14fdf726 	beq	r2,r19,410255c0 <__svfscanf_r+0x5d0>
41025de4:	00c02c0e 	bge	zero,r3,41025e98 <__svfscanf_r+0xea8>
41025de8:	81400017 	ldw	r5,0(r16)
41025dec:	90800017 	ldw	r2,0(r18)
41025df0:	28c00003 	ldbu	r3,0(r5)
41025df4:	1887883a 	add	r3,r3,r2
41025df8:	19000003 	ldbu	r4,0(r3)
41025dfc:	2100020c 	andi	r4,r4,8
41025e00:	203ff026 	beq	r4,zero,41025dc4 <__svfscanf_r+0xdd4>
41025e04:	8ce3883a 	add	r17,r17,r19
41025e08:	003c8c06 	br	4102503c <__svfscanf_r+0x4c>
41025e0c:	d8c0a417 	ldw	r3,656(sp)
41025e10:	1d400017 	ldw	r21,0(r3)
41025e14:	a827883a 	mov	r19,r21
41025e18:	00000e06 	br	41025e54 <__svfscanf_r+0xe64>
41025e1c:	80800117 	ldw	r2,4(r16)
41025e20:	d900a317 	ldw	r4,652(sp)
41025e24:	29800044 	addi	r6,r5,1
41025e28:	10ffffc4 	addi	r3,r2,-1
41025e2c:	213fffc4 	addi	r4,r4,-1
41025e30:	d900a315 	stw	r4,652(sp)
41025e34:	80c00115 	stw	r3,4(r16)
41025e38:	28800003 	ldbu	r2,0(r5)
41025e3c:	98800005 	stb	r2,0(r19)
41025e40:	81800015 	stw	r6,0(r16)
41025e44:	9cc00044 	addi	r19,r19,1
41025e48:	20000926 	beq	r4,zero,41025e70 <__svfscanf_r+0xe80>
41025e4c:	80800117 	ldw	r2,4(r16)
41025e50:	0080170e 	bge	zero,r2,41025eb0 <__svfscanf_r+0xec0>
41025e54:	81400017 	ldw	r5,0(r16)
41025e58:	90800017 	ldw	r2,0(r18)
41025e5c:	28c00003 	ldbu	r3,0(r5)
41025e60:	1887883a 	add	r3,r3,r2
41025e64:	19000003 	ldbu	r4,0(r3)
41025e68:	2100020c 	andi	r4,r4,8
41025e6c:	203feb26 	beq	r4,zero,41025e1c <__svfscanf_r+0xe2c>
41025e70:	9d45c83a 	sub	r2,r19,r21
41025e74:	d8c0a217 	ldw	r3,648(sp)
41025e78:	88a3883a 	add	r17,r17,r2
41025e7c:	d880a417 	ldw	r2,656(sp)
41025e80:	18c00044 	addi	r3,r3,1
41025e84:	d8c0a215 	stw	r3,648(sp)
41025e88:	10800104 	addi	r2,r2,4
41025e8c:	d880a415 	stw	r2,656(sp)
41025e90:	98000005 	stb	zero,0(r19)
41025e94:	003c6906 	br	4102503c <__svfscanf_r+0x4c>
41025e98:	b009883a 	mov	r4,r22
41025e9c:	800b883a 	mov	r5,r16
41025ea0:	102afb40 	call	4102afb4 <__srefill_r>
41025ea4:	103fd026 	beq	r2,zero,41025de8 <__svfscanf_r+0xdf8>
41025ea8:	8ce3883a 	add	r17,r17,r19
41025eac:	003c6306 	br	4102503c <__svfscanf_r+0x4c>
41025eb0:	b009883a 	mov	r4,r22
41025eb4:	800b883a 	mov	r5,r16
41025eb8:	102afb40 	call	4102afb4 <__srefill_r>
41025ebc:	103fe526 	beq	r2,zero,41025e54 <__svfscanf_r+0xe64>
41025ec0:	003feb06 	br	41025e70 <__svfscanf_r+0xe80>
41025ec4:	d900a317 	ldw	r4,652(sp)
41025ec8:	9d41e014 	ori	r21,r19,1920
41025ecc:	2000821e 	bne	r4,zero,410260d8 <__svfscanf_r+0x10e8>
41025ed0:	d8c04404 	addi	r3,sp,272
41025ed4:	182f883a 	mov	r23,r3
41025ed8:	0039883a 	mov	fp,zero
41025edc:	d8c0a615 	stw	r3,664(sp)
41025ee0:	d8009c15 	stw	zero,624(sp)
41025ee4:	d8009d15 	stw	zero,628(sp)
41025ee8:	d8009f15 	stw	zero,636(sp)
41025eec:	d8009e15 	stw	zero,632(sp)
41025ef0:	003e9e06 	br	4102596c <__svfscanf_r+0x97c>
41025ef4:	d900a317 	ldw	r4,652(sp)
41025ef8:	9c836014 	ori	r18,r19,3456
41025efc:	2000161e 	bne	r4,zero,41025f58 <__svfscanf_r+0xf68>
41025f00:	d8804404 	addi	r2,sp,272
41025f04:	d880a615 	stw	r2,664(sp)
41025f08:	002f883a 	mov	r23,zero
41025f0c:	1027883a 	mov	r19,r2
41025f10:	9080400c 	andi	r2,r18,256
41025f14:	10000926 	beq	r2,zero,41025f3c <__svfscanf_r+0xf4c>
41025f18:	d8c0a617 	ldw	r3,664(sp)
41025f1c:	1cc0052e 	bgeu	r3,r19,41025f34 <__svfscanf_r+0xf44>
41025f20:	9cffffc4 	addi	r19,r19,-1
41025f24:	99400007 	ldb	r5,0(r19)
41025f28:	b009883a 	mov	r4,r22
41025f2c:	800d883a 	mov	r6,r16
41025f30:	102d7c80 	call	4102d7c8 <_ungetc_r>
41025f34:	d900a617 	ldw	r4,664(sp)
41025f38:	24fc6226 	beq	r4,r19,410250c4 <__svfscanf_r+0xd4>
41025f3c:	9080040c 	andi	r2,r18,16
41025f40:	10006726 	beq	r2,zero,410260e0 <__svfscanf_r+0x10f0>
41025f44:	d8c0a617 	ldw	r3,664(sp)
41025f48:	98c5c83a 	sub	r2,r19,r3
41025f4c:	b885883a 	add	r2,r23,r2
41025f50:	88a3883a 	add	r17,r17,r2
41025f54:	003c3906 	br	4102503c <__svfscanf_r+0x4c>
41025f58:	002b883a 	mov	r21,zero
41025f5c:	d8c04404 	addi	r3,sp,272
41025f60:	d8c0a615 	stw	r3,664(sp)
41025f64:	002f883a 	mov	r23,zero
41025f68:	1827883a 	mov	r19,r3
41025f6c:	81800017 	ldw	r6,0(r16)
41025f70:	00c01344 	movi	r3,77
41025f74:	31400003 	ldbu	r5,0(r6)
41025f78:	28bff544 	addi	r2,r5,-43
41025f7c:	10803fcc 	andi	r2,r2,255
41025f80:	18bfe336 	bltu	r3,r2,41025f10 <__svfscanf_r+0xf20>
41025f84:	1085883a 	add	r2,r2,r2
41025f88:	1085883a 	add	r2,r2,r2
41025f8c:	00d040b4 	movhi	r3,16642
41025f90:	18d7e804 	addi	r3,r3,24480
41025f94:	10c5883a 	add	r2,r2,r3
41025f98:	11000017 	ldw	r4,0(r2)
41025f9c:	2000683a 	jmp	r4
41025fa0:	41026134 	orhi	r4,r8,2436
41025fa4:	41025f10 	cmplti	r4,r8,2428
41025fa8:	41026134 	orhi	r4,r8,2436
41025fac:	41025f10 	cmplti	r4,r8,2428
41025fb0:	41025f10 	cmplti	r4,r8,2428
41025fb4:	41026178 	rdprs	r4,r8,2437
41025fb8:	41026274 	orhi	r4,r8,2441
41025fbc:	41026274 	orhi	r4,r8,2441
41025fc0:	41026274 	orhi	r4,r8,2441
41025fc4:	41026274 	orhi	r4,r8,2441
41025fc8:	41026274 	orhi	r4,r8,2441
41025fcc:	41026274 	orhi	r4,r8,2441
41025fd0:	41026274 	orhi	r4,r8,2441
41025fd4:	4102629c 	xori	r4,r8,2442
41025fd8:	4102629c 	xori	r4,r8,2442
41025fdc:	41025f10 	cmplti	r4,r8,2428
41025fe0:	41025f10 	cmplti	r4,r8,2428
41025fe4:	41025f10 	cmplti	r4,r8,2428
41025fe8:	41025f10 	cmplti	r4,r8,2428
41025fec:	41025f10 	cmplti	r4,r8,2428
41025ff0:	41025f10 	cmplti	r4,r8,2428
41025ff4:	41025f10 	cmplti	r4,r8,2428
41025ff8:	410262cc 	andi	r4,r8,2443
41025ffc:	410262cc 	andi	r4,r8,2443
41026000:	410262cc 	andi	r4,r8,2443
41026004:	410262cc 	andi	r4,r8,2443
41026008:	410262cc 	andi	r4,r8,2443
4102600c:	410262cc 	andi	r4,r8,2443
41026010:	41025f10 	cmplti	r4,r8,2428
41026014:	41025f10 	cmplti	r4,r8,2428
41026018:	41025f10 	cmplti	r4,r8,2428
4102601c:	41025f10 	cmplti	r4,r8,2428
41026020:	41025f10 	cmplti	r4,r8,2428
41026024:	41025f10 	cmplti	r4,r8,2428
41026028:	41025f10 	cmplti	r4,r8,2428
4102602c:	41025f10 	cmplti	r4,r8,2428
41026030:	41025f10 	cmplti	r4,r8,2428
41026034:	41025f10 	cmplti	r4,r8,2428
41026038:	41025f10 	cmplti	r4,r8,2428
4102603c:	41025f10 	cmplti	r4,r8,2428
41026040:	41025f10 	cmplti	r4,r8,2428
41026044:	41025f10 	cmplti	r4,r8,2428
41026048:	41025f10 	cmplti	r4,r8,2428
4102604c:	41025f10 	cmplti	r4,r8,2428
41026050:	41025f10 	cmplti	r4,r8,2428
41026054:	410262dc 	xori	r4,r8,2443
41026058:	41025f10 	cmplti	r4,r8,2428
4102605c:	41025f10 	cmplti	r4,r8,2428
41026060:	41025f10 	cmplti	r4,r8,2428
41026064:	41025f10 	cmplti	r4,r8,2428
41026068:	41025f10 	cmplti	r4,r8,2428
4102606c:	41025f10 	cmplti	r4,r8,2428
41026070:	41025f10 	cmplti	r4,r8,2428
41026074:	41025f10 	cmplti	r4,r8,2428
41026078:	410262cc 	andi	r4,r8,2443
4102607c:	410262cc 	andi	r4,r8,2443
41026080:	410262cc 	andi	r4,r8,2443
41026084:	410262cc 	andi	r4,r8,2443
41026088:	410262cc 	andi	r4,r8,2443
4102608c:	410262cc 	andi	r4,r8,2443
41026090:	41025f10 	cmplti	r4,r8,2428
41026094:	41025f10 	cmplti	r4,r8,2428
41026098:	41025f10 	cmplti	r4,r8,2428
4102609c:	41025f10 	cmplti	r4,r8,2428
410260a0:	41025f10 	cmplti	r4,r8,2428
410260a4:	41025f10 	cmplti	r4,r8,2428
410260a8:	41025f10 	cmplti	r4,r8,2428
410260ac:	41025f10 	cmplti	r4,r8,2428
410260b0:	41025f10 	cmplti	r4,r8,2428
410260b4:	41025f10 	cmplti	r4,r8,2428
410260b8:	41025f10 	cmplti	r4,r8,2428
410260bc:	41025f10 	cmplti	r4,r8,2428
410260c0:	41025f10 	cmplti	r4,r8,2428
410260c4:	41025f10 	cmplti	r4,r8,2428
410260c8:	41025f10 	cmplti	r4,r8,2428
410260cc:	41025f10 	cmplti	r4,r8,2428
410260d0:	41025f10 	cmplti	r4,r8,2428
410260d4:	410262dc 	xori	r4,r8,2443
410260d8:	000d883a 	mov	r6,zero
410260dc:	003d9006 	br	41025720 <__svfscanf_r+0x730>
410260e0:	98000005 	stb	zero,0(r19)
410260e4:	d8c0a017 	ldw	r3,640(sp)
410260e8:	d940a617 	ldw	r5,664(sp)
410260ec:	d9c0a117 	ldw	r7,644(sp)
410260f0:	b009883a 	mov	r4,r22
410260f4:	000d883a 	mov	r6,zero
410260f8:	183ee83a 	callr	r3
410260fc:	1007883a 	mov	r3,r2
41026100:	9080080c 	andi	r2,r18,32
41026104:	10004d1e 	bne	r2,zero,4102623c <__svfscanf_r+0x124c>
41026108:	9080010c 	andi	r2,r18,4
4102610c:	10003426 	beq	r2,zero,410261e0 <__svfscanf_r+0x11f0>
41026110:	d900a417 	ldw	r4,656(sp)
41026114:	20800017 	ldw	r2,0(r4)
41026118:	21000104 	addi	r4,r4,4
4102611c:	d900a415 	stw	r4,656(sp)
41026120:	10c0000d 	sth	r3,0(r2)
41026124:	d880a217 	ldw	r2,648(sp)
41026128:	10800044 	addi	r2,r2,1
4102612c:	d880a215 	stw	r2,648(sp)
41026130:	003f8406 	br	41025f44 <__svfscanf_r+0xf54>
41026134:	9080200c 	andi	r2,r18,128
41026138:	103f7526 	beq	r2,zero,41025f10 <__svfscanf_r+0xf20>
4102613c:	00bfdfc4 	movi	r2,-129
41026140:	90a4703a 	and	r18,r18,r2
41026144:	99400005 	stb	r5,0(r19)
41026148:	9cc00044 	addi	r19,r19,1
4102614c:	80c00117 	ldw	r3,4(r16)
41026150:	18ffffc4 	addi	r3,r3,-1
41026154:	80c00115 	stw	r3,4(r16)
41026158:	00c0130e 	bge	zero,r3,410261a8 <__svfscanf_r+0x11b8>
4102615c:	31800044 	addi	r6,r6,1
41026160:	81800015 	stw	r6,0(r16)
41026164:	d880a317 	ldw	r2,652(sp)
41026168:	10bfffc4 	addi	r2,r2,-1
4102616c:	d880a315 	stw	r2,652(sp)
41026170:	103f7e1e 	bne	r2,zero,41025f6c <__svfscanf_r+0xf7c>
41026174:	003f6606 	br	41025f10 <__svfscanf_r+0xf20>
41026178:	9082000c 	andi	r2,r18,2048
4102617c:	103ff126 	beq	r2,zero,41026144 <__svfscanf_r+0x1154>
41026180:	d8c0a117 	ldw	r3,644(sp)
41026184:	1800031e 	bne	r3,zero,41026194 <__svfscanf_r+0x11a4>
41026188:	01000204 	movi	r4,8
4102618c:	94808014 	ori	r18,r18,512
41026190:	d900a115 	stw	r4,644(sp)
41026194:	9081000c 	andi	r2,r18,1024
41026198:	10000826 	beq	r2,zero,410261bc <__svfscanf_r+0x11cc>
4102619c:	00be9fc4 	movi	r2,-1409
410261a0:	90a4703a 	and	r18,r18,r2
410261a4:	003fe706 	br	41026144 <__svfscanf_r+0x1154>
410261a8:	b009883a 	mov	r4,r22
410261ac:	800b883a 	mov	r5,r16
410261b0:	102afb40 	call	4102afb4 <__srefill_r>
410261b4:	103feb26 	beq	r2,zero,41026164 <__svfscanf_r+0x1174>
410261b8:	003f5506 	br	41025f10 <__svfscanf_r+0xf20>
410261bc:	a8000426 	beq	r21,zero,410261d0 <__svfscanf_r+0x11e0>
410261c0:	d880a317 	ldw	r2,652(sp)
410261c4:	ad7fffc4 	addi	r21,r21,-1
410261c8:	10800044 	addi	r2,r2,1
410261cc:	d880a315 	stw	r2,652(sp)
410261d0:	00bf1fc4 	movi	r2,-897
410261d4:	90a4703a 	and	r18,r18,r2
410261d8:	bdc00044 	addi	r23,r23,1
410261dc:	003fdb06 	br	4102614c <__svfscanf_r+0x115c>
410261e0:	9080004c 	andi	r2,r18,1
410261e4:	1005003a 	cmpeq	r2,r2,zero
410261e8:	10001426 	beq	r2,zero,4102623c <__svfscanf_r+0x124c>
410261ec:	9080008c 	andi	r2,r18,2
410261f0:	10001226 	beq	r2,zero,4102623c <__svfscanf_r+0x124c>
410261f4:	d8c0a017 	ldw	r3,640(sp)
410261f8:	009040f4 	movhi	r2,16643
410261fc:	10b46804 	addi	r2,r2,-11872
41026200:	18801426 	beq	r3,r2,41026254 <__svfscanf_r+0x1264>
41026204:	d9c0a117 	ldw	r7,644(sp)
41026208:	d940a617 	ldw	r5,664(sp)
4102620c:	000d883a 	mov	r6,zero
41026210:	b009883a 	mov	r4,r22
41026214:	102ce7c0 	call	4102ce7c <_strtoll_r>
41026218:	100d883a 	mov	r6,r2
4102621c:	180f883a 	mov	r7,r3
41026220:	d900a417 	ldw	r4,656(sp)
41026224:	20800017 	ldw	r2,0(r4)
41026228:	21000104 	addi	r4,r4,4
4102622c:	d900a415 	stw	r4,656(sp)
41026230:	11c00115 	stw	r7,4(r2)
41026234:	11800015 	stw	r6,0(r2)
41026238:	003fba06 	br	41026124 <__svfscanf_r+0x1134>
4102623c:	d900a417 	ldw	r4,656(sp)
41026240:	20800017 	ldw	r2,0(r4)
41026244:	21000104 	addi	r4,r4,4
41026248:	d900a415 	stw	r4,656(sp)
4102624c:	10c00015 	stw	r3,0(r2)
41026250:	003fb406 	br	41026124 <__svfscanf_r+0x1134>
41026254:	d9c0a117 	ldw	r7,644(sp)
41026258:	d940a617 	ldw	r5,664(sp)
4102625c:	000d883a 	mov	r6,zero
41026260:	b009883a 	mov	r4,r22
41026264:	102d3f40 	call	4102d3f4 <_strtoull_r>
41026268:	100d883a 	mov	r6,r2
4102626c:	180f883a 	mov	r7,r3
41026270:	003feb06 	br	41026220 <__svfscanf_r+0x1230>
41026274:	d8c0a117 	ldw	r3,644(sp)
41026278:	18c5883a 	add	r2,r3,r3
4102627c:	00c00034 	movhi	r3,0
41026280:	18c2da84 	addi	r3,r3,2922
41026284:	10c5883a 	add	r2,r2,r3
41026288:	1080000f 	ldh	r2,0(r2)
4102628c:	00fd1fc4 	movi	r3,-2945
41026290:	90e4703a 	and	r18,r18,r3
41026294:	d880a115 	stw	r2,644(sp)
41026298:	003faa06 	br	41026144 <__svfscanf_r+0x1154>
4102629c:	d900a117 	ldw	r4,644(sp)
410262a0:	00c00034 	movhi	r3,0
410262a4:	18c2da84 	addi	r3,r3,2922
410262a8:	2105883a 	add	r2,r4,r4
410262ac:	10c5883a 	add	r2,r2,r3
410262b0:	1080000f 	ldh	r2,0(r2)
410262b4:	00c00204 	movi	r3,8
410262b8:	d880a115 	stw	r2,644(sp)
410262bc:	18bf140e 	bge	r3,r2,41025f10 <__svfscanf_r+0xf20>
410262c0:	00bd1fc4 	movi	r2,-2945
410262c4:	90a4703a 	and	r18,r18,r2
410262c8:	003f9e06 	br	41026144 <__svfscanf_r+0x1154>
410262cc:	d8c0a117 	ldw	r3,644(sp)
410262d0:	00800284 	movi	r2,10
410262d4:	10fffa16 	blt	r2,r3,410262c0 <__svfscanf_r+0x12d0>
410262d8:	003f0d06 	br	41025f10 <__svfscanf_r+0xf20>
410262dc:	90c1800c 	andi	r3,r18,1536
410262e0:	00808004 	movi	r2,512
410262e4:	18bf0a1e 	bne	r3,r2,41025f10 <__svfscanf_r+0xf20>
410262e8:	00bf7fc4 	movi	r2,-513
410262ec:	9084703a 	and	r2,r18,r2
410262f0:	01000404 	movi	r4,16
410262f4:	14814014 	ori	r18,r2,1280
410262f8:	d900a115 	stw	r4,644(sp)
410262fc:	003f9106 	br	41026144 <__svfscanf_r+0x1154>
41026300:	d880a417 	ldw	r2,656(sp)
41026304:	dd400404 	addi	r21,sp,16
41026308:	14800017 	ldw	r18,0(r2)
4102630c:	9027883a 	mov	r19,r18
41026310:	81000017 	ldw	r4,0(r16)
41026314:	20800003 	ldbu	r2,0(r4)
41026318:	a885883a 	add	r2,r21,r2
4102631c:	10c00007 	ldb	r3,0(r2)
41026320:	18001426 	beq	r3,zero,41026374 <__svfscanf_r+0x1384>
41026324:	d8c0a317 	ldw	r3,652(sp)
41026328:	80800117 	ldw	r2,4(r16)
4102632c:	21800044 	addi	r6,r4,1
41026330:	18ffffc4 	addi	r3,r3,-1
41026334:	d8c0a315 	stw	r3,652(sp)
41026338:	10ffffc4 	addi	r3,r2,-1
4102633c:	80c00115 	stw	r3,4(r16)
41026340:	20800003 	ldbu	r2,0(r4)
41026344:	90800005 	stb	r2,0(r18)
41026348:	d900a317 	ldw	r4,652(sp)
4102634c:	81800015 	stw	r6,0(r16)
41026350:	94800044 	addi	r18,r18,1
41026354:	20000726 	beq	r4,zero,41026374 <__svfscanf_r+0x1384>
41026358:	80800117 	ldw	r2,4(r16)
4102635c:	00bfec16 	blt	zero,r2,41026310 <__svfscanf_r+0x1320>
41026360:	b009883a 	mov	r4,r22
41026364:	800b883a 	mov	r5,r16
41026368:	102afb40 	call	4102afb4 <__srefill_r>
4102636c:	103fe826 	beq	r2,zero,41026310 <__svfscanf_r+0x1320>
41026370:	9cbb7426 	beq	r19,r18,41025144 <__svfscanf_r+0x154>
41026374:	94e7c83a 	sub	r19,r18,r19
41026378:	983b5226 	beq	r19,zero,410250c4 <__svfscanf_r+0xd4>
4102637c:	90000005 	stb	zero,0(r18)
41026380:	d880a417 	ldw	r2,656(sp)
41026384:	d8c0a217 	ldw	r3,648(sp)
41026388:	8ce3883a 	add	r17,r17,r19
4102638c:	10800104 	addi	r2,r2,4
41026390:	18c00044 	addi	r3,r3,1
41026394:	d880a415 	stw	r2,656(sp)
41026398:	d8c0a215 	stw	r3,648(sp)
4102639c:	003b2706 	br	4102503c <__svfscanf_r+0x4c>
410263a0:	9cc00414 	ori	r19,r19,16
410263a4:	003b6e06 	br	41025160 <__svfscanf_r+0x170>
410263a8:	00c00404 	movi	r3,16
410263ac:	011040f4 	movhi	r4,16643
410263b0:	21346804 	addi	r4,r4,-11872
410263b4:	9cc08014 	ori	r19,r19,512
410263b8:	054000c4 	movi	r21,3
410263bc:	d8c0a115 	stw	r3,644(sp)
410263c0:	d900a015 	stw	r4,640(sp)
410263c4:	003bf806 	br	410253a8 <__svfscanf_r+0x3b8>
410263c8:	9880040c 	andi	r2,r19,16
410263cc:	10001926 	beq	r2,zero,41026434 <__svfscanf_r+0x1444>
410263d0:	0027883a 	mov	r19,zero
410263d4:	00000b06 	br	41026404 <__svfscanf_r+0x1414>
410263d8:	80800017 	ldw	r2,0(r16)
410263dc:	b009883a 	mov	r4,r22
410263e0:	800b883a 	mov	r5,r16
410263e4:	148d883a 	add	r6,r2,r18
410263e8:	81800015 	stw	r6,0(r16)
410263ec:	9ca7883a 	add	r19,r19,r18
410263f0:	102afb40 	call	4102afb4 <__srefill_r>
410263f4:	103c711e 	bne	r2,zero,410255bc <__svfscanf_r+0x5cc>
410263f8:	d900a317 	ldw	r4,652(sp)
410263fc:	2489c83a 	sub	r4,r4,r18
41026400:	d900a315 	stw	r4,652(sp)
41026404:	84800117 	ldw	r18,4(r16)
41026408:	d8c0a317 	ldw	r3,652(sp)
4102640c:	90fff216 	blt	r18,r3,410263d8 <__svfscanf_r+0x13e8>
41026410:	d900a317 	ldw	r4,652(sp)
41026414:	80800017 	ldw	r2,0(r16)
41026418:	9927883a 	add	r19,r19,r4
4102641c:	9107c83a 	sub	r3,r18,r4
41026420:	110d883a 	add	r6,r2,r4
41026424:	8ce3883a 	add	r17,r17,r19
41026428:	80c00115 	stw	r3,4(r16)
4102642c:	81800015 	stw	r6,0(r16)
41026430:	003b0206 	br	4102503c <__svfscanf_r+0x4c>
41026434:	d880a417 	ldw	r2,656(sp)
41026438:	d980a317 	ldw	r6,652(sp)
4102643c:	01400044 	movi	r5,1
41026440:	11000017 	ldw	r4,0(r2)
41026444:	800f883a 	mov	r7,r16
41026448:	10287640 	call	41028764 <fread>
4102644c:	103b3d26 	beq	r2,zero,41025144 <__svfscanf_r+0x154>
41026450:	d8c0a417 	ldw	r3,656(sp)
41026454:	d900a217 	ldw	r4,648(sp)
41026458:	88a3883a 	add	r17,r17,r2
4102645c:	18c00104 	addi	r3,r3,4
41026460:	21000044 	addi	r4,r4,1
41026464:	d8c0a415 	stw	r3,656(sp)
41026468:	d900a215 	stw	r4,648(sp)
4102646c:	003af306 	br	4102503c <__svfscanf_r+0x4c>
41026470:	8080030b 	ldhu	r2,12(r16)
41026474:	1080100c 	andi	r2,r2,64
41026478:	103b1226 	beq	r2,zero,410250c4 <__svfscanf_r+0xd4>
4102647c:	003b3306 	br	4102514c <__svfscanf_r+0x15c>
41026480:	983b1026 	beq	r19,zero,410250c4 <__svfscanf_r+0xd4>
41026484:	8ce3883a 	add	r17,r17,r19
41026488:	003aec06 	br	4102503c <__svfscanf_r+0x4c>
4102648c:	983c9626 	beq	r19,zero,410256e8 <__svfscanf_r+0x6f8>
41026490:	9cffffc4 	addi	r19,r19,-1
41026494:	d8c04404 	addi	r3,sp,272
41026498:	1cc5883a 	add	r2,r3,r19
4102649c:	11400003 	ldbu	r5,0(r2)
410264a0:	b009883a 	mov	r4,r22
410264a4:	800d883a 	mov	r6,r16
410264a8:	102d7c80 	call	4102d7c8 <_ungetc_r>
410264ac:	003ff706 	br	4102648c <__svfscanf_r+0x149c>
410264b0:	00bfff84 	movi	r2,-2
410264b4:	18bc7a1e 	bne	r3,r2,410256a0 <__svfscanf_r+0x6b0>
410264b8:	003c8406 	br	410256cc <__svfscanf_r+0x6dc>
410264bc:	d900a417 	ldw	r4,656(sp)
410264c0:	25400017 	ldw	r21,0(r4)
410264c4:	21000104 	addi	r4,r4,4
410264c8:	d900a415 	stw	r4,656(sp)
410264cc:	003c4a06 	br	410255f8 <__svfscanf_r+0x608>
410264d0:	00bfff84 	movi	r2,-2
410264d4:	18bc0f1e 	bne	r3,r2,41025514 <__svfscanf_r+0x524>
410264d8:	003c1506 	br	41025530 <__svfscanf_r+0x540>
410264dc:	b009883a 	mov	r4,r22
410264e0:	800b883a 	mov	r5,r16
410264e4:	102afb40 	call	4102afb4 <__srefill_r>
410264e8:	103c1326 	beq	r2,zero,41025538 <__svfscanf_r+0x548>
410264ec:	903b151e 	bne	r18,zero,41025144 <__svfscanf_r+0x154>
410264f0:	a83ad21e 	bne	r21,zero,4102503c <__svfscanf_r+0x4c>
410264f4:	d880a217 	ldw	r2,648(sp)
410264f8:	10800044 	addi	r2,r2,1
410264fc:	d880a215 	stw	r2,648(sp)
41026500:	003ace06 	br	4102503c <__svfscanf_r+0x4c>
41026504:	0027883a 	mov	r19,zero
41026508:	003bdd06 	br	41025480 <__svfscanf_r+0x490>
4102650c:	9cc00114 	ori	r19,r19,4
41026510:	003b1306 	br	41025160 <__svfscanf_r+0x170>
41026514:	05400104 	movi	r21,4
41026518:	003ba306 	br	410253a8 <__svfscanf_r+0x3b8>
4102651c:	9cc00054 	ori	r19,r19,1
41026520:	009040f4 	movhi	r2,16643
41026524:	10b30504 	addi	r2,r2,-13292
41026528:	00c00284 	movi	r3,10
4102652c:	054000c4 	movi	r21,3
41026530:	d880a015 	stw	r2,640(sp)
41026534:	d8c0a115 	stw	r3,644(sp)
41026538:	003b9b06 	br	410253a8 <__svfscanf_r+0x3b8>
4102653c:	9cc01014 	ori	r19,r19,64
41026540:	002b883a 	mov	r21,zero
41026544:	003b9806 	br	410253a8 <__svfscanf_r+0x3b8>
41026548:	a00b883a 	mov	r5,r20
4102654c:	d9000404 	addi	r4,sp,16
41026550:	102b2040 	call	4102b204 <__sccl>
41026554:	1029883a 	mov	r20,r2
41026558:	9cc01014 	ori	r19,r19,64
4102655c:	05400044 	movi	r21,1
41026560:	003b9106 	br	410253a8 <__svfscanf_r+0x3b8>
41026564:	9cc00054 	ori	r19,r19,1
41026568:	00800204 	movi	r2,8
4102656c:	00d040f4 	movhi	r3,16643
41026570:	18f46804 	addi	r3,r3,-11872
41026574:	054000c4 	movi	r21,3
41026578:	d880a115 	stw	r2,644(sp)
4102657c:	d8c0a015 	stw	r3,640(sp)
41026580:	003b8906 	br	410253a8 <__svfscanf_r+0x3b8>
41026584:	9880040c 	andi	r2,r19,16
41026588:	103aac1e 	bne	r2,zero,4102503c <__svfscanf_r+0x4c>
4102658c:	9880010c 	andi	r2,r19,4
41026590:	10002426 	beq	r2,zero,41026624 <__svfscanf_r+0x1634>
41026594:	d900a417 	ldw	r4,656(sp)
41026598:	20800017 	ldw	r2,0(r4)
4102659c:	21000104 	addi	r4,r4,4
410265a0:	d900a415 	stw	r4,656(sp)
410265a4:	1440000d 	sth	r17,0(r2)
410265a8:	003aa406 	br	4102503c <__svfscanf_r+0x4c>
410265ac:	9cc00094 	ori	r19,r19,2
410265b0:	003aeb06 	br	41025160 <__svfscanf_r+0x170>
410265b4:	05400084 	movi	r21,2
410265b8:	003b7b06 	br	410253a8 <__svfscanf_r+0x3b8>
410265bc:	00800404 	movi	r2,16
410265c0:	00d040f4 	movhi	r3,16643
410265c4:	18f46804 	addi	r3,r3,-11872
410265c8:	9cc08814 	ori	r19,r19,544
410265cc:	054000c4 	movi	r21,3
410265d0:	d880a115 	stw	r2,644(sp)
410265d4:	d8c0a015 	stw	r3,640(sp)
410265d8:	003b7306 	br	410253a8 <__svfscanf_r+0x3b8>
410265dc:	0009883a 	mov	r4,zero
410265e0:	102b2c40 	call	4102b2c4 <nanf>
410265e4:	b8800015 	stw	r2,0(r23)
410265e8:	003d2706 	br	41025a88 <__svfscanf_r+0xa98>
410265ec:	a0c00007 	ldb	r3,0(r20)
410265f0:	00801b04 	movi	r2,108
410265f4:	18800826 	beq	r3,r2,41026618 <__svfscanf_r+0x1628>
410265f8:	9cc00054 	ori	r19,r19,1
410265fc:	003ad806 	br	41025160 <__svfscanf_r+0x170>
41026600:	011040f4 	movhi	r4,16643
41026604:	21330504 	addi	r4,r4,-13292
41026608:	054000c4 	movi	r21,3
4102660c:	d900a015 	stw	r4,640(sp)
41026610:	d800a115 	stw	zero,644(sp)
41026614:	003b6406 	br	410253a8 <__svfscanf_r+0x3b8>
41026618:	a5000044 	addi	r20,r20,1
4102661c:	9cc00094 	ori	r19,r19,2
41026620:	003acf06 	br	41025160 <__svfscanf_r+0x170>
41026624:	9880004c 	andi	r2,r19,1
41026628:	1005003a 	cmpeq	r2,r2,zero
4102662c:	10000a26 	beq	r2,zero,41026658 <__svfscanf_r+0x1668>
41026630:	9880008c 	andi	r2,r19,2
41026634:	10000826 	beq	r2,zero,41026658 <__svfscanf_r+0x1668>
41026638:	d900a417 	ldw	r4,656(sp)
4102663c:	8807d7fa 	srai	r3,r17,31
41026640:	20800017 	ldw	r2,0(r4)
41026644:	21000104 	addi	r4,r4,4
41026648:	d900a415 	stw	r4,656(sp)
4102664c:	14400015 	stw	r17,0(r2)
41026650:	10c00115 	stw	r3,4(r2)
41026654:	003a7906 	br	4102503c <__svfscanf_r+0x4c>
41026658:	d8c0a417 	ldw	r3,656(sp)
4102665c:	18800017 	ldw	r2,0(r3)
41026660:	18c00104 	addi	r3,r3,4
41026664:	d8c0a415 	stw	r3,656(sp)
41026668:	14400015 	stw	r17,0(r2)
4102666c:	003a7306 	br	4102503c <__svfscanf_r+0x4c>

41026670 <__svfscanf>:
41026670:	00800034 	movhi	r2,0
41026674:	108ad704 	addi	r2,r2,11100
41026678:	2013883a 	mov	r9,r4
4102667c:	11000017 	ldw	r4,0(r2)
41026680:	2805883a 	mov	r2,r5
41026684:	300f883a 	mov	r7,r6
41026688:	480b883a 	mov	r5,r9
4102668c:	100d883a 	mov	r6,r2
41026690:	1024ff01 	jmpi	41024ff0 <__svfscanf_r>

41026694 <_vfscanf_r>:
41026694:	defffb04 	addi	sp,sp,-20
41026698:	dcc00315 	stw	r19,12(sp)
4102669c:	dc800215 	stw	r18,8(sp)
410266a0:	dc400115 	stw	r17,4(sp)
410266a4:	dc000015 	stw	r16,0(sp)
410266a8:	dfc00415 	stw	ra,16(sp)
410266ac:	2021883a 	mov	r16,r4
410266b0:	2823883a 	mov	r17,r5
410266b4:	3025883a 	mov	r18,r6
410266b8:	3827883a 	mov	r19,r7
410266bc:	20000226 	beq	r4,zero,410266c8 <_vfscanf_r+0x34>
410266c0:	20800e17 	ldw	r2,56(r4)
410266c4:	10000b26 	beq	r2,zero,410266f4 <_vfscanf_r+0x60>
410266c8:	8009883a 	mov	r4,r16
410266cc:	880b883a 	mov	r5,r17
410266d0:	900d883a 	mov	r6,r18
410266d4:	980f883a 	mov	r7,r19
410266d8:	dfc00417 	ldw	ra,16(sp)
410266dc:	dcc00317 	ldw	r19,12(sp)
410266e0:	dc800217 	ldw	r18,8(sp)
410266e4:	dc400117 	ldw	r17,4(sp)
410266e8:	dc000017 	ldw	r16,0(sp)
410266ec:	dec00504 	addi	sp,sp,20
410266f0:	1024ff01 	jmpi	41024ff0 <__svfscanf_r>
410266f4:	10283100 	call	41028310 <__sinit>
410266f8:	003ff306 	br	410266c8 <_vfscanf_r+0x34>

410266fc <vfscanf>:
410266fc:	defffb04 	addi	sp,sp,-20
41026700:	dcc00315 	stw	r19,12(sp)
41026704:	04c00034 	movhi	r19,0
41026708:	9ccad704 	addi	r19,r19,11100
4102670c:	98c00017 	ldw	r3,0(r19)
41026710:	dc800215 	stw	r18,8(sp)
41026714:	dc400115 	stw	r17,4(sp)
41026718:	dc000015 	stw	r16,0(sp)
4102671c:	dfc00415 	stw	ra,16(sp)
41026720:	2021883a 	mov	r16,r4
41026724:	2823883a 	mov	r17,r5
41026728:	3025883a 	mov	r18,r6
4102672c:	18000326 	beq	r3,zero,4102673c <vfscanf+0x40>
41026730:	18800e17 	ldw	r2,56(r3)
41026734:	1809883a 	mov	r4,r3
41026738:	10000b26 	beq	r2,zero,41026768 <vfscanf+0x6c>
4102673c:	99000017 	ldw	r4,0(r19)
41026740:	800b883a 	mov	r5,r16
41026744:	880d883a 	mov	r6,r17
41026748:	900f883a 	mov	r7,r18
4102674c:	dfc00417 	ldw	ra,16(sp)
41026750:	dcc00317 	ldw	r19,12(sp)
41026754:	dc800217 	ldw	r18,8(sp)
41026758:	dc400117 	ldw	r17,4(sp)
4102675c:	dc000017 	ldw	r16,0(sp)
41026760:	dec00504 	addi	sp,sp,20
41026764:	1024ff01 	jmpi	41024ff0 <__svfscanf_r>
41026768:	10283100 	call	41028310 <__sinit>
4102676c:	003ff306 	br	4102673c <vfscanf+0x40>

41026770 <__swsetup_r>:
41026770:	00800034 	movhi	r2,0
41026774:	108ad704 	addi	r2,r2,11100
41026778:	10c00017 	ldw	r3,0(r2)
4102677c:	defffd04 	addi	sp,sp,-12
41026780:	dc400115 	stw	r17,4(sp)
41026784:	dc000015 	stw	r16,0(sp)
41026788:	dfc00215 	stw	ra,8(sp)
4102678c:	2023883a 	mov	r17,r4
41026790:	2821883a 	mov	r16,r5
41026794:	18000226 	beq	r3,zero,410267a0 <__swsetup_r+0x30>
41026798:	18800e17 	ldw	r2,56(r3)
4102679c:	10001f26 	beq	r2,zero,4102681c <__swsetup_r+0xac>
410267a0:	8100030b 	ldhu	r4,12(r16)
410267a4:	2080020c 	andi	r2,r4,8
410267a8:	10002826 	beq	r2,zero,4102684c <__swsetup_r+0xdc>
410267ac:	81400417 	ldw	r5,16(r16)
410267b0:	28001d26 	beq	r5,zero,41026828 <__swsetup_r+0xb8>
410267b4:	2080004c 	andi	r2,r4,1
410267b8:	1005003a 	cmpeq	r2,r2,zero
410267bc:	10000b26 	beq	r2,zero,410267ec <__swsetup_r+0x7c>
410267c0:	2080008c 	andi	r2,r4,2
410267c4:	10001226 	beq	r2,zero,41026810 <__swsetup_r+0xa0>
410267c8:	0005883a 	mov	r2,zero
410267cc:	80800215 	stw	r2,8(r16)
410267d0:	28000b26 	beq	r5,zero,41026800 <__swsetup_r+0x90>
410267d4:	0005883a 	mov	r2,zero
410267d8:	dfc00217 	ldw	ra,8(sp)
410267dc:	dc400117 	ldw	r17,4(sp)
410267e0:	dc000017 	ldw	r16,0(sp)
410267e4:	dec00304 	addi	sp,sp,12
410267e8:	f800283a 	ret
410267ec:	80800517 	ldw	r2,20(r16)
410267f0:	80000215 	stw	zero,8(r16)
410267f4:	0085c83a 	sub	r2,zero,r2
410267f8:	80800615 	stw	r2,24(r16)
410267fc:	283ff51e 	bne	r5,zero,410267d4 <__swsetup_r+0x64>
41026800:	2080200c 	andi	r2,r4,128
41026804:	103ff326 	beq	r2,zero,410267d4 <__swsetup_r+0x64>
41026808:	00bfffc4 	movi	r2,-1
4102680c:	003ff206 	br	410267d8 <__swsetup_r+0x68>
41026810:	80800517 	ldw	r2,20(r16)
41026814:	80800215 	stw	r2,8(r16)
41026818:	003fed06 	br	410267d0 <__swsetup_r+0x60>
4102681c:	1809883a 	mov	r4,r3
41026820:	10283100 	call	41028310 <__sinit>
41026824:	003fde06 	br	410267a0 <__swsetup_r+0x30>
41026828:	20c0a00c 	andi	r3,r4,640
4102682c:	00808004 	movi	r2,512
41026830:	18bfe026 	beq	r3,r2,410267b4 <__swsetup_r+0x44>
41026834:	8809883a 	mov	r4,r17
41026838:	800b883a 	mov	r5,r16
4102683c:	10292f00 	call	410292f0 <__smakebuf_r>
41026840:	8100030b 	ldhu	r4,12(r16)
41026844:	81400417 	ldw	r5,16(r16)
41026848:	003fda06 	br	410267b4 <__swsetup_r+0x44>
4102684c:	2080040c 	andi	r2,r4,16
41026850:	103fed26 	beq	r2,zero,41026808 <__swsetup_r+0x98>
41026854:	2080010c 	andi	r2,r4,4
41026858:	10001226 	beq	r2,zero,410268a4 <__swsetup_r+0x134>
4102685c:	81400c17 	ldw	r5,48(r16)
41026860:	28000526 	beq	r5,zero,41026878 <__swsetup_r+0x108>
41026864:	80801004 	addi	r2,r16,64
41026868:	28800226 	beq	r5,r2,41026874 <__swsetup_r+0x104>
4102686c:	8809883a 	mov	r4,r17
41026870:	10288d00 	call	410288d0 <_free_r>
41026874:	80000c15 	stw	zero,48(r16)
41026878:	8080030b 	ldhu	r2,12(r16)
4102687c:	81400417 	ldw	r5,16(r16)
41026880:	80000115 	stw	zero,4(r16)
41026884:	10bff6cc 	andi	r2,r2,65499
41026888:	8080030d 	sth	r2,12(r16)
4102688c:	81400015 	stw	r5,0(r16)
41026890:	8080030b 	ldhu	r2,12(r16)
41026894:	10800214 	ori	r2,r2,8
41026898:	113fffcc 	andi	r4,r2,65535
4102689c:	8080030d 	sth	r2,12(r16)
410268a0:	003fc306 	br	410267b0 <__swsetup_r+0x40>
410268a4:	81400417 	ldw	r5,16(r16)
410268a8:	003ff906 	br	41026890 <__swsetup_r+0x120>

410268ac <quorem>:
410268ac:	28c00417 	ldw	r3,16(r5)
410268b0:	20800417 	ldw	r2,16(r4)
410268b4:	defff604 	addi	sp,sp,-40
410268b8:	ddc00715 	stw	r23,28(sp)
410268bc:	dd400515 	stw	r21,20(sp)
410268c0:	dfc00915 	stw	ra,36(sp)
410268c4:	df000815 	stw	fp,32(sp)
410268c8:	dd800615 	stw	r22,24(sp)
410268cc:	dd000415 	stw	r20,16(sp)
410268d0:	dcc00315 	stw	r19,12(sp)
410268d4:	dc800215 	stw	r18,8(sp)
410268d8:	dc400115 	stw	r17,4(sp)
410268dc:	dc000015 	stw	r16,0(sp)
410268e0:	202f883a 	mov	r23,r4
410268e4:	282b883a 	mov	r21,r5
410268e8:	10c07416 	blt	r2,r3,41026abc <quorem+0x210>
410268ec:	1c7fffc4 	addi	r17,r3,-1
410268f0:	8c45883a 	add	r2,r17,r17
410268f4:	1085883a 	add	r2,r2,r2
410268f8:	2c000504 	addi	r16,r5,20
410268fc:	24c00504 	addi	r19,r4,20
41026900:	14ed883a 	add	r22,r2,r19
41026904:	80a5883a 	add	r18,r16,r2
41026908:	b7000017 	ldw	fp,0(r22)
4102690c:	91400017 	ldw	r5,0(r18)
41026910:	e009883a 	mov	r4,fp
41026914:	29400044 	addi	r5,r5,1
41026918:	102236c0 	call	4102236c <__udivsi3>
4102691c:	1029883a 	mov	r20,r2
41026920:	10003c1e 	bne	r2,zero,41026a14 <quorem+0x168>
41026924:	a80b883a 	mov	r5,r21
41026928:	b809883a 	mov	r4,r23
4102692c:	102993c0 	call	4102993c <__mcmp>
41026930:	10002b16 	blt	r2,zero,410269e0 <quorem+0x134>
41026934:	a5000044 	addi	r20,r20,1
41026938:	980f883a 	mov	r7,r19
4102693c:	0011883a 	mov	r8,zero
41026940:	0009883a 	mov	r4,zero
41026944:	81400017 	ldw	r5,0(r16)
41026948:	38c00017 	ldw	r3,0(r7)
4102694c:	84000104 	addi	r16,r16,4
41026950:	28bfffcc 	andi	r2,r5,65535
41026954:	2085883a 	add	r2,r4,r2
41026958:	11bfffcc 	andi	r6,r2,65535
4102695c:	193fffcc 	andi	r4,r3,65535
41026960:	1004d43a 	srli	r2,r2,16
41026964:	280ad43a 	srli	r5,r5,16
41026968:	2189c83a 	sub	r4,r4,r6
4102696c:	2209883a 	add	r4,r4,r8
41026970:	1806d43a 	srli	r3,r3,16
41026974:	288b883a 	add	r5,r5,r2
41026978:	200dd43a 	srai	r6,r4,16
4102697c:	28bfffcc 	andi	r2,r5,65535
41026980:	1887c83a 	sub	r3,r3,r2
41026984:	1987883a 	add	r3,r3,r6
41026988:	3900000d 	sth	r4,0(r7)
4102698c:	38c0008d 	sth	r3,2(r7)
41026990:	2808d43a 	srli	r4,r5,16
41026994:	39c00104 	addi	r7,r7,4
41026998:	1811d43a 	srai	r8,r3,16
4102699c:	943fe92e 	bgeu	r18,r16,41026944 <quorem+0x98>
410269a0:	8c45883a 	add	r2,r17,r17
410269a4:	1085883a 	add	r2,r2,r2
410269a8:	9885883a 	add	r2,r19,r2
410269ac:	10c00017 	ldw	r3,0(r2)
410269b0:	18000b1e 	bne	r3,zero,410269e0 <quorem+0x134>
410269b4:	113fff04 	addi	r4,r2,-4
410269b8:	9900082e 	bgeu	r19,r4,410269dc <quorem+0x130>
410269bc:	10bfff17 	ldw	r2,-4(r2)
410269c0:	10000326 	beq	r2,zero,410269d0 <quorem+0x124>
410269c4:	00000506 	br	410269dc <quorem+0x130>
410269c8:	20800017 	ldw	r2,0(r4)
410269cc:	1000031e 	bne	r2,zero,410269dc <quorem+0x130>
410269d0:	213fff04 	addi	r4,r4,-4
410269d4:	8c7fffc4 	addi	r17,r17,-1
410269d8:	993ffb36 	bltu	r19,r4,410269c8 <quorem+0x11c>
410269dc:	bc400415 	stw	r17,16(r23)
410269e0:	a005883a 	mov	r2,r20
410269e4:	dfc00917 	ldw	ra,36(sp)
410269e8:	df000817 	ldw	fp,32(sp)
410269ec:	ddc00717 	ldw	r23,28(sp)
410269f0:	dd800617 	ldw	r22,24(sp)
410269f4:	dd400517 	ldw	r21,20(sp)
410269f8:	dd000417 	ldw	r20,16(sp)
410269fc:	dcc00317 	ldw	r19,12(sp)
41026a00:	dc800217 	ldw	r18,8(sp)
41026a04:	dc400117 	ldw	r17,4(sp)
41026a08:	dc000017 	ldw	r16,0(sp)
41026a0c:	dec00a04 	addi	sp,sp,40
41026a10:	f800283a 	ret
41026a14:	980f883a 	mov	r7,r19
41026a18:	8011883a 	mov	r8,r16
41026a1c:	0013883a 	mov	r9,zero
41026a20:	000d883a 	mov	r6,zero
41026a24:	40c00017 	ldw	r3,0(r8)
41026a28:	39000017 	ldw	r4,0(r7)
41026a2c:	42000104 	addi	r8,r8,4
41026a30:	18bfffcc 	andi	r2,r3,65535
41026a34:	a085383a 	mul	r2,r20,r2
41026a38:	1806d43a 	srli	r3,r3,16
41026a3c:	217fffcc 	andi	r5,r4,65535
41026a40:	3085883a 	add	r2,r6,r2
41026a44:	11bfffcc 	andi	r6,r2,65535
41026a48:	a0c7383a 	mul	r3,r20,r3
41026a4c:	1004d43a 	srli	r2,r2,16
41026a50:	298bc83a 	sub	r5,r5,r6
41026a54:	2a4b883a 	add	r5,r5,r9
41026a58:	2008d43a 	srli	r4,r4,16
41026a5c:	1887883a 	add	r3,r3,r2
41026a60:	280dd43a 	srai	r6,r5,16
41026a64:	18bfffcc 	andi	r2,r3,65535
41026a68:	2089c83a 	sub	r4,r4,r2
41026a6c:	2189883a 	add	r4,r4,r6
41026a70:	3900008d 	sth	r4,2(r7)
41026a74:	3940000d 	sth	r5,0(r7)
41026a78:	180cd43a 	srli	r6,r3,16
41026a7c:	39c00104 	addi	r7,r7,4
41026a80:	2013d43a 	srai	r9,r4,16
41026a84:	923fe72e 	bgeu	r18,r8,41026a24 <quorem+0x178>
41026a88:	e03fa61e 	bne	fp,zero,41026924 <quorem+0x78>
41026a8c:	b0ffff04 	addi	r3,r22,-4
41026a90:	98c0082e 	bgeu	r19,r3,41026ab4 <quorem+0x208>
41026a94:	b0bfff17 	ldw	r2,-4(r22)
41026a98:	10000326 	beq	r2,zero,41026aa8 <quorem+0x1fc>
41026a9c:	00000506 	br	41026ab4 <quorem+0x208>
41026aa0:	18800017 	ldw	r2,0(r3)
41026aa4:	1000031e 	bne	r2,zero,41026ab4 <quorem+0x208>
41026aa8:	18ffff04 	addi	r3,r3,-4
41026aac:	8c7fffc4 	addi	r17,r17,-1
41026ab0:	98fffb36 	bltu	r19,r3,41026aa0 <quorem+0x1f4>
41026ab4:	bc400415 	stw	r17,16(r23)
41026ab8:	003f9a06 	br	41026924 <quorem+0x78>
41026abc:	0005883a 	mov	r2,zero
41026ac0:	003fc806 	br	410269e4 <quorem+0x138>

41026ac4 <_dtoa_r>:
41026ac4:	22001017 	ldw	r8,64(r4)
41026ac8:	deffda04 	addi	sp,sp,-152
41026acc:	dd402115 	stw	r21,132(sp)
41026ad0:	dd002015 	stw	r20,128(sp)
41026ad4:	dc801e15 	stw	r18,120(sp)
41026ad8:	dc401d15 	stw	r17,116(sp)
41026adc:	dfc02515 	stw	ra,148(sp)
41026ae0:	df002415 	stw	fp,144(sp)
41026ae4:	ddc02315 	stw	r23,140(sp)
41026ae8:	dd802215 	stw	r22,136(sp)
41026aec:	dcc01f15 	stw	r19,124(sp)
41026af0:	dc001c15 	stw	r16,112(sp)
41026af4:	d9001615 	stw	r4,88(sp)
41026af8:	3023883a 	mov	r17,r6
41026afc:	2829883a 	mov	r20,r5
41026b00:	d9c01715 	stw	r7,92(sp)
41026b04:	dc802817 	ldw	r18,160(sp)
41026b08:	302b883a 	mov	r21,r6
41026b0c:	40000a26 	beq	r8,zero,41026b38 <_dtoa_r+0x74>
41026b10:	20801117 	ldw	r2,68(r4)
41026b14:	400b883a 	mov	r5,r8
41026b18:	40800115 	stw	r2,4(r8)
41026b1c:	20c01117 	ldw	r3,68(r4)
41026b20:	00800044 	movi	r2,1
41026b24:	10c4983a 	sll	r2,r2,r3
41026b28:	40800215 	stw	r2,8(r8)
41026b2c:	10297e00 	call	410297e0 <_Bfree>
41026b30:	d8c01617 	ldw	r3,88(sp)
41026b34:	18001015 	stw	zero,64(r3)
41026b38:	8800a316 	blt	r17,zero,41026dc8 <_dtoa_r+0x304>
41026b3c:	90000015 	stw	zero,0(r18)
41026b40:	a8dffc2c 	andhi	r3,r21,32752
41026b44:	009ffc34 	movhi	r2,32752
41026b48:	18809126 	beq	r3,r2,41026d90 <_dtoa_r+0x2cc>
41026b4c:	000d883a 	mov	r6,zero
41026b50:	000f883a 	mov	r7,zero
41026b54:	a009883a 	mov	r4,r20
41026b58:	a80b883a 	mov	r5,r21
41026b5c:	dd001215 	stw	r20,72(sp)
41026b60:	dd401315 	stw	r21,76(sp)
41026b64:	10304180 	call	41030418 <__nedf2>
41026b68:	1000171e 	bne	r2,zero,41026bc8 <_dtoa_r+0x104>
41026b6c:	d9802717 	ldw	r6,156(sp)
41026b70:	00800044 	movi	r2,1
41026b74:	30800015 	stw	r2,0(r6)
41026b78:	d8802917 	ldw	r2,164(sp)
41026b7c:	10029b26 	beq	r2,zero,410275ec <_dtoa_r+0xb28>
41026b80:	d9002917 	ldw	r4,164(sp)
41026b84:	00800034 	movhi	r2,0
41026b88:	1082d044 	addi	r2,r2,2881
41026b8c:	10ffffc4 	addi	r3,r2,-1
41026b90:	20800015 	stw	r2,0(r4)
41026b94:	1805883a 	mov	r2,r3
41026b98:	dfc02517 	ldw	ra,148(sp)
41026b9c:	df002417 	ldw	fp,144(sp)
41026ba0:	ddc02317 	ldw	r23,140(sp)
41026ba4:	dd802217 	ldw	r22,136(sp)
41026ba8:	dd402117 	ldw	r21,132(sp)
41026bac:	dd002017 	ldw	r20,128(sp)
41026bb0:	dcc01f17 	ldw	r19,124(sp)
41026bb4:	dc801e17 	ldw	r18,120(sp)
41026bb8:	dc401d17 	ldw	r17,116(sp)
41026bbc:	dc001c17 	ldw	r16,112(sp)
41026bc0:	dec02604 	addi	sp,sp,152
41026bc4:	f800283a 	ret
41026bc8:	d9001617 	ldw	r4,88(sp)
41026bcc:	d9401217 	ldw	r5,72(sp)
41026bd0:	d8800104 	addi	r2,sp,4
41026bd4:	a80d883a 	mov	r6,r21
41026bd8:	d9c00204 	addi	r7,sp,8
41026bdc:	d8800015 	stw	r2,0(sp)
41026be0:	1029e1c0 	call	41029e1c <__d2b>
41026be4:	d8800715 	stw	r2,28(sp)
41026be8:	a804d53a 	srli	r2,r21,20
41026bec:	1101ffcc 	andi	r4,r2,2047
41026bf0:	20008626 	beq	r4,zero,41026e0c <_dtoa_r+0x348>
41026bf4:	d8c01217 	ldw	r3,72(sp)
41026bf8:	00800434 	movhi	r2,16
41026bfc:	10bfffc4 	addi	r2,r2,-1
41026c00:	ddc00117 	ldw	r23,4(sp)
41026c04:	a884703a 	and	r2,r21,r2
41026c08:	1811883a 	mov	r8,r3
41026c0c:	124ffc34 	orhi	r9,r2,16368
41026c10:	25bf0044 	addi	r22,r4,-1023
41026c14:	d8000815 	stw	zero,32(sp)
41026c18:	0005883a 	mov	r2,zero
41026c1c:	00cffe34 	movhi	r3,16376
41026c20:	480b883a 	mov	r5,r9
41026c24:	4009883a 	mov	r4,r8
41026c28:	180f883a 	mov	r7,r3
41026c2c:	100d883a 	mov	r6,r2
41026c30:	102fc900 	call	4102fc90 <__subdf3>
41026c34:	0218dbf4 	movhi	r8,25455
41026c38:	4210d844 	addi	r8,r8,17249
41026c3c:	024ff4f4 	movhi	r9,16339
41026c40:	4a61e9c4 	addi	r9,r9,-30809
41026c44:	480f883a 	mov	r7,r9
41026c48:	400d883a 	mov	r6,r8
41026c4c:	180b883a 	mov	r5,r3
41026c50:	1009883a 	mov	r4,r2
41026c54:	102fd840 	call	4102fd84 <__muldf3>
41026c58:	0222d874 	movhi	r8,35681
41026c5c:	42322cc4 	addi	r8,r8,-14157
41026c60:	024ff1f4 	movhi	r9,16327
41026c64:	4a628a04 	addi	r9,r9,-30168
41026c68:	480f883a 	mov	r7,r9
41026c6c:	400d883a 	mov	r6,r8
41026c70:	180b883a 	mov	r5,r3
41026c74:	1009883a 	mov	r4,r2
41026c78:	102fd100 	call	4102fd10 <__adddf3>
41026c7c:	b009883a 	mov	r4,r22
41026c80:	1021883a 	mov	r16,r2
41026c84:	1823883a 	mov	r17,r3
41026c88:	10306c00 	call	410306c0 <__floatsidf>
41026c8c:	021427f4 	movhi	r8,20639
41026c90:	421e7ec4 	addi	r8,r8,31227
41026c94:	024ff4f4 	movhi	r9,16339
41026c98:	4a5104c4 	addi	r9,r9,17427
41026c9c:	480f883a 	mov	r7,r9
41026ca0:	400d883a 	mov	r6,r8
41026ca4:	180b883a 	mov	r5,r3
41026ca8:	1009883a 	mov	r4,r2
41026cac:	102fd840 	call	4102fd84 <__muldf3>
41026cb0:	180f883a 	mov	r7,r3
41026cb4:	880b883a 	mov	r5,r17
41026cb8:	100d883a 	mov	r6,r2
41026cbc:	8009883a 	mov	r4,r16
41026cc0:	102fd100 	call	4102fd10 <__adddf3>
41026cc4:	1009883a 	mov	r4,r2
41026cc8:	180b883a 	mov	r5,r3
41026ccc:	1021883a 	mov	r16,r2
41026cd0:	1823883a 	mov	r17,r3
41026cd4:	10307b80 	call	410307b8 <__fixdfsi>
41026cd8:	000d883a 	mov	r6,zero
41026cdc:	000f883a 	mov	r7,zero
41026ce0:	8009883a 	mov	r4,r16
41026ce4:	880b883a 	mov	r5,r17
41026ce8:	d8800d15 	stw	r2,52(sp)
41026cec:	10305b00 	call	410305b0 <__ltdf2>
41026cf0:	10031716 	blt	r2,zero,41027950 <_dtoa_r+0xe8c>
41026cf4:	d8c00d17 	ldw	r3,52(sp)
41026cf8:	00800584 	movi	r2,22
41026cfc:	10c1482e 	bgeu	r2,r3,41027220 <_dtoa_r+0x75c>
41026d00:	01000044 	movi	r4,1
41026d04:	d9000c15 	stw	r4,48(sp)
41026d08:	bd85c83a 	sub	r2,r23,r22
41026d0c:	11bfffc4 	addi	r6,r2,-1
41026d10:	30030b16 	blt	r6,zero,41027940 <_dtoa_r+0xe7c>
41026d14:	d9800a15 	stw	r6,40(sp)
41026d18:	d8001115 	stw	zero,68(sp)
41026d1c:	d8c00d17 	ldw	r3,52(sp)
41026d20:	1802ff16 	blt	r3,zero,41027920 <_dtoa_r+0xe5c>
41026d24:	d9000a17 	ldw	r4,40(sp)
41026d28:	d8c00915 	stw	r3,36(sp)
41026d2c:	d8001015 	stw	zero,64(sp)
41026d30:	20c9883a 	add	r4,r4,r3
41026d34:	d9000a15 	stw	r4,40(sp)
41026d38:	d9001717 	ldw	r4,92(sp)
41026d3c:	00800244 	movi	r2,9
41026d40:	11004636 	bltu	r2,r4,41026e5c <_dtoa_r+0x398>
41026d44:	00800144 	movi	r2,5
41026d48:	11020416 	blt	r2,r4,4102755c <_dtoa_r+0xa98>
41026d4c:	04400044 	movi	r17,1
41026d50:	d8c01717 	ldw	r3,92(sp)
41026d54:	00800144 	movi	r2,5
41026d58:	10c1ed36 	bltu	r2,r3,41027510 <_dtoa_r+0xa4c>
41026d5c:	18c5883a 	add	r2,r3,r3
41026d60:	1085883a 	add	r2,r2,r2
41026d64:	00d040b4 	movhi	r3,16642
41026d68:	18db5e04 	addi	r3,r3,28024
41026d6c:	10c5883a 	add	r2,r2,r3
41026d70:	11000017 	ldw	r4,0(r2)
41026d74:	2000683a 	jmp	r4
41026d78:	41026e64 	muli	r4,r8,2489
41026d7c:	41026e64 	muli	r4,r8,2489
41026d80:	41027864 	muli	r4,r8,2529
41026d84:	4102783c 	xorhi	r4,r8,2528
41026d88:	41027880 	call	44102788 <__flash_rwdata_start+0x30cd7e8>
41026d8c:	4102788c 	andi	r4,r8,2530
41026d90:	d9002717 	ldw	r4,156(sp)
41026d94:	0089c3c4 	movi	r2,9999
41026d98:	20800015 	stw	r2,0(r4)
41026d9c:	a0001026 	beq	r20,zero,41026de0 <_dtoa_r+0x31c>
41026da0:	00c00034 	movhi	r3,0
41026da4:	18c38704 	addi	r3,r3,3612
41026da8:	d9802917 	ldw	r6,164(sp)
41026dac:	303f7926 	beq	r6,zero,41026b94 <_dtoa_r+0xd0>
41026db0:	188000c7 	ldb	r2,3(r3)
41026db4:	190000c4 	addi	r4,r3,3
41026db8:	1000101e 	bne	r2,zero,41026dfc <_dtoa_r+0x338>
41026dbc:	d8802917 	ldw	r2,164(sp)
41026dc0:	11000015 	stw	r4,0(r2)
41026dc4:	003f7306 	br	41026b94 <_dtoa_r+0xd0>
41026dc8:	00a00034 	movhi	r2,32768
41026dcc:	10bfffc4 	addi	r2,r2,-1
41026dd0:	00c00044 	movi	r3,1
41026dd4:	88aa703a 	and	r21,r17,r2
41026dd8:	90c00015 	stw	r3,0(r18)
41026ddc:	003f5806 	br	41026b40 <_dtoa_r+0x7c>
41026de0:	00800434 	movhi	r2,16
41026de4:	10bfffc4 	addi	r2,r2,-1
41026de8:	a884703a 	and	r2,r21,r2
41026dec:	103fec1e 	bne	r2,zero,41026da0 <_dtoa_r+0x2dc>
41026df0:	00c00034 	movhi	r3,0
41026df4:	18c38404 	addi	r3,r3,3600
41026df8:	003feb06 	br	41026da8 <_dtoa_r+0x2e4>
41026dfc:	d8802917 	ldw	r2,164(sp)
41026e00:	19000204 	addi	r4,r3,8
41026e04:	11000015 	stw	r4,0(r2)
41026e08:	003f6206 	br	41026b94 <_dtoa_r+0xd0>
41026e0c:	ddc00117 	ldw	r23,4(sp)
41026e10:	d8800217 	ldw	r2,8(sp)
41026e14:	01000804 	movi	r4,32
41026e18:	b8c10c84 	addi	r3,r23,1074
41026e1c:	18a3883a 	add	r17,r3,r2
41026e20:	2441b80e 	bge	r4,r17,41027504 <_dtoa_r+0xa40>
41026e24:	00c01004 	movi	r3,64
41026e28:	1c47c83a 	sub	r3,r3,r17
41026e2c:	88bff804 	addi	r2,r17,-32
41026e30:	a8c6983a 	sll	r3,r21,r3
41026e34:	a084d83a 	srl	r2,r20,r2
41026e38:	1888b03a 	or	r4,r3,r2
41026e3c:	10309040 	call	41030904 <__floatunsidf>
41026e40:	1011883a 	mov	r8,r2
41026e44:	00bf8434 	movhi	r2,65040
41026e48:	01000044 	movi	r4,1
41026e4c:	10d3883a 	add	r9,r2,r3
41026e50:	8dbef344 	addi	r22,r17,-1075
41026e54:	d9000815 	stw	r4,32(sp)
41026e58:	003f6f06 	br	41026c18 <_dtoa_r+0x154>
41026e5c:	d8001715 	stw	zero,92(sp)
41026e60:	04400044 	movi	r17,1
41026e64:	00bfffc4 	movi	r2,-1
41026e68:	00c00044 	movi	r3,1
41026e6c:	d8800e15 	stw	r2,56(sp)
41026e70:	d8002615 	stw	zero,152(sp)
41026e74:	d8800f15 	stw	r2,60(sp)
41026e78:	d8c00b15 	stw	r3,44(sp)
41026e7c:	1021883a 	mov	r16,r2
41026e80:	d8801617 	ldw	r2,88(sp)
41026e84:	10001115 	stw	zero,68(r2)
41026e88:	d8801617 	ldw	r2,88(sp)
41026e8c:	11401117 	ldw	r5,68(r2)
41026e90:	1009883a 	mov	r4,r2
41026e94:	1029d600 	call	41029d60 <_Balloc>
41026e98:	d8c01617 	ldw	r3,88(sp)
41026e9c:	d8800515 	stw	r2,20(sp)
41026ea0:	18801015 	stw	r2,64(r3)
41026ea4:	00800384 	movi	r2,14
41026ea8:	14006836 	bltu	r2,r16,4102704c <_dtoa_r+0x588>
41026eac:	8805003a 	cmpeq	r2,r17,zero
41026eb0:	1000661e 	bne	r2,zero,4102704c <_dtoa_r+0x588>
41026eb4:	d9000d17 	ldw	r4,52(sp)
41026eb8:	0102300e 	bge	zero,r4,4102777c <_dtoa_r+0xcb8>
41026ebc:	208003cc 	andi	r2,r4,15
41026ec0:	100490fa 	slli	r2,r2,3
41026ec4:	2025d13a 	srai	r18,r4,4
41026ec8:	00c00034 	movhi	r3,0
41026ecc:	18c39804 	addi	r3,r3,3680
41026ed0:	10c5883a 	add	r2,r2,r3
41026ed4:	90c0040c 	andi	r3,r18,16
41026ed8:	14000017 	ldw	r16,0(r2)
41026edc:	14400117 	ldw	r17,4(r2)
41026ee0:	18036a1e 	bne	r3,zero,41027c8c <_dtoa_r+0x11c8>
41026ee4:	05800084 	movi	r22,2
41026ee8:	90001026 	beq	r18,zero,41026f2c <_dtoa_r+0x468>
41026eec:	04c00034 	movhi	r19,0
41026ef0:	9cc3ca04 	addi	r19,r19,3880
41026ef4:	9080004c 	andi	r2,r18,1
41026ef8:	1005003a 	cmpeq	r2,r2,zero
41026efc:	1000081e 	bne	r2,zero,41026f20 <_dtoa_r+0x45c>
41026f00:	99800017 	ldw	r6,0(r19)
41026f04:	99c00117 	ldw	r7,4(r19)
41026f08:	880b883a 	mov	r5,r17
41026f0c:	8009883a 	mov	r4,r16
41026f10:	102fd840 	call	4102fd84 <__muldf3>
41026f14:	1021883a 	mov	r16,r2
41026f18:	b5800044 	addi	r22,r22,1
41026f1c:	1823883a 	mov	r17,r3
41026f20:	9025d07a 	srai	r18,r18,1
41026f24:	9cc00204 	addi	r19,r19,8
41026f28:	903ff21e 	bne	r18,zero,41026ef4 <_dtoa_r+0x430>
41026f2c:	a80b883a 	mov	r5,r21
41026f30:	a009883a 	mov	r4,r20
41026f34:	880f883a 	mov	r7,r17
41026f38:	800d883a 	mov	r6,r16
41026f3c:	10301380 	call	41030138 <__divdf3>
41026f40:	1029883a 	mov	r20,r2
41026f44:	182b883a 	mov	r21,r3
41026f48:	d8c00c17 	ldw	r3,48(sp)
41026f4c:	1805003a 	cmpeq	r2,r3,zero
41026f50:	1000081e 	bne	r2,zero,41026f74 <_dtoa_r+0x4b0>
41026f54:	0005883a 	mov	r2,zero
41026f58:	00cffc34 	movhi	r3,16368
41026f5c:	180f883a 	mov	r7,r3
41026f60:	a009883a 	mov	r4,r20
41026f64:	a80b883a 	mov	r5,r21
41026f68:	100d883a 	mov	r6,r2
41026f6c:	10305b00 	call	410305b0 <__ltdf2>
41026f70:	1003fe16 	blt	r2,zero,41027f6c <_dtoa_r+0x14a8>
41026f74:	b009883a 	mov	r4,r22
41026f78:	10306c00 	call	410306c0 <__floatsidf>
41026f7c:	180b883a 	mov	r5,r3
41026f80:	1009883a 	mov	r4,r2
41026f84:	a00d883a 	mov	r6,r20
41026f88:	a80f883a 	mov	r7,r21
41026f8c:	102fd840 	call	4102fd84 <__muldf3>
41026f90:	0011883a 	mov	r8,zero
41026f94:	02500734 	movhi	r9,16412
41026f98:	1009883a 	mov	r4,r2
41026f9c:	180b883a 	mov	r5,r3
41026fa0:	480f883a 	mov	r7,r9
41026fa4:	400d883a 	mov	r6,r8
41026fa8:	102fd100 	call	4102fd10 <__adddf3>
41026fac:	d9000f17 	ldw	r4,60(sp)
41026fb0:	102d883a 	mov	r22,r2
41026fb4:	00bf3034 	movhi	r2,64704
41026fb8:	18b9883a 	add	fp,r3,r2
41026fbc:	e02f883a 	mov	r23,fp
41026fc0:	20028f1e 	bne	r4,zero,41027a00 <_dtoa_r+0xf3c>
41026fc4:	0005883a 	mov	r2,zero
41026fc8:	00d00534 	movhi	r3,16404
41026fcc:	a009883a 	mov	r4,r20
41026fd0:	a80b883a 	mov	r5,r21
41026fd4:	180f883a 	mov	r7,r3
41026fd8:	100d883a 	mov	r6,r2
41026fdc:	102fc900 	call	4102fc90 <__subdf3>
41026fe0:	1009883a 	mov	r4,r2
41026fe4:	e00f883a 	mov	r7,fp
41026fe8:	180b883a 	mov	r5,r3
41026fec:	b00d883a 	mov	r6,r22
41026ff0:	1025883a 	mov	r18,r2
41026ff4:	1827883a 	mov	r19,r3
41026ff8:	10304a00 	call	410304a0 <__gtdf2>
41026ffc:	00834f16 	blt	zero,r2,41027d3c <_dtoa_r+0x1278>
41027000:	e0e0003c 	xorhi	r3,fp,32768
41027004:	9009883a 	mov	r4,r18
41027008:	980b883a 	mov	r5,r19
4102700c:	180f883a 	mov	r7,r3
41027010:	b00d883a 	mov	r6,r22
41027014:	10305b00 	call	410305b0 <__ltdf2>
41027018:	1000080e 	bge	r2,zero,4102703c <_dtoa_r+0x578>
4102701c:	0027883a 	mov	r19,zero
41027020:	0025883a 	mov	r18,zero
41027024:	d8802617 	ldw	r2,152(sp)
41027028:	df000517 	ldw	fp,20(sp)
4102702c:	d8000615 	stw	zero,24(sp)
41027030:	0084303a 	nor	r2,zero,r2
41027034:	d8800d15 	stw	r2,52(sp)
41027038:	00019b06 	br	410276a8 <_dtoa_r+0xbe4>
4102703c:	d9801217 	ldw	r6,72(sp)
41027040:	d8801317 	ldw	r2,76(sp)
41027044:	3029883a 	mov	r20,r6
41027048:	102b883a 	mov	r21,r2
4102704c:	d8c00217 	ldw	r3,8(sp)
41027050:	18008516 	blt	r3,zero,41027268 <_dtoa_r+0x7a4>
41027054:	d9000d17 	ldw	r4,52(sp)
41027058:	00800384 	movi	r2,14
4102705c:	11008216 	blt	r2,r4,41027268 <_dtoa_r+0x7a4>
41027060:	200490fa 	slli	r2,r4,3
41027064:	d9802617 	ldw	r6,152(sp)
41027068:	00c00034 	movhi	r3,0
4102706c:	18c39804 	addi	r3,r3,3680
41027070:	10c5883a 	add	r2,r2,r3
41027074:	14800017 	ldw	r18,0(r2)
41027078:	14c00117 	ldw	r19,4(r2)
4102707c:	30031e16 	blt	r6,zero,41027cf8 <_dtoa_r+0x1234>
41027080:	d9000517 	ldw	r4,20(sp)
41027084:	d8c00f17 	ldw	r3,60(sp)
41027088:	a823883a 	mov	r17,r21
4102708c:	a021883a 	mov	r16,r20
41027090:	192b883a 	add	r21,r3,r4
41027094:	2039883a 	mov	fp,r4
41027098:	00000f06 	br	410270d8 <_dtoa_r+0x614>
4102709c:	0005883a 	mov	r2,zero
410270a0:	00d00934 	movhi	r3,16420
410270a4:	5009883a 	mov	r4,r10
410270a8:	580b883a 	mov	r5,r11
410270ac:	180f883a 	mov	r7,r3
410270b0:	100d883a 	mov	r6,r2
410270b4:	102fd840 	call	4102fd84 <__muldf3>
410270b8:	180b883a 	mov	r5,r3
410270bc:	000d883a 	mov	r6,zero
410270c0:	000f883a 	mov	r7,zero
410270c4:	1009883a 	mov	r4,r2
410270c8:	1021883a 	mov	r16,r2
410270cc:	1823883a 	mov	r17,r3
410270d0:	10304180 	call	41030418 <__nedf2>
410270d4:	10004526 	beq	r2,zero,410271ec <_dtoa_r+0x728>
410270d8:	900d883a 	mov	r6,r18
410270dc:	980f883a 	mov	r7,r19
410270e0:	8009883a 	mov	r4,r16
410270e4:	880b883a 	mov	r5,r17
410270e8:	10301380 	call	41030138 <__divdf3>
410270ec:	180b883a 	mov	r5,r3
410270f0:	1009883a 	mov	r4,r2
410270f4:	10307b80 	call	410307b8 <__fixdfsi>
410270f8:	1009883a 	mov	r4,r2
410270fc:	1029883a 	mov	r20,r2
41027100:	10306c00 	call	410306c0 <__floatsidf>
41027104:	180f883a 	mov	r7,r3
41027108:	9009883a 	mov	r4,r18
4102710c:	980b883a 	mov	r5,r19
41027110:	100d883a 	mov	r6,r2
41027114:	102fd840 	call	4102fd84 <__muldf3>
41027118:	180f883a 	mov	r7,r3
4102711c:	880b883a 	mov	r5,r17
41027120:	8009883a 	mov	r4,r16
41027124:	100d883a 	mov	r6,r2
41027128:	102fc900 	call	4102fc90 <__subdf3>
4102712c:	1015883a 	mov	r10,r2
41027130:	a0800c04 	addi	r2,r20,48
41027134:	e0800005 	stb	r2,0(fp)
41027138:	e7000044 	addi	fp,fp,1
4102713c:	1817883a 	mov	r11,r3
41027140:	e57fd61e 	bne	fp,r21,4102709c <_dtoa_r+0x5d8>
41027144:	500d883a 	mov	r6,r10
41027148:	180f883a 	mov	r7,r3
4102714c:	5009883a 	mov	r4,r10
41027150:	180b883a 	mov	r5,r3
41027154:	102fd100 	call	4102fd10 <__adddf3>
41027158:	100d883a 	mov	r6,r2
4102715c:	9009883a 	mov	r4,r18
41027160:	980b883a 	mov	r5,r19
41027164:	180f883a 	mov	r7,r3
41027168:	1021883a 	mov	r16,r2
4102716c:	1823883a 	mov	r17,r3
41027170:	10305b00 	call	410305b0 <__ltdf2>
41027174:	10000816 	blt	r2,zero,41027198 <_dtoa_r+0x6d4>
41027178:	980b883a 	mov	r5,r19
4102717c:	800d883a 	mov	r6,r16
41027180:	880f883a 	mov	r7,r17
41027184:	9009883a 	mov	r4,r18
41027188:	10303900 	call	41030390 <__eqdf2>
4102718c:	1000171e 	bne	r2,zero,410271ec <_dtoa_r+0x728>
41027190:	a080004c 	andi	r2,r20,1
41027194:	10001526 	beq	r2,zero,410271ec <_dtoa_r+0x728>
41027198:	d8800d17 	ldw	r2,52(sp)
4102719c:	d8800415 	stw	r2,16(sp)
410271a0:	e009883a 	mov	r4,fp
410271a4:	213fffc4 	addi	r4,r4,-1
410271a8:	20c00007 	ldb	r3,0(r4)
410271ac:	00800e44 	movi	r2,57
410271b0:	1880081e 	bne	r3,r2,410271d4 <_dtoa_r+0x710>
410271b4:	d8800517 	ldw	r2,20(sp)
410271b8:	113ffa1e 	bne	r2,r4,410271a4 <_dtoa_r+0x6e0>
410271bc:	d8c00417 	ldw	r3,16(sp)
410271c0:	d9800517 	ldw	r6,20(sp)
410271c4:	00800c04 	movi	r2,48
410271c8:	18c00044 	addi	r3,r3,1
410271cc:	d8c00415 	stw	r3,16(sp)
410271d0:	30800005 	stb	r2,0(r6)
410271d4:	20800003 	ldbu	r2,0(r4)
410271d8:	d8c00417 	ldw	r3,16(sp)
410271dc:	27000044 	addi	fp,r4,1
410271e0:	10800044 	addi	r2,r2,1
410271e4:	d8c00d15 	stw	r3,52(sp)
410271e8:	20800005 	stb	r2,0(r4)
410271ec:	d9001617 	ldw	r4,88(sp)
410271f0:	d9400717 	ldw	r5,28(sp)
410271f4:	10297e00 	call	410297e0 <_Bfree>
410271f8:	e0000005 	stb	zero,0(fp)
410271fc:	d9800d17 	ldw	r6,52(sp)
41027200:	d8c02717 	ldw	r3,156(sp)
41027204:	d9002917 	ldw	r4,164(sp)
41027208:	30800044 	addi	r2,r6,1
4102720c:	18800015 	stw	r2,0(r3)
41027210:	20029c26 	beq	r4,zero,41027c84 <_dtoa_r+0x11c0>
41027214:	d8c00517 	ldw	r3,20(sp)
41027218:	27000015 	stw	fp,0(r4)
4102721c:	003e5d06 	br	41026b94 <_dtoa_r+0xd0>
41027220:	d9800d17 	ldw	r6,52(sp)
41027224:	00c00034 	movhi	r3,0
41027228:	18c39804 	addi	r3,r3,3680
4102722c:	d9001217 	ldw	r4,72(sp)
41027230:	300490fa 	slli	r2,r6,3
41027234:	d9401317 	ldw	r5,76(sp)
41027238:	10c5883a 	add	r2,r2,r3
4102723c:	12000017 	ldw	r8,0(r2)
41027240:	12400117 	ldw	r9,4(r2)
41027244:	400d883a 	mov	r6,r8
41027248:	480f883a 	mov	r7,r9
4102724c:	10305b00 	call	410305b0 <__ltdf2>
41027250:	1000030e 	bge	r2,zero,41027260 <_dtoa_r+0x79c>
41027254:	d8800d17 	ldw	r2,52(sp)
41027258:	10bfffc4 	addi	r2,r2,-1
4102725c:	d8800d15 	stw	r2,52(sp)
41027260:	d8000c15 	stw	zero,48(sp)
41027264:	003ea806 	br	41026d08 <_dtoa_r+0x244>
41027268:	d9000b17 	ldw	r4,44(sp)
4102726c:	202cc03a 	cmpne	r22,r4,zero
41027270:	b000c71e 	bne	r22,zero,41027590 <_dtoa_r+0xacc>
41027274:	dc001117 	ldw	r16,68(sp)
41027278:	dc801017 	ldw	r18,64(sp)
4102727c:	0027883a 	mov	r19,zero
41027280:	04000b0e 	bge	zero,r16,410272b0 <_dtoa_r+0x7ec>
41027284:	d8c00a17 	ldw	r3,40(sp)
41027288:	00c0090e 	bge	zero,r3,410272b0 <_dtoa_r+0x7ec>
4102728c:	8005883a 	mov	r2,r16
41027290:	1c011316 	blt	r3,r16,410276e0 <_dtoa_r+0xc1c>
41027294:	d9000a17 	ldw	r4,40(sp)
41027298:	d9801117 	ldw	r6,68(sp)
4102729c:	80a1c83a 	sub	r16,r16,r2
410272a0:	2089c83a 	sub	r4,r4,r2
410272a4:	308dc83a 	sub	r6,r6,r2
410272a8:	d9000a15 	stw	r4,40(sp)
410272ac:	d9801115 	stw	r6,68(sp)
410272b0:	d8801017 	ldw	r2,64(sp)
410272b4:	0080150e 	bge	zero,r2,4102730c <_dtoa_r+0x848>
410272b8:	d8c00b17 	ldw	r3,44(sp)
410272bc:	1805003a 	cmpeq	r2,r3,zero
410272c0:	1001c91e 	bne	r2,zero,410279e8 <_dtoa_r+0xf24>
410272c4:	04800e0e 	bge	zero,r18,41027300 <_dtoa_r+0x83c>
410272c8:	d9001617 	ldw	r4,88(sp)
410272cc:	980b883a 	mov	r5,r19
410272d0:	900d883a 	mov	r6,r18
410272d4:	102a5940 	call	4102a594 <__pow5mult>
410272d8:	d9001617 	ldw	r4,88(sp)
410272dc:	d9800717 	ldw	r6,28(sp)
410272e0:	100b883a 	mov	r5,r2
410272e4:	1027883a 	mov	r19,r2
410272e8:	102a2700 	call	4102a270 <__multiply>
410272ec:	d9001617 	ldw	r4,88(sp)
410272f0:	d9400717 	ldw	r5,28(sp)
410272f4:	1023883a 	mov	r17,r2
410272f8:	10297e00 	call	410297e0 <_Bfree>
410272fc:	dc400715 	stw	r17,28(sp)
41027300:	d9001017 	ldw	r4,64(sp)
41027304:	248dc83a 	sub	r6,r4,r18
41027308:	30010e1e 	bne	r6,zero,41027744 <_dtoa_r+0xc80>
4102730c:	d9001617 	ldw	r4,88(sp)
41027310:	04400044 	movi	r17,1
41027314:	880b883a 	mov	r5,r17
41027318:	102a4580 	call	4102a458 <__i2b>
4102731c:	d9800917 	ldw	r6,36(sp)
41027320:	1025883a 	mov	r18,r2
41027324:	0180040e 	bge	zero,r6,41027338 <_dtoa_r+0x874>
41027328:	d9001617 	ldw	r4,88(sp)
4102732c:	100b883a 	mov	r5,r2
41027330:	102a5940 	call	4102a594 <__pow5mult>
41027334:	1025883a 	mov	r18,r2
41027338:	d8801717 	ldw	r2,92(sp)
4102733c:	8880f30e 	bge	r17,r2,4102770c <_dtoa_r+0xc48>
41027340:	0023883a 	mov	r17,zero
41027344:	d9800917 	ldw	r6,36(sp)
41027348:	30019e1e 	bne	r6,zero,410279c4 <_dtoa_r+0xf00>
4102734c:	00c00044 	movi	r3,1
41027350:	d9000a17 	ldw	r4,40(sp)
41027354:	20c5883a 	add	r2,r4,r3
41027358:	10c007cc 	andi	r3,r2,31
4102735c:	1800841e 	bne	r3,zero,41027570 <_dtoa_r+0xaac>
41027360:	00800704 	movi	r2,28
41027364:	d9000a17 	ldw	r4,40(sp)
41027368:	d9801117 	ldw	r6,68(sp)
4102736c:	80a1883a 	add	r16,r16,r2
41027370:	2089883a 	add	r4,r4,r2
41027374:	308d883a 	add	r6,r6,r2
41027378:	d9000a15 	stw	r4,40(sp)
4102737c:	d9801115 	stw	r6,68(sp)
41027380:	d8801117 	ldw	r2,68(sp)
41027384:	0080050e 	bge	zero,r2,4102739c <_dtoa_r+0x8d8>
41027388:	d9400717 	ldw	r5,28(sp)
4102738c:	d9001617 	ldw	r4,88(sp)
41027390:	100d883a 	mov	r6,r2
41027394:	102a1240 	call	4102a124 <__lshift>
41027398:	d8800715 	stw	r2,28(sp)
4102739c:	d8c00a17 	ldw	r3,40(sp)
410273a0:	00c0050e 	bge	zero,r3,410273b8 <_dtoa_r+0x8f4>
410273a4:	d9001617 	ldw	r4,88(sp)
410273a8:	900b883a 	mov	r5,r18
410273ac:	180d883a 	mov	r6,r3
410273b0:	102a1240 	call	4102a124 <__lshift>
410273b4:	1025883a 	mov	r18,r2
410273b8:	d9000c17 	ldw	r4,48(sp)
410273bc:	2005003a 	cmpeq	r2,r4,zero
410273c0:	10016f26 	beq	r2,zero,41027980 <_dtoa_r+0xebc>
410273c4:	d9000f17 	ldw	r4,60(sp)
410273c8:	0102170e 	bge	zero,r4,41027c28 <_dtoa_r+0x1164>
410273cc:	d9800b17 	ldw	r6,44(sp)
410273d0:	3005003a 	cmpeq	r2,r6,zero
410273d4:	1000881e 	bne	r2,zero,410275f8 <_dtoa_r+0xb34>
410273d8:	0400050e 	bge	zero,r16,410273f0 <_dtoa_r+0x92c>
410273dc:	d9001617 	ldw	r4,88(sp)
410273e0:	980b883a 	mov	r5,r19
410273e4:	800d883a 	mov	r6,r16
410273e8:	102a1240 	call	4102a124 <__lshift>
410273ec:	1027883a 	mov	r19,r2
410273f0:	8804c03a 	cmpne	r2,r17,zero
410273f4:	1002541e 	bne	r2,zero,41027d48 <_dtoa_r+0x1284>
410273f8:	980b883a 	mov	r5,r19
410273fc:	dd800517 	ldw	r22,20(sp)
41027400:	dcc00615 	stw	r19,24(sp)
41027404:	a700004c 	andi	fp,r20,1
41027408:	2827883a 	mov	r19,r5
4102740c:	d9000717 	ldw	r4,28(sp)
41027410:	900b883a 	mov	r5,r18
41027414:	10268ac0 	call	410268ac <quorem>
41027418:	d9000717 	ldw	r4,28(sp)
4102741c:	d9400617 	ldw	r5,24(sp)
41027420:	1023883a 	mov	r17,r2
41027424:	8dc00c04 	addi	r23,r17,48
41027428:	102993c0 	call	4102993c <__mcmp>
4102742c:	d9001617 	ldw	r4,88(sp)
41027430:	900b883a 	mov	r5,r18
41027434:	980d883a 	mov	r6,r19
41027438:	1029883a 	mov	r20,r2
4102743c:	1029f980 	call	41029f98 <__mdiff>
41027440:	102b883a 	mov	r21,r2
41027444:	10800317 	ldw	r2,12(r2)
41027448:	1001281e 	bne	r2,zero,410278ec <_dtoa_r+0xe28>
4102744c:	d9000717 	ldw	r4,28(sp)
41027450:	a80b883a 	mov	r5,r21
41027454:	102993c0 	call	4102993c <__mcmp>
41027458:	d9001617 	ldw	r4,88(sp)
4102745c:	1021883a 	mov	r16,r2
41027460:	a80b883a 	mov	r5,r21
41027464:	10297e00 	call	410297e0 <_Bfree>
41027468:	8000041e 	bne	r16,zero,4102747c <_dtoa_r+0x9b8>
4102746c:	d8801717 	ldw	r2,92(sp)
41027470:	1000021e 	bne	r2,zero,4102747c <_dtoa_r+0x9b8>
41027474:	e004c03a 	cmpne	r2,fp,zero
41027478:	10011726 	beq	r2,zero,410278d8 <_dtoa_r+0xe14>
4102747c:	a0010616 	blt	r20,zero,41027898 <_dtoa_r+0xdd4>
41027480:	a000041e 	bne	r20,zero,41027494 <_dtoa_r+0x9d0>
41027484:	d8c01717 	ldw	r3,92(sp)
41027488:	1800021e 	bne	r3,zero,41027494 <_dtoa_r+0x9d0>
4102748c:	e004c03a 	cmpne	r2,fp,zero
41027490:	10010126 	beq	r2,zero,41027898 <_dtoa_r+0xdd4>
41027494:	04023d16 	blt	zero,r16,41027d8c <_dtoa_r+0x12c8>
41027498:	b5c00005 	stb	r23,0(r22)
4102749c:	d9800517 	ldw	r6,20(sp)
410274a0:	d9000f17 	ldw	r4,60(sp)
410274a4:	b5800044 	addi	r22,r22,1
410274a8:	3105883a 	add	r2,r6,r4
410274ac:	b0806526 	beq	r22,r2,41027644 <_dtoa_r+0xb80>
410274b0:	d9400717 	ldw	r5,28(sp)
410274b4:	d9001617 	ldw	r4,88(sp)
410274b8:	01800284 	movi	r6,10
410274bc:	000f883a 	mov	r7,zero
410274c0:	102a4940 	call	4102a494 <__multadd>
410274c4:	d8800715 	stw	r2,28(sp)
410274c8:	d8800617 	ldw	r2,24(sp)
410274cc:	14c10c26 	beq	r2,r19,41027900 <_dtoa_r+0xe3c>
410274d0:	d9400617 	ldw	r5,24(sp)
410274d4:	d9001617 	ldw	r4,88(sp)
410274d8:	01800284 	movi	r6,10
410274dc:	000f883a 	mov	r7,zero
410274e0:	102a4940 	call	4102a494 <__multadd>
410274e4:	d9001617 	ldw	r4,88(sp)
410274e8:	980b883a 	mov	r5,r19
410274ec:	01800284 	movi	r6,10
410274f0:	000f883a 	mov	r7,zero
410274f4:	d8800615 	stw	r2,24(sp)
410274f8:	102a4940 	call	4102a494 <__multadd>
410274fc:	1027883a 	mov	r19,r2
41027500:	003fc206 	br	4102740c <_dtoa_r+0x948>
41027504:	2445c83a 	sub	r2,r4,r17
41027508:	a088983a 	sll	r4,r20,r2
4102750c:	003e4b06 	br	41026e3c <_dtoa_r+0x378>
41027510:	01bfffc4 	movi	r6,-1
41027514:	00800044 	movi	r2,1
41027518:	d9800e15 	stw	r6,56(sp)
4102751c:	d9800f15 	stw	r6,60(sp)
41027520:	d8800b15 	stw	r2,44(sp)
41027524:	d8c01617 	ldw	r3,88(sp)
41027528:	008005c4 	movi	r2,23
4102752c:	18001115 	stw	zero,68(r3)
41027530:	1580082e 	bgeu	r2,r22,41027554 <_dtoa_r+0xa90>
41027534:	00c00104 	movi	r3,4
41027538:	0009883a 	mov	r4,zero
4102753c:	18c7883a 	add	r3,r3,r3
41027540:	18800504 	addi	r2,r3,20
41027544:	21000044 	addi	r4,r4,1
41027548:	b0bffc2e 	bgeu	r22,r2,4102753c <_dtoa_r+0xa78>
4102754c:	d9801617 	ldw	r6,88(sp)
41027550:	31001115 	stw	r4,68(r6)
41027554:	dc000f17 	ldw	r16,60(sp)
41027558:	003e4b06 	br	41026e88 <_dtoa_r+0x3c4>
4102755c:	d9801717 	ldw	r6,92(sp)
41027560:	0023883a 	mov	r17,zero
41027564:	31bfff04 	addi	r6,r6,-4
41027568:	d9801715 	stw	r6,92(sp)
4102756c:	003df806 	br	41026d50 <_dtoa_r+0x28c>
41027570:	00800804 	movi	r2,32
41027574:	10c9c83a 	sub	r4,r2,r3
41027578:	00c00104 	movi	r3,4
4102757c:	19005a16 	blt	r3,r4,410276e8 <_dtoa_r+0xc24>
41027580:	008000c4 	movi	r2,3
41027584:	113f7e16 	blt	r2,r4,41027380 <_dtoa_r+0x8bc>
41027588:	20800704 	addi	r2,r4,28
4102758c:	003f7506 	br	41027364 <_dtoa_r+0x8a0>
41027590:	d9801717 	ldw	r6,92(sp)
41027594:	00800044 	movi	r2,1
41027598:	1180a10e 	bge	r2,r6,41027820 <_dtoa_r+0xd5c>
4102759c:	d9800f17 	ldw	r6,60(sp)
410275a0:	d8c01017 	ldw	r3,64(sp)
410275a4:	30bfffc4 	addi	r2,r6,-1
410275a8:	1881c616 	blt	r3,r2,41027cc4 <_dtoa_r+0x1200>
410275ac:	18a5c83a 	sub	r18,r3,r2
410275b0:	d8800f17 	ldw	r2,60(sp)
410275b4:	10026216 	blt	r2,zero,41027f40 <_dtoa_r+0x147c>
410275b8:	dc001117 	ldw	r16,68(sp)
410275bc:	1007883a 	mov	r3,r2
410275c0:	d9800a17 	ldw	r6,40(sp)
410275c4:	d8801117 	ldw	r2,68(sp)
410275c8:	d9001617 	ldw	r4,88(sp)
410275cc:	30cd883a 	add	r6,r6,r3
410275d0:	10c5883a 	add	r2,r2,r3
410275d4:	01400044 	movi	r5,1
410275d8:	d9800a15 	stw	r6,40(sp)
410275dc:	d8801115 	stw	r2,68(sp)
410275e0:	102a4580 	call	4102a458 <__i2b>
410275e4:	1027883a 	mov	r19,r2
410275e8:	003f2506 	br	41027280 <_dtoa_r+0x7bc>
410275ec:	00c00034 	movhi	r3,0
410275f0:	18c2d004 	addi	r3,r3,2880
410275f4:	003d6706 	br	41026b94 <_dtoa_r+0xd0>
410275f8:	dd800517 	ldw	r22,20(sp)
410275fc:	04000044 	movi	r16,1
41027600:	00000706 	br	41027620 <_dtoa_r+0xb5c>
41027604:	d9400717 	ldw	r5,28(sp)
41027608:	d9001617 	ldw	r4,88(sp)
4102760c:	01800284 	movi	r6,10
41027610:	000f883a 	mov	r7,zero
41027614:	102a4940 	call	4102a494 <__multadd>
41027618:	d8800715 	stw	r2,28(sp)
4102761c:	84000044 	addi	r16,r16,1
41027620:	d9000717 	ldw	r4,28(sp)
41027624:	900b883a 	mov	r5,r18
41027628:	10268ac0 	call	410268ac <quorem>
4102762c:	15c00c04 	addi	r23,r2,48
41027630:	b5c00005 	stb	r23,0(r22)
41027634:	d8c00f17 	ldw	r3,60(sp)
41027638:	b5800044 	addi	r22,r22,1
4102763c:	80fff116 	blt	r16,r3,41027604 <_dtoa_r+0xb40>
41027640:	d8000615 	stw	zero,24(sp)
41027644:	d9400717 	ldw	r5,28(sp)
41027648:	d9001617 	ldw	r4,88(sp)
4102764c:	01800044 	movi	r6,1
41027650:	102a1240 	call	4102a124 <__lshift>
41027654:	1009883a 	mov	r4,r2
41027658:	900b883a 	mov	r5,r18
4102765c:	d8800715 	stw	r2,28(sp)
41027660:	102993c0 	call	4102993c <__mcmp>
41027664:	00803c0e 	bge	zero,r2,41027758 <_dtoa_r+0xc94>
41027668:	b009883a 	mov	r4,r22
4102766c:	213fffc4 	addi	r4,r4,-1
41027670:	21400003 	ldbu	r5,0(r4)
41027674:	00800e44 	movi	r2,57
41027678:	28c03fcc 	andi	r3,r5,255
4102767c:	18c0201c 	xori	r3,r3,128
41027680:	18ffe004 	addi	r3,r3,-128
41027684:	1881981e 	bne	r3,r2,41027ce8 <_dtoa_r+0x1224>
41027688:	d9800517 	ldw	r6,20(sp)
4102768c:	21bff71e 	bne	r4,r6,4102766c <_dtoa_r+0xba8>
41027690:	d8800d17 	ldw	r2,52(sp)
41027694:	37000044 	addi	fp,r6,1
41027698:	10800044 	addi	r2,r2,1
4102769c:	d8800d15 	stw	r2,52(sp)
410276a0:	00800c44 	movi	r2,49
410276a4:	30800005 	stb	r2,0(r6)
410276a8:	d9001617 	ldw	r4,88(sp)
410276ac:	900b883a 	mov	r5,r18
410276b0:	10297e00 	call	410297e0 <_Bfree>
410276b4:	983ecd26 	beq	r19,zero,410271ec <_dtoa_r+0x728>
410276b8:	d8c00617 	ldw	r3,24(sp)
410276bc:	18000426 	beq	r3,zero,410276d0 <_dtoa_r+0xc0c>
410276c0:	1cc00326 	beq	r3,r19,410276d0 <_dtoa_r+0xc0c>
410276c4:	d9001617 	ldw	r4,88(sp)
410276c8:	180b883a 	mov	r5,r3
410276cc:	10297e00 	call	410297e0 <_Bfree>
410276d0:	d9001617 	ldw	r4,88(sp)
410276d4:	980b883a 	mov	r5,r19
410276d8:	10297e00 	call	410297e0 <_Bfree>
410276dc:	003ec306 	br	410271ec <_dtoa_r+0x728>
410276e0:	1805883a 	mov	r2,r3
410276e4:	003eeb06 	br	41027294 <_dtoa_r+0x7d0>
410276e8:	d9800a17 	ldw	r6,40(sp)
410276ec:	d8c01117 	ldw	r3,68(sp)
410276f0:	20bfff04 	addi	r2,r4,-4
410276f4:	308d883a 	add	r6,r6,r2
410276f8:	1887883a 	add	r3,r3,r2
410276fc:	80a1883a 	add	r16,r16,r2
41027700:	d9800a15 	stw	r6,40(sp)
41027704:	d8c01115 	stw	r3,68(sp)
41027708:	003f1d06 	br	41027380 <_dtoa_r+0x8bc>
4102770c:	a03f0c1e 	bne	r20,zero,41027340 <_dtoa_r+0x87c>
41027710:	00800434 	movhi	r2,16
41027714:	10bfffc4 	addi	r2,r2,-1
41027718:	a884703a 	and	r2,r21,r2
4102771c:	103f081e 	bne	r2,zero,41027340 <_dtoa_r+0x87c>
41027720:	a89ffc2c 	andhi	r2,r21,32752
41027724:	103f0626 	beq	r2,zero,41027340 <_dtoa_r+0x87c>
41027728:	d8c01117 	ldw	r3,68(sp)
4102772c:	d9000a17 	ldw	r4,40(sp)
41027730:	18c00044 	addi	r3,r3,1
41027734:	21000044 	addi	r4,r4,1
41027738:	d8c01115 	stw	r3,68(sp)
4102773c:	d9000a15 	stw	r4,40(sp)
41027740:	003f0006 	br	41027344 <_dtoa_r+0x880>
41027744:	d9400717 	ldw	r5,28(sp)
41027748:	d9001617 	ldw	r4,88(sp)
4102774c:	102a5940 	call	4102a594 <__pow5mult>
41027750:	d8800715 	stw	r2,28(sp)
41027754:	003eed06 	br	4102730c <_dtoa_r+0x848>
41027758:	1000021e 	bne	r2,zero,41027764 <_dtoa_r+0xca0>
4102775c:	b880004c 	andi	r2,r23,1
41027760:	103fc11e 	bne	r2,zero,41027668 <_dtoa_r+0xba4>
41027764:	b5bfffc4 	addi	r22,r22,-1
41027768:	b0c00007 	ldb	r3,0(r22)
4102776c:	00800c04 	movi	r2,48
41027770:	18bffc26 	beq	r3,r2,41027764 <_dtoa_r+0xca0>
41027774:	b7000044 	addi	fp,r22,1
41027778:	003fcb06 	br	410276a8 <_dtoa_r+0xbe4>
4102777c:	d9800d17 	ldw	r6,52(sp)
41027780:	018fc83a 	sub	r7,zero,r6
41027784:	3801f726 	beq	r7,zero,41027f64 <_dtoa_r+0x14a0>
41027788:	398003cc 	andi	r6,r7,15
4102778c:	300c90fa 	slli	r6,r6,3
41027790:	01400034 	movhi	r5,0
41027794:	29439804 	addi	r5,r5,3680
41027798:	d9001217 	ldw	r4,72(sp)
4102779c:	314d883a 	add	r6,r6,r5
410277a0:	30c00117 	ldw	r3,4(r6)
410277a4:	30800017 	ldw	r2,0(r6)
410277a8:	d9401317 	ldw	r5,76(sp)
410277ac:	3821d13a 	srai	r16,r7,4
410277b0:	100d883a 	mov	r6,r2
410277b4:	180f883a 	mov	r7,r3
410277b8:	102fd840 	call	4102fd84 <__muldf3>
410277bc:	1011883a 	mov	r8,r2
410277c0:	1813883a 	mov	r9,r3
410277c4:	1029883a 	mov	r20,r2
410277c8:	182b883a 	mov	r21,r3
410277cc:	8001e526 	beq	r16,zero,41027f64 <_dtoa_r+0x14a0>
410277d0:	05800084 	movi	r22,2
410277d4:	04400034 	movhi	r17,0
410277d8:	8c43ca04 	addi	r17,r17,3880
410277dc:	8080004c 	andi	r2,r16,1
410277e0:	1005003a 	cmpeq	r2,r2,zero
410277e4:	1000081e 	bne	r2,zero,41027808 <_dtoa_r+0xd44>
410277e8:	89800017 	ldw	r6,0(r17)
410277ec:	89c00117 	ldw	r7,4(r17)
410277f0:	480b883a 	mov	r5,r9
410277f4:	4009883a 	mov	r4,r8
410277f8:	102fd840 	call	4102fd84 <__muldf3>
410277fc:	1011883a 	mov	r8,r2
41027800:	b5800044 	addi	r22,r22,1
41027804:	1813883a 	mov	r9,r3
41027808:	8021d07a 	srai	r16,r16,1
4102780c:	8c400204 	addi	r17,r17,8
41027810:	803ff21e 	bne	r16,zero,410277dc <_dtoa_r+0xd18>
41027814:	4029883a 	mov	r20,r8
41027818:	482b883a 	mov	r21,r9
4102781c:	003dca06 	br	41026f48 <_dtoa_r+0x484>
41027820:	d9000817 	ldw	r4,32(sp)
41027824:	2005003a 	cmpeq	r2,r4,zero
41027828:	1001f61e 	bne	r2,zero,41028004 <_dtoa_r+0x1540>
4102782c:	dc001117 	ldw	r16,68(sp)
41027830:	dc801017 	ldw	r18,64(sp)
41027834:	18c10cc4 	addi	r3,r3,1075
41027838:	003f6106 	br	410275c0 <_dtoa_r+0xafc>
4102783c:	d8000b15 	stw	zero,44(sp)
41027840:	d9802617 	ldw	r6,152(sp)
41027844:	d8c00d17 	ldw	r3,52(sp)
41027848:	30800044 	addi	r2,r6,1
4102784c:	18ad883a 	add	r22,r3,r2
41027850:	b13fffc4 	addi	r4,r22,-1
41027854:	d9000e15 	stw	r4,56(sp)
41027858:	0581f60e 	bge	zero,r22,41028034 <_dtoa_r+0x1570>
4102785c:	dd800f15 	stw	r22,60(sp)
41027860:	003f3006 	br	41027524 <_dtoa_r+0xa60>
41027864:	d8000b15 	stw	zero,44(sp)
41027868:	d9002617 	ldw	r4,152(sp)
4102786c:	0101eb0e 	bge	zero,r4,4102801c <_dtoa_r+0x1558>
41027870:	202d883a 	mov	r22,r4
41027874:	d9000e15 	stw	r4,56(sp)
41027878:	d9000f15 	stw	r4,60(sp)
4102787c:	003f2906 	br	41027524 <_dtoa_r+0xa60>
41027880:	01800044 	movi	r6,1
41027884:	d9800b15 	stw	r6,44(sp)
41027888:	003ff706 	br	41027868 <_dtoa_r+0xda4>
4102788c:	01000044 	movi	r4,1
41027890:	d9000b15 	stw	r4,44(sp)
41027894:	003fea06 	br	41027840 <_dtoa_r+0xd7c>
41027898:	04000c0e 	bge	zero,r16,410278cc <_dtoa_r+0xe08>
4102789c:	d9400717 	ldw	r5,28(sp)
410278a0:	d9001617 	ldw	r4,88(sp)
410278a4:	01800044 	movi	r6,1
410278a8:	102a1240 	call	4102a124 <__lshift>
410278ac:	1009883a 	mov	r4,r2
410278b0:	900b883a 	mov	r5,r18
410278b4:	d8800715 	stw	r2,28(sp)
410278b8:	102993c0 	call	4102993c <__mcmp>
410278bc:	0081e00e 	bge	zero,r2,41028040 <_dtoa_r+0x157c>
410278c0:	bdc00044 	addi	r23,r23,1
410278c4:	00800e84 	movi	r2,58
410278c8:	b881a226 	beq	r23,r2,41027f54 <_dtoa_r+0x1490>
410278cc:	b7000044 	addi	fp,r22,1
410278d0:	b5c00005 	stb	r23,0(r22)
410278d4:	003f7406 	br	410276a8 <_dtoa_r+0xbe4>
410278d8:	00800e44 	movi	r2,57
410278dc:	b8819d26 	beq	r23,r2,41027f54 <_dtoa_r+0x1490>
410278e0:	053ffa0e 	bge	zero,r20,410278cc <_dtoa_r+0xe08>
410278e4:	8dc00c44 	addi	r23,r17,49
410278e8:	003ff806 	br	410278cc <_dtoa_r+0xe08>
410278ec:	d9001617 	ldw	r4,88(sp)
410278f0:	a80b883a 	mov	r5,r21
410278f4:	04000044 	movi	r16,1
410278f8:	10297e00 	call	410297e0 <_Bfree>
410278fc:	003edf06 	br	4102747c <_dtoa_r+0x9b8>
41027900:	d9001617 	ldw	r4,88(sp)
41027904:	980b883a 	mov	r5,r19
41027908:	01800284 	movi	r6,10
4102790c:	000f883a 	mov	r7,zero
41027910:	102a4940 	call	4102a494 <__multadd>
41027914:	1027883a 	mov	r19,r2
41027918:	d8800615 	stw	r2,24(sp)
4102791c:	003ebb06 	br	4102740c <_dtoa_r+0x948>
41027920:	d9801117 	ldw	r6,68(sp)
41027924:	d8800d17 	ldw	r2,52(sp)
41027928:	d8000915 	stw	zero,36(sp)
4102792c:	308dc83a 	sub	r6,r6,r2
41027930:	0087c83a 	sub	r3,zero,r2
41027934:	d9801115 	stw	r6,68(sp)
41027938:	d8c01015 	stw	r3,64(sp)
4102793c:	003cfe06 	br	41026d38 <_dtoa_r+0x274>
41027940:	018dc83a 	sub	r6,zero,r6
41027944:	d9801115 	stw	r6,68(sp)
41027948:	d8000a15 	stw	zero,40(sp)
4102794c:	003cf306 	br	41026d1c <_dtoa_r+0x258>
41027950:	d9000d17 	ldw	r4,52(sp)
41027954:	10306c00 	call	410306c0 <__floatsidf>
41027958:	880b883a 	mov	r5,r17
4102795c:	8009883a 	mov	r4,r16
41027960:	180f883a 	mov	r7,r3
41027964:	100d883a 	mov	r6,r2
41027968:	10304180 	call	41030418 <__nedf2>
4102796c:	103ce126 	beq	r2,zero,41026cf4 <_dtoa_r+0x230>
41027970:	d9800d17 	ldw	r6,52(sp)
41027974:	31bfffc4 	addi	r6,r6,-1
41027978:	d9800d15 	stw	r6,52(sp)
4102797c:	003cdd06 	br	41026cf4 <_dtoa_r+0x230>
41027980:	d9000717 	ldw	r4,28(sp)
41027984:	900b883a 	mov	r5,r18
41027988:	102993c0 	call	4102993c <__mcmp>
4102798c:	103e8d0e 	bge	r2,zero,410273c4 <_dtoa_r+0x900>
41027990:	d9400717 	ldw	r5,28(sp)
41027994:	d9001617 	ldw	r4,88(sp)
41027998:	01800284 	movi	r6,10
4102799c:	000f883a 	mov	r7,zero
410279a0:	102a4940 	call	4102a494 <__multadd>
410279a4:	d9800d17 	ldw	r6,52(sp)
410279a8:	d8800715 	stw	r2,28(sp)
410279ac:	31bfffc4 	addi	r6,r6,-1
410279b0:	d9800d15 	stw	r6,52(sp)
410279b4:	b001a71e 	bne	r22,zero,41028054 <_dtoa_r+0x1590>
410279b8:	d8800e17 	ldw	r2,56(sp)
410279bc:	d8800f15 	stw	r2,60(sp)
410279c0:	003e8006 	br	410273c4 <_dtoa_r+0x900>
410279c4:	90800417 	ldw	r2,16(r18)
410279c8:	1085883a 	add	r2,r2,r2
410279cc:	1085883a 	add	r2,r2,r2
410279d0:	1485883a 	add	r2,r2,r18
410279d4:	11000417 	ldw	r4,16(r2)
410279d8:	10298080 	call	41029808 <__hi0bits>
410279dc:	00c00804 	movi	r3,32
410279e0:	1887c83a 	sub	r3,r3,r2
410279e4:	003e5a06 	br	41027350 <_dtoa_r+0x88c>
410279e8:	d9400717 	ldw	r5,28(sp)
410279ec:	d9801017 	ldw	r6,64(sp)
410279f0:	d9001617 	ldw	r4,88(sp)
410279f4:	102a5940 	call	4102a594 <__pow5mult>
410279f8:	d8800715 	stw	r2,28(sp)
410279fc:	003e4306 	br	4102730c <_dtoa_r+0x848>
41027a00:	d9800f17 	ldw	r6,60(sp)
41027a04:	d8800d17 	ldw	r2,52(sp)
41027a08:	d9800315 	stw	r6,12(sp)
41027a0c:	d8800415 	stw	r2,16(sp)
41027a10:	d8c00b17 	ldw	r3,44(sp)
41027a14:	1805003a 	cmpeq	r2,r3,zero
41027a18:	1000e21e 	bne	r2,zero,41027da4 <_dtoa_r+0x12e0>
41027a1c:	d9000317 	ldw	r4,12(sp)
41027a20:	0005883a 	mov	r2,zero
41027a24:	00cff834 	movhi	r3,16352
41027a28:	200c90fa 	slli	r6,r4,3
41027a2c:	01000034 	movhi	r4,0
41027a30:	21039804 	addi	r4,r4,3680
41027a34:	180b883a 	mov	r5,r3
41027a38:	310d883a 	add	r6,r6,r4
41027a3c:	327fff17 	ldw	r9,-4(r6)
41027a40:	323ffe17 	ldw	r8,-8(r6)
41027a44:	1009883a 	mov	r4,r2
41027a48:	480f883a 	mov	r7,r9
41027a4c:	400d883a 	mov	r6,r8
41027a50:	10301380 	call	41030138 <__divdf3>
41027a54:	180b883a 	mov	r5,r3
41027a58:	b00d883a 	mov	r6,r22
41027a5c:	b80f883a 	mov	r7,r23
41027a60:	1009883a 	mov	r4,r2
41027a64:	102fc900 	call	4102fc90 <__subdf3>
41027a68:	a80b883a 	mov	r5,r21
41027a6c:	a009883a 	mov	r4,r20
41027a70:	d8c01915 	stw	r3,100(sp)
41027a74:	d8801815 	stw	r2,96(sp)
41027a78:	10307b80 	call	410307b8 <__fixdfsi>
41027a7c:	1009883a 	mov	r4,r2
41027a80:	1027883a 	mov	r19,r2
41027a84:	10306c00 	call	410306c0 <__floatsidf>
41027a88:	a80b883a 	mov	r5,r21
41027a8c:	a009883a 	mov	r4,r20
41027a90:	180f883a 	mov	r7,r3
41027a94:	100d883a 	mov	r6,r2
41027a98:	102fc900 	call	4102fc90 <__subdf3>
41027a9c:	d9801817 	ldw	r6,96(sp)
41027aa0:	1823883a 	mov	r17,r3
41027aa4:	d8801415 	stw	r2,80(sp)
41027aa8:	302d883a 	mov	r22,r6
41027aac:	d9800517 	ldw	r6,20(sp)
41027ab0:	9cc00c04 	addi	r19,r19,48
41027ab4:	dc401515 	stw	r17,84(sp)
41027ab8:	d8c01917 	ldw	r3,100(sp)
41027abc:	34c00005 	stb	r19,0(r6)
41027ac0:	d8800517 	ldw	r2,20(sp)
41027ac4:	d9401917 	ldw	r5,100(sp)
41027ac8:	d9801417 	ldw	r6,80(sp)
41027acc:	b009883a 	mov	r4,r22
41027ad0:	880f883a 	mov	r7,r17
41027ad4:	182f883a 	mov	r23,r3
41027ad8:	17000044 	addi	fp,r2,1
41027adc:	10304a00 	call	410304a0 <__gtdf2>
41027ae0:	00804e16 	blt	zero,r2,41027c1c <_dtoa_r+0x1158>
41027ae4:	d9801417 	ldw	r6,80(sp)
41027ae8:	0005883a 	mov	r2,zero
41027aec:	00cffc34 	movhi	r3,16368
41027af0:	180b883a 	mov	r5,r3
41027af4:	880f883a 	mov	r7,r17
41027af8:	1009883a 	mov	r4,r2
41027afc:	102fc900 	call	4102fc90 <__subdf3>
41027b00:	d9401917 	ldw	r5,100(sp)
41027b04:	180f883a 	mov	r7,r3
41027b08:	b009883a 	mov	r4,r22
41027b0c:	100d883a 	mov	r6,r2
41027b10:	10304a00 	call	410304a0 <__gtdf2>
41027b14:	00bda216 	blt	zero,r2,410271a0 <_dtoa_r+0x6dc>
41027b18:	d8c00317 	ldw	r3,12(sp)
41027b1c:	00800044 	movi	r2,1
41027b20:	10c01216 	blt	r2,r3,41027b6c <_dtoa_r+0x10a8>
41027b24:	003d4506 	br	4102703c <_dtoa_r+0x578>
41027b28:	d9801417 	ldw	r6,80(sp)
41027b2c:	0005883a 	mov	r2,zero
41027b30:	00cffc34 	movhi	r3,16368
41027b34:	180b883a 	mov	r5,r3
41027b38:	880f883a 	mov	r7,r17
41027b3c:	1009883a 	mov	r4,r2
41027b40:	102fc900 	call	4102fc90 <__subdf3>
41027b44:	d9c01b17 	ldw	r7,108(sp)
41027b48:	180b883a 	mov	r5,r3
41027b4c:	1009883a 	mov	r4,r2
41027b50:	b00d883a 	mov	r6,r22
41027b54:	10305b00 	call	410305b0 <__ltdf2>
41027b58:	103d9116 	blt	r2,zero,410271a0 <_dtoa_r+0x6dc>
41027b5c:	d9800517 	ldw	r6,20(sp)
41027b60:	d9000317 	ldw	r4,12(sp)
41027b64:	3105883a 	add	r2,r6,r4
41027b68:	e0bd3426 	beq	fp,r2,4102703c <_dtoa_r+0x578>
41027b6c:	04500934 	movhi	r17,16420
41027b70:	0021883a 	mov	r16,zero
41027b74:	b80b883a 	mov	r5,r23
41027b78:	b009883a 	mov	r4,r22
41027b7c:	800d883a 	mov	r6,r16
41027b80:	880f883a 	mov	r7,r17
41027b84:	102fd840 	call	4102fd84 <__muldf3>
41027b88:	d9401517 	ldw	r5,84(sp)
41027b8c:	d9001417 	ldw	r4,80(sp)
41027b90:	880f883a 	mov	r7,r17
41027b94:	000d883a 	mov	r6,zero
41027b98:	d8801a15 	stw	r2,104(sp)
41027b9c:	d8c01b15 	stw	r3,108(sp)
41027ba0:	102fd840 	call	4102fd84 <__muldf3>
41027ba4:	180b883a 	mov	r5,r3
41027ba8:	1009883a 	mov	r4,r2
41027bac:	1823883a 	mov	r17,r3
41027bb0:	1021883a 	mov	r16,r2
41027bb4:	10307b80 	call	410307b8 <__fixdfsi>
41027bb8:	1009883a 	mov	r4,r2
41027bbc:	102b883a 	mov	r21,r2
41027bc0:	10306c00 	call	410306c0 <__floatsidf>
41027bc4:	880b883a 	mov	r5,r17
41027bc8:	8009883a 	mov	r4,r16
41027bcc:	180f883a 	mov	r7,r3
41027bd0:	100d883a 	mov	r6,r2
41027bd4:	102fc900 	call	4102fc90 <__subdf3>
41027bd8:	1021883a 	mov	r16,r2
41027bdc:	d9001b17 	ldw	r4,108(sp)
41027be0:	1823883a 	mov	r17,r3
41027be4:	dc001415 	stw	r16,80(sp)
41027be8:	ad400c04 	addi	r21,r21,48
41027bec:	dc401515 	stw	r17,84(sp)
41027bf0:	d8801a17 	ldw	r2,104(sp)
41027bf4:	e5400005 	stb	r21,0(fp)
41027bf8:	202f883a 	mov	r23,r4
41027bfc:	d9c01b17 	ldw	r7,108(sp)
41027c00:	d9001417 	ldw	r4,80(sp)
41027c04:	880b883a 	mov	r5,r17
41027c08:	100d883a 	mov	r6,r2
41027c0c:	102d883a 	mov	r22,r2
41027c10:	e7000044 	addi	fp,fp,1
41027c14:	10305b00 	call	410305b0 <__ltdf2>
41027c18:	103fc30e 	bge	r2,zero,41027b28 <_dtoa_r+0x1064>
41027c1c:	d9000417 	ldw	r4,16(sp)
41027c20:	d9000d15 	stw	r4,52(sp)
41027c24:	003d7106 	br	410271ec <_dtoa_r+0x728>
41027c28:	d9801717 	ldw	r6,92(sp)
41027c2c:	00800084 	movi	r2,2
41027c30:	11bde60e 	bge	r2,r6,410273cc <_dtoa_r+0x908>
41027c34:	203cfb1e 	bne	r4,zero,41027024 <_dtoa_r+0x560>
41027c38:	d9001617 	ldw	r4,88(sp)
41027c3c:	900b883a 	mov	r5,r18
41027c40:	01800144 	movi	r6,5
41027c44:	000f883a 	mov	r7,zero
41027c48:	102a4940 	call	4102a494 <__multadd>
41027c4c:	d9000717 	ldw	r4,28(sp)
41027c50:	100b883a 	mov	r5,r2
41027c54:	1025883a 	mov	r18,r2
41027c58:	102993c0 	call	4102993c <__mcmp>
41027c5c:	00bcf10e 	bge	zero,r2,41027024 <_dtoa_r+0x560>
41027c60:	d8c00d17 	ldw	r3,52(sp)
41027c64:	d9000517 	ldw	r4,20(sp)
41027c68:	d8000615 	stw	zero,24(sp)
41027c6c:	18c00044 	addi	r3,r3,1
41027c70:	d8c00d15 	stw	r3,52(sp)
41027c74:	00800c44 	movi	r2,49
41027c78:	27000044 	addi	fp,r4,1
41027c7c:	20800005 	stb	r2,0(r4)
41027c80:	003e8906 	br	410276a8 <_dtoa_r+0xbe4>
41027c84:	d8c00517 	ldw	r3,20(sp)
41027c88:	003bc206 	br	41026b94 <_dtoa_r+0xd0>
41027c8c:	01800034 	movhi	r6,0
41027c90:	3183ca04 	addi	r6,r6,3880
41027c94:	30c00917 	ldw	r3,36(r6)
41027c98:	30800817 	ldw	r2,32(r6)
41027c9c:	d9001217 	ldw	r4,72(sp)
41027ca0:	d9401317 	ldw	r5,76(sp)
41027ca4:	180f883a 	mov	r7,r3
41027ca8:	100d883a 	mov	r6,r2
41027cac:	10301380 	call	41030138 <__divdf3>
41027cb0:	948003cc 	andi	r18,r18,15
41027cb4:	058000c4 	movi	r22,3
41027cb8:	1029883a 	mov	r20,r2
41027cbc:	182b883a 	mov	r21,r3
41027cc0:	003c8906 	br	41026ee8 <_dtoa_r+0x424>
41027cc4:	d9001017 	ldw	r4,64(sp)
41027cc8:	d9800917 	ldw	r6,36(sp)
41027ccc:	0025883a 	mov	r18,zero
41027cd0:	1105c83a 	sub	r2,r2,r4
41027cd4:	2089883a 	add	r4,r4,r2
41027cd8:	308d883a 	add	r6,r6,r2
41027cdc:	d9001015 	stw	r4,64(sp)
41027ce0:	d9800915 	stw	r6,36(sp)
41027ce4:	003e3206 	br	410275b0 <_dtoa_r+0xaec>
41027ce8:	28800044 	addi	r2,r5,1
41027cec:	27000044 	addi	fp,r4,1
41027cf0:	20800005 	stb	r2,0(r4)
41027cf4:	003e6c06 	br	410276a8 <_dtoa_r+0xbe4>
41027cf8:	d8800f17 	ldw	r2,60(sp)
41027cfc:	00bce016 	blt	zero,r2,41027080 <_dtoa_r+0x5bc>
41027d00:	d9800f17 	ldw	r6,60(sp)
41027d04:	303cc51e 	bne	r6,zero,4102701c <_dtoa_r+0x558>
41027d08:	0005883a 	mov	r2,zero
41027d0c:	00d00534 	movhi	r3,16404
41027d10:	980b883a 	mov	r5,r19
41027d14:	180f883a 	mov	r7,r3
41027d18:	9009883a 	mov	r4,r18
41027d1c:	100d883a 	mov	r6,r2
41027d20:	102fd840 	call	4102fd84 <__muldf3>
41027d24:	180b883a 	mov	r5,r3
41027d28:	a80f883a 	mov	r7,r21
41027d2c:	1009883a 	mov	r4,r2
41027d30:	a00d883a 	mov	r6,r20
41027d34:	10305280 	call	41030528 <__gedf2>
41027d38:	103cb80e 	bge	r2,zero,4102701c <_dtoa_r+0x558>
41027d3c:	0027883a 	mov	r19,zero
41027d40:	0025883a 	mov	r18,zero
41027d44:	003fc606 	br	41027c60 <_dtoa_r+0x119c>
41027d48:	99400117 	ldw	r5,4(r19)
41027d4c:	d9001617 	ldw	r4,88(sp)
41027d50:	1029d600 	call	41029d60 <_Balloc>
41027d54:	99800417 	ldw	r6,16(r19)
41027d58:	11000304 	addi	r4,r2,12
41027d5c:	99400304 	addi	r5,r19,12
41027d60:	318d883a 	add	r6,r6,r6
41027d64:	318d883a 	add	r6,r6,r6
41027d68:	31800204 	addi	r6,r6,8
41027d6c:	1023883a 	mov	r17,r2
41027d70:	1022c800 	call	41022c80 <memcpy>
41027d74:	d9001617 	ldw	r4,88(sp)
41027d78:	880b883a 	mov	r5,r17
41027d7c:	01800044 	movi	r6,1
41027d80:	102a1240 	call	4102a124 <__lshift>
41027d84:	100b883a 	mov	r5,r2
41027d88:	003d9c06 	br	410273fc <_dtoa_r+0x938>
41027d8c:	00800e44 	movi	r2,57
41027d90:	b8807026 	beq	r23,r2,41027f54 <_dtoa_r+0x1490>
41027d94:	b8800044 	addi	r2,r23,1
41027d98:	b7000044 	addi	fp,r22,1
41027d9c:	b0800005 	stb	r2,0(r22)
41027da0:	003e4106 	br	410276a8 <_dtoa_r+0xbe4>
41027da4:	d8800317 	ldw	r2,12(sp)
41027da8:	01800034 	movhi	r6,0
41027dac:	31839804 	addi	r6,r6,3680
41027db0:	b009883a 	mov	r4,r22
41027db4:	100e90fa 	slli	r7,r2,3
41027db8:	b80b883a 	mov	r5,r23
41027dbc:	398f883a 	add	r7,r7,r6
41027dc0:	38bffe17 	ldw	r2,-8(r7)
41027dc4:	d9800517 	ldw	r6,20(sp)
41027dc8:	38ffff17 	ldw	r3,-4(r7)
41027dcc:	37000044 	addi	fp,r6,1
41027dd0:	180f883a 	mov	r7,r3
41027dd4:	100d883a 	mov	r6,r2
41027dd8:	102fd840 	call	4102fd84 <__muldf3>
41027ddc:	a80b883a 	mov	r5,r21
41027de0:	a009883a 	mov	r4,r20
41027de4:	182f883a 	mov	r23,r3
41027de8:	102d883a 	mov	r22,r2
41027dec:	10307b80 	call	410307b8 <__fixdfsi>
41027df0:	1009883a 	mov	r4,r2
41027df4:	1027883a 	mov	r19,r2
41027df8:	10306c00 	call	410306c0 <__floatsidf>
41027dfc:	a80b883a 	mov	r5,r21
41027e00:	a009883a 	mov	r4,r20
41027e04:	180f883a 	mov	r7,r3
41027e08:	100d883a 	mov	r6,r2
41027e0c:	102fc900 	call	4102fc90 <__subdf3>
41027e10:	180b883a 	mov	r5,r3
41027e14:	d8c00517 	ldw	r3,20(sp)
41027e18:	9cc00c04 	addi	r19,r19,48
41027e1c:	1009883a 	mov	r4,r2
41027e20:	1cc00005 	stb	r19,0(r3)
41027e24:	2021883a 	mov	r16,r4
41027e28:	d9000317 	ldw	r4,12(sp)
41027e2c:	00800044 	movi	r2,1
41027e30:	2823883a 	mov	r17,r5
41027e34:	20802226 	beq	r4,r2,41027ec0 <_dtoa_r+0x13fc>
41027e38:	1029883a 	mov	r20,r2
41027e3c:	0005883a 	mov	r2,zero
41027e40:	00d00934 	movhi	r3,16420
41027e44:	180f883a 	mov	r7,r3
41027e48:	100d883a 	mov	r6,r2
41027e4c:	880b883a 	mov	r5,r17
41027e50:	8009883a 	mov	r4,r16
41027e54:	102fd840 	call	4102fd84 <__muldf3>
41027e58:	180b883a 	mov	r5,r3
41027e5c:	1009883a 	mov	r4,r2
41027e60:	1823883a 	mov	r17,r3
41027e64:	1021883a 	mov	r16,r2
41027e68:	10307b80 	call	410307b8 <__fixdfsi>
41027e6c:	1009883a 	mov	r4,r2
41027e70:	102b883a 	mov	r21,r2
41027e74:	10306c00 	call	410306c0 <__floatsidf>
41027e78:	880b883a 	mov	r5,r17
41027e7c:	8009883a 	mov	r4,r16
41027e80:	180f883a 	mov	r7,r3
41027e84:	100d883a 	mov	r6,r2
41027e88:	102fc900 	call	4102fc90 <__subdf3>
41027e8c:	180b883a 	mov	r5,r3
41027e90:	d8c00517 	ldw	r3,20(sp)
41027e94:	1009883a 	mov	r4,r2
41027e98:	ad400c04 	addi	r21,r21,48
41027e9c:	1d05883a 	add	r2,r3,r20
41027ea0:	15400005 	stb	r21,0(r2)
41027ea4:	2021883a 	mov	r16,r4
41027ea8:	d9000317 	ldw	r4,12(sp)
41027eac:	a5000044 	addi	r20,r20,1
41027eb0:	2823883a 	mov	r17,r5
41027eb4:	a13fe11e 	bne	r20,r4,41027e3c <_dtoa_r+0x1378>
41027eb8:	e505883a 	add	r2,fp,r20
41027ebc:	173fffc4 	addi	fp,r2,-1
41027ec0:	0025883a 	mov	r18,zero
41027ec4:	04cff834 	movhi	r19,16352
41027ec8:	b009883a 	mov	r4,r22
41027ecc:	b80b883a 	mov	r5,r23
41027ed0:	900d883a 	mov	r6,r18
41027ed4:	980f883a 	mov	r7,r19
41027ed8:	102fd100 	call	4102fd10 <__adddf3>
41027edc:	180b883a 	mov	r5,r3
41027ee0:	1009883a 	mov	r4,r2
41027ee4:	800d883a 	mov	r6,r16
41027ee8:	880f883a 	mov	r7,r17
41027eec:	10305b00 	call	410305b0 <__ltdf2>
41027ef0:	103cab16 	blt	r2,zero,410271a0 <_dtoa_r+0x6dc>
41027ef4:	0009883a 	mov	r4,zero
41027ef8:	980b883a 	mov	r5,r19
41027efc:	b80f883a 	mov	r7,r23
41027f00:	b00d883a 	mov	r6,r22
41027f04:	102fc900 	call	4102fc90 <__subdf3>
41027f08:	180b883a 	mov	r5,r3
41027f0c:	880f883a 	mov	r7,r17
41027f10:	1009883a 	mov	r4,r2
41027f14:	800d883a 	mov	r6,r16
41027f18:	10304a00 	call	410304a0 <__gtdf2>
41027f1c:	00bc470e 	bge	zero,r2,4102703c <_dtoa_r+0x578>
41027f20:	00c00c04 	movi	r3,48
41027f24:	e73fffc4 	addi	fp,fp,-1
41027f28:	e0800007 	ldb	r2,0(fp)
41027f2c:	10fffd26 	beq	r2,r3,41027f24 <_dtoa_r+0x1460>
41027f30:	d9800417 	ldw	r6,16(sp)
41027f34:	e7000044 	addi	fp,fp,1
41027f38:	d9800d15 	stw	r6,52(sp)
41027f3c:	003cab06 	br	410271ec <_dtoa_r+0x728>
41027f40:	d8c00f17 	ldw	r3,60(sp)
41027f44:	d9001117 	ldw	r4,68(sp)
41027f48:	20e1c83a 	sub	r16,r4,r3
41027f4c:	0007883a 	mov	r3,zero
41027f50:	003d9b06 	br	410275c0 <_dtoa_r+0xafc>
41027f54:	00800e44 	movi	r2,57
41027f58:	b0800005 	stb	r2,0(r22)
41027f5c:	b5800044 	addi	r22,r22,1
41027f60:	003dc106 	br	41027668 <_dtoa_r+0xba4>
41027f64:	05800084 	movi	r22,2
41027f68:	003bf706 	br	41026f48 <_dtoa_r+0x484>
41027f6c:	d9000f17 	ldw	r4,60(sp)
41027f70:	013c000e 	bge	zero,r4,41026f74 <_dtoa_r+0x4b0>
41027f74:	d9800e17 	ldw	r6,56(sp)
41027f78:	01bc300e 	bge	zero,r6,4102703c <_dtoa_r+0x578>
41027f7c:	0005883a 	mov	r2,zero
41027f80:	00d00934 	movhi	r3,16420
41027f84:	a80b883a 	mov	r5,r21
41027f88:	180f883a 	mov	r7,r3
41027f8c:	a009883a 	mov	r4,r20
41027f90:	100d883a 	mov	r6,r2
41027f94:	102fd840 	call	4102fd84 <__muldf3>
41027f98:	b1000044 	addi	r4,r22,1
41027f9c:	1021883a 	mov	r16,r2
41027fa0:	1823883a 	mov	r17,r3
41027fa4:	10306c00 	call	410306c0 <__floatsidf>
41027fa8:	880b883a 	mov	r5,r17
41027fac:	8009883a 	mov	r4,r16
41027fb0:	180f883a 	mov	r7,r3
41027fb4:	100d883a 	mov	r6,r2
41027fb8:	102fd840 	call	4102fd84 <__muldf3>
41027fbc:	0011883a 	mov	r8,zero
41027fc0:	02500734 	movhi	r9,16412
41027fc4:	180b883a 	mov	r5,r3
41027fc8:	480f883a 	mov	r7,r9
41027fcc:	1009883a 	mov	r4,r2
41027fd0:	400d883a 	mov	r6,r8
41027fd4:	102fd100 	call	4102fd10 <__adddf3>
41027fd8:	102d883a 	mov	r22,r2
41027fdc:	00bf3034 	movhi	r2,64704
41027fe0:	10ef883a 	add	r23,r2,r3
41027fe4:	d8800d17 	ldw	r2,52(sp)
41027fe8:	d8c00e17 	ldw	r3,56(sp)
41027fec:	8029883a 	mov	r20,r16
41027ff0:	10bfffc4 	addi	r2,r2,-1
41027ff4:	882b883a 	mov	r21,r17
41027ff8:	d8800415 	stw	r2,16(sp)
41027ffc:	d8c00315 	stw	r3,12(sp)
41028000:	003e8306 	br	41027a10 <_dtoa_r+0xf4c>
41028004:	d8800117 	ldw	r2,4(sp)
41028008:	dc001117 	ldw	r16,68(sp)
4102800c:	dc801017 	ldw	r18,64(sp)
41028010:	00c00d84 	movi	r3,54
41028014:	1887c83a 	sub	r3,r3,r2
41028018:	003d6906 	br	410275c0 <_dtoa_r+0xafc>
4102801c:	01800044 	movi	r6,1
41028020:	3021883a 	mov	r16,r6
41028024:	d9800f15 	stw	r6,60(sp)
41028028:	d9802615 	stw	r6,152(sp)
4102802c:	d9800e15 	stw	r6,56(sp)
41028030:	003b9306 	br	41026e80 <_dtoa_r+0x3bc>
41028034:	b021883a 	mov	r16,r22
41028038:	dd800f15 	stw	r22,60(sp)
4102803c:	003b9006 	br	41026e80 <_dtoa_r+0x3bc>
41028040:	103e221e 	bne	r2,zero,410278cc <_dtoa_r+0xe08>
41028044:	b880004c 	andi	r2,r23,1
41028048:	1005003a 	cmpeq	r2,r2,zero
4102804c:	103e1f1e 	bne	r2,zero,410278cc <_dtoa_r+0xe08>
41028050:	003e1b06 	br	410278c0 <_dtoa_r+0xdfc>
41028054:	d9001617 	ldw	r4,88(sp)
41028058:	980b883a 	mov	r5,r19
4102805c:	01800284 	movi	r6,10
41028060:	000f883a 	mov	r7,zero
41028064:	102a4940 	call	4102a494 <__multadd>
41028068:	d8c00e17 	ldw	r3,56(sp)
4102806c:	1027883a 	mov	r19,r2
41028070:	d8c00f15 	stw	r3,60(sp)
41028074:	003cd306 	br	410273c4 <_dtoa_r+0x900>

41028078 <_fflush_r>:
41028078:	defffb04 	addi	sp,sp,-20
4102807c:	dcc00315 	stw	r19,12(sp)
41028080:	dc800215 	stw	r18,8(sp)
41028084:	dfc00415 	stw	ra,16(sp)
41028088:	dc400115 	stw	r17,4(sp)
4102808c:	dc000015 	stw	r16,0(sp)
41028090:	2027883a 	mov	r19,r4
41028094:	2825883a 	mov	r18,r5
41028098:	20000226 	beq	r4,zero,410280a4 <_fflush_r+0x2c>
4102809c:	20800e17 	ldw	r2,56(r4)
410280a0:	10005626 	beq	r2,zero,410281fc <_fflush_r+0x184>
410280a4:	9100030b 	ldhu	r4,12(r18)
410280a8:	20ffffcc 	andi	r3,r4,65535
410280ac:	18e0001c 	xori	r3,r3,32768
410280b0:	18e00004 	addi	r3,r3,-32768
410280b4:	1880020c 	andi	r2,r3,8
410280b8:	1000261e 	bne	r2,zero,41028154 <_fflush_r+0xdc>
410280bc:	90c00117 	ldw	r3,4(r18)
410280c0:	20820014 	ori	r2,r4,2048
410280c4:	9080030d 	sth	r2,12(r18)
410280c8:	1009883a 	mov	r4,r2
410280cc:	00c0400e 	bge	zero,r3,410281d0 <_fflush_r+0x158>
410280d0:	92000a17 	ldw	r8,40(r18)
410280d4:	40004026 	beq	r8,zero,410281d8 <_fflush_r+0x160>
410280d8:	2084000c 	andi	r2,r4,4096
410280dc:	10005326 	beq	r2,zero,4102822c <_fflush_r+0x1b4>
410280e0:	94001417 	ldw	r16,80(r18)
410280e4:	9080030b 	ldhu	r2,12(r18)
410280e8:	1080010c 	andi	r2,r2,4
410280ec:	1000481e 	bne	r2,zero,41028210 <_fflush_r+0x198>
410280f0:	91400717 	ldw	r5,28(r18)
410280f4:	9809883a 	mov	r4,r19
410280f8:	800d883a 	mov	r6,r16
410280fc:	000f883a 	mov	r7,zero
41028100:	403ee83a 	callr	r8
41028104:	8080261e 	bne	r16,r2,410281a0 <_fflush_r+0x128>
41028108:	9080030b 	ldhu	r2,12(r18)
4102810c:	91000417 	ldw	r4,16(r18)
41028110:	90000115 	stw	zero,4(r18)
41028114:	10bdffcc 	andi	r2,r2,63487
41028118:	10ffffcc 	andi	r3,r2,65535
4102811c:	18c4000c 	andi	r3,r3,4096
41028120:	9080030d 	sth	r2,12(r18)
41028124:	91000015 	stw	r4,0(r18)
41028128:	18002b26 	beq	r3,zero,410281d8 <_fflush_r+0x160>
4102812c:	0007883a 	mov	r3,zero
41028130:	1805883a 	mov	r2,r3
41028134:	94001415 	stw	r16,80(r18)
41028138:	dfc00417 	ldw	ra,16(sp)
4102813c:	dcc00317 	ldw	r19,12(sp)
41028140:	dc800217 	ldw	r18,8(sp)
41028144:	dc400117 	ldw	r17,4(sp)
41028148:	dc000017 	ldw	r16,0(sp)
4102814c:	dec00504 	addi	sp,sp,20
41028150:	f800283a 	ret
41028154:	94400417 	ldw	r17,16(r18)
41028158:	88001f26 	beq	r17,zero,410281d8 <_fflush_r+0x160>
4102815c:	90800017 	ldw	r2,0(r18)
41028160:	18c000cc 	andi	r3,r3,3
41028164:	94400015 	stw	r17,0(r18)
41028168:	1461c83a 	sub	r16,r2,r17
4102816c:	18002526 	beq	r3,zero,41028204 <_fflush_r+0x18c>
41028170:	0005883a 	mov	r2,zero
41028174:	90800215 	stw	r2,8(r18)
41028178:	0400170e 	bge	zero,r16,410281d8 <_fflush_r+0x160>
4102817c:	90c00917 	ldw	r3,36(r18)
41028180:	91400717 	ldw	r5,28(r18)
41028184:	880d883a 	mov	r6,r17
41028188:	800f883a 	mov	r7,r16
4102818c:	9809883a 	mov	r4,r19
41028190:	183ee83a 	callr	r3
41028194:	88a3883a 	add	r17,r17,r2
41028198:	80a1c83a 	sub	r16,r16,r2
4102819c:	00bff616 	blt	zero,r2,41028178 <_fflush_r+0x100>
410281a0:	9080030b 	ldhu	r2,12(r18)
410281a4:	00ffffc4 	movi	r3,-1
410281a8:	10801014 	ori	r2,r2,64
410281ac:	9080030d 	sth	r2,12(r18)
410281b0:	1805883a 	mov	r2,r3
410281b4:	dfc00417 	ldw	ra,16(sp)
410281b8:	dcc00317 	ldw	r19,12(sp)
410281bc:	dc800217 	ldw	r18,8(sp)
410281c0:	dc400117 	ldw	r17,4(sp)
410281c4:	dc000017 	ldw	r16,0(sp)
410281c8:	dec00504 	addi	sp,sp,20
410281cc:	f800283a 	ret
410281d0:	90800f17 	ldw	r2,60(r18)
410281d4:	00bfbe16 	blt	zero,r2,410280d0 <_fflush_r+0x58>
410281d8:	0007883a 	mov	r3,zero
410281dc:	1805883a 	mov	r2,r3
410281e0:	dfc00417 	ldw	ra,16(sp)
410281e4:	dcc00317 	ldw	r19,12(sp)
410281e8:	dc800217 	ldw	r18,8(sp)
410281ec:	dc400117 	ldw	r17,4(sp)
410281f0:	dc000017 	ldw	r16,0(sp)
410281f4:	dec00504 	addi	sp,sp,20
410281f8:	f800283a 	ret
410281fc:	10283100 	call	41028310 <__sinit>
41028200:	003fa806 	br	410280a4 <_fflush_r+0x2c>
41028204:	90800517 	ldw	r2,20(r18)
41028208:	90800215 	stw	r2,8(r18)
4102820c:	003fda06 	br	41028178 <_fflush_r+0x100>
41028210:	90800117 	ldw	r2,4(r18)
41028214:	90c00c17 	ldw	r3,48(r18)
41028218:	80a1c83a 	sub	r16,r16,r2
4102821c:	183fb426 	beq	r3,zero,410280f0 <_fflush_r+0x78>
41028220:	90800f17 	ldw	r2,60(r18)
41028224:	80a1c83a 	sub	r16,r16,r2
41028228:	003fb106 	br	410280f0 <_fflush_r+0x78>
4102822c:	91400717 	ldw	r5,28(r18)
41028230:	9809883a 	mov	r4,r19
41028234:	000d883a 	mov	r6,zero
41028238:	01c00044 	movi	r7,1
4102823c:	403ee83a 	callr	r8
41028240:	1021883a 	mov	r16,r2
41028244:	00bfffc4 	movi	r2,-1
41028248:	80800226 	beq	r16,r2,41028254 <_fflush_r+0x1dc>
4102824c:	92000a17 	ldw	r8,40(r18)
41028250:	003fa406 	br	410280e4 <_fflush_r+0x6c>
41028254:	98c00017 	ldw	r3,0(r19)
41028258:	00800744 	movi	r2,29
4102825c:	18bfde26 	beq	r3,r2,410281d8 <_fflush_r+0x160>
41028260:	9080030b 	ldhu	r2,12(r18)
41028264:	8007883a 	mov	r3,r16
41028268:	10801014 	ori	r2,r2,64
4102826c:	9080030d 	sth	r2,12(r18)
41028270:	003fcf06 	br	410281b0 <_fflush_r+0x138>

41028274 <fflush>:
41028274:	015040f4 	movhi	r5,16643
41028278:	29601e04 	addi	r5,r5,-32648
4102827c:	2007883a 	mov	r3,r4
41028280:	20000526 	beq	r4,zero,41028298 <fflush+0x24>
41028284:	00800034 	movhi	r2,0
41028288:	108ad704 	addi	r2,r2,11100
4102828c:	11000017 	ldw	r4,0(r2)
41028290:	180b883a 	mov	r5,r3
41028294:	10280781 	jmpi	41028078 <_fflush_r>
41028298:	00800034 	movhi	r2,0
4102829c:	108ad804 	addi	r2,r2,11104
410282a0:	11000017 	ldw	r4,0(r2)
410282a4:	10290801 	jmpi	41029080 <_fwalk_reent>

410282a8 <std>:
410282a8:	009040f4 	movhi	r2,16643
410282ac:	10ace804 	addi	r2,r2,-19552
410282b0:	20800b15 	stw	r2,44(r4)
410282b4:	009040f4 	movhi	r2,16643
410282b8:	10ad2304 	addi	r2,r2,-19316
410282bc:	20800815 	stw	r2,32(r4)
410282c0:	00d040f4 	movhi	r3,16643
410282c4:	18ed0404 	addi	r3,r3,-19440
410282c8:	009040f4 	movhi	r2,16643
410282cc:	10acea04 	addi	r2,r2,-19544
410282d0:	2140030d 	sth	r5,12(r4)
410282d4:	2180038d 	sth	r6,14(r4)
410282d8:	20c00915 	stw	r3,36(r4)
410282dc:	20800a15 	stw	r2,40(r4)
410282e0:	20000015 	stw	zero,0(r4)
410282e4:	20000115 	stw	zero,4(r4)
410282e8:	20000215 	stw	zero,8(r4)
410282ec:	20000415 	stw	zero,16(r4)
410282f0:	20000515 	stw	zero,20(r4)
410282f4:	20000615 	stw	zero,24(r4)
410282f8:	21000715 	stw	r4,28(r4)
410282fc:	f800283a 	ret

41028300 <__sfp_lock_acquire>:
41028300:	f800283a 	ret

41028304 <__sfp_lock_release>:
41028304:	f800283a 	ret

41028308 <__sinit_lock_acquire>:
41028308:	f800283a 	ret

4102830c <__sinit_lock_release>:
4102830c:	f800283a 	ret

41028310 <__sinit>:
41028310:	20800e17 	ldw	r2,56(r4)
41028314:	defffd04 	addi	sp,sp,-12
41028318:	dc400115 	stw	r17,4(sp)
4102831c:	dc000015 	stw	r16,0(sp)
41028320:	dfc00215 	stw	ra,8(sp)
41028324:	04400044 	movi	r17,1
41028328:	01400104 	movi	r5,4
4102832c:	000d883a 	mov	r6,zero
41028330:	2021883a 	mov	r16,r4
41028334:	2200bb04 	addi	r8,r4,748
41028338:	200f883a 	mov	r7,r4
4102833c:	10000526 	beq	r2,zero,41028354 <__sinit+0x44>
41028340:	dfc00217 	ldw	ra,8(sp)
41028344:	dc400117 	ldw	r17,4(sp)
41028348:	dc000017 	ldw	r16,0(sp)
4102834c:	dec00304 	addi	sp,sp,12
41028350:	f800283a 	ret
41028354:	21000117 	ldw	r4,4(r4)
41028358:	009040f4 	movhi	r2,16643
4102835c:	10a0fd04 	addi	r2,r2,-31756
41028360:	00c000c4 	movi	r3,3
41028364:	80800f15 	stw	r2,60(r16)
41028368:	80c0b915 	stw	r3,740(r16)
4102836c:	8200ba15 	stw	r8,744(r16)
41028370:	84400e15 	stw	r17,56(r16)
41028374:	8000b815 	stw	zero,736(r16)
41028378:	10282a80 	call	410282a8 <std>
4102837c:	81000217 	ldw	r4,8(r16)
41028380:	880d883a 	mov	r6,r17
41028384:	800f883a 	mov	r7,r16
41028388:	01400284 	movi	r5,10
4102838c:	10282a80 	call	410282a8 <std>
41028390:	81000317 	ldw	r4,12(r16)
41028394:	800f883a 	mov	r7,r16
41028398:	01400484 	movi	r5,18
4102839c:	01800084 	movi	r6,2
410283a0:	dfc00217 	ldw	ra,8(sp)
410283a4:	dc400117 	ldw	r17,4(sp)
410283a8:	dc000017 	ldw	r16,0(sp)
410283ac:	dec00304 	addi	sp,sp,12
410283b0:	10282a81 	jmpi	410282a8 <std>

410283b4 <__fp_lock>:
410283b4:	0005883a 	mov	r2,zero
410283b8:	f800283a 	ret

410283bc <__fp_unlock>:
410283bc:	0005883a 	mov	r2,zero
410283c0:	f800283a 	ret

410283c4 <__fp_unlock_all>:
410283c4:	00800034 	movhi	r2,0
410283c8:	108ad704 	addi	r2,r2,11100
410283cc:	11000017 	ldw	r4,0(r2)
410283d0:	015040f4 	movhi	r5,16643
410283d4:	2960ef04 	addi	r5,r5,-31812
410283d8:	10291481 	jmpi	41029148 <_fwalk>

410283dc <__fp_lock_all>:
410283dc:	00800034 	movhi	r2,0
410283e0:	108ad704 	addi	r2,r2,11100
410283e4:	11000017 	ldw	r4,0(r2)
410283e8:	015040f4 	movhi	r5,16643
410283ec:	2960ed04 	addi	r5,r5,-31820
410283f0:	10291481 	jmpi	41029148 <_fwalk>

410283f4 <_cleanup_r>:
410283f4:	015040f4 	movhi	r5,16643
410283f8:	29775e04 	addi	r5,r5,-8840
410283fc:	10291481 	jmpi	41029148 <_fwalk>

41028400 <_cleanup>:
41028400:	00800034 	movhi	r2,0
41028404:	108ad804 	addi	r2,r2,11104
41028408:	11000017 	ldw	r4,0(r2)
4102840c:	10283f41 	jmpi	410283f4 <_cleanup_r>

41028410 <__sfmoreglue>:
41028410:	defffc04 	addi	sp,sp,-16
41028414:	dc400115 	stw	r17,4(sp)
41028418:	2c401724 	muli	r17,r5,92
4102841c:	dc800215 	stw	r18,8(sp)
41028420:	2825883a 	mov	r18,r5
41028424:	89400304 	addi	r5,r17,12
41028428:	dc000015 	stw	r16,0(sp)
4102842c:	dfc00315 	stw	ra,12(sp)
41028430:	10224cc0 	call	410224cc <_malloc_r>
41028434:	0021883a 	mov	r16,zero
41028438:	880d883a 	mov	r6,r17
4102843c:	000b883a 	mov	r5,zero
41028440:	10000626 	beq	r2,zero,4102845c <__sfmoreglue+0x4c>
41028444:	11000304 	addi	r4,r2,12
41028448:	14800115 	stw	r18,4(r2)
4102844c:	10000015 	stw	zero,0(r2)
41028450:	11000215 	stw	r4,8(r2)
41028454:	1021883a 	mov	r16,r2
41028458:	10297480 	call	41029748 <memset>
4102845c:	8005883a 	mov	r2,r16
41028460:	dfc00317 	ldw	ra,12(sp)
41028464:	dc800217 	ldw	r18,8(sp)
41028468:	dc400117 	ldw	r17,4(sp)
4102846c:	dc000017 	ldw	r16,0(sp)
41028470:	dec00404 	addi	sp,sp,16
41028474:	f800283a 	ret

41028478 <__sfp>:
41028478:	defffd04 	addi	sp,sp,-12
4102847c:	00800034 	movhi	r2,0
41028480:	108ad804 	addi	r2,r2,11104
41028484:	dc000015 	stw	r16,0(sp)
41028488:	14000017 	ldw	r16,0(r2)
4102848c:	dc400115 	stw	r17,4(sp)
41028490:	dfc00215 	stw	ra,8(sp)
41028494:	80800e17 	ldw	r2,56(r16)
41028498:	2023883a 	mov	r17,r4
4102849c:	10002626 	beq	r2,zero,41028538 <__sfp+0xc0>
410284a0:	8400b804 	addi	r16,r16,736
410284a4:	80800117 	ldw	r2,4(r16)
410284a8:	81000217 	ldw	r4,8(r16)
410284ac:	10ffffc4 	addi	r3,r2,-1
410284b0:	18000916 	blt	r3,zero,410284d8 <__sfp+0x60>
410284b4:	2080030f 	ldh	r2,12(r4)
410284b8:	10000b26 	beq	r2,zero,410284e8 <__sfp+0x70>
410284bc:	017fffc4 	movi	r5,-1
410284c0:	00000206 	br	410284cc <__sfp+0x54>
410284c4:	2080030f 	ldh	r2,12(r4)
410284c8:	10000726 	beq	r2,zero,410284e8 <__sfp+0x70>
410284cc:	18ffffc4 	addi	r3,r3,-1
410284d0:	21001704 	addi	r4,r4,92
410284d4:	197ffb1e 	bne	r3,r5,410284c4 <__sfp+0x4c>
410284d8:	80800017 	ldw	r2,0(r16)
410284dc:	10001926 	beq	r2,zero,41028544 <__sfp+0xcc>
410284e0:	1021883a 	mov	r16,r2
410284e4:	003fef06 	br	410284a4 <__sfp+0x2c>
410284e8:	00bfffc4 	movi	r2,-1
410284ec:	00c00044 	movi	r3,1
410284f0:	2080038d 	sth	r2,14(r4)
410284f4:	20c0030d 	sth	r3,12(r4)
410284f8:	20000015 	stw	zero,0(r4)
410284fc:	20000215 	stw	zero,8(r4)
41028500:	20000115 	stw	zero,4(r4)
41028504:	20000415 	stw	zero,16(r4)
41028508:	20000515 	stw	zero,20(r4)
4102850c:	20000615 	stw	zero,24(r4)
41028510:	20000c15 	stw	zero,48(r4)
41028514:	20000d15 	stw	zero,52(r4)
41028518:	20001115 	stw	zero,68(r4)
4102851c:	20001215 	stw	zero,72(r4)
41028520:	2005883a 	mov	r2,r4
41028524:	dfc00217 	ldw	ra,8(sp)
41028528:	dc400117 	ldw	r17,4(sp)
4102852c:	dc000017 	ldw	r16,0(sp)
41028530:	dec00304 	addi	sp,sp,12
41028534:	f800283a 	ret
41028538:	8009883a 	mov	r4,r16
4102853c:	10283100 	call	41028310 <__sinit>
41028540:	003fd706 	br	410284a0 <__sfp+0x28>
41028544:	8809883a 	mov	r4,r17
41028548:	01400104 	movi	r5,4
4102854c:	10284100 	call	41028410 <__sfmoreglue>
41028550:	80800015 	stw	r2,0(r16)
41028554:	103fe21e 	bne	r2,zero,410284e0 <__sfp+0x68>
41028558:	00800304 	movi	r2,12
4102855c:	0009883a 	mov	r4,zero
41028560:	88800015 	stw	r2,0(r17)
41028564:	003fee06 	br	41028520 <__sfp+0xa8>

41028568 <_fread_r>:
41028568:	defff504 	addi	sp,sp,-44
4102856c:	ddc00815 	stw	r23,32(sp)
41028570:	39af383a 	mul	r23,r7,r6
41028574:	df000915 	stw	fp,36(sp)
41028578:	dd800715 	stw	r22,28(sp)
4102857c:	dcc00415 	stw	r19,16(sp)
41028580:	dc000115 	stw	r16,4(sp)
41028584:	dfc00a15 	stw	ra,40(sp)
41028588:	dd400615 	stw	r21,24(sp)
4102858c:	dd000515 	stw	r20,20(sp)
41028590:	dc800315 	stw	r18,12(sp)
41028594:	dc400215 	stw	r17,8(sp)
41028598:	d9800015 	stw	r6,0(sp)
4102859c:	3839883a 	mov	fp,r7
410285a0:	2821883a 	mov	r16,r5
410285a4:	202d883a 	mov	r22,r4
410285a8:	dcc00b17 	ldw	r19,44(sp)
410285ac:	b8005926 	beq	r23,zero,41028714 <_fread_r+0x1ac>
410285b0:	20000226 	beq	r4,zero,410285bc <_fread_r+0x54>
410285b4:	20800e17 	ldw	r2,56(r4)
410285b8:	10005826 	beq	r2,zero,4102871c <_fread_r+0x1b4>
410285bc:	9c400117 	ldw	r17,4(r19)
410285c0:	88005916 	blt	r17,zero,41028728 <_fread_r+0x1c0>
410285c4:	9880030b 	ldhu	r2,12(r19)
410285c8:	8029883a 	mov	r20,r16
410285cc:	1080008c 	andi	r2,r2,2
410285d0:	1000221e 	bne	r2,zero,4102865c <_fread_r+0xf4>
410285d4:	b825883a 	mov	r18,r23
410285d8:	00000106 	br	410285e0 <_fread_r+0x78>
410285dc:	9c400117 	ldw	r17,4(r19)
410285e0:	a009883a 	mov	r4,r20
410285e4:	880d883a 	mov	r6,r17
410285e8:	8c80542e 	bgeu	r17,r18,4102873c <_fread_r+0x1d4>
410285ec:	99400017 	ldw	r5,0(r19)
410285f0:	a469883a 	add	r20,r20,r17
410285f4:	9465c83a 	sub	r18,r18,r17
410285f8:	1022c800 	call	41022c80 <memcpy>
410285fc:	98800017 	ldw	r2,0(r19)
41028600:	b009883a 	mov	r4,r22
41028604:	980b883a 	mov	r5,r19
41028608:	1461883a 	add	r16,r2,r17
4102860c:	9c000015 	stw	r16,0(r19)
41028610:	102afb40 	call	4102afb4 <__srefill_r>
41028614:	103ff126 	beq	r2,zero,410285dc <_fread_r+0x74>
41028618:	d9400017 	ldw	r5,0(sp)
4102861c:	bc89c83a 	sub	r4,r23,r18
41028620:	102236c0 	call	4102236c <__udivsi3>
41028624:	1039883a 	mov	fp,r2
41028628:	e005883a 	mov	r2,fp
4102862c:	dfc00a17 	ldw	ra,40(sp)
41028630:	df000917 	ldw	fp,36(sp)
41028634:	ddc00817 	ldw	r23,32(sp)
41028638:	dd800717 	ldw	r22,28(sp)
4102863c:	dd400617 	ldw	r21,24(sp)
41028640:	dd000517 	ldw	r20,20(sp)
41028644:	dcc00417 	ldw	r19,16(sp)
41028648:	dc800317 	ldw	r18,12(sp)
4102864c:	dc400217 	ldw	r17,8(sp)
41028650:	dc000117 	ldw	r16,4(sp)
41028654:	dec00b04 	addi	sp,sp,44
41028658:	f800283a 	ret
4102865c:	b825883a 	mov	r18,r23
41028660:	8dc03436 	bltu	r17,r23,41028734 <_fread_r+0x1cc>
41028664:	99400017 	ldw	r5,0(r19)
41028668:	a009883a 	mov	r4,r20
4102866c:	900d883a 	mov	r6,r18
41028670:	1022c800 	call	41022c80 <memcpy>
41028674:	9c000017 	ldw	r16,0(r19)
41028678:	98800117 	ldw	r2,4(r19)
4102867c:	99400c17 	ldw	r5,48(r19)
41028680:	84a1883a 	add	r16,r16,r18
41028684:	14a3c83a 	sub	r17,r2,r18
41028688:	a4ab883a 	add	r21,r20,r18
4102868c:	9c400115 	stw	r17,4(r19)
41028690:	9c000015 	stw	r16,0(r19)
41028694:	bca9c83a 	sub	r20,r23,r18
41028698:	28000826 	beq	r5,zero,410286bc <_fread_r+0x154>
4102869c:	a03fe226 	beq	r20,zero,41028628 <_fread_r+0xc0>
410286a0:	98801004 	addi	r2,r19,64
410286a4:	28800326 	beq	r5,r2,410286b4 <_fread_r+0x14c>
410286a8:	b009883a 	mov	r4,r22
410286ac:	10288d00 	call	410288d0 <_free_r>
410286b0:	9c000017 	ldw	r16,0(r19)
410286b4:	98000c15 	stw	zero,48(r19)
410286b8:	00000106 	br	410286c0 <_fread_r+0x158>
410286bc:	a03fda26 	beq	r20,zero,41028628 <_fread_r+0xc0>
410286c0:	9c800417 	ldw	r18,16(r19)
410286c4:	9c400517 	ldw	r17,20(r19)
410286c8:	9d400015 	stw	r21,0(r19)
410286cc:	9d400415 	stw	r21,16(r19)
410286d0:	9d000515 	stw	r20,20(r19)
410286d4:	b009883a 	mov	r4,r22
410286d8:	980b883a 	mov	r5,r19
410286dc:	102afb40 	call	4102afb4 <__srefill_r>
410286e0:	98c00117 	ldw	r3,4(r19)
410286e4:	9c800415 	stw	r18,16(r19)
410286e8:	9c400515 	stw	r17,20(r19)
410286ec:	a8eb883a 	add	r21,r21,r3
410286f0:	9c000015 	stw	r16,0(r19)
410286f4:	a0e9c83a 	sub	r20,r20,r3
410286f8:	98000115 	stw	zero,4(r19)
410286fc:	103fef26 	beq	r2,zero,410286bc <_fread_r+0x154>
41028700:	d9400017 	ldw	r5,0(sp)
41028704:	bd09c83a 	sub	r4,r23,r20
41028708:	102236c0 	call	4102236c <__udivsi3>
4102870c:	1039883a 	mov	fp,r2
41028710:	003fc506 	br	41028628 <_fread_r+0xc0>
41028714:	0039883a 	mov	fp,zero
41028718:	003fc306 	br	41028628 <_fread_r+0xc0>
4102871c:	10283100 	call	41028310 <__sinit>
41028720:	9c400117 	ldw	r17,4(r19)
41028724:	883fa70e 	bge	r17,zero,410285c4 <_fread_r+0x5c>
41028728:	0023883a 	mov	r17,zero
4102872c:	98000115 	stw	zero,4(r19)
41028730:	003fa406 	br	410285c4 <_fread_r+0x5c>
41028734:	8825883a 	mov	r18,r17
41028738:	003fca06 	br	41028664 <_fread_r+0xfc>
4102873c:	99400017 	ldw	r5,0(r19)
41028740:	900d883a 	mov	r6,r18
41028744:	1022c800 	call	41022c80 <memcpy>
41028748:	98c00117 	ldw	r3,4(r19)
4102874c:	98800017 	ldw	r2,0(r19)
41028750:	1c87c83a 	sub	r3,r3,r18
41028754:	1485883a 	add	r2,r2,r18
41028758:	98800015 	stw	r2,0(r19)
4102875c:	98c00115 	stw	r3,4(r19)
41028760:	003fb106 	br	41028628 <_fread_r+0xc0>

41028764 <fread>:
41028764:	00800034 	movhi	r2,0
41028768:	108ad704 	addi	r2,r2,11100
4102876c:	2017883a 	mov	r11,r4
41028770:	11000017 	ldw	r4,0(r2)
41028774:	defffe04 	addi	sp,sp,-8
41028778:	3013883a 	mov	r9,r6
4102877c:	2805883a 	mov	r2,r5
41028780:	d9c00015 	stw	r7,0(sp)
41028784:	580b883a 	mov	r5,r11
41028788:	100d883a 	mov	r6,r2
4102878c:	480f883a 	mov	r7,r9
41028790:	dfc00115 	stw	ra,4(sp)
41028794:	10285680 	call	41028568 <_fread_r>
41028798:	dfc00117 	ldw	ra,4(sp)
4102879c:	dec00204 	addi	sp,sp,8
410287a0:	f800283a 	ret

410287a4 <_malloc_trim_r>:
410287a4:	defffb04 	addi	sp,sp,-20
410287a8:	dcc00315 	stw	r19,12(sp)
410287ac:	04c00034 	movhi	r19,0
410287b0:	9cc54604 	addi	r19,r19,5400
410287b4:	dc800215 	stw	r18,8(sp)
410287b8:	dc400115 	stw	r17,4(sp)
410287bc:	dc000015 	stw	r16,0(sp)
410287c0:	2823883a 	mov	r17,r5
410287c4:	2025883a 	mov	r18,r4
410287c8:	dfc00415 	stw	ra,16(sp)
410287cc:	1031af40 	call	41031af4 <__malloc_lock>
410287d0:	98800217 	ldw	r2,8(r19)
410287d4:	9009883a 	mov	r4,r18
410287d8:	000b883a 	mov	r5,zero
410287dc:	10c00117 	ldw	r3,4(r2)
410287e0:	00bfff04 	movi	r2,-4
410287e4:	18a0703a 	and	r16,r3,r2
410287e8:	8463c83a 	sub	r17,r16,r17
410287ec:	8c43fbc4 	addi	r17,r17,4079
410287f0:	8822d33a 	srli	r17,r17,12
410287f4:	0083ffc4 	movi	r2,4095
410287f8:	8c7fffc4 	addi	r17,r17,-1
410287fc:	8822933a 	slli	r17,r17,12
41028800:	1440060e 	bge	r2,r17,4102881c <_malloc_trim_r+0x78>
41028804:	1022ed00 	call	41022ed0 <_sbrk_r>
41028808:	98c00217 	ldw	r3,8(r19)
4102880c:	9009883a 	mov	r4,r18
41028810:	044bc83a 	sub	r5,zero,r17
41028814:	80c7883a 	add	r3,r16,r3
41028818:	10c00926 	beq	r2,r3,41028840 <_malloc_trim_r+0x9c>
4102881c:	1031b140 	call	41031b14 <__malloc_unlock>
41028820:	0005883a 	mov	r2,zero
41028824:	dfc00417 	ldw	ra,16(sp)
41028828:	dcc00317 	ldw	r19,12(sp)
4102882c:	dc800217 	ldw	r18,8(sp)
41028830:	dc400117 	ldw	r17,4(sp)
41028834:	dc000017 	ldw	r16,0(sp)
41028838:	dec00504 	addi	sp,sp,20
4102883c:	f800283a 	ret
41028840:	9009883a 	mov	r4,r18
41028844:	1022ed00 	call	41022ed0 <_sbrk_r>
41028848:	844dc83a 	sub	r6,r16,r17
4102884c:	00ffffc4 	movi	r3,-1
41028850:	9009883a 	mov	r4,r18
41028854:	000b883a 	mov	r5,zero
41028858:	01c00034 	movhi	r7,0
4102885c:	39caf904 	addi	r7,r7,11236
41028860:	31800054 	ori	r6,r6,1
41028864:	10c00926 	beq	r2,r3,4102888c <_malloc_trim_r+0xe8>
41028868:	38800017 	ldw	r2,0(r7)
4102886c:	98c00217 	ldw	r3,8(r19)
41028870:	9009883a 	mov	r4,r18
41028874:	1445c83a 	sub	r2,r2,r17
41028878:	38800015 	stw	r2,0(r7)
4102887c:	19800115 	stw	r6,4(r3)
41028880:	1031b140 	call	41031b14 <__malloc_unlock>
41028884:	00800044 	movi	r2,1
41028888:	003fe606 	br	41028824 <_malloc_trim_r+0x80>
4102888c:	1022ed00 	call	41022ed0 <_sbrk_r>
41028890:	99800217 	ldw	r6,8(r19)
41028894:	100f883a 	mov	r7,r2
41028898:	9009883a 	mov	r4,r18
4102889c:	1187c83a 	sub	r3,r2,r6
410288a0:	008003c4 	movi	r2,15
410288a4:	19400054 	ori	r5,r3,1
410288a8:	10ffdc0e 	bge	r2,r3,4102881c <_malloc_trim_r+0x78>
410288ac:	00800034 	movhi	r2,0
410288b0:	108ada04 	addi	r2,r2,11112
410288b4:	10c00017 	ldw	r3,0(r2)
410288b8:	00800034 	movhi	r2,0
410288bc:	108af904 	addi	r2,r2,11236
410288c0:	31400115 	stw	r5,4(r6)
410288c4:	38c7c83a 	sub	r3,r7,r3
410288c8:	10c00015 	stw	r3,0(r2)
410288cc:	003fd306 	br	4102881c <_malloc_trim_r+0x78>

410288d0 <_free_r>:
410288d0:	defffd04 	addi	sp,sp,-12
410288d4:	dc400115 	stw	r17,4(sp)
410288d8:	dc000015 	stw	r16,0(sp)
410288dc:	dfc00215 	stw	ra,8(sp)
410288e0:	2821883a 	mov	r16,r5
410288e4:	2023883a 	mov	r17,r4
410288e8:	28005a26 	beq	r5,zero,41028a54 <_free_r+0x184>
410288ec:	1031af40 	call	41031af4 <__malloc_lock>
410288f0:	823ffe04 	addi	r8,r16,-8
410288f4:	41400117 	ldw	r5,4(r8)
410288f8:	00bfff84 	movi	r2,-2
410288fc:	02800034 	movhi	r10,0
41028900:	52854604 	addi	r10,r10,5400
41028904:	288e703a 	and	r7,r5,r2
41028908:	41cd883a 	add	r6,r8,r7
4102890c:	30c00117 	ldw	r3,4(r6)
41028910:	51000217 	ldw	r4,8(r10)
41028914:	00bfff04 	movi	r2,-4
41028918:	1892703a 	and	r9,r3,r2
4102891c:	5017883a 	mov	r11,r10
41028920:	31006726 	beq	r6,r4,41028ac0 <_free_r+0x1f0>
41028924:	2880004c 	andi	r2,r5,1
41028928:	1005003a 	cmpeq	r2,r2,zero
4102892c:	32400115 	stw	r9,4(r6)
41028930:	10001a1e 	bne	r2,zero,4102899c <_free_r+0xcc>
41028934:	000b883a 	mov	r5,zero
41028938:	3247883a 	add	r3,r6,r9
4102893c:	18800117 	ldw	r2,4(r3)
41028940:	1080004c 	andi	r2,r2,1
41028944:	1000231e 	bne	r2,zero,410289d4 <_free_r+0x104>
41028948:	280ac03a 	cmpne	r5,r5,zero
4102894c:	3a4f883a 	add	r7,r7,r9
41028950:	2800451e 	bne	r5,zero,41028a68 <_free_r+0x198>
41028954:	31000217 	ldw	r4,8(r6)
41028958:	00800034 	movhi	r2,0
4102895c:	10854804 	addi	r2,r2,5408
41028960:	20807b26 	beq	r4,r2,41028b50 <_free_r+0x280>
41028964:	30800317 	ldw	r2,12(r6)
41028968:	3a07883a 	add	r3,r7,r8
4102896c:	19c00015 	stw	r7,0(r3)
41028970:	11000215 	stw	r4,8(r2)
41028974:	20800315 	stw	r2,12(r4)
41028978:	38800054 	ori	r2,r7,1
4102897c:	40800115 	stw	r2,4(r8)
41028980:	28001a26 	beq	r5,zero,410289ec <_free_r+0x11c>
41028984:	8809883a 	mov	r4,r17
41028988:	dfc00217 	ldw	ra,8(sp)
4102898c:	dc400117 	ldw	r17,4(sp)
41028990:	dc000017 	ldw	r16,0(sp)
41028994:	dec00304 	addi	sp,sp,12
41028998:	1031b141 	jmpi	41031b14 <__malloc_unlock>
4102899c:	80bffe17 	ldw	r2,-8(r16)
410289a0:	50c00204 	addi	r3,r10,8
410289a4:	4091c83a 	sub	r8,r8,r2
410289a8:	41000217 	ldw	r4,8(r8)
410289ac:	388f883a 	add	r7,r7,r2
410289b0:	20c06126 	beq	r4,r3,41028b38 <_free_r+0x268>
410289b4:	40800317 	ldw	r2,12(r8)
410289b8:	3247883a 	add	r3,r6,r9
410289bc:	000b883a 	mov	r5,zero
410289c0:	11000215 	stw	r4,8(r2)
410289c4:	20800315 	stw	r2,12(r4)
410289c8:	18800117 	ldw	r2,4(r3)
410289cc:	1080004c 	andi	r2,r2,1
410289d0:	103fdd26 	beq	r2,zero,41028948 <_free_r+0x78>
410289d4:	38800054 	ori	r2,r7,1
410289d8:	3a07883a 	add	r3,r7,r8
410289dc:	280ac03a 	cmpne	r5,r5,zero
410289e0:	40800115 	stw	r2,4(r8)
410289e4:	19c00015 	stw	r7,0(r3)
410289e8:	283fe61e 	bne	r5,zero,41028984 <_free_r+0xb4>
410289ec:	00807fc4 	movi	r2,511
410289f0:	11c01f2e 	bgeu	r2,r7,41028a70 <_free_r+0x1a0>
410289f4:	3806d27a 	srli	r3,r7,9
410289f8:	1800481e 	bne	r3,zero,41028b1c <_free_r+0x24c>
410289fc:	3804d0fa 	srli	r2,r7,3
41028a00:	100690fa 	slli	r3,r2,3
41028a04:	1acd883a 	add	r6,r3,r11
41028a08:	31400217 	ldw	r5,8(r6)
41028a0c:	31405926 	beq	r6,r5,41028b74 <_free_r+0x2a4>
41028a10:	28800117 	ldw	r2,4(r5)
41028a14:	00ffff04 	movi	r3,-4
41028a18:	10c4703a 	and	r2,r2,r3
41028a1c:	3880022e 	bgeu	r7,r2,41028a28 <_free_r+0x158>
41028a20:	29400217 	ldw	r5,8(r5)
41028a24:	317ffa1e 	bne	r6,r5,41028a10 <_free_r+0x140>
41028a28:	29800317 	ldw	r6,12(r5)
41028a2c:	41800315 	stw	r6,12(r8)
41028a30:	41400215 	stw	r5,8(r8)
41028a34:	8809883a 	mov	r4,r17
41028a38:	2a000315 	stw	r8,12(r5)
41028a3c:	32000215 	stw	r8,8(r6)
41028a40:	dfc00217 	ldw	ra,8(sp)
41028a44:	dc400117 	ldw	r17,4(sp)
41028a48:	dc000017 	ldw	r16,0(sp)
41028a4c:	dec00304 	addi	sp,sp,12
41028a50:	1031b141 	jmpi	41031b14 <__malloc_unlock>
41028a54:	dfc00217 	ldw	ra,8(sp)
41028a58:	dc400117 	ldw	r17,4(sp)
41028a5c:	dc000017 	ldw	r16,0(sp)
41028a60:	dec00304 	addi	sp,sp,12
41028a64:	f800283a 	ret
41028a68:	31000217 	ldw	r4,8(r6)
41028a6c:	003fbd06 	br	41028964 <_free_r+0x94>
41028a70:	3806d0fa 	srli	r3,r7,3
41028a74:	00800044 	movi	r2,1
41028a78:	51400117 	ldw	r5,4(r10)
41028a7c:	180890fa 	slli	r4,r3,3
41028a80:	1807d0ba 	srai	r3,r3,2
41028a84:	22c9883a 	add	r4,r4,r11
41028a88:	21800217 	ldw	r6,8(r4)
41028a8c:	10c4983a 	sll	r2,r2,r3
41028a90:	41000315 	stw	r4,12(r8)
41028a94:	41800215 	stw	r6,8(r8)
41028a98:	288ab03a 	or	r5,r5,r2
41028a9c:	22000215 	stw	r8,8(r4)
41028aa0:	8809883a 	mov	r4,r17
41028aa4:	51400115 	stw	r5,4(r10)
41028aa8:	32000315 	stw	r8,12(r6)
41028aac:	dfc00217 	ldw	ra,8(sp)
41028ab0:	dc400117 	ldw	r17,4(sp)
41028ab4:	dc000017 	ldw	r16,0(sp)
41028ab8:	dec00304 	addi	sp,sp,12
41028abc:	1031b141 	jmpi	41031b14 <__malloc_unlock>
41028ac0:	2880004c 	andi	r2,r5,1
41028ac4:	3a4d883a 	add	r6,r7,r9
41028ac8:	1000071e 	bne	r2,zero,41028ae8 <_free_r+0x218>
41028acc:	80bffe17 	ldw	r2,-8(r16)
41028ad0:	4091c83a 	sub	r8,r8,r2
41028ad4:	41000317 	ldw	r4,12(r8)
41028ad8:	40c00217 	ldw	r3,8(r8)
41028adc:	308d883a 	add	r6,r6,r2
41028ae0:	20c00215 	stw	r3,8(r4)
41028ae4:	19000315 	stw	r4,12(r3)
41028ae8:	00800034 	movhi	r2,0
41028aec:	108ad904 	addi	r2,r2,11108
41028af0:	11000017 	ldw	r4,0(r2)
41028af4:	30c00054 	ori	r3,r6,1
41028af8:	52000215 	stw	r8,8(r10)
41028afc:	40c00115 	stw	r3,4(r8)
41028b00:	313fa036 	bltu	r6,r4,41028984 <_free_r+0xb4>
41028b04:	00800034 	movhi	r2,0
41028b08:	108aec04 	addi	r2,r2,11184
41028b0c:	11400017 	ldw	r5,0(r2)
41028b10:	8809883a 	mov	r4,r17
41028b14:	10287a40 	call	410287a4 <_malloc_trim_r>
41028b18:	003f9a06 	br	41028984 <_free_r+0xb4>
41028b1c:	00800104 	movi	r2,4
41028b20:	10c0072e 	bgeu	r2,r3,41028b40 <_free_r+0x270>
41028b24:	00800504 	movi	r2,20
41028b28:	10c01936 	bltu	r2,r3,41028b90 <_free_r+0x2c0>
41028b2c:	188016c4 	addi	r2,r3,91
41028b30:	100690fa 	slli	r3,r2,3
41028b34:	003fb306 	br	41028a04 <_free_r+0x134>
41028b38:	01400044 	movi	r5,1
41028b3c:	003f7e06 	br	41028938 <_free_r+0x68>
41028b40:	3804d1ba 	srli	r2,r7,6
41028b44:	10800e04 	addi	r2,r2,56
41028b48:	100690fa 	slli	r3,r2,3
41028b4c:	003fad06 	br	41028a04 <_free_r+0x134>
41028b50:	22000315 	stw	r8,12(r4)
41028b54:	22000215 	stw	r8,8(r4)
41028b58:	3a05883a 	add	r2,r7,r8
41028b5c:	38c00054 	ori	r3,r7,1
41028b60:	11c00015 	stw	r7,0(r2)
41028b64:	41000215 	stw	r4,8(r8)
41028b68:	40c00115 	stw	r3,4(r8)
41028b6c:	41000315 	stw	r4,12(r8)
41028b70:	003f8406 	br	41028984 <_free_r+0xb4>
41028b74:	1005d0ba 	srai	r2,r2,2
41028b78:	00c00044 	movi	r3,1
41028b7c:	51000117 	ldw	r4,4(r10)
41028b80:	1886983a 	sll	r3,r3,r2
41028b84:	20c8b03a 	or	r4,r4,r3
41028b88:	51000115 	stw	r4,4(r10)
41028b8c:	003fa706 	br	41028a2c <_free_r+0x15c>
41028b90:	00801504 	movi	r2,84
41028b94:	10c00436 	bltu	r2,r3,41028ba8 <_free_r+0x2d8>
41028b98:	3804d33a 	srli	r2,r7,12
41028b9c:	10801b84 	addi	r2,r2,110
41028ba0:	100690fa 	slli	r3,r2,3
41028ba4:	003f9706 	br	41028a04 <_free_r+0x134>
41028ba8:	00805504 	movi	r2,340
41028bac:	10c00436 	bltu	r2,r3,41028bc0 <_free_r+0x2f0>
41028bb0:	3804d3fa 	srli	r2,r7,15
41028bb4:	10801dc4 	addi	r2,r2,119
41028bb8:	100690fa 	slli	r3,r2,3
41028bbc:	003f9106 	br	41028a04 <_free_r+0x134>
41028bc0:	00815504 	movi	r2,1364
41028bc4:	10c0032e 	bgeu	r2,r3,41028bd4 <_free_r+0x304>
41028bc8:	00801f84 	movi	r2,126
41028bcc:	00c0fc04 	movi	r3,1008
41028bd0:	003f8c06 	br	41028a04 <_free_r+0x134>
41028bd4:	3804d4ba 	srli	r2,r7,18
41028bd8:	10801f04 	addi	r2,r2,124
41028bdc:	100690fa 	slli	r3,r2,3
41028be0:	003f8806 	br	41028a04 <_free_r+0x134>

41028be4 <__sfvwrite_r>:
41028be4:	30800217 	ldw	r2,8(r6)
41028be8:	defff504 	addi	sp,sp,-44
41028bec:	df000915 	stw	fp,36(sp)
41028bf0:	dd800715 	stw	r22,28(sp)
41028bf4:	dc800315 	stw	r18,12(sp)
41028bf8:	dfc00a15 	stw	ra,40(sp)
41028bfc:	ddc00815 	stw	r23,32(sp)
41028c00:	dd400615 	stw	r21,24(sp)
41028c04:	dd000515 	stw	r20,20(sp)
41028c08:	dcc00415 	stw	r19,16(sp)
41028c0c:	dc400215 	stw	r17,8(sp)
41028c10:	dc000115 	stw	r16,4(sp)
41028c14:	302d883a 	mov	r22,r6
41028c18:	2039883a 	mov	fp,r4
41028c1c:	2825883a 	mov	r18,r5
41028c20:	10001c26 	beq	r2,zero,41028c94 <__sfvwrite_r+0xb0>
41028c24:	29c0030b 	ldhu	r7,12(r5)
41028c28:	3880020c 	andi	r2,r7,8
41028c2c:	10002726 	beq	r2,zero,41028ccc <__sfvwrite_r+0xe8>
41028c30:	28800417 	ldw	r2,16(r5)
41028c34:	10002526 	beq	r2,zero,41028ccc <__sfvwrite_r+0xe8>
41028c38:	3880008c 	andi	r2,r7,2
41028c3c:	b5400017 	ldw	r21,0(r22)
41028c40:	10002826 	beq	r2,zero,41028ce4 <__sfvwrite_r+0x100>
41028c44:	0021883a 	mov	r16,zero
41028c48:	0023883a 	mov	r17,zero
41028c4c:	880d883a 	mov	r6,r17
41028c50:	e009883a 	mov	r4,fp
41028c54:	00810004 	movi	r2,1024
41028c58:	80006e26 	beq	r16,zero,41028e14 <__sfvwrite_r+0x230>
41028c5c:	800f883a 	mov	r7,r16
41028c60:	91400717 	ldw	r5,28(r18)
41028c64:	1400012e 	bgeu	r2,r16,41028c6c <__sfvwrite_r+0x88>
41028c68:	100f883a 	mov	r7,r2
41028c6c:	90c00917 	ldw	r3,36(r18)
41028c70:	183ee83a 	callr	r3
41028c74:	1007883a 	mov	r3,r2
41028c78:	80a1c83a 	sub	r16,r16,r2
41028c7c:	88a3883a 	add	r17,r17,r2
41028c80:	00806d0e 	bge	zero,r2,41028e38 <__sfvwrite_r+0x254>
41028c84:	b0800217 	ldw	r2,8(r22)
41028c88:	10c5c83a 	sub	r2,r2,r3
41028c8c:	b0800215 	stw	r2,8(r22)
41028c90:	103fee1e 	bne	r2,zero,41028c4c <__sfvwrite_r+0x68>
41028c94:	0009883a 	mov	r4,zero
41028c98:	2005883a 	mov	r2,r4
41028c9c:	dfc00a17 	ldw	ra,40(sp)
41028ca0:	df000917 	ldw	fp,36(sp)
41028ca4:	ddc00817 	ldw	r23,32(sp)
41028ca8:	dd800717 	ldw	r22,28(sp)
41028cac:	dd400617 	ldw	r21,24(sp)
41028cb0:	dd000517 	ldw	r20,20(sp)
41028cb4:	dcc00417 	ldw	r19,16(sp)
41028cb8:	dc800317 	ldw	r18,12(sp)
41028cbc:	dc400217 	ldw	r17,8(sp)
41028cc0:	dc000117 	ldw	r16,4(sp)
41028cc4:	dec00b04 	addi	sp,sp,44
41028cc8:	f800283a 	ret
41028ccc:	10267700 	call	41026770 <__swsetup_r>
41028cd0:	1000e41e 	bne	r2,zero,41029064 <__sfvwrite_r+0x480>
41028cd4:	91c0030b 	ldhu	r7,12(r18)
41028cd8:	b5400017 	ldw	r21,0(r22)
41028cdc:	3880008c 	andi	r2,r7,2
41028ce0:	103fd81e 	bne	r2,zero,41028c44 <__sfvwrite_r+0x60>
41028ce4:	3880004c 	andi	r2,r7,1
41028ce8:	1005003a 	cmpeq	r2,r2,zero
41028cec:	10005726 	beq	r2,zero,41028e4c <__sfvwrite_r+0x268>
41028cf0:	0029883a 	mov	r20,zero
41028cf4:	002f883a 	mov	r23,zero
41028cf8:	a0004226 	beq	r20,zero,41028e04 <__sfvwrite_r+0x220>
41028cfc:	3880800c 	andi	r2,r7,512
41028d00:	94000217 	ldw	r16,8(r18)
41028d04:	10008b26 	beq	r2,zero,41028f34 <__sfvwrite_r+0x350>
41028d08:	800d883a 	mov	r6,r16
41028d0c:	a400a536 	bltu	r20,r16,41028fa4 <__sfvwrite_r+0x3c0>
41028d10:	3881200c 	andi	r2,r7,1152
41028d14:	10002726 	beq	r2,zero,41028db4 <__sfvwrite_r+0x1d0>
41028d18:	90800517 	ldw	r2,20(r18)
41028d1c:	92000417 	ldw	r8,16(r18)
41028d20:	91400017 	ldw	r5,0(r18)
41028d24:	1087883a 	add	r3,r2,r2
41028d28:	1887883a 	add	r3,r3,r2
41028d2c:	1808d7fa 	srli	r4,r3,31
41028d30:	2a21c83a 	sub	r16,r5,r8
41028d34:	80800044 	addi	r2,r16,1
41028d38:	20c9883a 	add	r4,r4,r3
41028d3c:	2027d07a 	srai	r19,r4,1
41028d40:	a085883a 	add	r2,r20,r2
41028d44:	980d883a 	mov	r6,r19
41028d48:	9880022e 	bgeu	r19,r2,41028d54 <__sfvwrite_r+0x170>
41028d4c:	1027883a 	mov	r19,r2
41028d50:	100d883a 	mov	r6,r2
41028d54:	3881000c 	andi	r2,r7,1024
41028d58:	1000b826 	beq	r2,zero,4102903c <__sfvwrite_r+0x458>
41028d5c:	300b883a 	mov	r5,r6
41028d60:	e009883a 	mov	r4,fp
41028d64:	10224cc0 	call	410224cc <_malloc_r>
41028d68:	10003126 	beq	r2,zero,41028e30 <__sfvwrite_r+0x24c>
41028d6c:	91400417 	ldw	r5,16(r18)
41028d70:	1009883a 	mov	r4,r2
41028d74:	800d883a 	mov	r6,r16
41028d78:	1023883a 	mov	r17,r2
41028d7c:	1022c800 	call	41022c80 <memcpy>
41028d80:	90c0030b 	ldhu	r3,12(r18)
41028d84:	00beffc4 	movi	r2,-1025
41028d88:	1886703a 	and	r3,r3,r2
41028d8c:	18c02014 	ori	r3,r3,128
41028d90:	90c0030d 	sth	r3,12(r18)
41028d94:	9c07c83a 	sub	r3,r19,r16
41028d98:	8c05883a 	add	r2,r17,r16
41028d9c:	a00d883a 	mov	r6,r20
41028da0:	a021883a 	mov	r16,r20
41028da4:	90800015 	stw	r2,0(r18)
41028da8:	90c00215 	stw	r3,8(r18)
41028dac:	94400415 	stw	r17,16(r18)
41028db0:	94c00515 	stw	r19,20(r18)
41028db4:	91000017 	ldw	r4,0(r18)
41028db8:	b80b883a 	mov	r5,r23
41028dbc:	a023883a 	mov	r17,r20
41028dc0:	10296680 	call	41029668 <memmove>
41028dc4:	90c00217 	ldw	r3,8(r18)
41028dc8:	90800017 	ldw	r2,0(r18)
41028dcc:	a027883a 	mov	r19,r20
41028dd0:	1c07c83a 	sub	r3,r3,r16
41028dd4:	1405883a 	add	r2,r2,r16
41028dd8:	90c00215 	stw	r3,8(r18)
41028ddc:	a021883a 	mov	r16,r20
41028de0:	90800015 	stw	r2,0(r18)
41028de4:	b0800217 	ldw	r2,8(r22)
41028de8:	1405c83a 	sub	r2,r2,r16
41028dec:	b0800215 	stw	r2,8(r22)
41028df0:	103fa826 	beq	r2,zero,41028c94 <__sfvwrite_r+0xb0>
41028df4:	a469c83a 	sub	r20,r20,r17
41028df8:	91c0030b 	ldhu	r7,12(r18)
41028dfc:	bcef883a 	add	r23,r23,r19
41028e00:	a03fbe1e 	bne	r20,zero,41028cfc <__sfvwrite_r+0x118>
41028e04:	adc00017 	ldw	r23,0(r21)
41028e08:	ad000117 	ldw	r20,4(r21)
41028e0c:	ad400204 	addi	r21,r21,8
41028e10:	003fb906 	br	41028cf8 <__sfvwrite_r+0x114>
41028e14:	ac400017 	ldw	r17,0(r21)
41028e18:	ac000117 	ldw	r16,4(r21)
41028e1c:	ad400204 	addi	r21,r21,8
41028e20:	003f8a06 	br	41028c4c <__sfvwrite_r+0x68>
41028e24:	91400417 	ldw	r5,16(r18)
41028e28:	e009883a 	mov	r4,fp
41028e2c:	10288d00 	call	410288d0 <_free_r>
41028e30:	00800304 	movi	r2,12
41028e34:	e0800015 	stw	r2,0(fp)
41028e38:	9080030b 	ldhu	r2,12(r18)
41028e3c:	013fffc4 	movi	r4,-1
41028e40:	10801014 	ori	r2,r2,64
41028e44:	9080030d 	sth	r2,12(r18)
41028e48:	003f9306 	br	41028c98 <__sfvwrite_r+0xb4>
41028e4c:	0027883a 	mov	r19,zero
41028e50:	002f883a 	mov	r23,zero
41028e54:	d8000015 	stw	zero,0(sp)
41028e58:	0029883a 	mov	r20,zero
41028e5c:	98001e26 	beq	r19,zero,41028ed8 <__sfvwrite_r+0x2f4>
41028e60:	d8c00017 	ldw	r3,0(sp)
41028e64:	1804c03a 	cmpne	r2,r3,zero
41028e68:	10005e26 	beq	r2,zero,41028fe4 <__sfvwrite_r+0x400>
41028e6c:	9821883a 	mov	r16,r19
41028e70:	a4c0012e 	bgeu	r20,r19,41028e78 <__sfvwrite_r+0x294>
41028e74:	a021883a 	mov	r16,r20
41028e78:	91000017 	ldw	r4,0(r18)
41028e7c:	90800417 	ldw	r2,16(r18)
41028e80:	91800217 	ldw	r6,8(r18)
41028e84:	91c00517 	ldw	r7,20(r18)
41028e88:	1100022e 	bgeu	r2,r4,41028e94 <__sfvwrite_r+0x2b0>
41028e8c:	31e3883a 	add	r17,r6,r7
41028e90:	8c001616 	blt	r17,r16,41028eec <__sfvwrite_r+0x308>
41028e94:	81c03816 	blt	r16,r7,41028f78 <__sfvwrite_r+0x394>
41028e98:	90c00917 	ldw	r3,36(r18)
41028e9c:	91400717 	ldw	r5,28(r18)
41028ea0:	e009883a 	mov	r4,fp
41028ea4:	b80d883a 	mov	r6,r23
41028ea8:	183ee83a 	callr	r3
41028eac:	1023883a 	mov	r17,r2
41028eb0:	00bfe10e 	bge	zero,r2,41028e38 <__sfvwrite_r+0x254>
41028eb4:	a469c83a 	sub	r20,r20,r17
41028eb8:	a0001826 	beq	r20,zero,41028f1c <__sfvwrite_r+0x338>
41028ebc:	b0800217 	ldw	r2,8(r22)
41028ec0:	1445c83a 	sub	r2,r2,r17
41028ec4:	b0800215 	stw	r2,8(r22)
41028ec8:	103f7226 	beq	r2,zero,41028c94 <__sfvwrite_r+0xb0>
41028ecc:	9c67c83a 	sub	r19,r19,r17
41028ed0:	bc6f883a 	add	r23,r23,r17
41028ed4:	983fe21e 	bne	r19,zero,41028e60 <__sfvwrite_r+0x27c>
41028ed8:	adc00017 	ldw	r23,0(r21)
41028edc:	acc00117 	ldw	r19,4(r21)
41028ee0:	ad400204 	addi	r21,r21,8
41028ee4:	d8000015 	stw	zero,0(sp)
41028ee8:	003fdc06 	br	41028e5c <__sfvwrite_r+0x278>
41028eec:	b80b883a 	mov	r5,r23
41028ef0:	880d883a 	mov	r6,r17
41028ef4:	10296680 	call	41029668 <memmove>
41028ef8:	90c00017 	ldw	r3,0(r18)
41028efc:	e009883a 	mov	r4,fp
41028f00:	900b883a 	mov	r5,r18
41028f04:	1c47883a 	add	r3,r3,r17
41028f08:	90c00015 	stw	r3,0(r18)
41028f0c:	10280780 	call	41028078 <_fflush_r>
41028f10:	103fc91e 	bne	r2,zero,41028e38 <__sfvwrite_r+0x254>
41028f14:	a469c83a 	sub	r20,r20,r17
41028f18:	a03fe81e 	bne	r20,zero,41028ebc <__sfvwrite_r+0x2d8>
41028f1c:	e009883a 	mov	r4,fp
41028f20:	900b883a 	mov	r5,r18
41028f24:	10280780 	call	41028078 <_fflush_r>
41028f28:	103fc31e 	bne	r2,zero,41028e38 <__sfvwrite_r+0x254>
41028f2c:	d8000015 	stw	zero,0(sp)
41028f30:	003fe206 	br	41028ebc <__sfvwrite_r+0x2d8>
41028f34:	91000017 	ldw	r4,0(r18)
41028f38:	90800417 	ldw	r2,16(r18)
41028f3c:	1100022e 	bgeu	r2,r4,41028f48 <__sfvwrite_r+0x364>
41028f40:	8023883a 	mov	r17,r16
41028f44:	85003136 	bltu	r16,r20,4102900c <__sfvwrite_r+0x428>
41028f48:	91c00517 	ldw	r7,20(r18)
41028f4c:	a1c01836 	bltu	r20,r7,41028fb0 <__sfvwrite_r+0x3cc>
41028f50:	90c00917 	ldw	r3,36(r18)
41028f54:	91400717 	ldw	r5,28(r18)
41028f58:	e009883a 	mov	r4,fp
41028f5c:	b80d883a 	mov	r6,r23
41028f60:	183ee83a 	callr	r3
41028f64:	1021883a 	mov	r16,r2
41028f68:	00bfb30e 	bge	zero,r2,41028e38 <__sfvwrite_r+0x254>
41028f6c:	1023883a 	mov	r17,r2
41028f70:	1027883a 	mov	r19,r2
41028f74:	003f9b06 	br	41028de4 <__sfvwrite_r+0x200>
41028f78:	b80b883a 	mov	r5,r23
41028f7c:	800d883a 	mov	r6,r16
41028f80:	10296680 	call	41029668 <memmove>
41028f84:	90c00217 	ldw	r3,8(r18)
41028f88:	90800017 	ldw	r2,0(r18)
41028f8c:	8023883a 	mov	r17,r16
41028f90:	1c07c83a 	sub	r3,r3,r16
41028f94:	1405883a 	add	r2,r2,r16
41028f98:	90c00215 	stw	r3,8(r18)
41028f9c:	90800015 	stw	r2,0(r18)
41028fa0:	003fc406 	br	41028eb4 <__sfvwrite_r+0x2d0>
41028fa4:	a00d883a 	mov	r6,r20
41028fa8:	a021883a 	mov	r16,r20
41028fac:	003f8106 	br	41028db4 <__sfvwrite_r+0x1d0>
41028fb0:	b80b883a 	mov	r5,r23
41028fb4:	a00d883a 	mov	r6,r20
41028fb8:	10296680 	call	41029668 <memmove>
41028fbc:	90c00217 	ldw	r3,8(r18)
41028fc0:	90800017 	ldw	r2,0(r18)
41028fc4:	a021883a 	mov	r16,r20
41028fc8:	1d07c83a 	sub	r3,r3,r20
41028fcc:	1505883a 	add	r2,r2,r20
41028fd0:	a023883a 	mov	r17,r20
41028fd4:	a027883a 	mov	r19,r20
41028fd8:	90c00215 	stw	r3,8(r18)
41028fdc:	90800015 	stw	r2,0(r18)
41028fe0:	003f8006 	br	41028de4 <__sfvwrite_r+0x200>
41028fe4:	b809883a 	mov	r4,r23
41028fe8:	01400284 	movi	r5,10
41028fec:	980d883a 	mov	r6,r19
41028ff0:	10295840 	call	41029584 <memchr>
41028ff4:	10001726 	beq	r2,zero,41029054 <__sfvwrite_r+0x470>
41028ff8:	15c5c83a 	sub	r2,r2,r23
41028ffc:	15000044 	addi	r20,r2,1
41029000:	00800044 	movi	r2,1
41029004:	d8800015 	stw	r2,0(sp)
41029008:	003f9806 	br	41028e6c <__sfvwrite_r+0x288>
4102900c:	b80b883a 	mov	r5,r23
41029010:	800d883a 	mov	r6,r16
41029014:	10296680 	call	41029668 <memmove>
41029018:	90c00017 	ldw	r3,0(r18)
4102901c:	e009883a 	mov	r4,fp
41029020:	900b883a 	mov	r5,r18
41029024:	1c07883a 	add	r3,r3,r16
41029028:	90c00015 	stw	r3,0(r18)
4102902c:	8027883a 	mov	r19,r16
41029030:	10280780 	call	41028078 <_fflush_r>
41029034:	103f6b26 	beq	r2,zero,41028de4 <__sfvwrite_r+0x200>
41029038:	003f7f06 	br	41028e38 <__sfvwrite_r+0x254>
4102903c:	400b883a 	mov	r5,r8
41029040:	e009883a 	mov	r4,fp
41029044:	102a9c00 	call	4102a9c0 <_realloc_r>
41029048:	103f7626 	beq	r2,zero,41028e24 <__sfvwrite_r+0x240>
4102904c:	1023883a 	mov	r17,r2
41029050:	003f5006 	br	41028d94 <__sfvwrite_r+0x1b0>
41029054:	00c00044 	movi	r3,1
41029058:	9d000044 	addi	r20,r19,1
4102905c:	d8c00015 	stw	r3,0(sp)
41029060:	003f8206 	br	41028e6c <__sfvwrite_r+0x288>
41029064:	9080030b 	ldhu	r2,12(r18)
41029068:	00c00244 	movi	r3,9
4102906c:	013fffc4 	movi	r4,-1
41029070:	10801014 	ori	r2,r2,64
41029074:	9080030d 	sth	r2,12(r18)
41029078:	e0c00015 	stw	r3,0(fp)
4102907c:	003f0606 	br	41028c98 <__sfvwrite_r+0xb4>

41029080 <_fwalk_reent>:
41029080:	defff704 	addi	sp,sp,-36
41029084:	dcc00315 	stw	r19,12(sp)
41029088:	24c0b804 	addi	r19,r4,736
4102908c:	dd800615 	stw	r22,24(sp)
41029090:	dd400515 	stw	r21,20(sp)
41029094:	dfc00815 	stw	ra,32(sp)
41029098:	ddc00715 	stw	r23,28(sp)
4102909c:	dd000415 	stw	r20,16(sp)
410290a0:	dc800215 	stw	r18,8(sp)
410290a4:	dc400115 	stw	r17,4(sp)
410290a8:	dc000015 	stw	r16,0(sp)
410290ac:	202b883a 	mov	r21,r4
410290b0:	282d883a 	mov	r22,r5
410290b4:	10283000 	call	41028300 <__sfp_lock_acquire>
410290b8:	98002126 	beq	r19,zero,41029140 <_fwalk_reent+0xc0>
410290bc:	002f883a 	mov	r23,zero
410290c0:	9c800117 	ldw	r18,4(r19)
410290c4:	9c000217 	ldw	r16,8(r19)
410290c8:	90bfffc4 	addi	r2,r18,-1
410290cc:	10000d16 	blt	r2,zero,41029104 <_fwalk_reent+0x84>
410290d0:	0023883a 	mov	r17,zero
410290d4:	053fffc4 	movi	r20,-1
410290d8:	8080030f 	ldh	r2,12(r16)
410290dc:	8c400044 	addi	r17,r17,1
410290e0:	10000626 	beq	r2,zero,410290fc <_fwalk_reent+0x7c>
410290e4:	8080038f 	ldh	r2,14(r16)
410290e8:	800b883a 	mov	r5,r16
410290ec:	a809883a 	mov	r4,r21
410290f0:	15000226 	beq	r2,r20,410290fc <_fwalk_reent+0x7c>
410290f4:	b03ee83a 	callr	r22
410290f8:	b8aeb03a 	or	r23,r23,r2
410290fc:	84001704 	addi	r16,r16,92
41029100:	947ff51e 	bne	r18,r17,410290d8 <_fwalk_reent+0x58>
41029104:	9cc00017 	ldw	r19,0(r19)
41029108:	983fed1e 	bne	r19,zero,410290c0 <_fwalk_reent+0x40>
4102910c:	10283040 	call	41028304 <__sfp_lock_release>
41029110:	b805883a 	mov	r2,r23
41029114:	dfc00817 	ldw	ra,32(sp)
41029118:	ddc00717 	ldw	r23,28(sp)
4102911c:	dd800617 	ldw	r22,24(sp)
41029120:	dd400517 	ldw	r21,20(sp)
41029124:	dd000417 	ldw	r20,16(sp)
41029128:	dcc00317 	ldw	r19,12(sp)
4102912c:	dc800217 	ldw	r18,8(sp)
41029130:	dc400117 	ldw	r17,4(sp)
41029134:	dc000017 	ldw	r16,0(sp)
41029138:	dec00904 	addi	sp,sp,36
4102913c:	f800283a 	ret
41029140:	002f883a 	mov	r23,zero
41029144:	003ff106 	br	4102910c <_fwalk_reent+0x8c>

41029148 <_fwalk>:
41029148:	defff804 	addi	sp,sp,-32
4102914c:	dcc00315 	stw	r19,12(sp)
41029150:	24c0b804 	addi	r19,r4,736
41029154:	dd400515 	stw	r21,20(sp)
41029158:	dfc00715 	stw	ra,28(sp)
4102915c:	dd800615 	stw	r22,24(sp)
41029160:	dd000415 	stw	r20,16(sp)
41029164:	dc800215 	stw	r18,8(sp)
41029168:	dc400115 	stw	r17,4(sp)
4102916c:	dc000015 	stw	r16,0(sp)
41029170:	282b883a 	mov	r21,r5
41029174:	10283000 	call	41028300 <__sfp_lock_acquire>
41029178:	98001f26 	beq	r19,zero,410291f8 <_fwalk+0xb0>
4102917c:	002d883a 	mov	r22,zero
41029180:	9c800117 	ldw	r18,4(r19)
41029184:	9c000217 	ldw	r16,8(r19)
41029188:	90bfffc4 	addi	r2,r18,-1
4102918c:	10000c16 	blt	r2,zero,410291c0 <_fwalk+0x78>
41029190:	0023883a 	mov	r17,zero
41029194:	053fffc4 	movi	r20,-1
41029198:	8080030f 	ldh	r2,12(r16)
4102919c:	8c400044 	addi	r17,r17,1
410291a0:	10000526 	beq	r2,zero,410291b8 <_fwalk+0x70>
410291a4:	8080038f 	ldh	r2,14(r16)
410291a8:	8009883a 	mov	r4,r16
410291ac:	15000226 	beq	r2,r20,410291b8 <_fwalk+0x70>
410291b0:	a83ee83a 	callr	r21
410291b4:	b0acb03a 	or	r22,r22,r2
410291b8:	84001704 	addi	r16,r16,92
410291bc:	947ff61e 	bne	r18,r17,41029198 <_fwalk+0x50>
410291c0:	9cc00017 	ldw	r19,0(r19)
410291c4:	983fee1e 	bne	r19,zero,41029180 <_fwalk+0x38>
410291c8:	10283040 	call	41028304 <__sfp_lock_release>
410291cc:	b005883a 	mov	r2,r22
410291d0:	dfc00717 	ldw	ra,28(sp)
410291d4:	dd800617 	ldw	r22,24(sp)
410291d8:	dd400517 	ldw	r21,20(sp)
410291dc:	dd000417 	ldw	r20,16(sp)
410291e0:	dcc00317 	ldw	r19,12(sp)
410291e4:	dc800217 	ldw	r18,8(sp)
410291e8:	dc400117 	ldw	r17,4(sp)
410291ec:	dc000017 	ldw	r16,0(sp)
410291f0:	dec00804 	addi	sp,sp,32
410291f4:	f800283a 	ret
410291f8:	002d883a 	mov	r22,zero
410291fc:	003ff206 	br	410291c8 <_fwalk+0x80>

41029200 <iswspace>:
41029200:	00803fc4 	movi	r2,255
41029204:	0007883a 	mov	r3,zero
41029208:	11000636 	bltu	r2,r4,41029224 <iswspace+0x24>
4102920c:	00800034 	movhi	r2,0
41029210:	108adb04 	addi	r2,r2,11116
41029214:	10c00017 	ldw	r3,0(r2)
41029218:	1907883a 	add	r3,r3,r4
4102921c:	18800003 	ldbu	r2,0(r3)
41029220:	10c0020c 	andi	r3,r2,8
41029224:	1805883a 	mov	r2,r3
41029228:	f800283a 	ret

4102922c <__locale_charset>:
4102922c:	d0a00617 	ldw	r2,-32744(gp)
41029230:	f800283a 	ret

41029234 <_localeconv_r>:
41029234:	00800034 	movhi	r2,0
41029238:	10838c04 	addi	r2,r2,3632
4102923c:	f800283a 	ret

41029240 <localeconv>:
41029240:	00800034 	movhi	r2,0
41029244:	108ad704 	addi	r2,r2,11100
41029248:	11000017 	ldw	r4,0(r2)
4102924c:	10292341 	jmpi	41029234 <_localeconv_r>

41029250 <_setlocale_r>:
41029250:	defffc04 	addi	sp,sp,-16
41029254:	00c00034 	movhi	r3,0
41029258:	18c2b704 	addi	r3,r3,2780
4102925c:	dc800215 	stw	r18,8(sp)
41029260:	dc400115 	stw	r17,4(sp)
41029264:	dc000015 	stw	r16,0(sp)
41029268:	2023883a 	mov	r17,r4
4102926c:	2825883a 	mov	r18,r5
41029270:	dfc00315 	stw	ra,12(sp)
41029274:	3021883a 	mov	r16,r6
41029278:	3009883a 	mov	r4,r6
4102927c:	180b883a 	mov	r5,r3
41029280:	30000926 	beq	r6,zero,410292a8 <_setlocale_r+0x58>
41029284:	102b4ec0 	call	4102b4ec <strcmp>
41029288:	8009883a 	mov	r4,r16
4102928c:	01400034 	movhi	r5,0
41029290:	2942c804 	addi	r5,r5,2848
41029294:	10000b1e 	bne	r2,zero,410292c4 <_setlocale_r+0x74>
41029298:	8c000d15 	stw	r16,52(r17)
4102929c:	8c800c15 	stw	r18,48(r17)
410292a0:	00c00034 	movhi	r3,0
410292a4:	18c2b704 	addi	r3,r3,2780
410292a8:	1805883a 	mov	r2,r3
410292ac:	dfc00317 	ldw	ra,12(sp)
410292b0:	dc800217 	ldw	r18,8(sp)
410292b4:	dc400117 	ldw	r17,4(sp)
410292b8:	dc000017 	ldw	r16,0(sp)
410292bc:	dec00404 	addi	sp,sp,16
410292c0:	f800283a 	ret
410292c4:	102b4ec0 	call	4102b4ec <strcmp>
410292c8:	0007883a 	mov	r3,zero
410292cc:	103ff226 	beq	r2,zero,41029298 <_setlocale_r+0x48>
410292d0:	003ff506 	br	410292a8 <_setlocale_r+0x58>

410292d4 <setlocale>:
410292d4:	01800034 	movhi	r6,0
410292d8:	318ad704 	addi	r6,r6,11100
410292dc:	2007883a 	mov	r3,r4
410292e0:	31000017 	ldw	r4,0(r6)
410292e4:	280d883a 	mov	r6,r5
410292e8:	180b883a 	mov	r5,r3
410292ec:	10292501 	jmpi	41029250 <_setlocale_r>

410292f0 <__smakebuf_r>:
410292f0:	2880030b 	ldhu	r2,12(r5)
410292f4:	deffed04 	addi	sp,sp,-76
410292f8:	dc401015 	stw	r17,64(sp)
410292fc:	1080008c 	andi	r2,r2,2
41029300:	dc000f15 	stw	r16,60(sp)
41029304:	dfc01215 	stw	ra,72(sp)
41029308:	dc801115 	stw	r18,68(sp)
4102930c:	2821883a 	mov	r16,r5
41029310:	2023883a 	mov	r17,r4
41029314:	10000b26 	beq	r2,zero,41029344 <__smakebuf_r+0x54>
41029318:	28c010c4 	addi	r3,r5,67
4102931c:	00800044 	movi	r2,1
41029320:	28800515 	stw	r2,20(r5)
41029324:	28c00415 	stw	r3,16(r5)
41029328:	28c00015 	stw	r3,0(r5)
4102932c:	dfc01217 	ldw	ra,72(sp)
41029330:	dc801117 	ldw	r18,68(sp)
41029334:	dc401017 	ldw	r17,64(sp)
41029338:	dc000f17 	ldw	r16,60(sp)
4102933c:	dec01304 	addi	sp,sp,76
41029340:	f800283a 	ret
41029344:	2940038f 	ldh	r5,14(r5)
41029348:	28002116 	blt	r5,zero,410293d0 <__smakebuf_r+0xe0>
4102934c:	d80d883a 	mov	r6,sp
41029350:	102dd8c0 	call	4102dd8c <_fstat_r>
41029354:	10001e16 	blt	r2,zero,410293d0 <__smakebuf_r+0xe0>
41029358:	d8800117 	ldw	r2,4(sp)
4102935c:	00e00014 	movui	r3,32768
41029360:	113c000c 	andi	r4,r2,61440
41029364:	20c03126 	beq	r4,r3,4102942c <__smakebuf_r+0x13c>
41029368:	8080030b 	ldhu	r2,12(r16)
4102936c:	00c80004 	movi	r3,8192
41029370:	10820014 	ori	r2,r2,2048
41029374:	8080030d 	sth	r2,12(r16)
41029378:	20c01e26 	beq	r4,r3,410293f4 <__smakebuf_r+0x104>
4102937c:	04810004 	movi	r18,1024
41029380:	8809883a 	mov	r4,r17
41029384:	900b883a 	mov	r5,r18
41029388:	10224cc0 	call	410224cc <_malloc_r>
4102938c:	1009883a 	mov	r4,r2
41029390:	10003126 	beq	r2,zero,41029458 <__smakebuf_r+0x168>
41029394:	80c0030b 	ldhu	r3,12(r16)
41029398:	009040f4 	movhi	r2,16643
4102939c:	10a0fd04 	addi	r2,r2,-31756
410293a0:	88800f15 	stw	r2,60(r17)
410293a4:	18c02014 	ori	r3,r3,128
410293a8:	84800515 	stw	r18,20(r16)
410293ac:	80c0030d 	sth	r3,12(r16)
410293b0:	81000415 	stw	r4,16(r16)
410293b4:	81000015 	stw	r4,0(r16)
410293b8:	dfc01217 	ldw	ra,72(sp)
410293bc:	dc801117 	ldw	r18,68(sp)
410293c0:	dc401017 	ldw	r17,64(sp)
410293c4:	dc000f17 	ldw	r16,60(sp)
410293c8:	dec01304 	addi	sp,sp,76
410293cc:	f800283a 	ret
410293d0:	80c0030b 	ldhu	r3,12(r16)
410293d4:	1880200c 	andi	r2,r3,128
410293d8:	10000426 	beq	r2,zero,410293ec <__smakebuf_r+0xfc>
410293dc:	04801004 	movi	r18,64
410293e0:	18820014 	ori	r2,r3,2048
410293e4:	8080030d 	sth	r2,12(r16)
410293e8:	003fe506 	br	41029380 <__smakebuf_r+0x90>
410293ec:	04810004 	movi	r18,1024
410293f0:	003ffb06 	br	410293e0 <__smakebuf_r+0xf0>
410293f4:	8140038f 	ldh	r5,14(r16)
410293f8:	8809883a 	mov	r4,r17
410293fc:	102e9880 	call	4102e988 <_isatty_r>
41029400:	103fde26 	beq	r2,zero,4102937c <__smakebuf_r+0x8c>
41029404:	8080030b 	ldhu	r2,12(r16)
41029408:	80c010c4 	addi	r3,r16,67
4102940c:	04810004 	movi	r18,1024
41029410:	10800054 	ori	r2,r2,1
41029414:	8080030d 	sth	r2,12(r16)
41029418:	00800044 	movi	r2,1
4102941c:	80c00415 	stw	r3,16(r16)
41029420:	80800515 	stw	r2,20(r16)
41029424:	80c00015 	stw	r3,0(r16)
41029428:	003fd506 	br	41029380 <__smakebuf_r+0x90>
4102942c:	80c00a17 	ldw	r3,40(r16)
41029430:	009040f4 	movhi	r2,16643
41029434:	10acea04 	addi	r2,r2,-19544
41029438:	18bfcb1e 	bne	r3,r2,41029368 <__smakebuf_r+0x78>
4102943c:	8080030b 	ldhu	r2,12(r16)
41029440:	00c10004 	movi	r3,1024
41029444:	1825883a 	mov	r18,r3
41029448:	10c4b03a 	or	r2,r2,r3
4102944c:	8080030d 	sth	r2,12(r16)
41029450:	80c01315 	stw	r3,76(r16)
41029454:	003fca06 	br	41029380 <__smakebuf_r+0x90>
41029458:	8100030b 	ldhu	r4,12(r16)
4102945c:	2080800c 	andi	r2,r4,512
41029460:	103fb21e 	bne	r2,zero,4102932c <__smakebuf_r+0x3c>
41029464:	80c010c4 	addi	r3,r16,67
41029468:	21000094 	ori	r4,r4,2
4102946c:	00800044 	movi	r2,1
41029470:	80800515 	stw	r2,20(r16)
41029474:	8100030d 	sth	r4,12(r16)
41029478:	80c00415 	stw	r3,16(r16)
4102947c:	80c00015 	stw	r3,0(r16)
41029480:	003faa06 	br	4102932c <__smakebuf_r+0x3c>

41029484 <_mbrtowc_r>:
41029484:	defffc04 	addi	sp,sp,-16
41029488:	dc400215 	stw	r17,8(sp)
4102948c:	dc000115 	stw	r16,4(sp)
41029490:	dfc00315 	stw	ra,12(sp)
41029494:	dc000417 	ldw	r16,16(sp)
41029498:	2023883a 	mov	r17,r4
4102949c:	30000f26 	beq	r6,zero,410294dc <_mbrtowc_r+0x58>
410294a0:	dc000015 	stw	r16,0(sp)
410294a4:	10295440 	call	41029544 <_mbtowc_r>
410294a8:	1007883a 	mov	r3,r2
410294ac:	00bfffc4 	movi	r2,-1
410294b0:	1809883a 	mov	r4,r3
410294b4:	1880111e 	bne	r3,r2,410294fc <_mbrtowc_r+0x78>
410294b8:	80000015 	stw	zero,0(r16)
410294bc:	00802284 	movi	r2,138
410294c0:	88800015 	stw	r2,0(r17)
410294c4:	2005883a 	mov	r2,r4
410294c8:	dfc00317 	ldw	ra,12(sp)
410294cc:	dc400217 	ldw	r17,8(sp)
410294d0:	dc000117 	ldw	r16,4(sp)
410294d4:	dec00404 	addi	sp,sp,16
410294d8:	f800283a 	ret
410294dc:	000b883a 	mov	r5,zero
410294e0:	01800034 	movhi	r6,0
410294e4:	3182c804 	addi	r6,r6,2848
410294e8:	01c00044 	movi	r7,1
410294ec:	dc000015 	stw	r16,0(sp)
410294f0:	10295440 	call	41029544 <_mbtowc_r>
410294f4:	1007883a 	mov	r3,r2
410294f8:	003fec06 	br	410294ac <_mbrtowc_r+0x28>
410294fc:	1809883a 	mov	r4,r3
41029500:	003ff006 	br	410294c4 <_mbrtowc_r+0x40>

41029504 <mbrtowc>:
41029504:	00800034 	movhi	r2,0
41029508:	108ad704 	addi	r2,r2,11100
4102950c:	2017883a 	mov	r11,r4
41029510:	11000017 	ldw	r4,0(r2)
41029514:	defffe04 	addi	sp,sp,-8
41029518:	3013883a 	mov	r9,r6
4102951c:	2805883a 	mov	r2,r5
41029520:	d9c00015 	stw	r7,0(sp)
41029524:	580b883a 	mov	r5,r11
41029528:	100d883a 	mov	r6,r2
4102952c:	480f883a 	mov	r7,r9
41029530:	dfc00115 	stw	ra,4(sp)
41029534:	10294840 	call	41029484 <_mbrtowc_r>
41029538:	dfc00117 	ldw	ra,4(sp)
4102953c:	dec00204 	addi	sp,sp,8
41029540:	f800283a 	ret

41029544 <_mbtowc_r>:
41029544:	deffff04 	addi	sp,sp,-4
41029548:	0005883a 	mov	r2,zero
4102954c:	28000326 	beq	r5,zero,4102955c <_mbtowc_r+0x18>
41029550:	3000041e 	bne	r6,zero,41029564 <_mbtowc_r+0x20>
41029554:	dec00104 	addi	sp,sp,4
41029558:	f800283a 	ret
4102955c:	d80b883a 	mov	r5,sp
41029560:	303ffc26 	beq	r6,zero,41029554 <_mbtowc_r+0x10>
41029564:	00bfff84 	movi	r2,-2
41029568:	383ffa26 	beq	r7,zero,41029554 <_mbtowc_r+0x10>
4102956c:	30800003 	ldbu	r2,0(r6)
41029570:	28800015 	stw	r2,0(r5)
41029574:	30c00003 	ldbu	r3,0(r6)
41029578:	1804c03a 	cmpne	r2,r3,zero
4102957c:	dec00104 	addi	sp,sp,4
41029580:	f800283a 	ret

41029584 <memchr>:
41029584:	008000c4 	movi	r2,3
41029588:	29403fcc 	andi	r5,r5,255
4102958c:	2007883a 	mov	r3,r4
41029590:	1180022e 	bgeu	r2,r6,4102959c <memchr+0x18>
41029594:	2084703a 	and	r2,r4,r2
41029598:	10000b26 	beq	r2,zero,410295c8 <memchr+0x44>
4102959c:	313fffc4 	addi	r4,r6,-1
410295a0:	3000051e 	bne	r6,zero,410295b8 <memchr+0x34>
410295a4:	00002c06 	br	41029658 <memchr+0xd4>
410295a8:	213fffc4 	addi	r4,r4,-1
410295ac:	00bfffc4 	movi	r2,-1
410295b0:	18c00044 	addi	r3,r3,1
410295b4:	20802826 	beq	r4,r2,41029658 <memchr+0xd4>
410295b8:	18800003 	ldbu	r2,0(r3)
410295bc:	28bffa1e 	bne	r5,r2,410295a8 <memchr+0x24>
410295c0:	1805883a 	mov	r2,r3
410295c4:	f800283a 	ret
410295c8:	0011883a 	mov	r8,zero
410295cc:	0007883a 	mov	r3,zero
410295d0:	01c00104 	movi	r7,4
410295d4:	4004923a 	slli	r2,r8,8
410295d8:	18c00044 	addi	r3,r3,1
410295dc:	1151883a 	add	r8,r2,r5
410295e0:	19fffc1e 	bne	r3,r7,410295d4 <memchr+0x50>
410295e4:	02bfbff4 	movhi	r10,65279
410295e8:	52bfbfc4 	addi	r10,r10,-257
410295ec:	02602074 	movhi	r9,32897
410295f0:	4a602004 	addi	r9,r9,-32640
410295f4:	02c000c4 	movi	r11,3
410295f8:	20800017 	ldw	r2,0(r4)
410295fc:	31bfff04 	addi	r6,r6,-4
41029600:	200f883a 	mov	r7,r4
41029604:	1204f03a 	xor	r2,r2,r8
41029608:	1287883a 	add	r3,r2,r10
4102960c:	1a46703a 	and	r3,r3,r9
41029610:	0084303a 	nor	r2,zero,r2
41029614:	10c4703a 	and	r2,r2,r3
41029618:	10000b26 	beq	r2,zero,41029648 <memchr+0xc4>
4102961c:	20800003 	ldbu	r2,0(r4)
41029620:	28800f26 	beq	r5,r2,41029660 <memchr+0xdc>
41029624:	20800043 	ldbu	r2,1(r4)
41029628:	21c00044 	addi	r7,r4,1
4102962c:	28800c26 	beq	r5,r2,41029660 <memchr+0xdc>
41029630:	20800083 	ldbu	r2,2(r4)
41029634:	21c00084 	addi	r7,r4,2
41029638:	28800926 	beq	r5,r2,41029660 <memchr+0xdc>
4102963c:	208000c3 	ldbu	r2,3(r4)
41029640:	21c000c4 	addi	r7,r4,3
41029644:	28800626 	beq	r5,r2,41029660 <memchr+0xdc>
41029648:	21000104 	addi	r4,r4,4
4102964c:	59bfea36 	bltu	r11,r6,410295f8 <memchr+0x74>
41029650:	2007883a 	mov	r3,r4
41029654:	003fd106 	br	4102959c <memchr+0x18>
41029658:	0005883a 	mov	r2,zero
4102965c:	f800283a 	ret
41029660:	3805883a 	mov	r2,r7
41029664:	f800283a 	ret

41029668 <memmove>:
41029668:	2807883a 	mov	r3,r5
4102966c:	2011883a 	mov	r8,r4
41029670:	29000c2e 	bgeu	r5,r4,410296a4 <memmove+0x3c>
41029674:	298f883a 	add	r7,r5,r6
41029678:	21c00a2e 	bgeu	r4,r7,410296a4 <memmove+0x3c>
4102967c:	30000726 	beq	r6,zero,4102969c <memmove+0x34>
41029680:	2187883a 	add	r3,r4,r6
41029684:	198dc83a 	sub	r6,r3,r6
41029688:	39ffffc4 	addi	r7,r7,-1
4102968c:	38800003 	ldbu	r2,0(r7)
41029690:	18ffffc4 	addi	r3,r3,-1
41029694:	18800005 	stb	r2,0(r3)
41029698:	19bffb1e 	bne	r3,r6,41029688 <memmove+0x20>
4102969c:	2005883a 	mov	r2,r4
410296a0:	f800283a 	ret
410296a4:	01c003c4 	movi	r7,15
410296a8:	39800a36 	bltu	r7,r6,410296d4 <memmove+0x6c>
410296ac:	303ffb26 	beq	r6,zero,4102969c <memmove+0x34>
410296b0:	400f883a 	mov	r7,r8
410296b4:	320d883a 	add	r6,r6,r8
410296b8:	28800003 	ldbu	r2,0(r5)
410296bc:	29400044 	addi	r5,r5,1
410296c0:	38800005 	stb	r2,0(r7)
410296c4:	39c00044 	addi	r7,r7,1
410296c8:	39bffb1e 	bne	r7,r6,410296b8 <memmove+0x50>
410296cc:	2005883a 	mov	r2,r4
410296d0:	f800283a 	ret
410296d4:	1904b03a 	or	r2,r3,r4
410296d8:	108000cc 	andi	r2,r2,3
410296dc:	103ff31e 	bne	r2,zero,410296ac <memmove+0x44>
410296e0:	3811883a 	mov	r8,r7
410296e4:	180b883a 	mov	r5,r3
410296e8:	200f883a 	mov	r7,r4
410296ec:	28c00017 	ldw	r3,0(r5)
410296f0:	31bffc04 	addi	r6,r6,-16
410296f4:	38c00015 	stw	r3,0(r7)
410296f8:	28800117 	ldw	r2,4(r5)
410296fc:	38800115 	stw	r2,4(r7)
41029700:	28c00217 	ldw	r3,8(r5)
41029704:	38c00215 	stw	r3,8(r7)
41029708:	28800317 	ldw	r2,12(r5)
4102970c:	29400404 	addi	r5,r5,16
41029710:	38800315 	stw	r2,12(r7)
41029714:	39c00404 	addi	r7,r7,16
41029718:	41bff436 	bltu	r8,r6,410296ec <memmove+0x84>
4102971c:	008000c4 	movi	r2,3
41029720:	1180072e 	bgeu	r2,r6,41029740 <memmove+0xd8>
41029724:	1007883a 	mov	r3,r2
41029728:	28800017 	ldw	r2,0(r5)
4102972c:	31bfff04 	addi	r6,r6,-4
41029730:	29400104 	addi	r5,r5,4
41029734:	38800015 	stw	r2,0(r7)
41029738:	39c00104 	addi	r7,r7,4
4102973c:	19bffa36 	bltu	r3,r6,41029728 <memmove+0xc0>
41029740:	3811883a 	mov	r8,r7
41029744:	003fd906 	br	410296ac <memmove+0x44>

41029748 <memset>:
41029748:	008000c4 	movi	r2,3
4102974c:	29403fcc 	andi	r5,r5,255
41029750:	2007883a 	mov	r3,r4
41029754:	1180022e 	bgeu	r2,r6,41029760 <memset+0x18>
41029758:	2084703a 	and	r2,r4,r2
4102975c:	10000826 	beq	r2,zero,41029780 <memset+0x38>
41029760:	30000526 	beq	r6,zero,41029778 <memset+0x30>
41029764:	2805883a 	mov	r2,r5
41029768:	30cd883a 	add	r6,r6,r3
4102976c:	18800005 	stb	r2,0(r3)
41029770:	18c00044 	addi	r3,r3,1
41029774:	19bffd1e 	bne	r3,r6,4102976c <memset+0x24>
41029778:	2005883a 	mov	r2,r4
4102977c:	f800283a 	ret
41029780:	2804923a 	slli	r2,r5,8
41029784:	020003c4 	movi	r8,15
41029788:	200f883a 	mov	r7,r4
4102978c:	2884b03a 	or	r2,r5,r2
41029790:	1006943a 	slli	r3,r2,16
41029794:	10c6b03a 	or	r3,r2,r3
41029798:	41800a2e 	bgeu	r8,r6,410297c4 <memset+0x7c>
4102979c:	4005883a 	mov	r2,r8
410297a0:	31bffc04 	addi	r6,r6,-16
410297a4:	38c00015 	stw	r3,0(r7)
410297a8:	38c00115 	stw	r3,4(r7)
410297ac:	38c00215 	stw	r3,8(r7)
410297b0:	38c00315 	stw	r3,12(r7)
410297b4:	39c00404 	addi	r7,r7,16
410297b8:	11bff936 	bltu	r2,r6,410297a0 <memset+0x58>
410297bc:	008000c4 	movi	r2,3
410297c0:	1180052e 	bgeu	r2,r6,410297d8 <memset+0x90>
410297c4:	31bfff04 	addi	r6,r6,-4
410297c8:	008000c4 	movi	r2,3
410297cc:	38c00015 	stw	r3,0(r7)
410297d0:	39c00104 	addi	r7,r7,4
410297d4:	11bffb36 	bltu	r2,r6,410297c4 <memset+0x7c>
410297d8:	3807883a 	mov	r3,r7
410297dc:	003fe006 	br	41029760 <memset+0x18>

410297e0 <_Bfree>:
410297e0:	28000826 	beq	r5,zero,41029804 <_Bfree+0x24>
410297e4:	28800117 	ldw	r2,4(r5)
410297e8:	21001317 	ldw	r4,76(r4)
410297ec:	1085883a 	add	r2,r2,r2
410297f0:	1085883a 	add	r2,r2,r2
410297f4:	1105883a 	add	r2,r2,r4
410297f8:	10c00017 	ldw	r3,0(r2)
410297fc:	28c00015 	stw	r3,0(r5)
41029800:	11400015 	stw	r5,0(r2)
41029804:	f800283a 	ret

41029808 <__hi0bits>:
41029808:	20bfffec 	andhi	r2,r4,65535
4102980c:	10001426 	beq	r2,zero,41029860 <__hi0bits+0x58>
41029810:	0007883a 	mov	r3,zero
41029814:	20bfc02c 	andhi	r2,r4,65280
41029818:	1000021e 	bne	r2,zero,41029824 <__hi0bits+0x1c>
4102981c:	2008923a 	slli	r4,r4,8
41029820:	18c00204 	addi	r3,r3,8
41029824:	20bc002c 	andhi	r2,r4,61440
41029828:	1000021e 	bne	r2,zero,41029834 <__hi0bits+0x2c>
4102982c:	2008913a 	slli	r4,r4,4
41029830:	18c00104 	addi	r3,r3,4
41029834:	20b0002c 	andhi	r2,r4,49152
41029838:	1000031e 	bne	r2,zero,41029848 <__hi0bits+0x40>
4102983c:	2105883a 	add	r2,r4,r4
41029840:	18c00084 	addi	r3,r3,2
41029844:	1089883a 	add	r4,r2,r2
41029848:	20000316 	blt	r4,zero,41029858 <__hi0bits+0x50>
4102984c:	2090002c 	andhi	r2,r4,16384
41029850:	10000626 	beq	r2,zero,4102986c <__hi0bits+0x64>
41029854:	18c00044 	addi	r3,r3,1
41029858:	1805883a 	mov	r2,r3
4102985c:	f800283a 	ret
41029860:	2008943a 	slli	r4,r4,16
41029864:	00c00404 	movi	r3,16
41029868:	003fea06 	br	41029814 <__hi0bits+0xc>
4102986c:	00c00804 	movi	r3,32
41029870:	1805883a 	mov	r2,r3
41029874:	f800283a 	ret

41029878 <__lo0bits>:
41029878:	20c00017 	ldw	r3,0(r4)
4102987c:	188001cc 	andi	r2,r3,7
41029880:	10000a26 	beq	r2,zero,410298ac <__lo0bits+0x34>
41029884:	1880004c 	andi	r2,r3,1
41029888:	1005003a 	cmpeq	r2,r2,zero
4102988c:	10002126 	beq	r2,zero,41029914 <__lo0bits+0x9c>
41029890:	1880008c 	andi	r2,r3,2
41029894:	1000251e 	bne	r2,zero,4102992c <__lo0bits+0xb4>
41029898:	1804d0ba 	srli	r2,r3,2
4102989c:	01400084 	movi	r5,2
410298a0:	20800015 	stw	r2,0(r4)
410298a4:	2805883a 	mov	r2,r5
410298a8:	f800283a 	ret
410298ac:	18bfffcc 	andi	r2,r3,65535
410298b0:	10001526 	beq	r2,zero,41029908 <__lo0bits+0x90>
410298b4:	000b883a 	mov	r5,zero
410298b8:	18803fcc 	andi	r2,r3,255
410298bc:	1000021e 	bne	r2,zero,410298c8 <__lo0bits+0x50>
410298c0:	1806d23a 	srli	r3,r3,8
410298c4:	29400204 	addi	r5,r5,8
410298c8:	188003cc 	andi	r2,r3,15
410298cc:	1000021e 	bne	r2,zero,410298d8 <__lo0bits+0x60>
410298d0:	1806d13a 	srli	r3,r3,4
410298d4:	29400104 	addi	r5,r5,4
410298d8:	188000cc 	andi	r2,r3,3
410298dc:	1000021e 	bne	r2,zero,410298e8 <__lo0bits+0x70>
410298e0:	1806d0ba 	srli	r3,r3,2
410298e4:	29400084 	addi	r5,r5,2
410298e8:	1880004c 	andi	r2,r3,1
410298ec:	1000031e 	bne	r2,zero,410298fc <__lo0bits+0x84>
410298f0:	1806d07a 	srli	r3,r3,1
410298f4:	18000a26 	beq	r3,zero,41029920 <__lo0bits+0xa8>
410298f8:	29400044 	addi	r5,r5,1
410298fc:	2805883a 	mov	r2,r5
41029900:	20c00015 	stw	r3,0(r4)
41029904:	f800283a 	ret
41029908:	1806d43a 	srli	r3,r3,16
4102990c:	01400404 	movi	r5,16
41029910:	003fe906 	br	410298b8 <__lo0bits+0x40>
41029914:	000b883a 	mov	r5,zero
41029918:	2805883a 	mov	r2,r5
4102991c:	f800283a 	ret
41029920:	01400804 	movi	r5,32
41029924:	2805883a 	mov	r2,r5
41029928:	f800283a 	ret
4102992c:	1804d07a 	srli	r2,r3,1
41029930:	01400044 	movi	r5,1
41029934:	20800015 	stw	r2,0(r4)
41029938:	003fda06 	br	410298a4 <__lo0bits+0x2c>

4102993c <__mcmp>:
4102993c:	20800417 	ldw	r2,16(r4)
41029940:	28c00417 	ldw	r3,16(r5)
41029944:	10cfc83a 	sub	r7,r2,r3
41029948:	38000c1e 	bne	r7,zero,4102997c <__mcmp+0x40>
4102994c:	18c5883a 	add	r2,r3,r3
41029950:	1085883a 	add	r2,r2,r2
41029954:	10c00504 	addi	r3,r2,20
41029958:	21000504 	addi	r4,r4,20
4102995c:	28cb883a 	add	r5,r5,r3
41029960:	2085883a 	add	r2,r4,r2
41029964:	10bfff04 	addi	r2,r2,-4
41029968:	297fff04 	addi	r5,r5,-4
4102996c:	11800017 	ldw	r6,0(r2)
41029970:	28c00017 	ldw	r3,0(r5)
41029974:	30c0031e 	bne	r6,r3,41029984 <__mcmp+0x48>
41029978:	20bffa36 	bltu	r4,r2,41029964 <__mcmp+0x28>
4102997c:	3805883a 	mov	r2,r7
41029980:	f800283a 	ret
41029984:	30c00336 	bltu	r6,r3,41029994 <__mcmp+0x58>
41029988:	01c00044 	movi	r7,1
4102998c:	3805883a 	mov	r2,r7
41029990:	f800283a 	ret
41029994:	01ffffc4 	movi	r7,-1
41029998:	003ff806 	br	4102997c <__mcmp+0x40>

4102999c <__ulp>:
4102999c:	295ffc2c 	andhi	r5,r5,32752
410299a0:	013f3034 	movhi	r4,64704
410299a4:	290b883a 	add	r5,r5,r4
410299a8:	0145c83a 	sub	r2,zero,r5
410299ac:	1007d53a 	srai	r3,r2,20
410299b0:	000d883a 	mov	r6,zero
410299b4:	0140040e 	bge	zero,r5,410299c8 <__ulp+0x2c>
410299b8:	280f883a 	mov	r7,r5
410299bc:	3807883a 	mov	r3,r7
410299c0:	3005883a 	mov	r2,r6
410299c4:	f800283a 	ret
410299c8:	008004c4 	movi	r2,19
410299cc:	193ffb04 	addi	r4,r3,-20
410299d0:	10c00c0e 	bge	r2,r3,41029a04 <__ulp+0x68>
410299d4:	008007c4 	movi	r2,31
410299d8:	1107c83a 	sub	r3,r2,r4
410299dc:	00800784 	movi	r2,30
410299e0:	01400044 	movi	r5,1
410299e4:	11000216 	blt	r2,r4,410299f0 <__ulp+0x54>
410299e8:	00800044 	movi	r2,1
410299ec:	10ca983a 	sll	r5,r2,r3
410299f0:	000f883a 	mov	r7,zero
410299f4:	280d883a 	mov	r6,r5
410299f8:	3807883a 	mov	r3,r7
410299fc:	3005883a 	mov	r2,r6
41029a00:	f800283a 	ret
41029a04:	00800234 	movhi	r2,8
41029a08:	10cfd83a 	sra	r7,r2,r3
41029a0c:	000d883a 	mov	r6,zero
41029a10:	3005883a 	mov	r2,r6
41029a14:	3807883a 	mov	r3,r7
41029a18:	f800283a 	ret

41029a1c <__b2d>:
41029a1c:	20800417 	ldw	r2,16(r4)
41029a20:	defff904 	addi	sp,sp,-28
41029a24:	dd000415 	stw	r20,16(sp)
41029a28:	1085883a 	add	r2,r2,r2
41029a2c:	25000504 	addi	r20,r4,20
41029a30:	1085883a 	add	r2,r2,r2
41029a34:	dc000015 	stw	r16,0(sp)
41029a38:	a0a1883a 	add	r16,r20,r2
41029a3c:	dd400515 	stw	r21,20(sp)
41029a40:	857fff17 	ldw	r21,-4(r16)
41029a44:	dc400115 	stw	r17,4(sp)
41029a48:	dfc00615 	stw	ra,24(sp)
41029a4c:	a809883a 	mov	r4,r21
41029a50:	2823883a 	mov	r17,r5
41029a54:	dcc00315 	stw	r19,12(sp)
41029a58:	dc800215 	stw	r18,8(sp)
41029a5c:	10298080 	call	41029808 <__hi0bits>
41029a60:	100b883a 	mov	r5,r2
41029a64:	00800804 	movi	r2,32
41029a68:	1145c83a 	sub	r2,r2,r5
41029a6c:	88800015 	stw	r2,0(r17)
41029a70:	00800284 	movi	r2,10
41029a74:	80ffff04 	addi	r3,r16,-4
41029a78:	11401416 	blt	r2,r5,41029acc <__b2d+0xb0>
41029a7c:	008002c4 	movi	r2,11
41029a80:	1149c83a 	sub	r4,r2,r5
41029a84:	a0c02736 	bltu	r20,r3,41029b24 <__b2d+0x108>
41029a88:	000d883a 	mov	r6,zero
41029a8c:	28800544 	addi	r2,r5,21
41029a90:	a906d83a 	srl	r3,r21,r4
41029a94:	a884983a 	sll	r2,r21,r2
41029a98:	1ccffc34 	orhi	r19,r3,16368
41029a9c:	11a4b03a 	or	r18,r2,r6
41029aa0:	9005883a 	mov	r2,r18
41029aa4:	9807883a 	mov	r3,r19
41029aa8:	dfc00617 	ldw	ra,24(sp)
41029aac:	dd400517 	ldw	r21,20(sp)
41029ab0:	dd000417 	ldw	r20,16(sp)
41029ab4:	dcc00317 	ldw	r19,12(sp)
41029ab8:	dc800217 	ldw	r18,8(sp)
41029abc:	dc400117 	ldw	r17,4(sp)
41029ac0:	dc000017 	ldw	r16,0(sp)
41029ac4:	dec00704 	addi	sp,sp,28
41029ac8:	f800283a 	ret
41029acc:	a0c00e36 	bltu	r20,r3,41029b08 <__b2d+0xec>
41029ad0:	293ffd44 	addi	r4,r5,-11
41029ad4:	000d883a 	mov	r6,zero
41029ad8:	20000f26 	beq	r4,zero,41029b18 <__b2d+0xfc>
41029adc:	00800804 	movi	r2,32
41029ae0:	110bc83a 	sub	r5,r2,r4
41029ae4:	a0c01236 	bltu	r20,r3,41029b30 <__b2d+0x114>
41029ae8:	000f883a 	mov	r7,zero
41029aec:	a904983a 	sll	r2,r21,r4
41029af0:	3146d83a 	srl	r3,r6,r5
41029af4:	3108983a 	sll	r4,r6,r4
41029af8:	108ffc34 	orhi	r2,r2,16368
41029afc:	18a6b03a 	or	r19,r3,r2
41029b00:	3924b03a 	or	r18,r7,r4
41029b04:	003fe606 	br	41029aa0 <__b2d+0x84>
41029b08:	293ffd44 	addi	r4,r5,-11
41029b0c:	81bffe17 	ldw	r6,-8(r16)
41029b10:	80fffe04 	addi	r3,r16,-8
41029b14:	203ff11e 	bne	r4,zero,41029adc <__b2d+0xc0>
41029b18:	accffc34 	orhi	r19,r21,16368
41029b1c:	3025883a 	mov	r18,r6
41029b20:	003fdf06 	br	41029aa0 <__b2d+0x84>
41029b24:	18bfff17 	ldw	r2,-4(r3)
41029b28:	110cd83a 	srl	r6,r2,r4
41029b2c:	003fd706 	br	41029a8c <__b2d+0x70>
41029b30:	18bfff17 	ldw	r2,-4(r3)
41029b34:	114ed83a 	srl	r7,r2,r5
41029b38:	003fec06 	br	41029aec <__b2d+0xd0>

41029b3c <__ratio>:
41029b3c:	defff904 	addi	sp,sp,-28
41029b40:	dc400215 	stw	r17,8(sp)
41029b44:	2823883a 	mov	r17,r5
41029b48:	d80b883a 	mov	r5,sp
41029b4c:	dfc00615 	stw	ra,24(sp)
41029b50:	dd000515 	stw	r20,20(sp)
41029b54:	dcc00415 	stw	r19,16(sp)
41029b58:	dc800315 	stw	r18,12(sp)
41029b5c:	2025883a 	mov	r18,r4
41029b60:	1029a1c0 	call	41029a1c <__b2d>
41029b64:	8809883a 	mov	r4,r17
41029b68:	d9400104 	addi	r5,sp,4
41029b6c:	1027883a 	mov	r19,r2
41029b70:	1829883a 	mov	r20,r3
41029b74:	1029a1c0 	call	41029a1c <__b2d>
41029b78:	89000417 	ldw	r4,16(r17)
41029b7c:	91c00417 	ldw	r7,16(r18)
41029b80:	d9800117 	ldw	r6,4(sp)
41029b84:	180b883a 	mov	r5,r3
41029b88:	390fc83a 	sub	r7,r7,r4
41029b8c:	1009883a 	mov	r4,r2
41029b90:	d8800017 	ldw	r2,0(sp)
41029b94:	380e917a 	slli	r7,r7,5
41029b98:	2011883a 	mov	r8,r4
41029b9c:	1185c83a 	sub	r2,r2,r6
41029ba0:	11c5883a 	add	r2,r2,r7
41029ba4:	1006953a 	slli	r3,r2,20
41029ba8:	2813883a 	mov	r9,r5
41029bac:	00800d0e 	bge	zero,r2,41029be4 <__ratio+0xa8>
41029bb0:	1d29883a 	add	r20,r3,r20
41029bb4:	a00b883a 	mov	r5,r20
41029bb8:	480f883a 	mov	r7,r9
41029bbc:	9809883a 	mov	r4,r19
41029bc0:	400d883a 	mov	r6,r8
41029bc4:	10301380 	call	41030138 <__divdf3>
41029bc8:	dfc00617 	ldw	ra,24(sp)
41029bcc:	dd000517 	ldw	r20,20(sp)
41029bd0:	dcc00417 	ldw	r19,16(sp)
41029bd4:	dc800317 	ldw	r18,12(sp)
41029bd8:	dc400217 	ldw	r17,8(sp)
41029bdc:	dec00704 	addi	sp,sp,28
41029be0:	f800283a 	ret
41029be4:	28d3c83a 	sub	r9,r5,r3
41029be8:	003ff206 	br	41029bb4 <__ratio+0x78>

41029bec <_mprec_log10>:
41029bec:	defffe04 	addi	sp,sp,-8
41029bf0:	008005c4 	movi	r2,23
41029bf4:	dc000015 	stw	r16,0(sp)
41029bf8:	dfc00115 	stw	ra,4(sp)
41029bfc:	2021883a 	mov	r16,r4
41029c00:	11000c16 	blt	r2,r4,41029c34 <_mprec_log10+0x48>
41029c04:	200490fa 	slli	r2,r4,3
41029c08:	00c00034 	movhi	r3,0
41029c0c:	18c39804 	addi	r3,r3,3680
41029c10:	10c5883a 	add	r2,r2,r3
41029c14:	12400117 	ldw	r9,4(r2)
41029c18:	12000017 	ldw	r8,0(r2)
41029c1c:	4807883a 	mov	r3,r9
41029c20:	4005883a 	mov	r2,r8
41029c24:	dfc00117 	ldw	ra,4(sp)
41029c28:	dc000017 	ldw	r16,0(sp)
41029c2c:	dec00204 	addi	sp,sp,8
41029c30:	f800283a 	ret
41029c34:	0011883a 	mov	r8,zero
41029c38:	024ffc34 	movhi	r9,16368
41029c3c:	0005883a 	mov	r2,zero
41029c40:	00d00934 	movhi	r3,16420
41029c44:	480b883a 	mov	r5,r9
41029c48:	4009883a 	mov	r4,r8
41029c4c:	180f883a 	mov	r7,r3
41029c50:	100d883a 	mov	r6,r2
41029c54:	102fd840 	call	4102fd84 <__muldf3>
41029c58:	843fffc4 	addi	r16,r16,-1
41029c5c:	1011883a 	mov	r8,r2
41029c60:	1813883a 	mov	r9,r3
41029c64:	803ff51e 	bne	r16,zero,41029c3c <_mprec_log10+0x50>
41029c68:	4005883a 	mov	r2,r8
41029c6c:	4807883a 	mov	r3,r9
41029c70:	dfc00117 	ldw	ra,4(sp)
41029c74:	dc000017 	ldw	r16,0(sp)
41029c78:	dec00204 	addi	sp,sp,8
41029c7c:	f800283a 	ret

41029c80 <__copybits>:
41029c80:	297fffc4 	addi	r5,r5,-1
41029c84:	30800417 	ldw	r2,16(r6)
41029c88:	280bd17a 	srai	r5,r5,5
41029c8c:	31800504 	addi	r6,r6,20
41029c90:	1085883a 	add	r2,r2,r2
41029c94:	294b883a 	add	r5,r5,r5
41029c98:	294b883a 	add	r5,r5,r5
41029c9c:	1085883a 	add	r2,r2,r2
41029ca0:	290b883a 	add	r5,r5,r4
41029ca4:	3087883a 	add	r3,r6,r2
41029ca8:	29400104 	addi	r5,r5,4
41029cac:	30c0052e 	bgeu	r6,r3,41029cc4 <__copybits+0x44>
41029cb0:	30800017 	ldw	r2,0(r6)
41029cb4:	31800104 	addi	r6,r6,4
41029cb8:	20800015 	stw	r2,0(r4)
41029cbc:	21000104 	addi	r4,r4,4
41029cc0:	30fffb36 	bltu	r6,r3,41029cb0 <__copybits+0x30>
41029cc4:	2140032e 	bgeu	r4,r5,41029cd4 <__copybits+0x54>
41029cc8:	20000015 	stw	zero,0(r4)
41029ccc:	21000104 	addi	r4,r4,4
41029cd0:	217ffd36 	bltu	r4,r5,41029cc8 <__copybits+0x48>
41029cd4:	f800283a 	ret

41029cd8 <__any_on>:
41029cd8:	20800417 	ldw	r2,16(r4)
41029cdc:	2807d17a 	srai	r3,r5,5
41029ce0:	21000504 	addi	r4,r4,20
41029ce4:	10c00d0e 	bge	r2,r3,41029d1c <__any_on+0x44>
41029ce8:	1085883a 	add	r2,r2,r2
41029cec:	1085883a 	add	r2,r2,r2
41029cf0:	208d883a 	add	r6,r4,r2
41029cf4:	2180182e 	bgeu	r4,r6,41029d58 <__any_on+0x80>
41029cf8:	30bfff17 	ldw	r2,-4(r6)
41029cfc:	30ffff04 	addi	r3,r6,-4
41029d00:	1000041e 	bne	r2,zero,41029d14 <__any_on+0x3c>
41029d04:	20c0142e 	bgeu	r4,r3,41029d58 <__any_on+0x80>
41029d08:	18ffff04 	addi	r3,r3,-4
41029d0c:	18800017 	ldw	r2,0(r3)
41029d10:	103ffc26 	beq	r2,zero,41029d04 <__any_on+0x2c>
41029d14:	00800044 	movi	r2,1
41029d18:	f800283a 	ret
41029d1c:	18800a0e 	bge	r3,r2,41029d48 <__any_on+0x70>
41029d20:	294007cc 	andi	r5,r5,31
41029d24:	28000826 	beq	r5,zero,41029d48 <__any_on+0x70>
41029d28:	18c5883a 	add	r2,r3,r3
41029d2c:	1085883a 	add	r2,r2,r2
41029d30:	208d883a 	add	r6,r4,r2
41029d34:	30c00017 	ldw	r3,0(r6)
41029d38:	1944d83a 	srl	r2,r3,r5
41029d3c:	1144983a 	sll	r2,r2,r5
41029d40:	18bff41e 	bne	r3,r2,41029d14 <__any_on+0x3c>
41029d44:	003feb06 	br	41029cf4 <__any_on+0x1c>
41029d48:	18c5883a 	add	r2,r3,r3
41029d4c:	1085883a 	add	r2,r2,r2
41029d50:	208d883a 	add	r6,r4,r2
41029d54:	003fe706 	br	41029cf4 <__any_on+0x1c>
41029d58:	0005883a 	mov	r2,zero
41029d5c:	f800283a 	ret

41029d60 <_Balloc>:
41029d60:	20c01317 	ldw	r3,76(r4)
41029d64:	defffb04 	addi	sp,sp,-20
41029d68:	dcc00315 	stw	r19,12(sp)
41029d6c:	dc800215 	stw	r18,8(sp)
41029d70:	dfc00415 	stw	ra,16(sp)
41029d74:	2825883a 	mov	r18,r5
41029d78:	dc400115 	stw	r17,4(sp)
41029d7c:	dc000015 	stw	r16,0(sp)
41029d80:	2027883a 	mov	r19,r4
41029d84:	01800404 	movi	r6,16
41029d88:	01400104 	movi	r5,4
41029d8c:	18001726 	beq	r3,zero,41029dec <_Balloc+0x8c>
41029d90:	01400044 	movi	r5,1
41029d94:	9485883a 	add	r2,r18,r18
41029d98:	2ca2983a 	sll	r17,r5,r18
41029d9c:	1085883a 	add	r2,r2,r2
41029da0:	10c7883a 	add	r3,r2,r3
41029da4:	1c000017 	ldw	r16,0(r3)
41029da8:	8c4d883a 	add	r6,r17,r17
41029dac:	318d883a 	add	r6,r6,r6
41029db0:	9809883a 	mov	r4,r19
41029db4:	31800504 	addi	r6,r6,20
41029db8:	80001226 	beq	r16,zero,41029e04 <_Balloc+0xa4>
41029dbc:	80800017 	ldw	r2,0(r16)
41029dc0:	18800015 	stw	r2,0(r3)
41029dc4:	80000415 	stw	zero,16(r16)
41029dc8:	80000315 	stw	zero,12(r16)
41029dcc:	8005883a 	mov	r2,r16
41029dd0:	dfc00417 	ldw	ra,16(sp)
41029dd4:	dcc00317 	ldw	r19,12(sp)
41029dd8:	dc800217 	ldw	r18,8(sp)
41029ddc:	dc400117 	ldw	r17,4(sp)
41029de0:	dc000017 	ldw	r16,0(sp)
41029de4:	dec00504 	addi	sp,sp,20
41029de8:	f800283a 	ret
41029dec:	102db440 	call	4102db44 <_calloc_r>
41029df0:	1007883a 	mov	r3,r2
41029df4:	0021883a 	mov	r16,zero
41029df8:	98801315 	stw	r2,76(r19)
41029dfc:	103fe41e 	bne	r2,zero,41029d90 <_Balloc+0x30>
41029e00:	003ff206 	br	41029dcc <_Balloc+0x6c>
41029e04:	102db440 	call	4102db44 <_calloc_r>
41029e08:	103ff026 	beq	r2,zero,41029dcc <_Balloc+0x6c>
41029e0c:	1021883a 	mov	r16,r2
41029e10:	14800115 	stw	r18,4(r2)
41029e14:	14400215 	stw	r17,8(r2)
41029e18:	003fea06 	br	41029dc4 <_Balloc+0x64>

41029e1c <__d2b>:
41029e1c:	defff504 	addi	sp,sp,-44
41029e20:	dcc00515 	stw	r19,20(sp)
41029e24:	04c00044 	movi	r19,1
41029e28:	dc000215 	stw	r16,8(sp)
41029e2c:	2821883a 	mov	r16,r5
41029e30:	980b883a 	mov	r5,r19
41029e34:	ddc00915 	stw	r23,36(sp)
41029e38:	dd800815 	stw	r22,32(sp)
41029e3c:	dd400715 	stw	r21,28(sp)
41029e40:	dd000615 	stw	r20,24(sp)
41029e44:	dc800415 	stw	r18,16(sp)
41029e48:	dc400315 	stw	r17,12(sp)
41029e4c:	dfc00a15 	stw	ra,40(sp)
41029e50:	3023883a 	mov	r17,r6
41029e54:	382d883a 	mov	r22,r7
41029e58:	ddc00b17 	ldw	r23,44(sp)
41029e5c:	1029d600 	call	41029d60 <_Balloc>
41029e60:	1025883a 	mov	r18,r2
41029e64:	00a00034 	movhi	r2,32768
41029e68:	10bfffc4 	addi	r2,r2,-1
41029e6c:	8888703a 	and	r4,r17,r2
41029e70:	202ad53a 	srli	r21,r4,20
41029e74:	00800434 	movhi	r2,16
41029e78:	10bfffc4 	addi	r2,r2,-1
41029e7c:	8886703a 	and	r3,r17,r2
41029e80:	a829003a 	cmpeq	r20,r21,zero
41029e84:	800b883a 	mov	r5,r16
41029e88:	d8c00115 	stw	r3,4(sp)
41029e8c:	94000504 	addi	r16,r18,20
41029e90:	a000021e 	bne	r20,zero,41029e9c <__d2b+0x80>
41029e94:	18c00434 	orhi	r3,r3,16
41029e98:	d8c00115 	stw	r3,4(sp)
41029e9c:	28002726 	beq	r5,zero,41029f3c <__d2b+0x120>
41029ea0:	d809883a 	mov	r4,sp
41029ea4:	d9400015 	stw	r5,0(sp)
41029ea8:	10298780 	call	41029878 <__lo0bits>
41029eac:	100d883a 	mov	r6,r2
41029eb0:	10003526 	beq	r2,zero,41029f88 <__d2b+0x16c>
41029eb4:	d8c00117 	ldw	r3,4(sp)
41029eb8:	00800804 	movi	r2,32
41029ebc:	1185c83a 	sub	r2,r2,r6
41029ec0:	d9000017 	ldw	r4,0(sp)
41029ec4:	1886983a 	sll	r3,r3,r2
41029ec8:	1906b03a 	or	r3,r3,r4
41029ecc:	90c00515 	stw	r3,20(r18)
41029ed0:	d8c00117 	ldw	r3,4(sp)
41029ed4:	1986d83a 	srl	r3,r3,r6
41029ed8:	d8c00115 	stw	r3,4(sp)
41029edc:	180b003a 	cmpeq	r5,r3,zero
41029ee0:	00800084 	movi	r2,2
41029ee4:	114bc83a 	sub	r5,r2,r5
41029ee8:	80c00115 	stw	r3,4(r16)
41029eec:	91400415 	stw	r5,16(r18)
41029ef0:	a0001a1e 	bne	r20,zero,41029f5c <__d2b+0x140>
41029ef4:	3545883a 	add	r2,r6,r21
41029ef8:	10bef344 	addi	r2,r2,-1075
41029efc:	00c00d44 	movi	r3,53
41029f00:	b0800015 	stw	r2,0(r22)
41029f04:	1987c83a 	sub	r3,r3,r6
41029f08:	b8c00015 	stw	r3,0(r23)
41029f0c:	9005883a 	mov	r2,r18
41029f10:	dfc00a17 	ldw	ra,40(sp)
41029f14:	ddc00917 	ldw	r23,36(sp)
41029f18:	dd800817 	ldw	r22,32(sp)
41029f1c:	dd400717 	ldw	r21,28(sp)
41029f20:	dd000617 	ldw	r20,24(sp)
41029f24:	dcc00517 	ldw	r19,20(sp)
41029f28:	dc800417 	ldw	r18,16(sp)
41029f2c:	dc400317 	ldw	r17,12(sp)
41029f30:	dc000217 	ldw	r16,8(sp)
41029f34:	dec00b04 	addi	sp,sp,44
41029f38:	f800283a 	ret
41029f3c:	d9000104 	addi	r4,sp,4
41029f40:	10298780 	call	41029878 <__lo0bits>
41029f44:	11800804 	addi	r6,r2,32
41029f48:	d8800117 	ldw	r2,4(sp)
41029f4c:	94c00415 	stw	r19,16(r18)
41029f50:	980b883a 	mov	r5,r19
41029f54:	90800515 	stw	r2,20(r18)
41029f58:	a03fe626 	beq	r20,zero,41029ef4 <__d2b+0xd8>
41029f5c:	2945883a 	add	r2,r5,r5
41029f60:	1085883a 	add	r2,r2,r2
41029f64:	1405883a 	add	r2,r2,r16
41029f68:	113fff17 	ldw	r4,-4(r2)
41029f6c:	30fef384 	addi	r3,r6,-1074
41029f70:	2820917a 	slli	r16,r5,5
41029f74:	b0c00015 	stw	r3,0(r22)
41029f78:	10298080 	call	41029808 <__hi0bits>
41029f7c:	80a1c83a 	sub	r16,r16,r2
41029f80:	bc000015 	stw	r16,0(r23)
41029f84:	003fe106 	br	41029f0c <__d2b+0xf0>
41029f88:	d8800017 	ldw	r2,0(sp)
41029f8c:	90800515 	stw	r2,20(r18)
41029f90:	d8c00117 	ldw	r3,4(sp)
41029f94:	003fd106 	br	41029edc <__d2b+0xc0>

41029f98 <__mdiff>:
41029f98:	defffb04 	addi	sp,sp,-20
41029f9c:	dc000015 	stw	r16,0(sp)
41029fa0:	2821883a 	mov	r16,r5
41029fa4:	dc800215 	stw	r18,8(sp)
41029fa8:	300b883a 	mov	r5,r6
41029fac:	2025883a 	mov	r18,r4
41029fb0:	8009883a 	mov	r4,r16
41029fb4:	dc400115 	stw	r17,4(sp)
41029fb8:	dfc00415 	stw	ra,16(sp)
41029fbc:	dcc00315 	stw	r19,12(sp)
41029fc0:	3023883a 	mov	r17,r6
41029fc4:	102993c0 	call	4102993c <__mcmp>
41029fc8:	10004226 	beq	r2,zero,4102a0d4 <__mdiff+0x13c>
41029fcc:	10005016 	blt	r2,zero,4102a110 <__mdiff+0x178>
41029fd0:	0027883a 	mov	r19,zero
41029fd4:	81400117 	ldw	r5,4(r16)
41029fd8:	9009883a 	mov	r4,r18
41029fdc:	1029d600 	call	41029d60 <_Balloc>
41029fe0:	1019883a 	mov	r12,r2
41029fe4:	82800417 	ldw	r10,16(r16)
41029fe8:	88800417 	ldw	r2,16(r17)
41029fec:	81800504 	addi	r6,r16,20
41029ff0:	5287883a 	add	r3,r10,r10
41029ff4:	1085883a 	add	r2,r2,r2
41029ff8:	18c7883a 	add	r3,r3,r3
41029ffc:	1085883a 	add	r2,r2,r2
4102a000:	8a000504 	addi	r8,r17,20
4102a004:	64c00315 	stw	r19,12(r12)
4102a008:	30db883a 	add	r13,r6,r3
4102a00c:	4097883a 	add	r11,r8,r2
4102a010:	61c00504 	addi	r7,r12,20
4102a014:	0013883a 	mov	r9,zero
4102a018:	31000017 	ldw	r4,0(r6)
4102a01c:	41400017 	ldw	r5,0(r8)
4102a020:	42000104 	addi	r8,r8,4
4102a024:	20bfffcc 	andi	r2,r4,65535
4102a028:	28ffffcc 	andi	r3,r5,65535
4102a02c:	10c5c83a 	sub	r2,r2,r3
4102a030:	1245883a 	add	r2,r2,r9
4102a034:	2008d43a 	srli	r4,r4,16
4102a038:	280ad43a 	srli	r5,r5,16
4102a03c:	1007d43a 	srai	r3,r2,16
4102a040:	3880000d 	sth	r2,0(r7)
4102a044:	2149c83a 	sub	r4,r4,r5
4102a048:	20c9883a 	add	r4,r4,r3
4102a04c:	3900008d 	sth	r4,2(r7)
4102a050:	31800104 	addi	r6,r6,4
4102a054:	39c00104 	addi	r7,r7,4
4102a058:	2013d43a 	srai	r9,r4,16
4102a05c:	42ffee36 	bltu	r8,r11,4102a018 <__mdiff+0x80>
4102a060:	33400c2e 	bgeu	r6,r13,4102a094 <__mdiff+0xfc>
4102a064:	30800017 	ldw	r2,0(r6)
4102a068:	31800104 	addi	r6,r6,4
4102a06c:	10ffffcc 	andi	r3,r2,65535
4102a070:	1a47883a 	add	r3,r3,r9
4102a074:	1004d43a 	srli	r2,r2,16
4102a078:	1809d43a 	srai	r4,r3,16
4102a07c:	38c0000d 	sth	r3,0(r7)
4102a080:	1105883a 	add	r2,r2,r4
4102a084:	3880008d 	sth	r2,2(r7)
4102a088:	1013d43a 	srai	r9,r2,16
4102a08c:	39c00104 	addi	r7,r7,4
4102a090:	337ff436 	bltu	r6,r13,4102a064 <__mdiff+0xcc>
4102a094:	38bfff17 	ldw	r2,-4(r7)
4102a098:	38ffff04 	addi	r3,r7,-4
4102a09c:	1000041e 	bne	r2,zero,4102a0b0 <__mdiff+0x118>
4102a0a0:	18ffff04 	addi	r3,r3,-4
4102a0a4:	18800017 	ldw	r2,0(r3)
4102a0a8:	52bfffc4 	addi	r10,r10,-1
4102a0ac:	103ffc26 	beq	r2,zero,4102a0a0 <__mdiff+0x108>
4102a0b0:	6005883a 	mov	r2,r12
4102a0b4:	62800415 	stw	r10,16(r12)
4102a0b8:	dfc00417 	ldw	ra,16(sp)
4102a0bc:	dcc00317 	ldw	r19,12(sp)
4102a0c0:	dc800217 	ldw	r18,8(sp)
4102a0c4:	dc400117 	ldw	r17,4(sp)
4102a0c8:	dc000017 	ldw	r16,0(sp)
4102a0cc:	dec00504 	addi	sp,sp,20
4102a0d0:	f800283a 	ret
4102a0d4:	9009883a 	mov	r4,r18
4102a0d8:	000b883a 	mov	r5,zero
4102a0dc:	1029d600 	call	41029d60 <_Balloc>
4102a0e0:	1019883a 	mov	r12,r2
4102a0e4:	00800044 	movi	r2,1
4102a0e8:	60800415 	stw	r2,16(r12)
4102a0ec:	6005883a 	mov	r2,r12
4102a0f0:	60000515 	stw	zero,20(r12)
4102a0f4:	dfc00417 	ldw	ra,16(sp)
4102a0f8:	dcc00317 	ldw	r19,12(sp)
4102a0fc:	dc800217 	ldw	r18,8(sp)
4102a100:	dc400117 	ldw	r17,4(sp)
4102a104:	dc000017 	ldw	r16,0(sp)
4102a108:	dec00504 	addi	sp,sp,20
4102a10c:	f800283a 	ret
4102a110:	880d883a 	mov	r6,r17
4102a114:	04c00044 	movi	r19,1
4102a118:	8023883a 	mov	r17,r16
4102a11c:	3021883a 	mov	r16,r6
4102a120:	003fac06 	br	41029fd4 <__mdiff+0x3c>

4102a124 <__lshift>:
4102a124:	defff904 	addi	sp,sp,-28
4102a128:	28800417 	ldw	r2,16(r5)
4102a12c:	dc000015 	stw	r16,0(sp)
4102a130:	3021d17a 	srai	r16,r6,5
4102a134:	28c00217 	ldw	r3,8(r5)
4102a138:	10800044 	addi	r2,r2,1
4102a13c:	dc400115 	stw	r17,4(sp)
4102a140:	80a3883a 	add	r17,r16,r2
4102a144:	dd400515 	stw	r21,20(sp)
4102a148:	dd000415 	stw	r20,16(sp)
4102a14c:	dc800215 	stw	r18,8(sp)
4102a150:	dfc00615 	stw	ra,24(sp)
4102a154:	2825883a 	mov	r18,r5
4102a158:	dcc00315 	stw	r19,12(sp)
4102a15c:	3029883a 	mov	r20,r6
4102a160:	202b883a 	mov	r21,r4
4102a164:	29400117 	ldw	r5,4(r5)
4102a168:	1c40030e 	bge	r3,r17,4102a178 <__lshift+0x54>
4102a16c:	18c7883a 	add	r3,r3,r3
4102a170:	29400044 	addi	r5,r5,1
4102a174:	1c7ffd16 	blt	r3,r17,4102a16c <__lshift+0x48>
4102a178:	a809883a 	mov	r4,r21
4102a17c:	1029d600 	call	41029d60 <_Balloc>
4102a180:	1027883a 	mov	r19,r2
4102a184:	11400504 	addi	r5,r2,20
4102a188:	0400090e 	bge	zero,r16,4102a1b0 <__lshift+0x8c>
4102a18c:	2805883a 	mov	r2,r5
4102a190:	0007883a 	mov	r3,zero
4102a194:	18c00044 	addi	r3,r3,1
4102a198:	10000015 	stw	zero,0(r2)
4102a19c:	10800104 	addi	r2,r2,4
4102a1a0:	80fffc1e 	bne	r16,r3,4102a194 <__lshift+0x70>
4102a1a4:	8405883a 	add	r2,r16,r16
4102a1a8:	1085883a 	add	r2,r2,r2
4102a1ac:	288b883a 	add	r5,r5,r2
4102a1b0:	90800417 	ldw	r2,16(r18)
4102a1b4:	91000504 	addi	r4,r18,20
4102a1b8:	a18007cc 	andi	r6,r20,31
4102a1bc:	1085883a 	add	r2,r2,r2
4102a1c0:	1085883a 	add	r2,r2,r2
4102a1c4:	208f883a 	add	r7,r4,r2
4102a1c8:	30001e26 	beq	r6,zero,4102a244 <__lshift+0x120>
4102a1cc:	00800804 	movi	r2,32
4102a1d0:	1191c83a 	sub	r8,r2,r6
4102a1d4:	0007883a 	mov	r3,zero
4102a1d8:	20800017 	ldw	r2,0(r4)
4102a1dc:	1184983a 	sll	r2,r2,r6
4102a1e0:	1884b03a 	or	r2,r3,r2
4102a1e4:	28800015 	stw	r2,0(r5)
4102a1e8:	20c00017 	ldw	r3,0(r4)
4102a1ec:	21000104 	addi	r4,r4,4
4102a1f0:	29400104 	addi	r5,r5,4
4102a1f4:	1a06d83a 	srl	r3,r3,r8
4102a1f8:	21fff736 	bltu	r4,r7,4102a1d8 <__lshift+0xb4>
4102a1fc:	28c00015 	stw	r3,0(r5)
4102a200:	18000126 	beq	r3,zero,4102a208 <__lshift+0xe4>
4102a204:	8c400044 	addi	r17,r17,1
4102a208:	88bfffc4 	addi	r2,r17,-1
4102a20c:	98800415 	stw	r2,16(r19)
4102a210:	a809883a 	mov	r4,r21
4102a214:	900b883a 	mov	r5,r18
4102a218:	10297e00 	call	410297e0 <_Bfree>
4102a21c:	9805883a 	mov	r2,r19
4102a220:	dfc00617 	ldw	ra,24(sp)
4102a224:	dd400517 	ldw	r21,20(sp)
4102a228:	dd000417 	ldw	r20,16(sp)
4102a22c:	dcc00317 	ldw	r19,12(sp)
4102a230:	dc800217 	ldw	r18,8(sp)
4102a234:	dc400117 	ldw	r17,4(sp)
4102a238:	dc000017 	ldw	r16,0(sp)
4102a23c:	dec00704 	addi	sp,sp,28
4102a240:	f800283a 	ret
4102a244:	20800017 	ldw	r2,0(r4)
4102a248:	21000104 	addi	r4,r4,4
4102a24c:	28800015 	stw	r2,0(r5)
4102a250:	29400104 	addi	r5,r5,4
4102a254:	21ffec2e 	bgeu	r4,r7,4102a208 <__lshift+0xe4>
4102a258:	20800017 	ldw	r2,0(r4)
4102a25c:	21000104 	addi	r4,r4,4
4102a260:	28800015 	stw	r2,0(r5)
4102a264:	29400104 	addi	r5,r5,4
4102a268:	21fff636 	bltu	r4,r7,4102a244 <__lshift+0x120>
4102a26c:	003fe606 	br	4102a208 <__lshift+0xe4>

4102a270 <__multiply>:
4102a270:	defff904 	addi	sp,sp,-28
4102a274:	dcc00315 	stw	r19,12(sp)
4102a278:	dc800215 	stw	r18,8(sp)
4102a27c:	2cc00417 	ldw	r19,16(r5)
4102a280:	34800417 	ldw	r18,16(r6)
4102a284:	dd000415 	stw	r20,16(sp)
4102a288:	dc400115 	stw	r17,4(sp)
4102a28c:	dfc00615 	stw	ra,24(sp)
4102a290:	dd400515 	stw	r21,20(sp)
4102a294:	dc000015 	stw	r16,0(sp)
4102a298:	2823883a 	mov	r17,r5
4102a29c:	3029883a 	mov	r20,r6
4102a2a0:	9c80040e 	bge	r19,r18,4102a2b4 <__multiply+0x44>
4102a2a4:	9027883a 	mov	r19,r18
4102a2a8:	2c800417 	ldw	r18,16(r5)
4102a2ac:	2829883a 	mov	r20,r5
4102a2b0:	3023883a 	mov	r17,r6
4102a2b4:	88800217 	ldw	r2,8(r17)
4102a2b8:	9ca1883a 	add	r16,r19,r18
4102a2bc:	89400117 	ldw	r5,4(r17)
4102a2c0:	1400010e 	bge	r2,r16,4102a2c8 <__multiply+0x58>
4102a2c4:	29400044 	addi	r5,r5,1
4102a2c8:	1029d600 	call	41029d60 <_Balloc>
4102a2cc:	102b883a 	mov	r21,r2
4102a2d0:	8405883a 	add	r2,r16,r16
4102a2d4:	1085883a 	add	r2,r2,r2
4102a2d8:	a9000504 	addi	r4,r21,20
4102a2dc:	209d883a 	add	r14,r4,r2
4102a2e0:	2380042e 	bgeu	r4,r14,4102a2f4 <__multiply+0x84>
4102a2e4:	2005883a 	mov	r2,r4
4102a2e8:	10000015 	stw	zero,0(r2)
4102a2ec:	10800104 	addi	r2,r2,4
4102a2f0:	13bffd36 	bltu	r2,r14,4102a2e8 <__multiply+0x78>
4102a2f4:	9485883a 	add	r2,r18,r18
4102a2f8:	9cc7883a 	add	r3,r19,r19
4102a2fc:	a1800504 	addi	r6,r20,20
4102a300:	1085883a 	add	r2,r2,r2
4102a304:	8b400504 	addi	r13,r17,20
4102a308:	18c7883a 	add	r3,r3,r3
4102a30c:	309f883a 	add	r15,r6,r2
4102a310:	68d7883a 	add	r11,r13,r3
4102a314:	33c03b2e 	bgeu	r6,r15,4102a404 <__multiply+0x194>
4102a318:	2019883a 	mov	r12,r4
4102a31c:	30800017 	ldw	r2,0(r6)
4102a320:	127fffcc 	andi	r9,r2,65535
4102a324:	48001826 	beq	r9,zero,4102a388 <__multiply+0x118>
4102a328:	6811883a 	mov	r8,r13
4102a32c:	600f883a 	mov	r7,r12
4102a330:	0015883a 	mov	r10,zero
4102a334:	40c00017 	ldw	r3,0(r8)
4102a338:	39400017 	ldw	r5,0(r7)
4102a33c:	42000104 	addi	r8,r8,4
4102a340:	193fffcc 	andi	r4,r3,65535
4102a344:	4909383a 	mul	r4,r9,r4
4102a348:	1806d43a 	srli	r3,r3,16
4102a34c:	28bfffcc 	andi	r2,r5,65535
4102a350:	5085883a 	add	r2,r10,r2
4102a354:	2089883a 	add	r4,r4,r2
4102a358:	48c7383a 	mul	r3,r9,r3
4102a35c:	280ad43a 	srli	r5,r5,16
4102a360:	2004d43a 	srli	r2,r4,16
4102a364:	3900000d 	sth	r4,0(r7)
4102a368:	1947883a 	add	r3,r3,r5
4102a36c:	10c5883a 	add	r2,r2,r3
4102a370:	3880008d 	sth	r2,2(r7)
4102a374:	1014d43a 	srli	r10,r2,16
4102a378:	39c00104 	addi	r7,r7,4
4102a37c:	42ffed36 	bltu	r8,r11,4102a334 <__multiply+0xc4>
4102a380:	3a800015 	stw	r10,0(r7)
4102a384:	30800017 	ldw	r2,0(r6)
4102a388:	1012d43a 	srli	r9,r2,16
4102a38c:	48001926 	beq	r9,zero,4102a3f4 <__multiply+0x184>
4102a390:	60800017 	ldw	r2,0(r12)
4102a394:	6811883a 	mov	r8,r13
4102a398:	600f883a 	mov	r7,r12
4102a39c:	0015883a 	mov	r10,zero
4102a3a0:	100b883a 	mov	r5,r2
4102a3a4:	41000017 	ldw	r4,0(r8)
4102a3a8:	2806d43a 	srli	r3,r5,16
4102a3ac:	3880000d 	sth	r2,0(r7)
4102a3b0:	20bfffcc 	andi	r2,r4,65535
4102a3b4:	4885383a 	mul	r2,r9,r2
4102a3b8:	50c7883a 	add	r3,r10,r3
4102a3bc:	2008d43a 	srli	r4,r4,16
4102a3c0:	10c5883a 	add	r2,r2,r3
4102a3c4:	3880008d 	sth	r2,2(r7)
4102a3c8:	39c00104 	addi	r7,r7,4
4102a3cc:	39400017 	ldw	r5,0(r7)
4102a3d0:	4909383a 	mul	r4,r9,r4
4102a3d4:	1004d43a 	srli	r2,r2,16
4102a3d8:	28ffffcc 	andi	r3,r5,65535
4102a3dc:	20c9883a 	add	r4,r4,r3
4102a3e0:	1105883a 	add	r2,r2,r4
4102a3e4:	42000104 	addi	r8,r8,4
4102a3e8:	1014d43a 	srli	r10,r2,16
4102a3ec:	42ffed36 	bltu	r8,r11,4102a3a4 <__multiply+0x134>
4102a3f0:	38800015 	stw	r2,0(r7)
4102a3f4:	31800104 	addi	r6,r6,4
4102a3f8:	33c0022e 	bgeu	r6,r15,4102a404 <__multiply+0x194>
4102a3fc:	63000104 	addi	r12,r12,4
4102a400:	003fc606 	br	4102a31c <__multiply+0xac>
4102a404:	0400090e 	bge	zero,r16,4102a42c <__multiply+0x1bc>
4102a408:	70bfff17 	ldw	r2,-4(r14)
4102a40c:	70ffff04 	addi	r3,r14,-4
4102a410:	10000326 	beq	r2,zero,4102a420 <__multiply+0x1b0>
4102a414:	00000506 	br	4102a42c <__multiply+0x1bc>
4102a418:	18800017 	ldw	r2,0(r3)
4102a41c:	1000031e 	bne	r2,zero,4102a42c <__multiply+0x1bc>
4102a420:	843fffc4 	addi	r16,r16,-1
4102a424:	18ffff04 	addi	r3,r3,-4
4102a428:	803ffb1e 	bne	r16,zero,4102a418 <__multiply+0x1a8>
4102a42c:	a805883a 	mov	r2,r21
4102a430:	ac000415 	stw	r16,16(r21)
4102a434:	dfc00617 	ldw	ra,24(sp)
4102a438:	dd400517 	ldw	r21,20(sp)
4102a43c:	dd000417 	ldw	r20,16(sp)
4102a440:	dcc00317 	ldw	r19,12(sp)
4102a444:	dc800217 	ldw	r18,8(sp)
4102a448:	dc400117 	ldw	r17,4(sp)
4102a44c:	dc000017 	ldw	r16,0(sp)
4102a450:	dec00704 	addi	sp,sp,28
4102a454:	f800283a 	ret

4102a458 <__i2b>:
4102a458:	defffd04 	addi	sp,sp,-12
4102a45c:	dc000015 	stw	r16,0(sp)
4102a460:	04000044 	movi	r16,1
4102a464:	dc800115 	stw	r18,4(sp)
4102a468:	2825883a 	mov	r18,r5
4102a46c:	800b883a 	mov	r5,r16
4102a470:	dfc00215 	stw	ra,8(sp)
4102a474:	1029d600 	call	41029d60 <_Balloc>
4102a478:	14000415 	stw	r16,16(r2)
4102a47c:	14800515 	stw	r18,20(r2)
4102a480:	dfc00217 	ldw	ra,8(sp)
4102a484:	dc800117 	ldw	r18,4(sp)
4102a488:	dc000017 	ldw	r16,0(sp)
4102a48c:	dec00304 	addi	sp,sp,12
4102a490:	f800283a 	ret

4102a494 <__multadd>:
4102a494:	defffa04 	addi	sp,sp,-24
4102a498:	dc800215 	stw	r18,8(sp)
4102a49c:	2c800417 	ldw	r18,16(r5)
4102a4a0:	dd000415 	stw	r20,16(sp)
4102a4a4:	dcc00315 	stw	r19,12(sp)
4102a4a8:	dc000015 	stw	r16,0(sp)
4102a4ac:	dfc00515 	stw	ra,20(sp)
4102a4b0:	3821883a 	mov	r16,r7
4102a4b4:	dc400115 	stw	r17,4(sp)
4102a4b8:	2827883a 	mov	r19,r5
4102a4bc:	2029883a 	mov	r20,r4
4102a4c0:	2a000504 	addi	r8,r5,20
4102a4c4:	000f883a 	mov	r7,zero
4102a4c8:	40800017 	ldw	r2,0(r8)
4102a4cc:	39c00044 	addi	r7,r7,1
4102a4d0:	10ffffcc 	andi	r3,r2,65535
4102a4d4:	1987383a 	mul	r3,r3,r6
4102a4d8:	1004d43a 	srli	r2,r2,16
4102a4dc:	1c07883a 	add	r3,r3,r16
4102a4e0:	180ad43a 	srli	r5,r3,16
4102a4e4:	1185383a 	mul	r2,r2,r6
4102a4e8:	18ffffcc 	andi	r3,r3,65535
4102a4ec:	1145883a 	add	r2,r2,r5
4102a4f0:	1008943a 	slli	r4,r2,16
4102a4f4:	1020d43a 	srli	r16,r2,16
4102a4f8:	20c9883a 	add	r4,r4,r3
4102a4fc:	41000015 	stw	r4,0(r8)
4102a500:	42000104 	addi	r8,r8,4
4102a504:	3cbff016 	blt	r7,r18,4102a4c8 <__multadd+0x34>
4102a508:	80000826 	beq	r16,zero,4102a52c <__multadd+0x98>
4102a50c:	98800217 	ldw	r2,8(r19)
4102a510:	90800f0e 	bge	r18,r2,4102a550 <__multadd+0xbc>
4102a514:	9485883a 	add	r2,r18,r18
4102a518:	1085883a 	add	r2,r2,r2
4102a51c:	14c5883a 	add	r2,r2,r19
4102a520:	90c00044 	addi	r3,r18,1
4102a524:	14000515 	stw	r16,20(r2)
4102a528:	98c00415 	stw	r3,16(r19)
4102a52c:	9805883a 	mov	r2,r19
4102a530:	dfc00517 	ldw	ra,20(sp)
4102a534:	dd000417 	ldw	r20,16(sp)
4102a538:	dcc00317 	ldw	r19,12(sp)
4102a53c:	dc800217 	ldw	r18,8(sp)
4102a540:	dc400117 	ldw	r17,4(sp)
4102a544:	dc000017 	ldw	r16,0(sp)
4102a548:	dec00604 	addi	sp,sp,24
4102a54c:	f800283a 	ret
4102a550:	99400117 	ldw	r5,4(r19)
4102a554:	a009883a 	mov	r4,r20
4102a558:	29400044 	addi	r5,r5,1
4102a55c:	1029d600 	call	41029d60 <_Balloc>
4102a560:	99800417 	ldw	r6,16(r19)
4102a564:	99400304 	addi	r5,r19,12
4102a568:	11000304 	addi	r4,r2,12
4102a56c:	318d883a 	add	r6,r6,r6
4102a570:	318d883a 	add	r6,r6,r6
4102a574:	31800204 	addi	r6,r6,8
4102a578:	1023883a 	mov	r17,r2
4102a57c:	1022c800 	call	41022c80 <memcpy>
4102a580:	980b883a 	mov	r5,r19
4102a584:	a009883a 	mov	r4,r20
4102a588:	10297e00 	call	410297e0 <_Bfree>
4102a58c:	8827883a 	mov	r19,r17
4102a590:	003fe006 	br	4102a514 <__multadd+0x80>

4102a594 <__pow5mult>:
4102a594:	defffa04 	addi	sp,sp,-24
4102a598:	308000cc 	andi	r2,r6,3
4102a59c:	dd000415 	stw	r20,16(sp)
4102a5a0:	dcc00315 	stw	r19,12(sp)
4102a5a4:	dc000015 	stw	r16,0(sp)
4102a5a8:	dfc00515 	stw	ra,20(sp)
4102a5ac:	dc800215 	stw	r18,8(sp)
4102a5b0:	dc400115 	stw	r17,4(sp)
4102a5b4:	3021883a 	mov	r16,r6
4102a5b8:	2027883a 	mov	r19,r4
4102a5bc:	2829883a 	mov	r20,r5
4102a5c0:	10002b1e 	bne	r2,zero,4102a670 <__pow5mult+0xdc>
4102a5c4:	8025d0ba 	srai	r18,r16,2
4102a5c8:	90001b26 	beq	r18,zero,4102a638 <__pow5mult+0xa4>
4102a5cc:	9c001217 	ldw	r16,72(r19)
4102a5d0:	8000081e 	bne	r16,zero,4102a5f4 <__pow5mult+0x60>
4102a5d4:	00003006 	br	4102a698 <__pow5mult+0x104>
4102a5d8:	800b883a 	mov	r5,r16
4102a5dc:	800d883a 	mov	r6,r16
4102a5e0:	9809883a 	mov	r4,r19
4102a5e4:	90001426 	beq	r18,zero,4102a638 <__pow5mult+0xa4>
4102a5e8:	80800017 	ldw	r2,0(r16)
4102a5ec:	10001b26 	beq	r2,zero,4102a65c <__pow5mult+0xc8>
4102a5f0:	1021883a 	mov	r16,r2
4102a5f4:	9080004c 	andi	r2,r18,1
4102a5f8:	1005003a 	cmpeq	r2,r2,zero
4102a5fc:	9025d07a 	srai	r18,r18,1
4102a600:	800d883a 	mov	r6,r16
4102a604:	9809883a 	mov	r4,r19
4102a608:	a00b883a 	mov	r5,r20
4102a60c:	103ff21e 	bne	r2,zero,4102a5d8 <__pow5mult+0x44>
4102a610:	102a2700 	call	4102a270 <__multiply>
4102a614:	a00b883a 	mov	r5,r20
4102a618:	9809883a 	mov	r4,r19
4102a61c:	1023883a 	mov	r17,r2
4102a620:	10297e00 	call	410297e0 <_Bfree>
4102a624:	8829883a 	mov	r20,r17
4102a628:	800b883a 	mov	r5,r16
4102a62c:	800d883a 	mov	r6,r16
4102a630:	9809883a 	mov	r4,r19
4102a634:	903fec1e 	bne	r18,zero,4102a5e8 <__pow5mult+0x54>
4102a638:	a005883a 	mov	r2,r20
4102a63c:	dfc00517 	ldw	ra,20(sp)
4102a640:	dd000417 	ldw	r20,16(sp)
4102a644:	dcc00317 	ldw	r19,12(sp)
4102a648:	dc800217 	ldw	r18,8(sp)
4102a64c:	dc400117 	ldw	r17,4(sp)
4102a650:	dc000017 	ldw	r16,0(sp)
4102a654:	dec00604 	addi	sp,sp,24
4102a658:	f800283a 	ret
4102a65c:	102a2700 	call	4102a270 <__multiply>
4102a660:	80800015 	stw	r2,0(r16)
4102a664:	1021883a 	mov	r16,r2
4102a668:	10000015 	stw	zero,0(r2)
4102a66c:	003fe106 	br	4102a5f4 <__pow5mult+0x60>
4102a670:	1085883a 	add	r2,r2,r2
4102a674:	00c00034 	movhi	r3,0
4102a678:	18c3de04 	addi	r3,r3,3960
4102a67c:	1085883a 	add	r2,r2,r2
4102a680:	10c5883a 	add	r2,r2,r3
4102a684:	11bfff17 	ldw	r6,-4(r2)
4102a688:	000f883a 	mov	r7,zero
4102a68c:	102a4940 	call	4102a494 <__multadd>
4102a690:	1029883a 	mov	r20,r2
4102a694:	003fcb06 	br	4102a5c4 <__pow5mult+0x30>
4102a698:	9809883a 	mov	r4,r19
4102a69c:	01409c44 	movi	r5,625
4102a6a0:	102a4580 	call	4102a458 <__i2b>
4102a6a4:	98801215 	stw	r2,72(r19)
4102a6a8:	1021883a 	mov	r16,r2
4102a6ac:	10000015 	stw	zero,0(r2)
4102a6b0:	003fd006 	br	4102a5f4 <__pow5mult+0x60>

4102a6b4 <__s2b>:
4102a6b4:	defff904 	addi	sp,sp,-28
4102a6b8:	dcc00315 	stw	r19,12(sp)
4102a6bc:	dc800215 	stw	r18,8(sp)
4102a6c0:	2827883a 	mov	r19,r5
4102a6c4:	2025883a 	mov	r18,r4
4102a6c8:	01400244 	movi	r5,9
4102a6cc:	39000204 	addi	r4,r7,8
4102a6d0:	dd000415 	stw	r20,16(sp)
4102a6d4:	dc400115 	stw	r17,4(sp)
4102a6d8:	dfc00615 	stw	ra,24(sp)
4102a6dc:	dd400515 	stw	r21,20(sp)
4102a6e0:	dc000015 	stw	r16,0(sp)
4102a6e4:	3829883a 	mov	r20,r7
4102a6e8:	3023883a 	mov	r17,r6
4102a6ec:	10222ac0 	call	410222ac <__divsi3>
4102a6f0:	00c00044 	movi	r3,1
4102a6f4:	1880350e 	bge	r3,r2,4102a7cc <__s2b+0x118>
4102a6f8:	000b883a 	mov	r5,zero
4102a6fc:	18c7883a 	add	r3,r3,r3
4102a700:	29400044 	addi	r5,r5,1
4102a704:	18bffd16 	blt	r3,r2,4102a6fc <__s2b+0x48>
4102a708:	9009883a 	mov	r4,r18
4102a70c:	1029d600 	call	41029d60 <_Balloc>
4102a710:	1011883a 	mov	r8,r2
4102a714:	d8800717 	ldw	r2,28(sp)
4102a718:	00c00044 	movi	r3,1
4102a71c:	01800244 	movi	r6,9
4102a720:	40800515 	stw	r2,20(r8)
4102a724:	40c00415 	stw	r3,16(r8)
4102a728:	3440260e 	bge	r6,r17,4102a7c4 <__s2b+0x110>
4102a72c:	3021883a 	mov	r16,r6
4102a730:	99ab883a 	add	r21,r19,r6
4102a734:	9c05883a 	add	r2,r19,r16
4102a738:	11c00007 	ldb	r7,0(r2)
4102a73c:	400b883a 	mov	r5,r8
4102a740:	9009883a 	mov	r4,r18
4102a744:	39fff404 	addi	r7,r7,-48
4102a748:	01800284 	movi	r6,10
4102a74c:	102a4940 	call	4102a494 <__multadd>
4102a750:	84000044 	addi	r16,r16,1
4102a754:	1011883a 	mov	r8,r2
4102a758:	8c3ff61e 	bne	r17,r16,4102a734 <__s2b+0x80>
4102a75c:	ac45883a 	add	r2,r21,r17
4102a760:	117ffe04 	addi	r5,r2,-8
4102a764:	880d883a 	mov	r6,r17
4102a768:	35000c0e 	bge	r6,r20,4102a79c <__s2b+0xe8>
4102a76c:	a185c83a 	sub	r2,r20,r6
4102a770:	2821883a 	mov	r16,r5
4102a774:	28a3883a 	add	r17,r5,r2
4102a778:	81c00007 	ldb	r7,0(r16)
4102a77c:	400b883a 	mov	r5,r8
4102a780:	9009883a 	mov	r4,r18
4102a784:	39fff404 	addi	r7,r7,-48
4102a788:	01800284 	movi	r6,10
4102a78c:	102a4940 	call	4102a494 <__multadd>
4102a790:	84000044 	addi	r16,r16,1
4102a794:	1011883a 	mov	r8,r2
4102a798:	847ff71e 	bne	r16,r17,4102a778 <__s2b+0xc4>
4102a79c:	4005883a 	mov	r2,r8
4102a7a0:	dfc00617 	ldw	ra,24(sp)
4102a7a4:	dd400517 	ldw	r21,20(sp)
4102a7a8:	dd000417 	ldw	r20,16(sp)
4102a7ac:	dcc00317 	ldw	r19,12(sp)
4102a7b0:	dc800217 	ldw	r18,8(sp)
4102a7b4:	dc400117 	ldw	r17,4(sp)
4102a7b8:	dc000017 	ldw	r16,0(sp)
4102a7bc:	dec00704 	addi	sp,sp,28
4102a7c0:	f800283a 	ret
4102a7c4:	99400284 	addi	r5,r19,10
4102a7c8:	003fe706 	br	4102a768 <__s2b+0xb4>
4102a7cc:	000b883a 	mov	r5,zero
4102a7d0:	003fcd06 	br	4102a708 <__s2b+0x54>

4102a7d4 <putc>:
4102a7d4:	defffc04 	addi	sp,sp,-16
4102a7d8:	dc800215 	stw	r18,8(sp)
4102a7dc:	04800034 	movhi	r18,0
4102a7e0:	948ad704 	addi	r18,r18,11100
4102a7e4:	90c00017 	ldw	r3,0(r18)
4102a7e8:	dc400115 	stw	r17,4(sp)
4102a7ec:	dc000015 	stw	r16,0(sp)
4102a7f0:	dfc00315 	stw	ra,12(sp)
4102a7f4:	2023883a 	mov	r17,r4
4102a7f8:	2821883a 	mov	r16,r5
4102a7fc:	18000226 	beq	r3,zero,4102a808 <putc+0x34>
4102a800:	18800e17 	ldw	r2,56(r3)
4102a804:	10001126 	beq	r2,zero,4102a84c <putc+0x78>
4102a808:	80800217 	ldw	r2,8(r16)
4102a80c:	10ffffc4 	addi	r3,r2,-1
4102a810:	80c00215 	stw	r3,8(r16)
4102a814:	18001316 	blt	r3,zero,4102a864 <putc+0x90>
4102a818:	80800017 	ldw	r2,0(r16)
4102a81c:	14400005 	stb	r17,0(r2)
4102a820:	80c00017 	ldw	r3,0(r16)
4102a824:	18800044 	addi	r2,r3,1
4102a828:	18c00003 	ldbu	r3,0(r3)
4102a82c:	80800015 	stw	r2,0(r16)
4102a830:	1805883a 	mov	r2,r3
4102a834:	dfc00317 	ldw	ra,12(sp)
4102a838:	dc800217 	ldw	r18,8(sp)
4102a83c:	dc400117 	ldw	r17,4(sp)
4102a840:	dc000017 	ldw	r16,0(sp)
4102a844:	dec00404 	addi	sp,sp,16
4102a848:	f800283a 	ret
4102a84c:	1809883a 	mov	r4,r3
4102a850:	10283100 	call	41028310 <__sinit>
4102a854:	80800217 	ldw	r2,8(r16)
4102a858:	10ffffc4 	addi	r3,r2,-1
4102a85c:	80c00215 	stw	r3,8(r16)
4102a860:	183fed0e 	bge	r3,zero,4102a818 <putc+0x44>
4102a864:	80800617 	ldw	r2,24(r16)
4102a868:	18800f16 	blt	r3,r2,4102a8a8 <putc+0xd4>
4102a86c:	80800017 	ldw	r2,0(r16)
4102a870:	14400005 	stb	r17,0(r2)
4102a874:	81000017 	ldw	r4,0(r16)
4102a878:	00800284 	movi	r2,10
4102a87c:	20c00003 	ldbu	r3,0(r4)
4102a880:	18801226 	beq	r3,r2,4102a8cc <putc+0xf8>
4102a884:	20800044 	addi	r2,r4,1
4102a888:	80800015 	stw	r2,0(r16)
4102a88c:	1805883a 	mov	r2,r3
4102a890:	dfc00317 	ldw	ra,12(sp)
4102a894:	dc800217 	ldw	r18,8(sp)
4102a898:	dc400117 	ldw	r17,4(sp)
4102a89c:	dc000017 	ldw	r16,0(sp)
4102a8a0:	dec00404 	addi	sp,sp,16
4102a8a4:	f800283a 	ret
4102a8a8:	91000017 	ldw	r4,0(r18)
4102a8ac:	880b883a 	mov	r5,r17
4102a8b0:	800d883a 	mov	r6,r16
4102a8b4:	dfc00317 	ldw	ra,12(sp)
4102a8b8:	dc800217 	ldw	r18,8(sp)
4102a8bc:	dc400117 	ldw	r17,4(sp)
4102a8c0:	dc000017 	ldw	r16,0(sp)
4102a8c4:	dec00404 	addi	sp,sp,16
4102a8c8:	102d9801 	jmpi	4102d980 <__swbuf_r>
4102a8cc:	91000017 	ldw	r4,0(r18)
4102a8d0:	180b883a 	mov	r5,r3
4102a8d4:	003ff606 	br	4102a8b0 <putc+0xdc>

4102a8d8 <_putc_r>:
4102a8d8:	defffc04 	addi	sp,sp,-16
4102a8dc:	dc400215 	stw	r17,8(sp)
4102a8e0:	dc000115 	stw	r16,4(sp)
4102a8e4:	dfc00315 	stw	ra,12(sp)
4102a8e8:	2021883a 	mov	r16,r4
4102a8ec:	2823883a 	mov	r17,r5
4102a8f0:	20000226 	beq	r4,zero,4102a8fc <_putc_r+0x24>
4102a8f4:	20800e17 	ldw	r2,56(r4)
4102a8f8:	10001026 	beq	r2,zero,4102a93c <_putc_r+0x64>
4102a8fc:	30800217 	ldw	r2,8(r6)
4102a900:	10ffffc4 	addi	r3,r2,-1
4102a904:	30c00215 	stw	r3,8(r6)
4102a908:	18001316 	blt	r3,zero,4102a958 <_putc_r+0x80>
4102a90c:	30800017 	ldw	r2,0(r6)
4102a910:	14400005 	stb	r17,0(r2)
4102a914:	30c00017 	ldw	r3,0(r6)
4102a918:	18800044 	addi	r2,r3,1
4102a91c:	18c00003 	ldbu	r3,0(r3)
4102a920:	30800015 	stw	r2,0(r6)
4102a924:	1805883a 	mov	r2,r3
4102a928:	dfc00317 	ldw	ra,12(sp)
4102a92c:	dc400217 	ldw	r17,8(sp)
4102a930:	dc000117 	ldw	r16,4(sp)
4102a934:	dec00404 	addi	sp,sp,16
4102a938:	f800283a 	ret
4102a93c:	d9800015 	stw	r6,0(sp)
4102a940:	10283100 	call	41028310 <__sinit>
4102a944:	d9800017 	ldw	r6,0(sp)
4102a948:	30800217 	ldw	r2,8(r6)
4102a94c:	10ffffc4 	addi	r3,r2,-1
4102a950:	30c00215 	stw	r3,8(r6)
4102a954:	183fed0e 	bge	r3,zero,4102a90c <_putc_r+0x34>
4102a958:	30800617 	ldw	r2,24(r6)
4102a95c:	18800e16 	blt	r3,r2,4102a998 <_putc_r+0xc0>
4102a960:	30800017 	ldw	r2,0(r6)
4102a964:	14400005 	stb	r17,0(r2)
4102a968:	31000017 	ldw	r4,0(r6)
4102a96c:	00800284 	movi	r2,10
4102a970:	20c00003 	ldbu	r3,0(r4)
4102a974:	18800f26 	beq	r3,r2,4102a9b4 <_putc_r+0xdc>
4102a978:	20800044 	addi	r2,r4,1
4102a97c:	30800015 	stw	r2,0(r6)
4102a980:	1805883a 	mov	r2,r3
4102a984:	dfc00317 	ldw	ra,12(sp)
4102a988:	dc400217 	ldw	r17,8(sp)
4102a98c:	dc000117 	ldw	r16,4(sp)
4102a990:	dec00404 	addi	sp,sp,16
4102a994:	f800283a 	ret
4102a998:	8009883a 	mov	r4,r16
4102a99c:	880b883a 	mov	r5,r17
4102a9a0:	dfc00317 	ldw	ra,12(sp)
4102a9a4:	dc400217 	ldw	r17,8(sp)
4102a9a8:	dc000117 	ldw	r16,4(sp)
4102a9ac:	dec00404 	addi	sp,sp,16
4102a9b0:	102d9801 	jmpi	4102d980 <__swbuf_r>
4102a9b4:	8009883a 	mov	r4,r16
4102a9b8:	180b883a 	mov	r5,r3
4102a9bc:	003ff806 	br	4102a9a0 <_putc_r+0xc8>

4102a9c0 <_realloc_r>:
4102a9c0:	defff404 	addi	sp,sp,-48
4102a9c4:	dd800815 	stw	r22,32(sp)
4102a9c8:	dc800415 	stw	r18,16(sp)
4102a9cc:	dc400315 	stw	r17,12(sp)
4102a9d0:	dfc00b15 	stw	ra,44(sp)
4102a9d4:	df000a15 	stw	fp,40(sp)
4102a9d8:	ddc00915 	stw	r23,36(sp)
4102a9dc:	dd400715 	stw	r21,28(sp)
4102a9e0:	dd000615 	stw	r20,24(sp)
4102a9e4:	dcc00515 	stw	r19,20(sp)
4102a9e8:	dc000215 	stw	r16,8(sp)
4102a9ec:	2825883a 	mov	r18,r5
4102a9f0:	3023883a 	mov	r17,r6
4102a9f4:	202d883a 	mov	r22,r4
4102a9f8:	2800c926 	beq	r5,zero,4102ad20 <_realloc_r+0x360>
4102a9fc:	1031af40 	call	41031af4 <__malloc_lock>
4102aa00:	943ffe04 	addi	r16,r18,-8
4102aa04:	88c002c4 	addi	r3,r17,11
4102aa08:	00800584 	movi	r2,22
4102aa0c:	82000117 	ldw	r8,4(r16)
4102aa10:	10c01b2e 	bgeu	r2,r3,4102aa80 <_realloc_r+0xc0>
4102aa14:	00bffe04 	movi	r2,-8
4102aa18:	188e703a 	and	r7,r3,r2
4102aa1c:	3839883a 	mov	fp,r7
4102aa20:	38001a16 	blt	r7,zero,4102aa8c <_realloc_r+0xcc>
4102aa24:	e4401936 	bltu	fp,r17,4102aa8c <_realloc_r+0xcc>
4102aa28:	013fff04 	movi	r4,-4
4102aa2c:	4126703a 	and	r19,r8,r4
4102aa30:	99c02616 	blt	r19,r7,4102aacc <_realloc_r+0x10c>
4102aa34:	802b883a 	mov	r21,r16
4102aa38:	9829883a 	mov	r20,r19
4102aa3c:	84000204 	addi	r16,r16,8
4102aa40:	a80f883a 	mov	r7,r21
4102aa44:	a70dc83a 	sub	r6,r20,fp
4102aa48:	008003c4 	movi	r2,15
4102aa4c:	1180c136 	bltu	r2,r6,4102ad54 <_realloc_r+0x394>
4102aa50:	38800117 	ldw	r2,4(r7)
4102aa54:	a549883a 	add	r4,r20,r21
4102aa58:	1080004c 	andi	r2,r2,1
4102aa5c:	a084b03a 	or	r2,r20,r2
4102aa60:	38800115 	stw	r2,4(r7)
4102aa64:	20c00117 	ldw	r3,4(r4)
4102aa68:	18c00054 	ori	r3,r3,1
4102aa6c:	20c00115 	stw	r3,4(r4)
4102aa70:	b009883a 	mov	r4,r22
4102aa74:	1031b140 	call	41031b14 <__malloc_unlock>
4102aa78:	8023883a 	mov	r17,r16
4102aa7c:	00000606 	br	4102aa98 <_realloc_r+0xd8>
4102aa80:	01c00404 	movi	r7,16
4102aa84:	3839883a 	mov	fp,r7
4102aa88:	e47fe72e 	bgeu	fp,r17,4102aa28 <_realloc_r+0x68>
4102aa8c:	00800304 	movi	r2,12
4102aa90:	0023883a 	mov	r17,zero
4102aa94:	b0800015 	stw	r2,0(r22)
4102aa98:	8805883a 	mov	r2,r17
4102aa9c:	dfc00b17 	ldw	ra,44(sp)
4102aaa0:	df000a17 	ldw	fp,40(sp)
4102aaa4:	ddc00917 	ldw	r23,36(sp)
4102aaa8:	dd800817 	ldw	r22,32(sp)
4102aaac:	dd400717 	ldw	r21,28(sp)
4102aab0:	dd000617 	ldw	r20,24(sp)
4102aab4:	dcc00517 	ldw	r19,20(sp)
4102aab8:	dc800417 	ldw	r18,16(sp)
4102aabc:	dc400317 	ldw	r17,12(sp)
4102aac0:	dc000217 	ldw	r16,8(sp)
4102aac4:	dec00c04 	addi	sp,sp,48
4102aac8:	f800283a 	ret
4102aacc:	00800034 	movhi	r2,0
4102aad0:	10854604 	addi	r2,r2,5400
4102aad4:	12400217 	ldw	r9,8(r2)
4102aad8:	84cd883a 	add	r6,r16,r19
4102aadc:	802b883a 	mov	r21,r16
4102aae0:	3240b926 	beq	r6,r9,4102adc8 <_realloc_r+0x408>
4102aae4:	31400117 	ldw	r5,4(r6)
4102aae8:	00bfff84 	movi	r2,-2
4102aaec:	2884703a 	and	r2,r5,r2
4102aaf0:	1185883a 	add	r2,r2,r6
4102aaf4:	10c00117 	ldw	r3,4(r2)
4102aaf8:	18c0004c 	andi	r3,r3,1
4102aafc:	1807003a 	cmpeq	r3,r3,zero
4102ab00:	1800a326 	beq	r3,zero,4102ad90 <_realloc_r+0x3d0>
4102ab04:	2908703a 	and	r4,r5,r4
4102ab08:	9929883a 	add	r20,r19,r4
4102ab0c:	a1c0a30e 	bge	r20,r7,4102ad9c <_realloc_r+0x3dc>
4102ab10:	4080004c 	andi	r2,r8,1
4102ab14:	1000551e 	bne	r2,zero,4102ac6c <_realloc_r+0x2ac>
4102ab18:	80800017 	ldw	r2,0(r16)
4102ab1c:	80afc83a 	sub	r23,r16,r2
4102ab20:	b8c00117 	ldw	r3,4(r23)
4102ab24:	00bfff04 	movi	r2,-4
4102ab28:	1884703a 	and	r2,r3,r2
4102ab2c:	30002e26 	beq	r6,zero,4102abe8 <_realloc_r+0x228>
4102ab30:	3240b926 	beq	r6,r9,4102ae18 <_realloc_r+0x458>
4102ab34:	98a9883a 	add	r20,r19,r2
4102ab38:	2509883a 	add	r4,r4,r20
4102ab3c:	d9000015 	stw	r4,0(sp)
4102ab40:	21c02a16 	blt	r4,r7,4102abec <_realloc_r+0x22c>
4102ab44:	30800317 	ldw	r2,12(r6)
4102ab48:	30c00217 	ldw	r3,8(r6)
4102ab4c:	01400904 	movi	r5,36
4102ab50:	99bfff04 	addi	r6,r19,-4
4102ab54:	18800315 	stw	r2,12(r3)
4102ab58:	10c00215 	stw	r3,8(r2)
4102ab5c:	b9000317 	ldw	r4,12(r23)
4102ab60:	b8800217 	ldw	r2,8(r23)
4102ab64:	b82b883a 	mov	r21,r23
4102ab68:	bc000204 	addi	r16,r23,8
4102ab6c:	20800215 	stw	r2,8(r4)
4102ab70:	11000315 	stw	r4,12(r2)
4102ab74:	2980e436 	bltu	r5,r6,4102af08 <_realloc_r+0x548>
4102ab78:	008004c4 	movi	r2,19
4102ab7c:	9009883a 	mov	r4,r18
4102ab80:	8011883a 	mov	r8,r16
4102ab84:	11800f2e 	bgeu	r2,r6,4102abc4 <_realloc_r+0x204>
4102ab88:	90800017 	ldw	r2,0(r18)
4102ab8c:	ba000404 	addi	r8,r23,16
4102ab90:	91000204 	addi	r4,r18,8
4102ab94:	b8800215 	stw	r2,8(r23)
4102ab98:	90c00117 	ldw	r3,4(r18)
4102ab9c:	008006c4 	movi	r2,27
4102aba0:	b8c00315 	stw	r3,12(r23)
4102aba4:	1180072e 	bgeu	r2,r6,4102abc4 <_realloc_r+0x204>
4102aba8:	90c00217 	ldw	r3,8(r18)
4102abac:	ba000604 	addi	r8,r23,24
4102abb0:	91000404 	addi	r4,r18,16
4102abb4:	b8c00415 	stw	r3,16(r23)
4102abb8:	90800317 	ldw	r2,12(r18)
4102abbc:	b8800515 	stw	r2,20(r23)
4102abc0:	3140e726 	beq	r6,r5,4102af60 <_realloc_r+0x5a0>
4102abc4:	20800017 	ldw	r2,0(r4)
4102abc8:	dd000017 	ldw	r20,0(sp)
4102abcc:	b80f883a 	mov	r7,r23
4102abd0:	40800015 	stw	r2,0(r8)
4102abd4:	20c00117 	ldw	r3,4(r4)
4102abd8:	40c00115 	stw	r3,4(r8)
4102abdc:	20800217 	ldw	r2,8(r4)
4102abe0:	40800215 	stw	r2,8(r8)
4102abe4:	003f9706 	br	4102aa44 <_realloc_r+0x84>
4102abe8:	98a9883a 	add	r20,r19,r2
4102abec:	a1c01f16 	blt	r20,r7,4102ac6c <_realloc_r+0x2ac>
4102abf0:	b8c00317 	ldw	r3,12(r23)
4102abf4:	b8800217 	ldw	r2,8(r23)
4102abf8:	99bfff04 	addi	r6,r19,-4
4102abfc:	01400904 	movi	r5,36
4102ac00:	b82b883a 	mov	r21,r23
4102ac04:	18800215 	stw	r2,8(r3)
4102ac08:	10c00315 	stw	r3,12(r2)
4102ac0c:	bc000204 	addi	r16,r23,8
4102ac10:	2980c336 	bltu	r5,r6,4102af20 <_realloc_r+0x560>
4102ac14:	008004c4 	movi	r2,19
4102ac18:	9009883a 	mov	r4,r18
4102ac1c:	8011883a 	mov	r8,r16
4102ac20:	11800f2e 	bgeu	r2,r6,4102ac60 <_realloc_r+0x2a0>
4102ac24:	90800017 	ldw	r2,0(r18)
4102ac28:	ba000404 	addi	r8,r23,16
4102ac2c:	91000204 	addi	r4,r18,8
4102ac30:	b8800215 	stw	r2,8(r23)
4102ac34:	90c00117 	ldw	r3,4(r18)
4102ac38:	008006c4 	movi	r2,27
4102ac3c:	b8c00315 	stw	r3,12(r23)
4102ac40:	1180072e 	bgeu	r2,r6,4102ac60 <_realloc_r+0x2a0>
4102ac44:	90c00217 	ldw	r3,8(r18)
4102ac48:	ba000604 	addi	r8,r23,24
4102ac4c:	91000404 	addi	r4,r18,16
4102ac50:	b8c00415 	stw	r3,16(r23)
4102ac54:	90800317 	ldw	r2,12(r18)
4102ac58:	b8800515 	stw	r2,20(r23)
4102ac5c:	3140c726 	beq	r6,r5,4102af7c <_realloc_r+0x5bc>
4102ac60:	20800017 	ldw	r2,0(r4)
4102ac64:	b80f883a 	mov	r7,r23
4102ac68:	003fd906 	br	4102abd0 <_realloc_r+0x210>
4102ac6c:	880b883a 	mov	r5,r17
4102ac70:	b009883a 	mov	r4,r22
4102ac74:	10224cc0 	call	410224cc <_malloc_r>
4102ac78:	1023883a 	mov	r17,r2
4102ac7c:	10002526 	beq	r2,zero,4102ad14 <_realloc_r+0x354>
4102ac80:	80800117 	ldw	r2,4(r16)
4102ac84:	00ffff84 	movi	r3,-2
4102ac88:	893ffe04 	addi	r4,r17,-8
4102ac8c:	10c4703a 	and	r2,r2,r3
4102ac90:	8085883a 	add	r2,r16,r2
4102ac94:	20809526 	beq	r4,r2,4102aeec <_realloc_r+0x52c>
4102ac98:	99bfff04 	addi	r6,r19,-4
4102ac9c:	01c00904 	movi	r7,36
4102aca0:	39804536 	bltu	r7,r6,4102adb8 <_realloc_r+0x3f8>
4102aca4:	008004c4 	movi	r2,19
4102aca8:	9009883a 	mov	r4,r18
4102acac:	880b883a 	mov	r5,r17
4102acb0:	11800f2e 	bgeu	r2,r6,4102acf0 <_realloc_r+0x330>
4102acb4:	90800017 	ldw	r2,0(r18)
4102acb8:	89400204 	addi	r5,r17,8
4102acbc:	91000204 	addi	r4,r18,8
4102acc0:	88800015 	stw	r2,0(r17)
4102acc4:	90c00117 	ldw	r3,4(r18)
4102acc8:	008006c4 	movi	r2,27
4102accc:	88c00115 	stw	r3,4(r17)
4102acd0:	1180072e 	bgeu	r2,r6,4102acf0 <_realloc_r+0x330>
4102acd4:	90c00217 	ldw	r3,8(r18)
4102acd8:	89400404 	addi	r5,r17,16
4102acdc:	91000404 	addi	r4,r18,16
4102ace0:	88c00215 	stw	r3,8(r17)
4102ace4:	90800317 	ldw	r2,12(r18)
4102ace8:	88800315 	stw	r2,12(r17)
4102acec:	31c09126 	beq	r6,r7,4102af34 <_realloc_r+0x574>
4102acf0:	20800017 	ldw	r2,0(r4)
4102acf4:	28800015 	stw	r2,0(r5)
4102acf8:	20c00117 	ldw	r3,4(r4)
4102acfc:	28c00115 	stw	r3,4(r5)
4102ad00:	20800217 	ldw	r2,8(r4)
4102ad04:	28800215 	stw	r2,8(r5)
4102ad08:	900b883a 	mov	r5,r18
4102ad0c:	b009883a 	mov	r4,r22
4102ad10:	10288d00 	call	410288d0 <_free_r>
4102ad14:	b009883a 	mov	r4,r22
4102ad18:	1031b140 	call	41031b14 <__malloc_unlock>
4102ad1c:	003f5e06 	br	4102aa98 <_realloc_r+0xd8>
4102ad20:	300b883a 	mov	r5,r6
4102ad24:	dfc00b17 	ldw	ra,44(sp)
4102ad28:	df000a17 	ldw	fp,40(sp)
4102ad2c:	ddc00917 	ldw	r23,36(sp)
4102ad30:	dd800817 	ldw	r22,32(sp)
4102ad34:	dd400717 	ldw	r21,28(sp)
4102ad38:	dd000617 	ldw	r20,24(sp)
4102ad3c:	dcc00517 	ldw	r19,20(sp)
4102ad40:	dc800417 	ldw	r18,16(sp)
4102ad44:	dc400317 	ldw	r17,12(sp)
4102ad48:	dc000217 	ldw	r16,8(sp)
4102ad4c:	dec00c04 	addi	sp,sp,48
4102ad50:	10224cc1 	jmpi	410224cc <_malloc_r>
4102ad54:	38800117 	ldw	r2,4(r7)
4102ad58:	e54b883a 	add	r5,fp,r21
4102ad5c:	31000054 	ori	r4,r6,1
4102ad60:	1080004c 	andi	r2,r2,1
4102ad64:	1704b03a 	or	r2,r2,fp
4102ad68:	38800115 	stw	r2,4(r7)
4102ad6c:	29000115 	stw	r4,4(r5)
4102ad70:	2987883a 	add	r3,r5,r6
4102ad74:	18800117 	ldw	r2,4(r3)
4102ad78:	29400204 	addi	r5,r5,8
4102ad7c:	b009883a 	mov	r4,r22
4102ad80:	10800054 	ori	r2,r2,1
4102ad84:	18800115 	stw	r2,4(r3)
4102ad88:	10288d00 	call	410288d0 <_free_r>
4102ad8c:	003f3806 	br	4102aa70 <_realloc_r+0xb0>
4102ad90:	000d883a 	mov	r6,zero
4102ad94:	0009883a 	mov	r4,zero
4102ad98:	003f5d06 	br	4102ab10 <_realloc_r+0x150>
4102ad9c:	30c00217 	ldw	r3,8(r6)
4102ada0:	30800317 	ldw	r2,12(r6)
4102ada4:	800f883a 	mov	r7,r16
4102ada8:	84000204 	addi	r16,r16,8
4102adac:	10c00215 	stw	r3,8(r2)
4102adb0:	18800315 	stw	r2,12(r3)
4102adb4:	003f2306 	br	4102aa44 <_realloc_r+0x84>
4102adb8:	8809883a 	mov	r4,r17
4102adbc:	900b883a 	mov	r5,r18
4102adc0:	10296680 	call	41029668 <memmove>
4102adc4:	003fd006 	br	4102ad08 <_realloc_r+0x348>
4102adc8:	30800117 	ldw	r2,4(r6)
4102adcc:	e0c00404 	addi	r3,fp,16
4102add0:	1108703a 	and	r4,r2,r4
4102add4:	9905883a 	add	r2,r19,r4
4102add8:	10ff4d16 	blt	r2,r3,4102ab10 <_realloc_r+0x150>
4102addc:	1705c83a 	sub	r2,r2,fp
4102ade0:	870b883a 	add	r5,r16,fp
4102ade4:	10800054 	ori	r2,r2,1
4102ade8:	28800115 	stw	r2,4(r5)
4102adec:	80c00117 	ldw	r3,4(r16)
4102adf0:	00800034 	movhi	r2,0
4102adf4:	10854604 	addi	r2,r2,5400
4102adf8:	b009883a 	mov	r4,r22
4102adfc:	18c0004c 	andi	r3,r3,1
4102ae00:	e0c6b03a 	or	r3,fp,r3
4102ae04:	11400215 	stw	r5,8(r2)
4102ae08:	80c00115 	stw	r3,4(r16)
4102ae0c:	1031b140 	call	41031b14 <__malloc_unlock>
4102ae10:	84400204 	addi	r17,r16,8
4102ae14:	003f2006 	br	4102aa98 <_realloc_r+0xd8>
4102ae18:	98a9883a 	add	r20,r19,r2
4102ae1c:	2509883a 	add	r4,r4,r20
4102ae20:	e0800404 	addi	r2,fp,16
4102ae24:	d9000115 	stw	r4,4(sp)
4102ae28:	20bf7016 	blt	r4,r2,4102abec <_realloc_r+0x22c>
4102ae2c:	b8c00317 	ldw	r3,12(r23)
4102ae30:	b8800217 	ldw	r2,8(r23)
4102ae34:	99bfff04 	addi	r6,r19,-4
4102ae38:	01400904 	movi	r5,36
4102ae3c:	18800215 	stw	r2,8(r3)
4102ae40:	10c00315 	stw	r3,12(r2)
4102ae44:	bc400204 	addi	r17,r23,8
4102ae48:	29804136 	bltu	r5,r6,4102af50 <_realloc_r+0x590>
4102ae4c:	008004c4 	movi	r2,19
4102ae50:	9009883a 	mov	r4,r18
4102ae54:	880f883a 	mov	r7,r17
4102ae58:	11800f2e 	bgeu	r2,r6,4102ae98 <_realloc_r+0x4d8>
4102ae5c:	90800017 	ldw	r2,0(r18)
4102ae60:	b9c00404 	addi	r7,r23,16
4102ae64:	91000204 	addi	r4,r18,8
4102ae68:	b8800215 	stw	r2,8(r23)
4102ae6c:	90c00117 	ldw	r3,4(r18)
4102ae70:	008006c4 	movi	r2,27
4102ae74:	b8c00315 	stw	r3,12(r23)
4102ae78:	1180072e 	bgeu	r2,r6,4102ae98 <_realloc_r+0x4d8>
4102ae7c:	90c00217 	ldw	r3,8(r18)
4102ae80:	b9c00604 	addi	r7,r23,24
4102ae84:	91000404 	addi	r4,r18,16
4102ae88:	b8c00415 	stw	r3,16(r23)
4102ae8c:	90800317 	ldw	r2,12(r18)
4102ae90:	b8800515 	stw	r2,20(r23)
4102ae94:	31404026 	beq	r6,r5,4102af98 <_realloc_r+0x5d8>
4102ae98:	20800017 	ldw	r2,0(r4)
4102ae9c:	38800015 	stw	r2,0(r7)
4102aea0:	20c00117 	ldw	r3,4(r4)
4102aea4:	38c00115 	stw	r3,4(r7)
4102aea8:	20800217 	ldw	r2,8(r4)
4102aeac:	38800215 	stw	r2,8(r7)
4102aeb0:	d8c00117 	ldw	r3,4(sp)
4102aeb4:	bf0b883a 	add	r5,r23,fp
4102aeb8:	b009883a 	mov	r4,r22
4102aebc:	1f05c83a 	sub	r2,r3,fp
4102aec0:	10800054 	ori	r2,r2,1
4102aec4:	28800115 	stw	r2,4(r5)
4102aec8:	b8c00117 	ldw	r3,4(r23)
4102aecc:	00800034 	movhi	r2,0
4102aed0:	10854604 	addi	r2,r2,5400
4102aed4:	11400215 	stw	r5,8(r2)
4102aed8:	18c0004c 	andi	r3,r3,1
4102aedc:	e0c6b03a 	or	r3,fp,r3
4102aee0:	b8c00115 	stw	r3,4(r23)
4102aee4:	1031b140 	call	41031b14 <__malloc_unlock>
4102aee8:	003eeb06 	br	4102aa98 <_realloc_r+0xd8>
4102aeec:	20800117 	ldw	r2,4(r4)
4102aef0:	00ffff04 	movi	r3,-4
4102aef4:	800f883a 	mov	r7,r16
4102aef8:	10c4703a 	and	r2,r2,r3
4102aefc:	98a9883a 	add	r20,r19,r2
4102af00:	84000204 	addi	r16,r16,8
4102af04:	003ecf06 	br	4102aa44 <_realloc_r+0x84>
4102af08:	900b883a 	mov	r5,r18
4102af0c:	8009883a 	mov	r4,r16
4102af10:	10296680 	call	41029668 <memmove>
4102af14:	dd000017 	ldw	r20,0(sp)
4102af18:	b80f883a 	mov	r7,r23
4102af1c:	003ec906 	br	4102aa44 <_realloc_r+0x84>
4102af20:	900b883a 	mov	r5,r18
4102af24:	8009883a 	mov	r4,r16
4102af28:	10296680 	call	41029668 <memmove>
4102af2c:	b80f883a 	mov	r7,r23
4102af30:	003ec406 	br	4102aa44 <_realloc_r+0x84>
4102af34:	90c00417 	ldw	r3,16(r18)
4102af38:	89400604 	addi	r5,r17,24
4102af3c:	91000604 	addi	r4,r18,24
4102af40:	88c00415 	stw	r3,16(r17)
4102af44:	90800517 	ldw	r2,20(r18)
4102af48:	88800515 	stw	r2,20(r17)
4102af4c:	003f6806 	br	4102acf0 <_realloc_r+0x330>
4102af50:	900b883a 	mov	r5,r18
4102af54:	8809883a 	mov	r4,r17
4102af58:	10296680 	call	41029668 <memmove>
4102af5c:	003fd406 	br	4102aeb0 <_realloc_r+0x4f0>
4102af60:	90c00417 	ldw	r3,16(r18)
4102af64:	91000604 	addi	r4,r18,24
4102af68:	ba000804 	addi	r8,r23,32
4102af6c:	b8c00615 	stw	r3,24(r23)
4102af70:	90800517 	ldw	r2,20(r18)
4102af74:	b8800715 	stw	r2,28(r23)
4102af78:	003f1206 	br	4102abc4 <_realloc_r+0x204>
4102af7c:	90c00417 	ldw	r3,16(r18)
4102af80:	91000604 	addi	r4,r18,24
4102af84:	ba000804 	addi	r8,r23,32
4102af88:	b8c00615 	stw	r3,24(r23)
4102af8c:	90800517 	ldw	r2,20(r18)
4102af90:	b8800715 	stw	r2,28(r23)
4102af94:	003f3206 	br	4102ac60 <_realloc_r+0x2a0>
4102af98:	90c00417 	ldw	r3,16(r18)
4102af9c:	91000604 	addi	r4,r18,24
4102afa0:	b9c00804 	addi	r7,r23,32
4102afa4:	b8c00615 	stw	r3,24(r23)
4102afa8:	90800517 	ldw	r2,20(r18)
4102afac:	b8800715 	stw	r2,28(r23)
4102afb0:	003fb906 	br	4102ae98 <_realloc_r+0x4d8>

4102afb4 <__srefill_r>:
4102afb4:	defffd04 	addi	sp,sp,-12
4102afb8:	dc400115 	stw	r17,4(sp)
4102afbc:	dc000015 	stw	r16,0(sp)
4102afc0:	dfc00215 	stw	ra,8(sp)
4102afc4:	2023883a 	mov	r17,r4
4102afc8:	2821883a 	mov	r16,r5
4102afcc:	20000226 	beq	r4,zero,4102afd8 <__srefill_r+0x24>
4102afd0:	20800e17 	ldw	r2,56(r4)
4102afd4:	10004126 	beq	r2,zero,4102b0dc <__srefill_r+0x128>
4102afd8:	80c0030b 	ldhu	r3,12(r16)
4102afdc:	80000115 	stw	zero,4(r16)
4102afe0:	1880080c 	andi	r2,r3,32
4102afe4:	1000361e 	bne	r2,zero,4102b0c0 <__srefill_r+0x10c>
4102afe8:	1880010c 	andi	r2,r3,4
4102afec:	1000211e 	bne	r2,zero,4102b074 <__srefill_r+0xc0>
4102aff0:	1880040c 	andi	r2,r3,16
4102aff4:	10005026 	beq	r2,zero,4102b138 <__srefill_r+0x184>
4102aff8:	1880020c 	andi	r2,r3,8
4102affc:	1000541e 	bne	r2,zero,4102b150 <__srefill_r+0x19c>
4102b000:	8080030b 	ldhu	r2,12(r16)
4102b004:	10800114 	ori	r2,r2,4
4102b008:	8080030d 	sth	r2,12(r16)
4102b00c:	80800417 	ldw	r2,16(r16)
4102b010:	10004526 	beq	r2,zero,4102b128 <__srefill_r+0x174>
4102b014:	8080030b 	ldhu	r2,12(r16)
4102b018:	108000cc 	andi	r2,r2,3
4102b01c:	1000361e 	bne	r2,zero,4102b0f8 <__srefill_r+0x144>
4102b020:	81800417 	ldw	r6,16(r16)
4102b024:	80c00817 	ldw	r3,32(r16)
4102b028:	81400717 	ldw	r5,28(r16)
4102b02c:	81c00517 	ldw	r7,20(r16)
4102b030:	8809883a 	mov	r4,r17
4102b034:	81800015 	stw	r6,0(r16)
4102b038:	183ee83a 	callr	r3
4102b03c:	80c0030b 	ldhu	r3,12(r16)
4102b040:	1009883a 	mov	r4,r2
4102b044:	80800115 	stw	r2,4(r16)
4102b048:	00b7ffc4 	movi	r2,-8193
4102b04c:	1884703a 	and	r2,r3,r2
4102b050:	8080030d 	sth	r2,12(r16)
4102b054:	0100230e 	bge	zero,r4,4102b0e4 <__srefill_r+0x130>
4102b058:	0009883a 	mov	r4,zero
4102b05c:	2005883a 	mov	r2,r4
4102b060:	dfc00217 	ldw	ra,8(sp)
4102b064:	dc400117 	ldw	r17,4(sp)
4102b068:	dc000017 	ldw	r16,0(sp)
4102b06c:	dec00304 	addi	sp,sp,12
4102b070:	f800283a 	ret
4102b074:	81400c17 	ldw	r5,48(r16)
4102b078:	283fe426 	beq	r5,zero,4102b00c <__srefill_r+0x58>
4102b07c:	80801004 	addi	r2,r16,64
4102b080:	28800226 	beq	r5,r2,4102b08c <__srefill_r+0xd8>
4102b084:	8809883a 	mov	r4,r17
4102b088:	10288d00 	call	410288d0 <_free_r>
4102b08c:	80800f17 	ldw	r2,60(r16)
4102b090:	80000c15 	stw	zero,48(r16)
4102b094:	80800115 	stw	r2,4(r16)
4102b098:	103fdc26 	beq	r2,zero,4102b00c <__srefill_r+0x58>
4102b09c:	80800e17 	ldw	r2,56(r16)
4102b0a0:	0009883a 	mov	r4,zero
4102b0a4:	80800015 	stw	r2,0(r16)
4102b0a8:	2005883a 	mov	r2,r4
4102b0ac:	dfc00217 	ldw	ra,8(sp)
4102b0b0:	dc400117 	ldw	r17,4(sp)
4102b0b4:	dc000017 	ldw	r16,0(sp)
4102b0b8:	dec00304 	addi	sp,sp,12
4102b0bc:	f800283a 	ret
4102b0c0:	013fffc4 	movi	r4,-1
4102b0c4:	2005883a 	mov	r2,r4
4102b0c8:	dfc00217 	ldw	ra,8(sp)
4102b0cc:	dc400117 	ldw	r17,4(sp)
4102b0d0:	dc000017 	ldw	r16,0(sp)
4102b0d4:	dec00304 	addi	sp,sp,12
4102b0d8:	f800283a 	ret
4102b0dc:	10283100 	call	41028310 <__sinit>
4102b0e0:	003fbd06 	br	4102afd8 <__srefill_r+0x24>
4102b0e4:	20000b1e 	bne	r4,zero,4102b114 <__srefill_r+0x160>
4102b0e8:	10800814 	ori	r2,r2,32
4102b0ec:	013fffc4 	movi	r4,-1
4102b0f0:	8080030d 	sth	r2,12(r16)
4102b0f4:	003fd906 	br	4102b05c <__srefill_r+0xa8>
4102b0f8:	00800034 	movhi	r2,0
4102b0fc:	108ad804 	addi	r2,r2,11104
4102b100:	11000017 	ldw	r4,0(r2)
4102b104:	015040f4 	movhi	r5,16643
4102b108:	296c5e04 	addi	r5,r5,-20104
4102b10c:	10291480 	call	41029148 <_fwalk>
4102b110:	003fc306 	br	4102b020 <__srefill_r+0x6c>
4102b114:	10801014 	ori	r2,r2,64
4102b118:	013fffc4 	movi	r4,-1
4102b11c:	8080030d 	sth	r2,12(r16)
4102b120:	80000115 	stw	zero,4(r16)
4102b124:	003fcd06 	br	4102b05c <__srefill_r+0xa8>
4102b128:	8809883a 	mov	r4,r17
4102b12c:	800b883a 	mov	r5,r16
4102b130:	10292f00 	call	410292f0 <__smakebuf_r>
4102b134:	003fb706 	br	4102b014 <__srefill_r+0x60>
4102b138:	18c01014 	ori	r3,r3,64
4102b13c:	00800244 	movi	r2,9
4102b140:	013fffc4 	movi	r4,-1
4102b144:	88800015 	stw	r2,0(r17)
4102b148:	80c0030d 	sth	r3,12(r16)
4102b14c:	003fc306 	br	4102b05c <__srefill_r+0xa8>
4102b150:	8809883a 	mov	r4,r17
4102b154:	800b883a 	mov	r5,r16
4102b158:	10280780 	call	41028078 <_fflush_r>
4102b15c:	103fd81e 	bne	r2,zero,4102b0c0 <__srefill_r+0x10c>
4102b160:	8080030b 	ldhu	r2,12(r16)
4102b164:	80000215 	stw	zero,8(r16)
4102b168:	80000615 	stw	zero,24(r16)
4102b16c:	10bffdcc 	andi	r2,r2,65527
4102b170:	8080030d 	sth	r2,12(r16)
4102b174:	003fa206 	br	4102b000 <__srefill_r+0x4c>

4102b178 <lflush>:
4102b178:	20c0030b 	ldhu	r3,12(r4)
4102b17c:	01400244 	movi	r5,9
4102b180:	0005883a 	mov	r2,zero
4102b184:	18c0024c 	andi	r3,r3,9
4102b188:	19400126 	beq	r3,r5,4102b190 <lflush+0x18>
4102b18c:	f800283a 	ret
4102b190:	10282741 	jmpi	41028274 <fflush>

4102b194 <__isinfd>:
4102b194:	200d883a 	mov	r6,r4
4102b198:	0109c83a 	sub	r4,zero,r4
4102b19c:	2188b03a 	or	r4,r4,r6
4102b1a0:	2008d7fa 	srli	r4,r4,31
4102b1a4:	00a00034 	movhi	r2,32768
4102b1a8:	10bfffc4 	addi	r2,r2,-1
4102b1ac:	1144703a 	and	r2,r2,r5
4102b1b0:	2088b03a 	or	r4,r4,r2
4102b1b4:	009ffc34 	movhi	r2,32752
4102b1b8:	1105c83a 	sub	r2,r2,r4
4102b1bc:	0087c83a 	sub	r3,zero,r2
4102b1c0:	10c4b03a 	or	r2,r2,r3
4102b1c4:	1004d7fa 	srli	r2,r2,31
4102b1c8:	00c00044 	movi	r3,1
4102b1cc:	1885c83a 	sub	r2,r3,r2
4102b1d0:	f800283a 	ret

4102b1d4 <__isnand>:
4102b1d4:	200d883a 	mov	r6,r4
4102b1d8:	0109c83a 	sub	r4,zero,r4
4102b1dc:	2188b03a 	or	r4,r4,r6
4102b1e0:	2008d7fa 	srli	r4,r4,31
4102b1e4:	00a00034 	movhi	r2,32768
4102b1e8:	10bfffc4 	addi	r2,r2,-1
4102b1ec:	1144703a 	and	r2,r2,r5
4102b1f0:	2088b03a 	or	r4,r4,r2
4102b1f4:	009ffc34 	movhi	r2,32752
4102b1f8:	1105c83a 	sub	r2,r2,r4
4102b1fc:	1004d7fa 	srli	r2,r2,31
4102b200:	f800283a 	ret

4102b204 <__sccl>:
4102b204:	28c00003 	ldbu	r3,0(r5)
4102b208:	00801784 	movi	r2,94
4102b20c:	2a000044 	addi	r8,r5,1
4102b210:	18802526 	beq	r3,r2,4102b2a8 <__sccl+0xa4>
4102b214:	180f883a 	mov	r7,r3
4102b218:	0013883a 	mov	r9,zero
4102b21c:	000d883a 	mov	r6,zero
4102b220:	0007883a 	mov	r3,zero
4102b224:	01404004 	movi	r5,256
4102b228:	1905883a 	add	r2,r3,r4
4102b22c:	18c00044 	addi	r3,r3,1
4102b230:	11800005 	stb	r6,0(r2)
4102b234:	197ffc1e 	bne	r3,r5,4102b228 <__sccl+0x24>
4102b238:	38000c26 	beq	r7,zero,4102b26c <__sccl+0x68>
4102b23c:	00800044 	movi	r2,1
4102b240:	124dc83a 	sub	r6,r2,r9
4102b244:	3905883a 	add	r2,r7,r4
4102b248:	11800005 	stb	r6,0(r2)
4102b24c:	41400044 	addi	r5,r8,1
4102b250:	02400b44 	movi	r9,45
4102b254:	02801744 	movi	r10,93
4102b258:	28bfffc3 	ldbu	r2,-1(r5)
4102b25c:	2811883a 	mov	r8,r5
4102b260:	12400726 	beq	r2,r9,4102b280 <__sccl+0x7c>
4102b264:	12800226 	beq	r2,r10,4102b270 <__sccl+0x6c>
4102b268:	1000031e 	bne	r2,zero,4102b278 <__sccl+0x74>
4102b26c:	423fffc4 	addi	r8,r8,-1
4102b270:	4005883a 	mov	r2,r8
4102b274:	f800283a 	ret
4102b278:	100f883a 	mov	r7,r2
4102b27c:	003ff106 	br	4102b244 <__sccl+0x40>
4102b280:	28c00003 	ldbu	r3,0(r5)
4102b284:	1a800d26 	beq	r3,r10,4102b2bc <__sccl+0xb8>
4102b288:	19c00c16 	blt	r3,r7,4102b2bc <__sccl+0xb8>
4102b28c:	21c5883a 	add	r2,r4,r7
4102b290:	39c00044 	addi	r7,r7,1
4102b294:	11800045 	stb	r6,1(r2)
4102b298:	10800044 	addi	r2,r2,1
4102b29c:	38fffc16 	blt	r7,r3,4102b290 <__sccl+0x8c>
4102b2a0:	29400084 	addi	r5,r5,2
4102b2a4:	003fec06 	br	4102b258 <__sccl+0x54>
4102b2a8:	29c00043 	ldbu	r7,1(r5)
4102b2ac:	02400044 	movi	r9,1
4102b2b0:	2a000084 	addi	r8,r5,2
4102b2b4:	480d883a 	mov	r6,r9
4102b2b8:	003fd906 	br	4102b220 <__sccl+0x1c>
4102b2bc:	01c00b44 	movi	r7,45
4102b2c0:	003fe006 	br	4102b244 <__sccl+0x40>

4102b2c4 <nanf>:
4102b2c4:	009ff034 	movhi	r2,32704
4102b2c8:	f800283a 	ret

4102b2cc <sprintf>:
4102b2cc:	deffe504 	addi	sp,sp,-108
4102b2d0:	2013883a 	mov	r9,r4
4102b2d4:	dfc01815 	stw	ra,96(sp)
4102b2d8:	d9801915 	stw	r6,100(sp)
4102b2dc:	d9c01a15 	stw	r7,104(sp)
4102b2e0:	d8801904 	addi	r2,sp,100
4102b2e4:	d8800015 	stw	r2,0(sp)
4102b2e8:	00800034 	movhi	r2,0
4102b2ec:	108ad704 	addi	r2,r2,11100
4102b2f0:	11000017 	ldw	r4,0(r2)
4102b2f4:	d9c00017 	ldw	r7,0(sp)
4102b2f8:	00808204 	movi	r2,520
4102b2fc:	00e00034 	movhi	r3,32768
4102b300:	18ffffc4 	addi	r3,r3,-1
4102b304:	280d883a 	mov	r6,r5
4102b308:	d880040d 	sth	r2,16(sp)
4102b30c:	d9400104 	addi	r5,sp,4
4102b310:	00bfffc4 	movi	r2,-1
4102b314:	d8c00615 	stw	r3,24(sp)
4102b318:	d8c00315 	stw	r3,12(sp)
4102b31c:	da400515 	stw	r9,20(sp)
4102b320:	d880048d 	sth	r2,18(sp)
4102b324:	da400115 	stw	r9,4(sp)
4102b328:	10231200 	call	41023120 <___vfprintf_internal_r>
4102b32c:	d8c00117 	ldw	r3,4(sp)
4102b330:	18000005 	stb	zero,0(r3)
4102b334:	dfc01817 	ldw	ra,96(sp)
4102b338:	dec01b04 	addi	sp,sp,108
4102b33c:	f800283a 	ret

4102b340 <_sprintf_r>:
4102b340:	deffe604 	addi	sp,sp,-104
4102b344:	2813883a 	mov	r9,r5
4102b348:	dfc01815 	stw	ra,96(sp)
4102b34c:	d9c01915 	stw	r7,100(sp)
4102b350:	d8801904 	addi	r2,sp,100
4102b354:	d8800015 	stw	r2,0(sp)
4102b358:	100f883a 	mov	r7,r2
4102b35c:	00808204 	movi	r2,520
4102b360:	00e00034 	movhi	r3,32768
4102b364:	18ffffc4 	addi	r3,r3,-1
4102b368:	d880040d 	sth	r2,16(sp)
4102b36c:	d9400104 	addi	r5,sp,4
4102b370:	00bfffc4 	movi	r2,-1
4102b374:	d8c00615 	stw	r3,24(sp)
4102b378:	d8c00315 	stw	r3,12(sp)
4102b37c:	da400515 	stw	r9,20(sp)
4102b380:	d880048d 	sth	r2,18(sp)
4102b384:	da400115 	stw	r9,4(sp)
4102b388:	10231200 	call	41023120 <___vfprintf_internal_r>
4102b38c:	d8c00117 	ldw	r3,4(sp)
4102b390:	18000005 	stb	zero,0(r3)
4102b394:	dfc01817 	ldw	ra,96(sp)
4102b398:	dec01a04 	addi	sp,sp,104
4102b39c:	f800283a 	ret

4102b3a0 <__sclose>:
4102b3a0:	2940038f 	ldh	r5,14(r5)
4102b3a4:	102dbf81 	jmpi	4102dbf8 <_close_r>

4102b3a8 <__sseek>:
4102b3a8:	defffe04 	addi	sp,sp,-8
4102b3ac:	dc000015 	stw	r16,0(sp)
4102b3b0:	2821883a 	mov	r16,r5
4102b3b4:	2940038f 	ldh	r5,14(r5)
4102b3b8:	dfc00115 	stw	ra,4(sp)
4102b3bc:	102e9f80 	call	4102e9f8 <_lseek_r>
4102b3c0:	1007883a 	mov	r3,r2
4102b3c4:	00bfffc4 	movi	r2,-1
4102b3c8:	18800926 	beq	r3,r2,4102b3f0 <__sseek+0x48>
4102b3cc:	8080030b 	ldhu	r2,12(r16)
4102b3d0:	80c01415 	stw	r3,80(r16)
4102b3d4:	10840014 	ori	r2,r2,4096
4102b3d8:	8080030d 	sth	r2,12(r16)
4102b3dc:	1805883a 	mov	r2,r3
4102b3e0:	dfc00117 	ldw	ra,4(sp)
4102b3e4:	dc000017 	ldw	r16,0(sp)
4102b3e8:	dec00204 	addi	sp,sp,8
4102b3ec:	f800283a 	ret
4102b3f0:	8080030b 	ldhu	r2,12(r16)
4102b3f4:	10bbffcc 	andi	r2,r2,61439
4102b3f8:	8080030d 	sth	r2,12(r16)
4102b3fc:	1805883a 	mov	r2,r3
4102b400:	dfc00117 	ldw	ra,4(sp)
4102b404:	dc000017 	ldw	r16,0(sp)
4102b408:	dec00204 	addi	sp,sp,8
4102b40c:	f800283a 	ret

4102b410 <__swrite>:
4102b410:	2880030b 	ldhu	r2,12(r5)
4102b414:	defffb04 	addi	sp,sp,-20
4102b418:	dcc00315 	stw	r19,12(sp)
4102b41c:	1080400c 	andi	r2,r2,256
4102b420:	dc800215 	stw	r18,8(sp)
4102b424:	dc400115 	stw	r17,4(sp)
4102b428:	dc000015 	stw	r16,0(sp)
4102b42c:	3027883a 	mov	r19,r6
4102b430:	3825883a 	mov	r18,r7
4102b434:	dfc00415 	stw	ra,16(sp)
4102b438:	2821883a 	mov	r16,r5
4102b43c:	000d883a 	mov	r6,zero
4102b440:	01c00084 	movi	r7,2
4102b444:	2023883a 	mov	r17,r4
4102b448:	10000226 	beq	r2,zero,4102b454 <__swrite+0x44>
4102b44c:	2940038f 	ldh	r5,14(r5)
4102b450:	102e9f80 	call	4102e9f8 <_lseek_r>
4102b454:	8080030b 	ldhu	r2,12(r16)
4102b458:	8140038f 	ldh	r5,14(r16)
4102b45c:	8809883a 	mov	r4,r17
4102b460:	10bbffcc 	andi	r2,r2,61439
4102b464:	980d883a 	mov	r6,r19
4102b468:	900f883a 	mov	r7,r18
4102b46c:	8080030d 	sth	r2,12(r16)
4102b470:	dfc00417 	ldw	ra,16(sp)
4102b474:	dcc00317 	ldw	r19,12(sp)
4102b478:	dc800217 	ldw	r18,8(sp)
4102b47c:	dc400117 	ldw	r17,4(sp)
4102b480:	dc000017 	ldw	r16,0(sp)
4102b484:	dec00504 	addi	sp,sp,20
4102b488:	102dacc1 	jmpi	4102dacc <_write_r>

4102b48c <__sread>:
4102b48c:	defffe04 	addi	sp,sp,-8
4102b490:	dc000015 	stw	r16,0(sp)
4102b494:	2821883a 	mov	r16,r5
4102b498:	2940038f 	ldh	r5,14(r5)
4102b49c:	dfc00115 	stw	ra,4(sp)
4102b4a0:	102ea700 	call	4102ea70 <_read_r>
4102b4a4:	1007883a 	mov	r3,r2
4102b4a8:	10000816 	blt	r2,zero,4102b4cc <__sread+0x40>
4102b4ac:	80801417 	ldw	r2,80(r16)
4102b4b0:	10c5883a 	add	r2,r2,r3
4102b4b4:	80801415 	stw	r2,80(r16)
4102b4b8:	1805883a 	mov	r2,r3
4102b4bc:	dfc00117 	ldw	ra,4(sp)
4102b4c0:	dc000017 	ldw	r16,0(sp)
4102b4c4:	dec00204 	addi	sp,sp,8
4102b4c8:	f800283a 	ret
4102b4cc:	8080030b 	ldhu	r2,12(r16)
4102b4d0:	10bbffcc 	andi	r2,r2,61439
4102b4d4:	8080030d 	sth	r2,12(r16)
4102b4d8:	1805883a 	mov	r2,r3
4102b4dc:	dfc00117 	ldw	ra,4(sp)
4102b4e0:	dc000017 	ldw	r16,0(sp)
4102b4e4:	dec00204 	addi	sp,sp,8
4102b4e8:	f800283a 	ret

4102b4ec <strcmp>:
4102b4ec:	2144b03a 	or	r2,r4,r5
4102b4f0:	108000cc 	andi	r2,r2,3
4102b4f4:	10001d1e 	bne	r2,zero,4102b56c <strcmp+0x80>
4102b4f8:	200f883a 	mov	r7,r4
4102b4fc:	28800017 	ldw	r2,0(r5)
4102b500:	21000017 	ldw	r4,0(r4)
4102b504:	280d883a 	mov	r6,r5
4102b508:	2080161e 	bne	r4,r2,4102b564 <strcmp+0x78>
4102b50c:	023fbff4 	movhi	r8,65279
4102b510:	423fbfc4 	addi	r8,r8,-257
4102b514:	2207883a 	add	r3,r4,r8
4102b518:	01602074 	movhi	r5,32897
4102b51c:	29602004 	addi	r5,r5,-32640
4102b520:	1946703a 	and	r3,r3,r5
4102b524:	0104303a 	nor	r2,zero,r4
4102b528:	10c4703a 	and	r2,r2,r3
4102b52c:	10001c1e 	bne	r2,zero,4102b5a0 <strcmp+0xb4>
4102b530:	4013883a 	mov	r9,r8
4102b534:	2811883a 	mov	r8,r5
4102b538:	00000106 	br	4102b540 <strcmp+0x54>
4102b53c:	1800181e 	bne	r3,zero,4102b5a0 <strcmp+0xb4>
4102b540:	39c00104 	addi	r7,r7,4
4102b544:	39000017 	ldw	r4,0(r7)
4102b548:	31800104 	addi	r6,r6,4
4102b54c:	31400017 	ldw	r5,0(r6)
4102b550:	2245883a 	add	r2,r4,r9
4102b554:	1204703a 	and	r2,r2,r8
4102b558:	0106303a 	nor	r3,zero,r4
4102b55c:	1886703a 	and	r3,r3,r2
4102b560:	217ff626 	beq	r4,r5,4102b53c <strcmp+0x50>
4102b564:	3809883a 	mov	r4,r7
4102b568:	300b883a 	mov	r5,r6
4102b56c:	20c00007 	ldb	r3,0(r4)
4102b570:	1800051e 	bne	r3,zero,4102b588 <strcmp+0x9c>
4102b574:	00000606 	br	4102b590 <strcmp+0xa4>
4102b578:	21000044 	addi	r4,r4,1
4102b57c:	20c00007 	ldb	r3,0(r4)
4102b580:	29400044 	addi	r5,r5,1
4102b584:	18000226 	beq	r3,zero,4102b590 <strcmp+0xa4>
4102b588:	28800007 	ldb	r2,0(r5)
4102b58c:	18bffa26 	beq	r3,r2,4102b578 <strcmp+0x8c>
4102b590:	20c00003 	ldbu	r3,0(r4)
4102b594:	28800003 	ldbu	r2,0(r5)
4102b598:	1885c83a 	sub	r2,r3,r2
4102b59c:	f800283a 	ret
4102b5a0:	0005883a 	mov	r2,zero
4102b5a4:	f800283a 	ret

4102b5a8 <match>:
4102b5a8:	21800017 	ldw	r6,0(r4)
4102b5ac:	01c01004 	movi	r7,64
4102b5b0:	02001684 	movi	r8,90
4102b5b4:	28800007 	ldb	r2,0(r5)
4102b5b8:	29400044 	addi	r5,r5,1
4102b5bc:	10000826 	beq	r2,zero,4102b5e0 <match+0x38>
4102b5c0:	31800044 	addi	r6,r6,1
4102b5c4:	30c00007 	ldb	r3,0(r6)
4102b5c8:	38c0020e 	bge	r7,r3,4102b5d4 <match+0x2c>
4102b5cc:	40c00116 	blt	r8,r3,4102b5d4 <match+0x2c>
4102b5d0:	18c00804 	addi	r3,r3,32
4102b5d4:	18bff726 	beq	r3,r2,4102b5b4 <match+0xc>
4102b5d8:	0005883a 	mov	r2,zero
4102b5dc:	f800283a 	ret
4102b5e0:	30800044 	addi	r2,r6,1
4102b5e4:	20800015 	stw	r2,0(r4)
4102b5e8:	00800044 	movi	r2,1
4102b5ec:	f800283a 	ret

4102b5f0 <_strtod_r>:
4102b5f0:	deffde04 	addi	sp,sp,-136
4102b5f4:	df002015 	stw	fp,128(sp)
4102b5f8:	dd401d15 	stw	r21,116(sp)
4102b5fc:	dc401915 	stw	r17,100(sp)
4102b600:	dfc02115 	stw	ra,132(sp)
4102b604:	ddc01f15 	stw	r23,124(sp)
4102b608:	dd801e15 	stw	r22,120(sp)
4102b60c:	dd001c15 	stw	r20,112(sp)
4102b610:	dcc01b15 	stw	r19,108(sp)
4102b614:	dc801a15 	stw	r18,104(sp)
4102b618:	dc001815 	stw	r16,96(sp)
4102b61c:	2823883a 	mov	r17,r5
4102b620:	202b883a 	mov	r21,r4
4102b624:	d9801515 	stw	r6,84(sp)
4102b628:	d8000915 	stw	zero,36(sp)
4102b62c:	d8000a15 	stw	zero,40(sp)
4102b630:	d9400415 	stw	r5,16(sp)
4102b634:	df000904 	addi	fp,sp,36
4102b638:	da000417 	ldw	r8,16(sp)
4102b63c:	00800b44 	movi	r2,45
4102b640:	40c00003 	ldbu	r3,0(r8)
4102b644:	10c03536 	bltu	r2,r3,4102b71c <_strtod_r+0x12c>
4102b648:	18c5883a 	add	r2,r3,r3
4102b64c:	1085883a 	add	r2,r2,r2
4102b650:	00d040f4 	movhi	r3,16643
4102b654:	18ed9904 	addi	r3,r3,-18844
4102b658:	10c5883a 	add	r2,r2,r3
4102b65c:	11000017 	ldw	r4,0(r2)
4102b660:	2000683a 	jmp	r4
4102b664:	4102b858 	cmpnei	r4,r8,2785
4102b668:	4102b71c 	xori	r4,r8,2780
4102b66c:	4102b71c 	xori	r4,r8,2780
4102b670:	4102b71c 	xori	r4,r8,2780
4102b674:	4102b71c 	xori	r4,r8,2780
4102b678:	4102b71c 	xori	r4,r8,2780
4102b67c:	4102b71c 	xori	r4,r8,2780
4102b680:	4102b71c 	xori	r4,r8,2780
4102b684:	4102b71c 	xori	r4,r8,2780
4102b688:	4102bb70 	cmpltui	r4,r8,2797
4102b68c:	4102bb70 	cmpltui	r4,r8,2797
4102b690:	4102bb70 	cmpltui	r4,r8,2797
4102b694:	4102bb70 	cmpltui	r4,r8,2797
4102b698:	4102bb70 	cmpltui	r4,r8,2797
4102b69c:	4102b71c 	xori	r4,r8,2780
4102b6a0:	4102b71c 	xori	r4,r8,2780
4102b6a4:	4102b71c 	xori	r4,r8,2780
4102b6a8:	4102b71c 	xori	r4,r8,2780
4102b6ac:	4102b71c 	xori	r4,r8,2780
4102b6b0:	4102b71c 	xori	r4,r8,2780
4102b6b4:	4102b71c 	xori	r4,r8,2780
4102b6b8:	4102b71c 	xori	r4,r8,2780
4102b6bc:	4102b71c 	xori	r4,r8,2780
4102b6c0:	4102b71c 	xori	r4,r8,2780
4102b6c4:	4102b71c 	xori	r4,r8,2780
4102b6c8:	4102b71c 	xori	r4,r8,2780
4102b6cc:	4102b71c 	xori	r4,r8,2780
4102b6d0:	4102b71c 	xori	r4,r8,2780
4102b6d4:	4102b71c 	xori	r4,r8,2780
4102b6d8:	4102b71c 	xori	r4,r8,2780
4102b6dc:	4102b71c 	xori	r4,r8,2780
4102b6e0:	4102b71c 	xori	r4,r8,2780
4102b6e4:	4102bb70 	cmpltui	r4,r8,2797
4102b6e8:	4102b71c 	xori	r4,r8,2780
4102b6ec:	4102b71c 	xori	r4,r8,2780
4102b6f0:	4102b71c 	xori	r4,r8,2780
4102b6f4:	4102b71c 	xori	r4,r8,2780
4102b6f8:	4102b71c 	xori	r4,r8,2780
4102b6fc:	4102b71c 	xori	r4,r8,2780
4102b700:	4102b71c 	xori	r4,r8,2780
4102b704:	4102b71c 	xori	r4,r8,2780
4102b708:	4102b71c 	xori	r4,r8,2780
4102b70c:	4102b71c 	xori	r4,r8,2780
4102b710:	4102bb50 	cmplti	r4,r8,2797
4102b714:	4102b71c 	xori	r4,r8,2780
4102b718:	4102bb7c 	xorhi	r4,r8,2797
4102b71c:	d8001115 	stw	zero,68(sp)
4102b720:	40c00007 	ldb	r3,0(r8)
4102b724:	00800c04 	movi	r2,48
4102b728:	1880d026 	beq	r3,r2,4102ba6c <_strtod_r+0x47c>
4102b72c:	001f883a 	mov	r15,zero
4102b730:	41000007 	ldb	r4,0(r8)
4102b734:	00c00bc4 	movi	r3,47
4102b738:	402d883a 	mov	r22,r8
4102b73c:	1903470e 	bge	r3,r4,4102c45c <_strtod_r+0xe6c>
4102b740:	00800e44 	movi	r2,57
4102b744:	11034516 	blt	r2,r4,4102c45c <_strtod_r+0xe6c>
4102b748:	180f883a 	mov	r7,r3
4102b74c:	1013883a 	mov	r9,r2
4102b750:	4007883a 	mov	r3,r8
4102b754:	000d883a 	mov	r6,zero
4102b758:	0029883a 	mov	r20,zero
4102b75c:	0021883a 	mov	r16,zero
4102b760:	01400204 	movi	r5,8
4102b764:	028003c4 	movi	r10,15
4102b768:	29803116 	blt	r5,r6,4102b830 <_strtod_r+0x240>
4102b76c:	a08002a4 	muli	r2,r20,10
4102b770:	1105883a 	add	r2,r2,r4
4102b774:	153ff404 	addi	r20,r2,-48
4102b778:	1a000044 	addi	r8,r3,1
4102b77c:	da000415 	stw	r8,16(sp)
4102b780:	41000007 	ldb	r4,0(r8)
4102b784:	31800044 	addi	r6,r6,1
4102b788:	4007883a 	mov	r3,r8
4102b78c:	3900010e 	bge	r7,r4,4102b794 <_strtod_r+0x1a4>
4102b790:	493ff50e 	bge	r9,r4,4102b768 <_strtod_r+0x178>
4102b794:	00800b84 	movi	r2,46
4102b798:	2080c126 	beq	r4,r2,4102baa0 <_strtod_r+0x4b0>
4102b79c:	3027883a 	mov	r19,r6
4102b7a0:	0025883a 	mov	r18,zero
4102b7a4:	0015883a 	mov	r10,zero
4102b7a8:	000f883a 	mov	r7,zero
4102b7ac:	00801944 	movi	r2,101
4102b7b0:	20802426 	beq	r4,r2,4102b844 <_strtod_r+0x254>
4102b7b4:	00801144 	movi	r2,69
4102b7b8:	20802226 	beq	r4,r2,4102b844 <_strtod_r+0x254>
4102b7bc:	9816c03a 	cmpne	r11,r19,zero
4102b7c0:	000b883a 	mov	r5,zero
4102b7c4:	5800631e 	bne	r11,zero,4102b954 <_strtod_r+0x364>
4102b7c8:	3800c126 	beq	r7,zero,4102bad0 <_strtod_r+0x4e0>
4102b7cc:	d8c01517 	ldw	r3,84(sp)
4102b7d0:	18000226 	beq	r3,zero,4102b7dc <_strtod_r+0x1ec>
4102b7d4:	d8800417 	ldw	r2,16(sp)
4102b7d8:	18800015 	stw	r2,0(r3)
4102b7dc:	d9001117 	ldw	r4,68(sp)
4102b7e0:	2005003a 	cmpeq	r2,r4,zero
4102b7e4:	10001f1e 	bne	r2,zero,4102b864 <_strtod_r+0x274>
4102b7e8:	e0800017 	ldw	r2,0(fp)
4102b7ec:	e0c00117 	ldw	r3,4(fp)
4102b7f0:	1009883a 	mov	r4,r2
4102b7f4:	1960003c 	xorhi	r5,r3,32768
4102b7f8:	2005883a 	mov	r2,r4
4102b7fc:	2807883a 	mov	r3,r5
4102b800:	dfc02117 	ldw	ra,132(sp)
4102b804:	df002017 	ldw	fp,128(sp)
4102b808:	ddc01f17 	ldw	r23,124(sp)
4102b80c:	dd801e17 	ldw	r22,120(sp)
4102b810:	dd401d17 	ldw	r21,116(sp)
4102b814:	dd001c17 	ldw	r20,112(sp)
4102b818:	dcc01b17 	ldw	r19,108(sp)
4102b81c:	dc801a17 	ldw	r18,104(sp)
4102b820:	dc401917 	ldw	r17,100(sp)
4102b824:	dc001817 	ldw	r16,96(sp)
4102b828:	dec02204 	addi	sp,sp,136
4102b82c:	f800283a 	ret
4102b830:	51bfd116 	blt	r10,r6,4102b778 <_strtod_r+0x188>
4102b834:	808002a4 	muli	r2,r16,10
4102b838:	1105883a 	add	r2,r2,r4
4102b83c:	143ff404 	addi	r16,r2,-48
4102b840:	003fcd06 	br	4102b778 <_strtod_r+0x188>
4102b844:	9816c03a 	cmpne	r11,r19,zero
4102b848:	5800091e 	bne	r11,zero,4102b870 <_strtod_r+0x280>
4102b84c:	3800081e 	bne	r7,zero,4102b870 <_strtod_r+0x280>
4102b850:	7805003a 	cmpeq	r2,r15,zero
4102b854:	10000626 	beq	r2,zero,4102b870 <_strtod_r+0x280>
4102b858:	d8001115 	stw	zero,68(sp)
4102b85c:	dc400415 	stw	r17,16(sp)
4102b860:	003fda06 	br	4102b7cc <_strtod_r+0x1dc>
4102b864:	e1000017 	ldw	r4,0(fp)
4102b868:	e1400117 	ldw	r5,4(fp)
4102b86c:	003fe206 	br	4102b7f8 <_strtod_r+0x208>
4102b870:	dc400417 	ldw	r17,16(sp)
4102b874:	00800ac4 	movi	r2,43
4102b878:	8a000044 	addi	r8,r17,1
4102b87c:	da000415 	stw	r8,16(sp)
4102b880:	88c00047 	ldb	r3,1(r17)
4102b884:	4009883a 	mov	r4,r8
4102b888:	1880bf26 	beq	r3,r2,4102bb88 <_strtod_r+0x598>
4102b88c:	00800b44 	movi	r2,45
4102b890:	18834526 	beq	r3,r2,4102c5a8 <_strtod_r+0xfb8>
4102b894:	1809883a 	mov	r4,r3
4102b898:	20fff404 	addi	r3,r4,-48
4102b89c:	00800244 	movi	r2,9
4102b8a0:	001d883a 	mov	r14,zero
4102b8a4:	10c0bf36 	bltu	r2,r3,4102bba4 <_strtod_r+0x5b4>
4102b8a8:	00800c04 	movi	r2,48
4102b8ac:	2080061e 	bne	r4,r2,4102b8c8 <_strtod_r+0x2d8>
4102b8b0:	da000417 	ldw	r8,16(sp)
4102b8b4:	2005883a 	mov	r2,r4
4102b8b8:	42000044 	addi	r8,r8,1
4102b8bc:	da000415 	stw	r8,16(sp)
4102b8c0:	41000007 	ldb	r4,0(r8)
4102b8c4:	20bffc26 	beq	r4,r2,4102b8b8 <_strtod_r+0x2c8>
4102b8c8:	20fff3c4 	addi	r3,r4,-49
4102b8cc:	00800204 	movi	r2,8
4102b8d0:	10ffbb36 	bltu	r2,r3,4102b7c0 <_strtod_r+0x1d0>
4102b8d4:	da000417 	ldw	r8,16(sp)
4102b8d8:	227ff404 	addi	r9,r4,-48
4102b8dc:	03000bc4 	movi	r12,47
4102b8e0:	4007883a 	mov	r3,r8
4102b8e4:	42000044 	addi	r8,r8,1
4102b8e8:	da000415 	stw	r8,16(sp)
4102b8ec:	41000007 	ldb	r4,0(r8)
4102b8f0:	61000d0e 	bge	r12,r4,4102b928 <_strtod_r+0x338>
4102b8f4:	00800e44 	movi	r2,57
4102b8f8:	11000b16 	blt	r2,r4,4102b928 <_strtod_r+0x338>
4102b8fc:	601b883a 	mov	r13,r12
4102b900:	1019883a 	mov	r12,r2
4102b904:	00000106 	br	4102b90c <_strtod_r+0x31c>
4102b908:	61000716 	blt	r12,r4,4102b928 <_strtod_r+0x338>
4102b90c:	488002a4 	muli	r2,r9,10
4102b910:	42000044 	addi	r8,r8,1
4102b914:	da000415 	stw	r8,16(sp)
4102b918:	2085883a 	add	r2,r4,r2
4102b91c:	41000007 	ldb	r4,0(r8)
4102b920:	127ff404 	addi	r9,r2,-48
4102b924:	693ff816 	blt	r13,r4,4102b908 <_strtod_r+0x318>
4102b928:	40c7c83a 	sub	r3,r8,r3
4102b92c:	00800204 	movi	r2,8
4102b930:	10c2e416 	blt	r2,r3,4102c4c4 <_strtod_r+0xed4>
4102b934:	009387c4 	movi	r2,19999
4102b938:	480b883a 	mov	r5,r9
4102b93c:	1240010e 	bge	r2,r9,4102b944 <_strtod_r+0x354>
4102b940:	100b883a 	mov	r5,r2
4102b944:	7005003a 	cmpeq	r2,r14,zero
4102b948:	103f9e1e 	bne	r2,zero,4102b7c4 <_strtod_r+0x1d4>
4102b94c:	014bc83a 	sub	r5,zero,r5
4102b950:	583f9d26 	beq	r11,zero,4102b7c8 <_strtod_r+0x1d8>
4102b954:	2a8bc83a 	sub	r5,r5,r10
4102b958:	d9400f15 	stw	r5,60(sp)
4102b95c:	30007a1e 	bne	r6,zero,4102bb48 <_strtod_r+0x558>
4102b960:	dcc01215 	stw	r19,72(sp)
4102b964:	00800404 	movi	r2,16
4102b968:	9825883a 	mov	r18,r19
4102b96c:	14c0010e 	bge	r2,r19,4102b974 <_strtod_r+0x384>
4102b970:	1025883a 	mov	r18,r2
4102b974:	a009883a 	mov	r4,r20
4102b978:	10309040 	call	41030904 <__floatunsidf>
4102b97c:	100f883a 	mov	r7,r2
4102b980:	e0800015 	stw	r2,0(fp)
4102b984:	00800244 	movi	r2,9
4102b988:	e0c00115 	stw	r3,4(fp)
4102b98c:	1480160e 	bge	r2,r18,4102b9e8 <_strtod_r+0x3f8>
4102b990:	900c90fa 	slli	r6,r18,3
4102b994:	01000034 	movhi	r4,0
4102b998:	21039804 	addi	r4,r4,3680
4102b99c:	180b883a 	mov	r5,r3
4102b9a0:	310d883a 	add	r6,r6,r4
4102b9a4:	30ffef17 	ldw	r3,-68(r6)
4102b9a8:	30bfee17 	ldw	r2,-72(r6)
4102b9ac:	3809883a 	mov	r4,r7
4102b9b0:	180f883a 	mov	r7,r3
4102b9b4:	100d883a 	mov	r6,r2
4102b9b8:	102fd840 	call	4102fd84 <__muldf3>
4102b9bc:	8009883a 	mov	r4,r16
4102b9c0:	1823883a 	mov	r17,r3
4102b9c4:	1021883a 	mov	r16,r2
4102b9c8:	10309040 	call	41030904 <__floatunsidf>
4102b9cc:	880b883a 	mov	r5,r17
4102b9d0:	180f883a 	mov	r7,r3
4102b9d4:	8009883a 	mov	r4,r16
4102b9d8:	100d883a 	mov	r6,r2
4102b9dc:	102fd100 	call	4102fd10 <__adddf3>
4102b9e0:	e0c00115 	stw	r3,4(fp)
4102b9e4:	e0800015 	stw	r2,0(fp)
4102b9e8:	010003c4 	movi	r4,15
4102b9ec:	24c09816 	blt	r4,r19,4102bc50 <_strtod_r+0x660>
4102b9f0:	d9800f17 	ldw	r6,60(sp)
4102b9f4:	303f7526 	beq	r6,zero,4102b7cc <_strtod_r+0x1dc>
4102b9f8:	0183be0e 	bge	zero,r6,4102c8f4 <_strtod_r+0x1304>
4102b9fc:	00800584 	movi	r2,22
4102ba00:	1182b20e 	bge	r2,r6,4102c4cc <_strtod_r+0xedc>
4102ba04:	d8c00f17 	ldw	r3,60(sp)
4102ba08:	24e3c83a 	sub	r17,r4,r19
4102ba0c:	88800584 	addi	r2,r17,22
4102ba10:	10c08f16 	blt	r2,r3,4102bc50 <_strtod_r+0x660>
4102ba14:	880890fa 	slli	r4,r17,3
4102ba18:	04000034 	movhi	r16,0
4102ba1c:	84039804 	addi	r16,r16,3680
4102ba20:	e0800017 	ldw	r2,0(fp)
4102ba24:	2409883a 	add	r4,r4,r16
4102ba28:	22000017 	ldw	r8,0(r4)
4102ba2c:	22400117 	ldw	r9,4(r4)
4102ba30:	e0c00117 	ldw	r3,4(fp)
4102ba34:	1009883a 	mov	r4,r2
4102ba38:	480f883a 	mov	r7,r9
4102ba3c:	180b883a 	mov	r5,r3
4102ba40:	400d883a 	mov	r6,r8
4102ba44:	102fd840 	call	4102fd84 <__muldf3>
4102ba48:	d9000f17 	ldw	r4,60(sp)
4102ba4c:	180b883a 	mov	r5,r3
4102ba50:	2455c83a 	sub	r10,r4,r17
4102ba54:	501490fa 	slli	r10,r10,3
4102ba58:	1009883a 	mov	r4,r2
4102ba5c:	5415883a 	add	r10,r10,r16
4102ba60:	52000017 	ldw	r8,0(r10)
4102ba64:	52400117 	ldw	r9,4(r10)
4102ba68:	0002a206 	br	4102c4f4 <_strtod_r+0xf04>
4102ba6c:	40c00047 	ldb	r3,1(r8)
4102ba70:	00801604 	movi	r2,88
4102ba74:	18804e26 	beq	r3,r2,4102bbb0 <_strtod_r+0x5c0>
4102ba78:	00801e04 	movi	r2,120
4102ba7c:	18804c26 	beq	r3,r2,4102bbb0 <_strtod_r+0x5c0>
4102ba80:	42000044 	addi	r8,r8,1
4102ba84:	da000415 	stw	r8,16(sp)
4102ba88:	40c00007 	ldb	r3,0(r8)
4102ba8c:	00800c04 	movi	r2,48
4102ba90:	18bffb26 	beq	r3,r2,4102ba80 <_strtod_r+0x490>
4102ba94:	183f4d26 	beq	r3,zero,4102b7cc <_strtod_r+0x1dc>
4102ba98:	03c00044 	movi	r15,1
4102ba9c:	003f2406 	br	4102b730 <_strtod_r+0x140>
4102baa0:	42000044 	addi	r8,r8,1
4102baa4:	da000415 	stw	r8,16(sp)
4102baa8:	19000047 	ldb	r4,1(r3)
4102baac:	3000b726 	beq	r6,zero,4102bd8c <_strtod_r+0x79c>
4102bab0:	3027883a 	mov	r19,r6
4102bab4:	0015883a 	mov	r10,zero
4102bab8:	000f883a 	mov	r7,zero
4102babc:	227ff404 	addi	r9,r4,-48
4102bac0:	00800244 	movi	r2,9
4102bac4:	1242592e 	bgeu	r2,r9,4102c42c <_strtod_r+0xe3c>
4102bac8:	04800044 	movi	r18,1
4102bacc:	003f3706 	br	4102b7ac <_strtod_r+0x1bc>
4102bad0:	7804c03a 	cmpne	r2,r15,zero
4102bad4:	103f3d1e 	bne	r2,zero,4102b7cc <_strtod_r+0x1dc>
4102bad8:	9004c03a 	cmpne	r2,r18,zero
4102badc:	103f5e1e 	bne	r2,zero,4102b858 <_strtod_r+0x268>
4102bae0:	00801384 	movi	r2,78
4102bae4:	2083a226 	beq	r4,r2,4102c970 <_strtod_r+0x1380>
4102bae8:	11039d16 	blt	r2,r4,4102c960 <_strtod_r+0x1370>
4102baec:	00801244 	movi	r2,73
4102baf0:	20bf591e 	bne	r4,r2,4102b858 <_strtod_r+0x268>
4102baf4:	dc000404 	addi	r16,sp,16
4102baf8:	8009883a 	mov	r4,r16
4102bafc:	01400034 	movhi	r5,0
4102bb00:	2943e104 	addi	r5,r5,3972
4102bb04:	102b5a80 	call	4102b5a8 <match>
4102bb08:	103f5326 	beq	r2,zero,4102b858 <_strtod_r+0x268>
4102bb0c:	d8800417 	ldw	r2,16(sp)
4102bb10:	8009883a 	mov	r4,r16
4102bb14:	01400034 	movhi	r5,0
4102bb18:	2943e204 	addi	r5,r5,3976
4102bb1c:	123fffc4 	addi	r8,r2,-1
4102bb20:	da000415 	stw	r8,16(sp)
4102bb24:	102b5a80 	call	4102b5a8 <match>
4102bb28:	1000031e 	bne	r2,zero,4102bb38 <_strtod_r+0x548>
4102bb2c:	d8800417 	ldw	r2,16(sp)
4102bb30:	12000044 	addi	r8,r2,1
4102bb34:	da000415 	stw	r8,16(sp)
4102bb38:	019ffc34 	movhi	r6,32752
4102bb3c:	e1800115 	stw	r6,4(fp)
4102bb40:	e0000015 	stw	zero,0(fp)
4102bb44:	003f2106 	br	4102b7cc <_strtod_r+0x1dc>
4102bb48:	d9801215 	stw	r6,72(sp)
4102bb4c:	003f8506 	br	4102b964 <_strtod_r+0x374>
4102bb50:	d8001115 	stw	zero,68(sp)
4102bb54:	42000044 	addi	r8,r8,1
4102bb58:	da000415 	stw	r8,16(sp)
4102bb5c:	40800007 	ldb	r2,0(r8)
4102bb60:	103eef1e 	bne	r2,zero,4102b720 <_strtod_r+0x130>
4102bb64:	d8001115 	stw	zero,68(sp)
4102bb68:	dc400415 	stw	r17,16(sp)
4102bb6c:	003f1706 	br	4102b7cc <_strtod_r+0x1dc>
4102bb70:	42000044 	addi	r8,r8,1
4102bb74:	da000415 	stw	r8,16(sp)
4102bb78:	003eaf06 	br	4102b638 <_strtod_r+0x48>
4102bb7c:	00800044 	movi	r2,1
4102bb80:	d8801115 	stw	r2,68(sp)
4102bb84:	003ff306 	br	4102bb54 <_strtod_r+0x564>
4102bb88:	001d883a 	mov	r14,zero
4102bb8c:	42000044 	addi	r8,r8,1
4102bb90:	da000415 	stw	r8,16(sp)
4102bb94:	21000047 	ldb	r4,1(r4)
4102bb98:	00800244 	movi	r2,9
4102bb9c:	20fff404 	addi	r3,r4,-48
4102bba0:	10ff412e 	bgeu	r2,r3,4102b8a8 <_strtod_r+0x2b8>
4102bba4:	000b883a 	mov	r5,zero
4102bba8:	dc400415 	stw	r17,16(sp)
4102bbac:	003f0506 	br	4102b7c4 <_strtod_r+0x1d4>
4102bbb0:	d8c01117 	ldw	r3,68(sp)
4102bbb4:	04800034 	movhi	r18,0
4102bbb8:	94865004 	addi	r18,r18,6464
4102bbbc:	d8800504 	addi	r2,sp,20
4102bbc0:	a809883a 	mov	r4,r21
4102bbc4:	d9400404 	addi	r5,sp,16
4102bbc8:	900d883a 	mov	r6,r18
4102bbcc:	d9c00604 	addi	r7,sp,24
4102bbd0:	d8800015 	stw	r2,0(sp)
4102bbd4:	d8c00115 	stw	r3,4(sp)
4102bbd8:	102df3c0 	call	4102df3c <__gethex>
4102bbdc:	140001cc 	andi	r16,r2,7
4102bbe0:	1027883a 	mov	r19,r2
4102bbe4:	803ef926 	beq	r16,zero,4102b7cc <_strtod_r+0x1dc>
4102bbe8:	05000184 	movi	r20,6
4102bbec:	853f1a26 	beq	r16,r20,4102b858 <_strtod_r+0x268>
4102bbf0:	d9800517 	ldw	r6,20(sp)
4102bbf4:	30000626 	beq	r6,zero,4102bc10 <_strtod_r+0x620>
4102bbf8:	91400017 	ldw	r5,0(r18)
4102bbfc:	d9000d04 	addi	r4,sp,52
4102bc00:	1029c800 	call	41029c80 <__copybits>
4102bc04:	d9400517 	ldw	r5,20(sp)
4102bc08:	a809883a 	mov	r4,r21
4102bc0c:	10297e00 	call	410297e0 <_Bfree>
4102bc10:	d9400617 	ldw	r5,24(sp)
4102bc14:	a4024136 	bltu	r20,r16,4102c51c <_strtod_r+0xf2c>
4102bc18:	8405883a 	add	r2,r16,r16
4102bc1c:	1085883a 	add	r2,r2,r2
4102bc20:	00d040f4 	movhi	r3,16643
4102bc24:	18ef0d04 	addi	r3,r3,-17356
4102bc28:	10c5883a 	add	r2,r2,r3
4102bc2c:	11000017 	ldw	r4,0(r2)
4102bc30:	2000683a 	jmp	r4
4102bc34:	4102c55c 	xori	r4,r8,2837
4102bc38:	4102c568 	cmpgeui	r4,r8,2837
4102bc3c:	4102c50c 	andi	r4,r8,2836
4102bc40:	4102c534 	orhi	r4,r8,2836
4102bc44:	4102c544 	addi	r4,r8,2837
4102bc48:	4102c568 	cmpgeui	r4,r8,2837
4102bc4c:	4102c55c 	xori	r4,r8,2837
4102bc50:	d8c00f17 	ldw	r3,60(sp)
4102bc54:	9c85c83a 	sub	r2,r19,r18
4102bc58:	18a1883a 	add	r16,r3,r2
4102bc5c:	0402d00e 	bge	zero,r16,4102c7a0 <_strtod_r+0x11b0>
4102bc60:	814003cc 	andi	r5,r16,15
4102bc64:	28000f26 	beq	r5,zero,4102bca4 <_strtod_r+0x6b4>
4102bc68:	280a90fa 	slli	r5,r5,3
4102bc6c:	01000034 	movhi	r4,0
4102bc70:	21039804 	addi	r4,r4,3680
4102bc74:	e0800017 	ldw	r2,0(fp)
4102bc78:	290b883a 	add	r5,r5,r4
4102bc7c:	2a000017 	ldw	r8,0(r5)
4102bc80:	e0c00117 	ldw	r3,4(fp)
4102bc84:	2a400117 	ldw	r9,4(r5)
4102bc88:	1009883a 	mov	r4,r2
4102bc8c:	180b883a 	mov	r5,r3
4102bc90:	480f883a 	mov	r7,r9
4102bc94:	400d883a 	mov	r6,r8
4102bc98:	102fd840 	call	4102fd84 <__muldf3>
4102bc9c:	e0c00115 	stw	r3,4(fp)
4102bca0:	e0800015 	stw	r2,0(fp)
4102bca4:	00bffc04 	movi	r2,-16
4102bca8:	808c703a 	and	r6,r16,r2
4102bcac:	30005b26 	beq	r6,zero,4102be1c <_strtod_r+0x82c>
4102bcb0:	00804d04 	movi	r2,308
4102bcb4:	1181fd16 	blt	r2,r6,4102c4ac <_strtod_r+0xebc>
4102bcb8:	3021d13a 	srai	r16,r6,4
4102bcbc:	00800044 	movi	r2,1
4102bcc0:	1403610e 	bge	r2,r16,4102ca48 <_strtod_r+0x1458>
4102bcc4:	102f883a 	mov	r23,r2
4102bcc8:	0025883a 	mov	r18,zero
4102bccc:	04400034 	movhi	r17,0
4102bcd0:	8c43ca04 	addi	r17,r17,3880
4102bcd4:	8080004c 	andi	r2,r16,1
4102bcd8:	1005003a 	cmpeq	r2,r2,zero
4102bcdc:	1000091e 	bne	r2,zero,4102bd04 <_strtod_r+0x714>
4102bce0:	e0800017 	ldw	r2,0(fp)
4102bce4:	e0c00117 	ldw	r3,4(fp)
4102bce8:	89800017 	ldw	r6,0(r17)
4102bcec:	89c00117 	ldw	r7,4(r17)
4102bcf0:	180b883a 	mov	r5,r3
4102bcf4:	1009883a 	mov	r4,r2
4102bcf8:	102fd840 	call	4102fd84 <__muldf3>
4102bcfc:	e0c00115 	stw	r3,4(fp)
4102bd00:	e0800015 	stw	r2,0(fp)
4102bd04:	8021d07a 	srai	r16,r16,1
4102bd08:	94800044 	addi	r18,r18,1
4102bd0c:	8c400204 	addi	r17,r17,8
4102bd10:	bc3ff016 	blt	r23,r16,4102bcd4 <_strtod_r+0x6e4>
4102bd14:	900e90fa 	slli	r7,r18,3
4102bd18:	01800034 	movhi	r6,0
4102bd1c:	3183ca04 	addi	r6,r6,3880
4102bd20:	e2000117 	ldw	r8,4(fp)
4102bd24:	398f883a 	add	r7,r7,r6
4102bd28:	38800017 	ldw	r2,0(r7)
4102bd2c:	38c00117 	ldw	r3,4(r7)
4102bd30:	e1000017 	ldw	r4,0(fp)
4102bd34:	01bf2c34 	movhi	r6,64688
4102bd38:	418d883a 	add	r6,r8,r6
4102bd3c:	300b883a 	mov	r5,r6
4102bd40:	180f883a 	mov	r7,r3
4102bd44:	100d883a 	mov	r6,r2
4102bd48:	102fd840 	call	4102fd84 <__muldf3>
4102bd4c:	1009883a 	mov	r4,r2
4102bd50:	180b883a 	mov	r5,r3
4102bd54:	199ffc2c 	andhi	r6,r3,32752
4102bd58:	009f2834 	movhi	r2,31904
4102bd5c:	e1000015 	stw	r4,0(fp)
4102bd60:	e1400115 	stw	r5,4(fp)
4102bd64:	1181d136 	bltu	r2,r6,4102c4ac <_strtod_r+0xebc>
4102bd68:	009f2434 	movhi	r2,31888
4102bd6c:	1183202e 	bgeu	r2,r6,4102c9f0 <_strtod_r+0x1400>
4102bd70:	d8001415 	stw	zero,80(sp)
4102bd74:	019ffc34 	movhi	r6,32752
4102bd78:	31bfffc4 	addi	r6,r6,-1
4102bd7c:	01ffffc4 	movi	r7,-1
4102bd80:	e1800115 	stw	r6,4(fp)
4102bd84:	e1c00015 	stw	r7,0(fp)
4102bd88:	00002506 	br	4102be20 <_strtod_r+0x830>
4102bd8c:	00800c04 	movi	r2,48
4102bd90:	2083151e 	bne	r4,r2,4102c9e8 <_strtod_r+0x13f8>
4102bd94:	2005883a 	mov	r2,r4
4102bd98:	000f883a 	mov	r7,zero
4102bd9c:	42000044 	addi	r8,r8,1
4102bda0:	da000415 	stw	r8,16(sp)
4102bda4:	41000007 	ldb	r4,0(r8)
4102bda8:	39c00044 	addi	r7,r7,1
4102bdac:	20bffb26 	beq	r4,r2,4102bd9c <_strtod_r+0x7ac>
4102bdb0:	20fff3c4 	addi	r3,r4,-49
4102bdb4:	00800204 	movi	r2,8
4102bdb8:	10c1b836 	bltu	r2,r3,4102c49c <_strtod_r+0xeac>
4102bdbc:	dd800417 	ldw	r22,16(sp)
4102bdc0:	3815883a 	mov	r10,r7
4102bdc4:	227ff404 	addi	r9,r4,-48
4102bdc8:	b011883a 	mov	r8,r22
4102bdcc:	0027883a 	mov	r19,zero
4102bdd0:	01c00044 	movi	r7,1
4102bdd4:	4801fe26 	beq	r9,zero,4102c5d0 <_strtod_r+0xfe0>
4102bdd8:	00800044 	movi	r2,1
4102bddc:	51d5883a 	add	r10,r10,r7
4102bde0:	11c31f0e 	bge	r2,r7,4102ca60 <_strtod_r+0x1470>
4102bde4:	1009883a 	mov	r4,r2
4102bde8:	9807883a 	mov	r3,r19
4102bdec:	02c00204 	movi	r11,8
4102bdf0:	03000404 	movi	r12,16
4102bdf4:	00000306 	br	4102be04 <_strtod_r+0x814>
4102bdf8:	a50002a4 	muli	r20,r20,10
4102bdfc:	21000044 	addi	r4,r4,1
4102be00:	21c1eb26 	beq	r4,r7,4102c5b0 <_strtod_r+0xfc0>
4102be04:	18c00044 	addi	r3,r3,1
4102be08:	18bfffc4 	addi	r2,r3,-1
4102be0c:	58bffa0e 	bge	r11,r2,4102bdf8 <_strtod_r+0x808>
4102be10:	60fffa16 	blt	r12,r3,4102bdfc <_strtod_r+0x80c>
4102be14:	840002a4 	muli	r16,r16,10
4102be18:	003ff806 	br	4102bdfc <_strtod_r+0x80c>
4102be1c:	d8001415 	stw	zero,80(sp)
4102be20:	d9801217 	ldw	r6,72(sp)
4102be24:	a809883a 	mov	r4,r21
4102be28:	b00b883a 	mov	r5,r22
4102be2c:	980f883a 	mov	r7,r19
4102be30:	dd000015 	stw	r20,0(sp)
4102be34:	102a6b40 	call	4102a6b4 <__s2b>
4102be38:	d9800f17 	ldw	r6,60(sp)
4102be3c:	11000304 	addi	r4,r2,12
4102be40:	d8801015 	stw	r2,64(sp)
4102be44:	300c803a 	cmplt	r6,r6,zero
4102be48:	d9001715 	stw	r4,92(sp)
4102be4c:	d9801615 	stw	r6,88(sp)
4102be50:	d8801017 	ldw	r2,64(sp)
4102be54:	a809883a 	mov	r4,r21
4102be58:	11400117 	ldw	r5,4(r2)
4102be5c:	1029d600 	call	41029d60 <_Balloc>
4102be60:	d8c01017 	ldw	r3,64(sp)
4102be64:	d9401717 	ldw	r5,92(sp)
4102be68:	11000304 	addi	r4,r2,12
4102be6c:	19800417 	ldw	r6,16(r3)
4102be70:	102f883a 	mov	r23,r2
4102be74:	318d883a 	add	r6,r6,r6
4102be78:	318d883a 	add	r6,r6,r6
4102be7c:	31800204 	addi	r6,r6,8
4102be80:	1022c800 	call	41022c80 <memcpy>
4102be84:	e2000017 	ldw	r8,0(fp)
4102be88:	e2400117 	ldw	r9,4(fp)
4102be8c:	d9800304 	addi	r6,sp,12
4102be90:	400b883a 	mov	r5,r8
4102be94:	a809883a 	mov	r4,r21
4102be98:	d9c00204 	addi	r7,sp,8
4102be9c:	d9800015 	stw	r6,0(sp)
4102bea0:	480d883a 	mov	r6,r9
4102bea4:	1029e1c0 	call	41029e1c <__d2b>
4102bea8:	a809883a 	mov	r4,r21
4102beac:	01400044 	movi	r5,1
4102beb0:	d8800515 	stw	r2,20(sp)
4102beb4:	102a4580 	call	4102a458 <__i2b>
4102beb8:	102d883a 	mov	r22,r2
4102bebc:	d8801617 	ldw	r2,88(sp)
4102bec0:	1001051e 	bne	r2,zero,4102c2d8 <_strtod_r+0xce8>
4102bec4:	dd000f17 	ldw	r20,60(sp)
4102bec8:	000f883a 	mov	r7,zero
4102becc:	0013883a 	mov	r9,zero
4102bed0:	a011883a 	mov	r8,r20
4102bed4:	d8800217 	ldw	r2,8(sp)
4102bed8:	1000fd16 	blt	r2,zero,4102c2d0 <_strtod_r+0xce0>
4102bedc:	388f883a 	add	r7,r7,r2
4102bee0:	d9801417 	ldw	r6,80(sp)
4102bee4:	d9400317 	ldw	r5,12(sp)
4102bee8:	00ff0084 	movi	r3,-1022
4102beec:	1189c83a 	sub	r4,r2,r6
4102bef0:	2145883a 	add	r2,r4,r5
4102bef4:	10bfffc4 	addi	r2,r2,-1
4102bef8:	10c09f0e 	bge	r2,r3,4102c178 <_strtod_r+0xb88>
4102befc:	21810cc4 	addi	r6,r4,1075
4102bf00:	d8c01417 	ldw	r3,80(sp)
4102bf04:	4185883a 	add	r2,r8,r6
4102bf08:	39a1883a 	add	r16,r7,r6
4102bf0c:	18a5883a 	add	r18,r3,r2
4102bf10:	3807883a 	mov	r3,r7
4102bf14:	81c0010e 	bge	r16,r7,4102bf1c <_strtod_r+0x92c>
4102bf18:	8007883a 	mov	r3,r16
4102bf1c:	9005883a 	mov	r2,r18
4102bf20:	1c80010e 	bge	r3,r18,4102bf28 <_strtod_r+0x938>
4102bf24:	1805883a 	mov	r2,r3
4102bf28:	0080e70e 	bge	zero,r2,4102c2c8 <_strtod_r+0xcd8>
4102bf2c:	38a7c83a 	sub	r19,r7,r2
4102bf30:	80a1c83a 	sub	r16,r16,r2
4102bf34:	90a5c83a 	sub	r18,r18,r2
4102bf38:	02400e0e 	bge	zero,r9,4102bf74 <_strtod_r+0x984>
4102bf3c:	480d883a 	mov	r6,r9
4102bf40:	b00b883a 	mov	r5,r22
4102bf44:	a809883a 	mov	r4,r21
4102bf48:	102a5940 	call	4102a594 <__pow5mult>
4102bf4c:	d9800517 	ldw	r6,20(sp)
4102bf50:	a809883a 	mov	r4,r21
4102bf54:	100b883a 	mov	r5,r2
4102bf58:	102d883a 	mov	r22,r2
4102bf5c:	102a2700 	call	4102a270 <__multiply>
4102bf60:	d9400517 	ldw	r5,20(sp)
4102bf64:	1023883a 	mov	r17,r2
4102bf68:	a809883a 	mov	r4,r21
4102bf6c:	10297e00 	call	410297e0 <_Bfree>
4102bf70:	dc400515 	stw	r17,20(sp)
4102bf74:	0400050e 	bge	zero,r16,4102bf8c <_strtod_r+0x99c>
4102bf78:	d9400517 	ldw	r5,20(sp)
4102bf7c:	800d883a 	mov	r6,r16
4102bf80:	a809883a 	mov	r4,r21
4102bf84:	102a1240 	call	4102a124 <__lshift>
4102bf88:	d8800515 	stw	r2,20(sp)
4102bf8c:	a000741e 	bne	r20,zero,4102c160 <_strtod_r+0xb70>
4102bf90:	0480050e 	bge	zero,r18,4102bfa8 <_strtod_r+0x9b8>
4102bf94:	b80b883a 	mov	r5,r23
4102bf98:	900d883a 	mov	r6,r18
4102bf9c:	a809883a 	mov	r4,r21
4102bfa0:	102a1240 	call	4102a124 <__lshift>
4102bfa4:	102f883a 	mov	r23,r2
4102bfa8:	04c0050e 	bge	zero,r19,4102bfc0 <_strtod_r+0x9d0>
4102bfac:	b00b883a 	mov	r5,r22
4102bfb0:	980d883a 	mov	r6,r19
4102bfb4:	a809883a 	mov	r4,r21
4102bfb8:	102a1240 	call	4102a124 <__lshift>
4102bfbc:	102d883a 	mov	r22,r2
4102bfc0:	d9400517 	ldw	r5,20(sp)
4102bfc4:	a809883a 	mov	r4,r21
4102bfc8:	b80d883a 	mov	r6,r23
4102bfcc:	1029f980 	call	41029f98 <__mdiff>
4102bfd0:	11000317 	ldw	r4,12(r2)
4102bfd4:	b00b883a 	mov	r5,r22
4102bfd8:	10000315 	stw	zero,12(r2)
4102bfdc:	d9001315 	stw	r4,76(sp)
4102bfe0:	1009883a 	mov	r4,r2
4102bfe4:	1029883a 	mov	r20,r2
4102bfe8:	102993c0 	call	4102993c <__mcmp>
4102bfec:	10017c16 	blt	r2,zero,4102c5e0 <_strtod_r+0xff0>
4102bff0:	1001af26 	beq	r2,zero,4102c6b0 <_strtod_r+0x10c0>
4102bff4:	a009883a 	mov	r4,r20
4102bff8:	b00b883a 	mov	r5,r22
4102bffc:	1029b3c0 	call	41029b3c <__ratio>
4102c000:	0011883a 	mov	r8,zero
4102c004:	02500034 	movhi	r9,16384
4102c008:	480f883a 	mov	r7,r9
4102c00c:	1009883a 	mov	r4,r2
4102c010:	180b883a 	mov	r5,r3
4102c014:	400d883a 	mov	r6,r8
4102c018:	1021883a 	mov	r16,r2
4102c01c:	1823883a 	mov	r17,r3
4102c020:	10306380 	call	41030638 <__ledf2>
4102c024:	00805716 	blt	zero,r2,4102c184 <_strtod_r+0xb94>
4102c028:	d9801317 	ldw	r6,76(sp)
4102c02c:	3025003a 	cmpeq	r18,r6,zero
4102c030:	90008b1e 	bne	r18,zero,4102c260 <_strtod_r+0xc70>
4102c034:	008ffc34 	movhi	r2,16368
4102c038:	0021883a 	mov	r16,zero
4102c03c:	1023883a 	mov	r17,r2
4102c040:	d8000715 	stw	zero,28(sp)
4102c044:	d8800815 	stw	r2,32(sp)
4102c048:	e1c00117 	ldw	r7,4(fp)
4102c04c:	009ff834 	movhi	r2,32736
4102c050:	3cdffc2c 	andhi	r19,r7,32752
4102c054:	98805e26 	beq	r19,r2,4102c1d0 <_strtod_r+0xbe0>
4102c058:	d8801417 	ldw	r2,80(sp)
4102c05c:	10001b26 	beq	r2,zero,4102c0cc <_strtod_r+0xadc>
4102c060:	0081a834 	movhi	r2,1696
4102c064:	14c01936 	bltu	r2,r19,4102c0cc <_strtod_r+0xadc>
4102c068:	00bff034 	movhi	r2,65472
4102c06c:	00d07834 	movhi	r3,16864
4102c070:	18ffffc4 	addi	r3,r3,-1
4102c074:	180f883a 	mov	r7,r3
4102c078:	8009883a 	mov	r4,r16
4102c07c:	880b883a 	mov	r5,r17
4102c080:	100d883a 	mov	r6,r2
4102c084:	10306380 	call	41030638 <__ledf2>
4102c088:	00800b16 	blt	zero,r2,4102c0b8 <_strtod_r+0xac8>
4102c08c:	880b883a 	mov	r5,r17
4102c090:	8009883a 	mov	r4,r16
4102c094:	102eae80 	call	4102eae8 <__fixunsdfsi>
4102c098:	1000df1e 	bne	r2,zero,4102c418 <_strtod_r+0xe28>
4102c09c:	0021883a 	mov	r16,zero
4102c0a0:	044ffc34 	movhi	r17,16368
4102c0a4:	9000d91e 	bne	r18,zero,4102c40c <_strtod_r+0xe1c>
4102c0a8:	8005883a 	mov	r2,r16
4102c0ac:	8807883a 	mov	r3,r17
4102c0b0:	d8c00815 	stw	r3,32(sp)
4102c0b4:	d8800715 	stw	r2,28(sp)
4102c0b8:	d8800817 	ldw	r2,32(sp)
4102c0bc:	00c1ac34 	movhi	r3,1712
4102c0c0:	14c5c83a 	sub	r2,r2,r19
4102c0c4:	10c5883a 	add	r2,r2,r3
4102c0c8:	d8800815 	stw	r2,32(sp)
4102c0cc:	e0800017 	ldw	r2,0(fp)
4102c0d0:	e0c00117 	ldw	r3,4(fp)
4102c0d4:	1009883a 	mov	r4,r2
4102c0d8:	180b883a 	mov	r5,r3
4102c0dc:	102999c0 	call	4102999c <__ulp>
4102c0e0:	d9800717 	ldw	r6,28(sp)
4102c0e4:	d9c00817 	ldw	r7,32(sp)
4102c0e8:	180b883a 	mov	r5,r3
4102c0ec:	1009883a 	mov	r4,r2
4102c0f0:	102fd840 	call	4102fd84 <__muldf3>
4102c0f4:	e2000017 	ldw	r8,0(fp)
4102c0f8:	e2400117 	ldw	r9,4(fp)
4102c0fc:	180b883a 	mov	r5,r3
4102c100:	1009883a 	mov	r4,r2
4102c104:	480f883a 	mov	r7,r9
4102c108:	400d883a 	mov	r6,r8
4102c10c:	102fd100 	call	4102fd10 <__adddf3>
4102c110:	e0c00115 	stw	r3,4(fp)
4102c114:	e0800015 	stw	r2,0(fp)
4102c118:	d8c01417 	ldw	r3,80(sp)
4102c11c:	e4800117 	ldw	r18,4(fp)
4102c120:	1800021e 	bne	r3,zero,4102c12c <_strtod_r+0xb3c>
4102c124:	909ffc2c 	andhi	r2,r18,32752
4102c128:	98807b26 	beq	r19,r2,4102c318 <_strtod_r+0xd28>
4102c12c:	d9400517 	ldw	r5,20(sp)
4102c130:	a809883a 	mov	r4,r21
4102c134:	10297e00 	call	410297e0 <_Bfree>
4102c138:	a809883a 	mov	r4,r21
4102c13c:	b80b883a 	mov	r5,r23
4102c140:	10297e00 	call	410297e0 <_Bfree>
4102c144:	a809883a 	mov	r4,r21
4102c148:	b00b883a 	mov	r5,r22
4102c14c:	10297e00 	call	410297e0 <_Bfree>
4102c150:	a809883a 	mov	r4,r21
4102c154:	a00b883a 	mov	r5,r20
4102c158:	10297e00 	call	410297e0 <_Bfree>
4102c15c:	003f3c06 	br	4102be50 <_strtod_r+0x860>
4102c160:	b80b883a 	mov	r5,r23
4102c164:	a00d883a 	mov	r6,r20
4102c168:	a809883a 	mov	r4,r21
4102c16c:	102a5940 	call	4102a594 <__pow5mult>
4102c170:	102f883a 	mov	r23,r2
4102c174:	003f8606 	br	4102bf90 <_strtod_r+0x9a0>
4102c178:	00800d84 	movi	r2,54
4102c17c:	114dc83a 	sub	r6,r2,r5
4102c180:	003f5f06 	br	4102bf00 <_strtod_r+0x910>
4102c184:	0005883a 	mov	r2,zero
4102c188:	00cff834 	movhi	r3,16352
4102c18c:	880b883a 	mov	r5,r17
4102c190:	8009883a 	mov	r4,r16
4102c194:	100d883a 	mov	r6,r2
4102c198:	180f883a 	mov	r7,r3
4102c19c:	102fd840 	call	4102fd84 <__muldf3>
4102c1a0:	d9801317 	ldw	r6,76(sp)
4102c1a4:	1021883a 	mov	r16,r2
4102c1a8:	1823883a 	mov	r17,r3
4102c1ac:	3025003a 	cmpeq	r18,r6,zero
4102c1b0:	90000126 	beq	r18,zero,4102c1b8 <_strtod_r+0xbc8>
4102c1b4:	18e0003c 	xorhi	r3,r3,32768
4102c1b8:	d8800715 	stw	r2,28(sp)
4102c1bc:	d8c00815 	stw	r3,32(sp)
4102c1c0:	e1c00117 	ldw	r7,4(fp)
4102c1c4:	009ff834 	movhi	r2,32736
4102c1c8:	3cdffc2c 	andhi	r19,r7,32752
4102c1cc:	98bfa21e 	bne	r19,r2,4102c058 <_strtod_r+0xa68>
4102c1d0:	e1000017 	ldw	r4,0(fp)
4102c1d4:	01bf2c34 	movhi	r6,64688
4102c1d8:	398d883a 	add	r6,r7,r6
4102c1dc:	d9000b15 	stw	r4,44(sp)
4102c1e0:	d9c00c15 	stw	r7,48(sp)
4102c1e4:	300b883a 	mov	r5,r6
4102c1e8:	e1800115 	stw	r6,4(fp)
4102c1ec:	102999c0 	call	4102999c <__ulp>
4102c1f0:	d9800717 	ldw	r6,28(sp)
4102c1f4:	d9c00817 	ldw	r7,32(sp)
4102c1f8:	180b883a 	mov	r5,r3
4102c1fc:	1009883a 	mov	r4,r2
4102c200:	102fd840 	call	4102fd84 <__muldf3>
4102c204:	e2000017 	ldw	r8,0(fp)
4102c208:	e2400117 	ldw	r9,4(fp)
4102c20c:	180b883a 	mov	r5,r3
4102c210:	1009883a 	mov	r4,r2
4102c214:	480f883a 	mov	r7,r9
4102c218:	400d883a 	mov	r6,r8
4102c21c:	102fd100 	call	4102fd10 <__adddf3>
4102c220:	1009883a 	mov	r4,r2
4102c224:	180b883a 	mov	r5,r3
4102c228:	009f2834 	movhi	r2,31904
4102c22c:	10bfffc4 	addi	r2,r2,-1
4102c230:	18dffc2c 	andhi	r3,r3,32752
4102c234:	e1000015 	stw	r4,0(fp)
4102c238:	e1400115 	stw	r5,4(fp)
4102c23c:	10c06f2e 	bgeu	r2,r3,4102c3fc <_strtod_r+0xe0c>
4102c240:	d8800c17 	ldw	r2,48(sp)
4102c244:	011ffc34 	movhi	r4,32752
4102c248:	213fffc4 	addi	r4,r4,-1
4102c24c:	11007a26 	beq	r2,r4,4102c438 <_strtod_r+0xe48>
4102c250:	01ffffc4 	movi	r7,-1
4102c254:	e1000115 	stw	r4,4(fp)
4102c258:	e1c00015 	stw	r7,0(fp)
4102c25c:	003fb306 	br	4102c12c <_strtod_r+0xb3c>
4102c260:	e0c00017 	ldw	r3,0(fp)
4102c264:	1800221e 	bne	r3,zero,4102c2f0 <_strtod_r+0xd00>
4102c268:	e0800117 	ldw	r2,4(fp)
4102c26c:	00c00434 	movhi	r3,16
4102c270:	18ffffc4 	addi	r3,r3,-1
4102c274:	10c4703a 	and	r2,r2,r3
4102c278:	1000211e 	bne	r2,zero,4102c300 <_strtod_r+0xd10>
4102c27c:	0005883a 	mov	r2,zero
4102c280:	00cffc34 	movhi	r3,16368
4102c284:	180f883a 	mov	r7,r3
4102c288:	8009883a 	mov	r4,r16
4102c28c:	880b883a 	mov	r5,r17
4102c290:	100d883a 	mov	r6,r2
4102c294:	10305b00 	call	410305b0 <__ltdf2>
4102c298:	10013c16 	blt	r2,zero,4102c78c <_strtod_r+0x119c>
4102c29c:	0005883a 	mov	r2,zero
4102c2a0:	00cff834 	movhi	r3,16352
4102c2a4:	880b883a 	mov	r5,r17
4102c2a8:	8009883a 	mov	r4,r16
4102c2ac:	180f883a 	mov	r7,r3
4102c2b0:	100d883a 	mov	r6,r2
4102c2b4:	102fd840 	call	4102fd84 <__muldf3>
4102c2b8:	1823883a 	mov	r17,r3
4102c2bc:	1021883a 	mov	r16,r2
4102c2c0:	18e0003c 	xorhi	r3,r3,32768
4102c2c4:	003fbc06 	br	4102c1b8 <_strtod_r+0xbc8>
4102c2c8:	3827883a 	mov	r19,r7
4102c2cc:	003f1a06 	br	4102bf38 <_strtod_r+0x948>
4102c2d0:	4091c83a 	sub	r8,r8,r2
4102c2d4:	003f0206 	br	4102bee0 <_strtod_r+0x8f0>
4102c2d8:	d8c00f17 	ldw	r3,60(sp)
4102c2dc:	0011883a 	mov	r8,zero
4102c2e0:	0029883a 	mov	r20,zero
4102c2e4:	00d3c83a 	sub	r9,zero,r3
4102c2e8:	480f883a 	mov	r7,r9
4102c2ec:	003ef906 	br	4102bed4 <_strtod_r+0x8e4>
4102c2f0:	00800044 	movi	r2,1
4102c2f4:	1880021e 	bne	r3,r2,4102c300 <_strtod_r+0xd10>
4102c2f8:	e0800117 	ldw	r2,4(fp)
4102c2fc:	1000a526 	beq	r2,zero,4102c594 <_strtod_r+0xfa4>
4102c300:	00affc34 	movhi	r2,49136
4102c304:	0021883a 	mov	r16,zero
4102c308:	044ffc34 	movhi	r17,16368
4102c30c:	d8800815 	stw	r2,32(sp)
4102c310:	d8000715 	stw	zero,28(sp)
4102c314:	003f4c06 	br	4102c048 <_strtod_r+0xa58>
4102c318:	880b883a 	mov	r5,r17
4102c31c:	8009883a 	mov	r4,r16
4102c320:	10307b80 	call	410307b8 <__fixdfsi>
4102c324:	1009883a 	mov	r4,r2
4102c328:	10306c00 	call	410306c0 <__floatsidf>
4102c32c:	880b883a 	mov	r5,r17
4102c330:	8009883a 	mov	r4,r16
4102c334:	100d883a 	mov	r6,r2
4102c338:	180f883a 	mov	r7,r3
4102c33c:	102fc900 	call	4102fc90 <__subdf3>
4102c340:	d9001317 	ldw	r4,76(sp)
4102c344:	100b883a 	mov	r5,r2
4102c348:	180d883a 	mov	r6,r3
4102c34c:	1021883a 	mov	r16,r2
4102c350:	1823883a 	mov	r17,r3
4102c354:	2000061e 	bne	r4,zero,4102c370 <_strtod_r+0xd80>
4102c358:	e0800017 	ldw	r2,0(fp)
4102c35c:	1000041e 	bne	r2,zero,4102c370 <_strtod_r+0xd80>
4102c360:	00c00434 	movhi	r3,16
4102c364:	18ffffc4 	addi	r3,r3,-1
4102c368:	90c4703a 	and	r2,r18,r3
4102c36c:	10004026 	beq	r2,zero,4102c470 <_strtod_r+0xe80>
4102c370:	00a52834 	movhi	r2,38048
4102c374:	108d6544 	addi	r2,r2,13717
4102c378:	00cff834 	movhi	r3,16352
4102c37c:	18ffffc4 	addi	r3,r3,-1
4102c380:	180f883a 	mov	r7,r3
4102c384:	8009883a 	mov	r4,r16
4102c388:	880b883a 	mov	r5,r17
4102c38c:	100d883a 	mov	r6,r2
4102c390:	10305b00 	call	410305b0 <__ltdf2>
4102c394:	10000916 	blt	r2,zero,4102c3bc <_strtod_r+0xdcc>
4102c398:	008d6c34 	movhi	r2,13744
4102c39c:	10b94d44 	addi	r2,r2,-6859
4102c3a0:	00cff834 	movhi	r3,16352
4102c3a4:	880b883a 	mov	r5,r17
4102c3a8:	180f883a 	mov	r7,r3
4102c3ac:	8009883a 	mov	r4,r16
4102c3b0:	100d883a 	mov	r6,r2
4102c3b4:	10304a00 	call	410304a0 <__gtdf2>
4102c3b8:	00bf5c0e 	bge	zero,r2,4102c12c <_strtod_r+0xb3c>
4102c3bc:	d9400517 	ldw	r5,20(sp)
4102c3c0:	a809883a 	mov	r4,r21
4102c3c4:	10297e00 	call	410297e0 <_Bfree>
4102c3c8:	a809883a 	mov	r4,r21
4102c3cc:	b80b883a 	mov	r5,r23
4102c3d0:	10297e00 	call	410297e0 <_Bfree>
4102c3d4:	a809883a 	mov	r4,r21
4102c3d8:	b00b883a 	mov	r5,r22
4102c3dc:	10297e00 	call	410297e0 <_Bfree>
4102c3e0:	d9401017 	ldw	r5,64(sp)
4102c3e4:	a809883a 	mov	r4,r21
4102c3e8:	10297e00 	call	410297e0 <_Bfree>
4102c3ec:	a809883a 	mov	r4,r21
4102c3f0:	a00b883a 	mov	r5,r20
4102c3f4:	10297e00 	call	410297e0 <_Bfree>
4102c3f8:	003cf406 	br	4102b7cc <_strtod_r+0x1dc>
4102c3fc:	0080d434 	movhi	r2,848
4102c400:	288d883a 	add	r6,r5,r2
4102c404:	e1800115 	stw	r6,4(fp)
4102c408:	003f4306 	br	4102c118 <_strtod_r+0xb28>
4102c40c:	8005883a 	mov	r2,r16
4102c410:	88e0003c 	xorhi	r3,r17,32768
4102c414:	003f2606 	br	4102c0b0 <_strtod_r+0xac0>
4102c418:	1009883a 	mov	r4,r2
4102c41c:	10309040 	call	41030904 <__floatunsidf>
4102c420:	1021883a 	mov	r16,r2
4102c424:	1823883a 	mov	r17,r3
4102c428:	003f1e06 	br	4102c0a4 <_strtod_r+0xab4>
4102c42c:	da000417 	ldw	r8,16(sp)
4102c430:	39c00044 	addi	r7,r7,1
4102c434:	003e6706 	br	4102bdd4 <_strtod_r+0x7e4>
4102c438:	d8c00b17 	ldw	r3,44(sp)
4102c43c:	00bfffc4 	movi	r2,-1
4102c440:	18bf831e 	bne	r3,r2,4102c250 <_strtod_r+0xc60>
4102c444:	00c00884 	movi	r3,34
4102c448:	a8c00015 	stw	r3,0(r21)
4102c44c:	009ffc34 	movhi	r2,32752
4102c450:	e0800115 	stw	r2,4(fp)
4102c454:	e0000015 	stw	zero,0(fp)
4102c458:	003fd806 	br	4102c3bc <_strtod_r+0xdcc>
4102c45c:	4007883a 	mov	r3,r8
4102c460:	000d883a 	mov	r6,zero
4102c464:	0029883a 	mov	r20,zero
4102c468:	0021883a 	mov	r16,zero
4102c46c:	003cc906 	br	4102b794 <_strtod_r+0x1a4>
4102c470:	00a52834 	movhi	r2,38048
4102c474:	108d6544 	addi	r2,r2,13717
4102c478:	00cff434 	movhi	r3,16336
4102c47c:	18ffffc4 	addi	r3,r3,-1
4102c480:	2809883a 	mov	r4,r5
4102c484:	180f883a 	mov	r7,r3
4102c488:	300b883a 	mov	r5,r6
4102c48c:	100d883a 	mov	r6,r2
4102c490:	10305b00 	call	410305b0 <__ltdf2>
4102c494:	103f250e 	bge	r2,zero,4102c12c <_strtod_r+0xb3c>
4102c498:	003fc806 	br	4102c3bc <_strtod_r+0xdcc>
4102c49c:	0027883a 	mov	r19,zero
4102c4a0:	04800044 	movi	r18,1
4102c4a4:	0015883a 	mov	r10,zero
4102c4a8:	003cc006 	br	4102b7ac <_strtod_r+0x1bc>
4102c4ac:	00800884 	movi	r2,34
4102c4b0:	a8800015 	stw	r2,0(r21)
4102c4b4:	019ffc34 	movhi	r6,32752
4102c4b8:	e1800115 	stw	r6,4(fp)
4102c4bc:	e0000015 	stw	zero,0(fp)
4102c4c0:	003cc206 	br	4102b7cc <_strtod_r+0x1dc>
4102c4c4:	015387c4 	movi	r5,19999
4102c4c8:	003d1e06 	br	4102b944 <_strtod_r+0x354>
4102c4cc:	300a90fa 	slli	r5,r6,3
4102c4d0:	e0800017 	ldw	r2,0(fp)
4102c4d4:	e0c00117 	ldw	r3,4(fp)
4102c4d8:	01000034 	movhi	r4,0
4102c4dc:	21039804 	addi	r4,r4,3680
4102c4e0:	290b883a 	add	r5,r5,r4
4102c4e4:	2a000017 	ldw	r8,0(r5)
4102c4e8:	2a400117 	ldw	r9,4(r5)
4102c4ec:	1009883a 	mov	r4,r2
4102c4f0:	180b883a 	mov	r5,r3
4102c4f4:	480f883a 	mov	r7,r9
4102c4f8:	400d883a 	mov	r6,r8
4102c4fc:	102fd840 	call	4102fd84 <__muldf3>
4102c500:	e0c00115 	stw	r3,4(fp)
4102c504:	e0800015 	stw	r2,0(fp)
4102c508:	003cb006 	br	4102b7cc <_strtod_r+0x1dc>
4102c50c:	d8800d17 	ldw	r2,52(sp)
4102c510:	e0800015 	stw	r2,0(fp)
4102c514:	d8c00e17 	ldw	r3,56(sp)
4102c518:	e0c00115 	stw	r3,4(fp)
4102c51c:	9880020c 	andi	r2,r19,8
4102c520:	103caa26 	beq	r2,zero,4102b7cc <_strtod_r+0x1dc>
4102c524:	e0800117 	ldw	r2,4(fp)
4102c528:	10a00034 	orhi	r2,r2,32768
4102c52c:	e0800115 	stw	r2,4(fp)
4102c530:	003ca606 	br	4102b7cc <_strtod_r+0x1dc>
4102c534:	009ffc34 	movhi	r2,32752
4102c538:	e0800115 	stw	r2,4(fp)
4102c53c:	e0000015 	stw	zero,0(fp)
4102c540:	003ff606 	br	4102c51c <_strtod_r+0xf2c>
4102c544:	00a00034 	movhi	r2,32768
4102c548:	10bfffc4 	addi	r2,r2,-1
4102c54c:	00ffffc4 	movi	r3,-1
4102c550:	e0800115 	stw	r2,4(fp)
4102c554:	e0c00015 	stw	r3,0(fp)
4102c558:	003ff006 	br	4102c51c <_strtod_r+0xf2c>
4102c55c:	e0000115 	stw	zero,4(fp)
4102c560:	e0000015 	stw	zero,0(fp)
4102c564:	003fed06 	br	4102c51c <_strtod_r+0xf2c>
4102c568:	d8800e17 	ldw	r2,56(sp)
4102c56c:	29010cc4 	addi	r4,r5,1075
4102c570:	00fffc34 	movhi	r3,65520
4102c574:	18ffffc4 	addi	r3,r3,-1
4102c578:	2008953a 	slli	r4,r4,20
4102c57c:	10c4703a 	and	r2,r2,r3
4102c580:	d8c00d17 	ldw	r3,52(sp)
4102c584:	1104b03a 	or	r2,r2,r4
4102c588:	e0800115 	stw	r2,4(fp)
4102c58c:	e0c00015 	stw	r3,0(fp)
4102c590:	003fe206 	br	4102c51c <_strtod_r+0xf2c>
4102c594:	00800884 	movi	r2,34
4102c598:	a8800015 	stw	r2,0(r21)
4102c59c:	e0000015 	stw	zero,0(fp)
4102c5a0:	e0000115 	stw	zero,4(fp)
4102c5a4:	003f8506 	br	4102c3bc <_strtod_r+0xdcc>
4102c5a8:	03800044 	movi	r14,1
4102c5ac:	003d7706 	br	4102bb8c <_strtod_r+0x59c>
4102c5b0:	99c5883a 	add	r2,r19,r7
4102c5b4:	11ffffc4 	addi	r7,r2,-1
4102c5b8:	00800204 	movi	r2,8
4102c5bc:	3cc00044 	addi	r19,r7,1
4102c5c0:	11c0df16 	blt	r2,r7,4102c940 <_strtod_r+0x1350>
4102c5c4:	a08002a4 	muli	r2,r20,10
4102c5c8:	000f883a 	mov	r7,zero
4102c5cc:	1269883a 	add	r20,r2,r9
4102c5d0:	42000044 	addi	r8,r8,1
4102c5d4:	da000415 	stw	r8,16(sp)
4102c5d8:	41000007 	ldb	r4,0(r8)
4102c5dc:	003d3706 	br	4102babc <_strtod_r+0x4cc>
4102c5e0:	d9801317 	ldw	r6,76(sp)
4102c5e4:	3000511e 	bne	r6,zero,4102c72c <_strtod_r+0x113c>
4102c5e8:	e0800017 	ldw	r2,0(fp)
4102c5ec:	1000d81e 	bne	r2,zero,4102c950 <_strtod_r+0x1360>
4102c5f0:	e0c00117 	ldw	r3,4(fp)
4102c5f4:	01000434 	movhi	r4,16
4102c5f8:	213fffc4 	addi	r4,r4,-1
4102c5fc:	1904703a 	and	r2,r3,r4
4102c600:	1000b01e 	bne	r2,zero,4102c8c4 <_strtod_r+0x12d4>
4102c604:	18dffc2c 	andhi	r3,r3,32752
4102c608:	0081ac34 	movhi	r2,1712
4102c60c:	10c1102e 	bgeu	r2,r3,4102ca50 <_strtod_r+0x1460>
4102c610:	a0800517 	ldw	r2,20(r20)
4102c614:	1000031e 	bne	r2,zero,4102c624 <_strtod_r+0x1034>
4102c618:	a0c00417 	ldw	r3,16(r20)
4102c61c:	00800044 	movi	r2,1
4102c620:	10c0420e 	bge	r2,r3,4102c72c <_strtod_r+0x113c>
4102c624:	a00b883a 	mov	r5,r20
4102c628:	a809883a 	mov	r4,r21
4102c62c:	01800044 	movi	r6,1
4102c630:	102a1240 	call	4102a124 <__lshift>
4102c634:	1009883a 	mov	r4,r2
4102c638:	b00b883a 	mov	r5,r22
4102c63c:	1029883a 	mov	r20,r2
4102c640:	102993c0 	call	4102993c <__mcmp>
4102c644:	0080c20e 	bge	zero,r2,4102c950 <_strtod_r+0x1360>
4102c648:	e1800117 	ldw	r6,4(fp)
4102c64c:	d9001417 	ldw	r4,80(sp)
4102c650:	2013003a 	cmpeq	r9,r4,zero
4102c654:	4800ef1e 	bne	r9,zero,4102ca14 <_strtod_r+0x1424>
4102c658:	30dffc2c 	andhi	r3,r6,32752
4102c65c:	0081ac34 	movhi	r2,1712
4102c660:	10c0ec36 	bltu	r2,r3,4102ca14 <_strtod_r+0x1424>
4102c664:	0080dc34 	movhi	r2,880
4102c668:	10ffca2e 	bgeu	r2,r3,4102c594 <_strtod_r+0xfa4>
4102c66c:	e0800017 	ldw	r2,0(fp)
4102c670:	e0c00117 	ldw	r3,4(fp)
4102c674:	020e5434 	movhi	r8,14672
4102c678:	000d883a 	mov	r6,zero
4102c67c:	400f883a 	mov	r7,r8
4102c680:	180b883a 	mov	r5,r3
4102c684:	1009883a 	mov	r4,r2
4102c688:	da000c15 	stw	r8,48(sp)
4102c68c:	d8000b15 	stw	zero,44(sp)
4102c690:	102fd840 	call	4102fd84 <__muldf3>
4102c694:	e0800015 	stw	r2,0(fp)
4102c698:	e0c00115 	stw	r3,4(fp)
4102c69c:	183f471e 	bne	r3,zero,4102c3bc <_strtod_r+0xdcc>
4102c6a0:	103f461e 	bne	r2,zero,4102c3bc <_strtod_r+0xdcc>
4102c6a4:	00800884 	movi	r2,34
4102c6a8:	a8800015 	stw	r2,0(r21)
4102c6ac:	003f4306 	br	4102c3bc <_strtod_r+0xdcc>
4102c6b0:	d8801317 	ldw	r2,76(sp)
4102c6b4:	1025003a 	cmpeq	r18,r2,zero
4102c6b8:	9000861e 	bne	r18,zero,4102c8d4 <_strtod_r+0x12e4>
4102c6bc:	e1400117 	ldw	r5,4(fp)
4102c6c0:	00c00434 	movhi	r3,16
4102c6c4:	18ffffc4 	addi	r3,r3,-1
4102c6c8:	28c4703a 	and	r2,r5,r3
4102c6cc:	10c01b26 	beq	r2,r3,4102c73c <_strtod_r+0x114c>
4102c6d0:	e1c00017 	ldw	r7,0(fp)
4102c6d4:	3880004c 	andi	r2,r7,1
4102c6d8:	1005003a 	cmpeq	r2,r2,zero
4102c6dc:	1000791e 	bne	r2,zero,4102c8c4 <_strtod_r+0x12d4>
4102c6e0:	9000b126 	beq	r18,zero,4102c9a8 <_strtod_r+0x13b8>
4102c6e4:	e4400117 	ldw	r17,4(fp)
4102c6e8:	3809883a 	mov	r4,r7
4102c6ec:	3821883a 	mov	r16,r7
4102c6f0:	880b883a 	mov	r5,r17
4102c6f4:	102999c0 	call	4102999c <__ulp>
4102c6f8:	180f883a 	mov	r7,r3
4102c6fc:	880b883a 	mov	r5,r17
4102c700:	8009883a 	mov	r4,r16
4102c704:	100d883a 	mov	r6,r2
4102c708:	102fc900 	call	4102fc90 <__subdf3>
4102c70c:	1009883a 	mov	r4,r2
4102c710:	000d883a 	mov	r6,zero
4102c714:	000f883a 	mov	r7,zero
4102c718:	180b883a 	mov	r5,r3
4102c71c:	e0800015 	stw	r2,0(fp)
4102c720:	e0c00115 	stw	r3,4(fp)
4102c724:	10304180 	call	41030418 <__nedf2>
4102c728:	103f9a26 	beq	r2,zero,4102c594 <_strtod_r+0xfa4>
4102c72c:	d9001417 	ldw	r4,80(sp)
4102c730:	2013003a 	cmpeq	r9,r4,zero
4102c734:	483f211e 	bne	r9,zero,4102c3bc <_strtod_r+0xdcc>
4102c738:	003fcc06 	br	4102c66c <_strtod_r+0x107c>
4102c73c:	d9001417 	ldw	r4,80(sp)
4102c740:	e1c00017 	ldw	r7,0(fp)
4102c744:	2013003a 	cmpeq	r9,r4,zero
4102c748:	4800bd1e 	bne	r9,zero,4102ca40 <_strtod_r+0x1450>
4102c74c:	28dffc2c 	andhi	r3,r5,32752
4102c750:	0081a834 	movhi	r2,1696
4102c754:	10c0ba36 	bltu	r2,r3,4102ca40 <_strtod_r+0x1450>
4102c758:	1804d53a 	srli	r2,r3,20
4102c75c:	00c01ac4 	movi	r3,107
4102c760:	013fffc4 	movi	r4,-1
4102c764:	1887c83a 	sub	r3,r3,r2
4102c768:	20c4983a 	sll	r2,r4,r3
4102c76c:	11ffd91e 	bne	r2,r7,4102c6d4 <_strtod_r+0x10e4>
4102c770:	28dffc2c 	andhi	r3,r5,32752
4102c774:	00800434 	movhi	r2,16
4102c778:	188d883a 	add	r6,r3,r2
4102c77c:	e1800115 	stw	r6,4(fp)
4102c780:	e0000015 	stw	zero,0(fp)
4102c784:	483f0d1e 	bne	r9,zero,4102c3bc <_strtod_r+0xdcc>
4102c788:	003fb806 	br	4102c66c <_strtod_r+0x107c>
4102c78c:	0021883a 	mov	r16,zero
4102c790:	0005883a 	mov	r2,zero
4102c794:	044ff834 	movhi	r17,16352
4102c798:	00eff834 	movhi	r3,49120
4102c79c:	003e8606 	br	4102c1b8 <_strtod_r+0xbc8>
4102c7a0:	803d9e26 	beq	r16,zero,4102be1c <_strtod_r+0x82c>
4102c7a4:	0421c83a 	sub	r16,zero,r16
4102c7a8:	814003cc 	andi	r5,r16,15
4102c7ac:	28000f26 	beq	r5,zero,4102c7ec <_strtod_r+0x11fc>
4102c7b0:	280a90fa 	slli	r5,r5,3
4102c7b4:	01000034 	movhi	r4,0
4102c7b8:	21039804 	addi	r4,r4,3680
4102c7bc:	e0800017 	ldw	r2,0(fp)
4102c7c0:	290b883a 	add	r5,r5,r4
4102c7c4:	2a000017 	ldw	r8,0(r5)
4102c7c8:	e0c00117 	ldw	r3,4(fp)
4102c7cc:	2a400117 	ldw	r9,4(r5)
4102c7d0:	1009883a 	mov	r4,r2
4102c7d4:	180b883a 	mov	r5,r3
4102c7d8:	480f883a 	mov	r7,r9
4102c7dc:	400d883a 	mov	r6,r8
4102c7e0:	10301380 	call	41030138 <__divdf3>
4102c7e4:	e0c00115 	stw	r3,4(fp)
4102c7e8:	e0800015 	stw	r2,0(fp)
4102c7ec:	8021d13a 	srai	r16,r16,4
4102c7f0:	803d8a26 	beq	r16,zero,4102be1c <_strtod_r+0x82c>
4102c7f4:	008007c4 	movi	r2,31
4102c7f8:	14002d16 	blt	r2,r16,4102c8b0 <_strtod_r+0x12c0>
4102c7fc:	8080040c 	andi	r2,r16,16
4102c800:	10009926 	beq	r2,zero,4102ca68 <_strtod_r+0x1478>
4102c804:	00801a84 	movi	r2,106
4102c808:	d8801415 	stw	r2,80(sp)
4102c80c:	0400110e 	bge	zero,r16,4102c854 <_strtod_r+0x1264>
4102c810:	04400034 	movhi	r17,0
4102c814:	8c43e504 	addi	r17,r17,3988
4102c818:	8080004c 	andi	r2,r16,1
4102c81c:	1005003a 	cmpeq	r2,r2,zero
4102c820:	1000091e 	bne	r2,zero,4102c848 <_strtod_r+0x1258>
4102c824:	e0800017 	ldw	r2,0(fp)
4102c828:	e0c00117 	ldw	r3,4(fp)
4102c82c:	89800017 	ldw	r6,0(r17)
4102c830:	89c00117 	ldw	r7,4(r17)
4102c834:	180b883a 	mov	r5,r3
4102c838:	1009883a 	mov	r4,r2
4102c83c:	102fd840 	call	4102fd84 <__muldf3>
4102c840:	e0c00115 	stw	r3,4(fp)
4102c844:	e0800015 	stw	r2,0(fp)
4102c848:	8021d07a 	srai	r16,r16,1
4102c84c:	8c400204 	addi	r17,r17,8
4102c850:	043ff116 	blt	zero,r16,4102c818 <_strtod_r+0x1228>
4102c854:	d8c01417 	ldw	r3,80(sp)
4102c858:	18000d26 	beq	r3,zero,4102c890 <_strtod_r+0x12a0>
4102c85c:	e1000117 	ldw	r4,4(fp)
4102c860:	00c01ac4 	movi	r3,107
4102c864:	209ffc2c 	andhi	r2,r4,32752
4102c868:	1004d53a 	srli	r2,r2,20
4102c86c:	1887c83a 	sub	r3,r3,r2
4102c870:	00c0070e 	bge	zero,r3,4102c890 <_strtod_r+0x12a0>
4102c874:	008007c4 	movi	r2,31
4102c878:	10c0900e 	bge	r2,r3,4102cabc <_strtod_r+0x14cc>
4102c87c:	00800d04 	movi	r2,52
4102c880:	e0000015 	stw	zero,0(fp)
4102c884:	10c0870e 	bge	r2,r3,4102caa4 <_strtod_r+0x14b4>
4102c888:	0180dc34 	movhi	r6,880
4102c88c:	e1800115 	stw	r6,4(fp)
4102c890:	e0800017 	ldw	r2,0(fp)
4102c894:	e0c00117 	ldw	r3,4(fp)
4102c898:	000d883a 	mov	r6,zero
4102c89c:	000f883a 	mov	r7,zero
4102c8a0:	180b883a 	mov	r5,r3
4102c8a4:	1009883a 	mov	r4,r2
4102c8a8:	10304180 	call	41030418 <__nedf2>
4102c8ac:	103d5c1e 	bne	r2,zero,4102be20 <_strtod_r+0x830>
4102c8b0:	00800884 	movi	r2,34
4102c8b4:	a8800015 	stw	r2,0(r21)
4102c8b8:	e0000015 	stw	zero,0(fp)
4102c8bc:	e0000115 	stw	zero,4(fp)
4102c8c0:	003bc206 	br	4102b7cc <_strtod_r+0x1dc>
4102c8c4:	d8801417 	ldw	r2,80(sp)
4102c8c8:	1013003a 	cmpeq	r9,r2,zero
4102c8cc:	483ebb1e 	bne	r9,zero,4102c3bc <_strtod_r+0xdcc>
4102c8d0:	003f6606 	br	4102c66c <_strtod_r+0x107c>
4102c8d4:	e1800117 	ldw	r6,4(fp)
4102c8d8:	00c00434 	movhi	r3,16
4102c8dc:	18ffffc4 	addi	r3,r3,-1
4102c8e0:	30c4703a 	and	r2,r6,r3
4102c8e4:	103f7a1e 	bne	r2,zero,4102c6d0 <_strtod_r+0x10e0>
4102c8e8:	e1c00017 	ldw	r7,0(fp)
4102c8ec:	383f791e 	bne	r7,zero,4102c6d4 <_strtod_r+0x10e4>
4102c8f0:	003f5606 	br	4102c64c <_strtod_r+0x105c>
4102c8f4:	d9800f17 	ldw	r6,60(sp)
4102c8f8:	00bffa84 	movi	r2,-22
4102c8fc:	30bcd416 	blt	r6,r2,4102bc50 <_strtod_r+0x660>
4102c900:	317ffe24 	muli	r5,r6,-8
4102c904:	01000034 	movhi	r4,0
4102c908:	21039804 	addi	r4,r4,3680
4102c90c:	e0800017 	ldw	r2,0(fp)
4102c910:	290b883a 	add	r5,r5,r4
4102c914:	2a000017 	ldw	r8,0(r5)
4102c918:	e0c00117 	ldw	r3,4(fp)
4102c91c:	2a400117 	ldw	r9,4(r5)
4102c920:	1009883a 	mov	r4,r2
4102c924:	180b883a 	mov	r5,r3
4102c928:	480f883a 	mov	r7,r9
4102c92c:	400d883a 	mov	r6,r8
4102c930:	10301380 	call	41030138 <__divdf3>
4102c934:	e0c00115 	stw	r3,4(fp)
4102c938:	e0800015 	stw	r2,0(fp)
4102c93c:	003ba306 	br	4102b7cc <_strtod_r+0x1dc>
4102c940:	00800404 	movi	r2,16
4102c944:	14c02f0e 	bge	r2,r19,4102ca04 <_strtod_r+0x1414>
4102c948:	000f883a 	mov	r7,zero
4102c94c:	003f2006 	br	4102c5d0 <_strtod_r+0xfe0>
4102c950:	d9801417 	ldw	r6,80(sp)
4102c954:	3013003a 	cmpeq	r9,r6,zero
4102c958:	483e981e 	bne	r9,zero,4102c3bc <_strtod_r+0xdcc>
4102c95c:	003f4306 	br	4102c66c <_strtod_r+0x107c>
4102c960:	00801a44 	movi	r2,105
4102c964:	20bc6326 	beq	r4,r2,4102baf4 <_strtod_r+0x504>
4102c968:	00801b84 	movi	r2,110
4102c96c:	20bbba1e 	bne	r4,r2,4102b858 <_strtod_r+0x268>
4102c970:	dc000404 	addi	r16,sp,16
4102c974:	8009883a 	mov	r4,r16
4102c978:	01400034 	movhi	r5,0
4102c97c:	2943e404 	addi	r5,r5,3984
4102c980:	102b5a80 	call	4102b5a8 <match>
4102c984:	103bb426 	beq	r2,zero,4102b858 <_strtod_r+0x268>
4102c988:	d8800417 	ldw	r2,16(sp)
4102c98c:	00c00a04 	movi	r3,40
4102c990:	11000007 	ldb	r4,0(r2)
4102c994:	20c03626 	beq	r4,r3,4102ca70 <_strtod_r+0x1480>
4102c998:	01bffe34 	movhi	r6,65528
4102c99c:	e1800115 	stw	r6,4(fp)
4102c9a0:	e0000015 	stw	zero,0(fp)
4102c9a4:	003b8906 	br	4102b7cc <_strtod_r+0x1dc>
4102c9a8:	e4400117 	ldw	r17,4(fp)
4102c9ac:	3809883a 	mov	r4,r7
4102c9b0:	3821883a 	mov	r16,r7
4102c9b4:	880b883a 	mov	r5,r17
4102c9b8:	102999c0 	call	4102999c <__ulp>
4102c9bc:	100d883a 	mov	r6,r2
4102c9c0:	880b883a 	mov	r5,r17
4102c9c4:	180f883a 	mov	r7,r3
4102c9c8:	8009883a 	mov	r4,r16
4102c9cc:	102fd100 	call	4102fd10 <__adddf3>
4102c9d0:	d9801417 	ldw	r6,80(sp)
4102c9d4:	e0c00115 	stw	r3,4(fp)
4102c9d8:	e0800015 	stw	r2,0(fp)
4102c9dc:	3013003a 	cmpeq	r9,r6,zero
4102c9e0:	483e761e 	bne	r9,zero,4102c3bc <_strtod_r+0xdcc>
4102c9e4:	003f2106 	br	4102c66c <_strtod_r+0x107c>
4102c9e8:	000f883a 	mov	r7,zero
4102c9ec:	003cf006 	br	4102bdb0 <_strtod_r+0x7c0>
4102c9f0:	0080d434 	movhi	r2,848
4102c9f4:	188d883a 	add	r6,r3,r2
4102c9f8:	d8001415 	stw	zero,80(sp)
4102c9fc:	e1800115 	stw	r6,4(fp)
4102ca00:	003d0706 	br	4102be20 <_strtod_r+0x830>
4102ca04:	808002a4 	muli	r2,r16,10
4102ca08:	000f883a 	mov	r7,zero
4102ca0c:	1261883a 	add	r16,r2,r9
4102ca10:	003eef06 	br	4102c5d0 <_strtod_r+0xfe0>
4102ca14:	309ffc2c 	andhi	r2,r6,32752
4102ca18:	00fffc34 	movhi	r3,65520
4102ca1c:	10c5883a 	add	r2,r2,r3
4102ca20:	00c00434 	movhi	r3,16
4102ca24:	18ffffc4 	addi	r3,r3,-1
4102ca28:	10ccb03a 	or	r6,r2,r3
4102ca2c:	01ffffc4 	movi	r7,-1
4102ca30:	e1800115 	stw	r6,4(fp)
4102ca34:	e1c00015 	stw	r7,0(fp)
4102ca38:	483e601e 	bne	r9,zero,4102c3bc <_strtod_r+0xdcc>
4102ca3c:	003f0b06 	br	4102c66c <_strtod_r+0x107c>
4102ca40:	00bfffc4 	movi	r2,-1
4102ca44:	003f4906 	br	4102c76c <_strtod_r+0x117c>
4102ca48:	0025883a 	mov	r18,zero
4102ca4c:	003cb106 	br	4102bd14 <_strtod_r+0x724>
4102ca50:	d8c01417 	ldw	r3,80(sp)
4102ca54:	1813003a 	cmpeq	r9,r3,zero
4102ca58:	483e581e 	bne	r9,zero,4102c3bc <_strtod_r+0xdcc>
4102ca5c:	003f0306 	br	4102c66c <_strtod_r+0x107c>
4102ca60:	980f883a 	mov	r7,r19
4102ca64:	003ed406 	br	4102c5b8 <_strtod_r+0xfc8>
4102ca68:	d8001415 	stw	zero,80(sp)
4102ca6c:	003f6706 	br	4102c80c <_strtod_r+0x121c>
4102ca70:	8009883a 	mov	r4,r16
4102ca74:	01400034 	movhi	r5,0
4102ca78:	29464b04 	addi	r5,r5,6444
4102ca7c:	d9800d04 	addi	r6,sp,52
4102ca80:	102e7400 	call	4102e740 <__hexnan>
4102ca84:	00c00144 	movi	r3,5
4102ca88:	10ffc31e 	bne	r2,r3,4102c998 <_strtod_r+0x13a8>
4102ca8c:	d8800e17 	ldw	r2,56(sp)
4102ca90:	d9c00d17 	ldw	r7,52(sp)
4102ca94:	119ffc34 	orhi	r6,r2,32752
4102ca98:	e1800115 	stw	r6,4(fp)
4102ca9c:	e1c00015 	stw	r7,0(fp)
4102caa0:	003b4a06 	br	4102b7cc <_strtod_r+0x1dc>
4102caa4:	18fff804 	addi	r3,r3,-32
4102caa8:	00bfffc4 	movi	r2,-1
4102caac:	10c4983a 	sll	r2,r2,r3
4102cab0:	208c703a 	and	r6,r4,r2
4102cab4:	e1800115 	stw	r6,4(fp)
4102cab8:	003f7506 	br	4102c890 <_strtod_r+0x12a0>
4102cabc:	00bfffc4 	movi	r2,-1
4102cac0:	10c4983a 	sll	r2,r2,r3
4102cac4:	e0c00017 	ldw	r3,0(fp)
4102cac8:	188e703a 	and	r7,r3,r2
4102cacc:	e1c00015 	stw	r7,0(fp)
4102cad0:	003f6f06 	br	4102c890 <_strtod_r+0x12a0>

4102cad4 <strtof>:
4102cad4:	defffa04 	addi	sp,sp,-24
4102cad8:	dd000415 	stw	r20,16(sp)
4102cadc:	05000034 	movhi	r20,0
4102cae0:	a50ad704 	addi	r20,r20,11100
4102cae4:	2007883a 	mov	r3,r4
4102cae8:	a1000017 	ldw	r4,0(r20)
4102caec:	280d883a 	mov	r6,r5
4102caf0:	180b883a 	mov	r5,r3
4102caf4:	dfc00515 	stw	ra,20(sp)
4102caf8:	dcc00315 	stw	r19,12(sp)
4102cafc:	dc800215 	stw	r18,8(sp)
4102cb00:	dc400115 	stw	r17,4(sp)
4102cb04:	dc000015 	stw	r16,0(sp)
4102cb08:	102b5f00 	call	4102b5f0 <_strtod_r>
4102cb0c:	180b883a 	mov	r5,r3
4102cb10:	1009883a 	mov	r4,r2
4102cb14:	1823883a 	mov	r17,r3
4102cb18:	1021883a 	mov	r16,r2
4102cb1c:	10308900 	call	41030890 <__truncdfsf2>
4102cb20:	1009883a 	mov	r4,r2
4102cb24:	000b883a 	mov	r5,zero
4102cb28:	1025883a 	mov	r18,r2
4102cb2c:	1027883a 	mov	r19,r2
4102cb30:	102f7180 	call	4102f718 <__nesf2>
4102cb34:	000d883a 	mov	r6,zero
4102cb38:	000f883a 	mov	r7,zero
4102cb3c:	8009883a 	mov	r4,r16
4102cb40:	880b883a 	mov	r5,r17
4102cb44:	10000e1e 	bne	r2,zero,4102cb80 <strtof+0xac>
4102cb48:	10304180 	call	41030418 <__nedf2>
4102cb4c:	10000c26 	beq	r2,zero,4102cb80 <strtof+0xac>
4102cb50:	a0c00017 	ldw	r3,0(r20)
4102cb54:	00800884 	movi	r2,34
4102cb58:	18800015 	stw	r2,0(r3)
4102cb5c:	9805883a 	mov	r2,r19
4102cb60:	dfc00517 	ldw	ra,20(sp)
4102cb64:	dd000417 	ldw	r20,16(sp)
4102cb68:	dcc00317 	ldw	r19,12(sp)
4102cb6c:	dc800217 	ldw	r18,8(sp)
4102cb70:	dc400117 	ldw	r17,4(sp)
4102cb74:	dc000017 	ldw	r16,0(sp)
4102cb78:	dec00604 	addi	sp,sp,24
4102cb7c:	f800283a 	ret
4102cb80:	9009883a 	mov	r4,r18
4102cb84:	015fe034 	movhi	r5,32640
4102cb88:	297fffc4 	addi	r5,r5,-1
4102cb8c:	102f7900 	call	4102f790 <__gtsf2>
4102cb90:	00ffffc4 	movi	r3,-1
4102cb94:	011ffc34 	movhi	r4,32752
4102cb98:	213fffc4 	addi	r4,r4,-1
4102cb9c:	200f883a 	mov	r7,r4
4102cba0:	180d883a 	mov	r6,r3
4102cba4:	8009883a 	mov	r4,r16
4102cba8:	880b883a 	mov	r5,r17
4102cbac:	00800f16 	blt	zero,r2,4102cbec <strtof+0x118>
4102cbb0:	9009883a 	mov	r4,r18
4102cbb4:	017fe034 	movhi	r5,65408
4102cbb8:	297fffc4 	addi	r5,r5,-1
4102cbbc:	102f8080 	call	4102f808 <__ltsf2>
4102cbc0:	023fffc4 	movi	r8,-1
4102cbc4:	027ffc34 	movhi	r9,65520
4102cbc8:	4a7fffc4 	addi	r9,r9,-1
4102cbcc:	880b883a 	mov	r5,r17
4102cbd0:	480f883a 	mov	r7,r9
4102cbd4:	8009883a 	mov	r4,r16
4102cbd8:	400d883a 	mov	r6,r8
4102cbdc:	103fdf0e 	bge	r2,zero,4102cb5c <strtof+0x88>
4102cbe0:	10305b00 	call	410305b0 <__ltdf2>
4102cbe4:	103fda0e 	bge	r2,zero,4102cb50 <strtof+0x7c>
4102cbe8:	003fdc06 	br	4102cb5c <strtof+0x88>
4102cbec:	10304a00 	call	410304a0 <__gtdf2>
4102cbf0:	00bfd70e 	bge	zero,r2,4102cb50 <strtof+0x7c>
4102cbf4:	003fee06 	br	4102cbb0 <strtof+0xdc>

4102cbf8 <strtod>:
4102cbf8:	01800034 	movhi	r6,0
4102cbfc:	318ad704 	addi	r6,r6,11100
4102cc00:	2007883a 	mov	r3,r4
4102cc04:	31000017 	ldw	r4,0(r6)
4102cc08:	280d883a 	mov	r6,r5
4102cc0c:	180b883a 	mov	r5,r3
4102cc10:	102b5f01 	jmpi	4102b5f0 <_strtod_r>

4102cc14 <_strtol_r>:
4102cc14:	defff304 	addi	sp,sp,-52
4102cc18:	00800034 	movhi	r2,0
4102cc1c:	108adb04 	addi	r2,r2,11116
4102cc20:	dcc00615 	stw	r19,24(sp)
4102cc24:	14c00017 	ldw	r19,0(r2)
4102cc28:	ddc00a15 	stw	r23,40(sp)
4102cc2c:	dc000315 	stw	r16,12(sp)
4102cc30:	dfc00c15 	stw	ra,48(sp)
4102cc34:	df000b15 	stw	fp,44(sp)
4102cc38:	dd800915 	stw	r22,36(sp)
4102cc3c:	dd400815 	stw	r21,32(sp)
4102cc40:	dd000715 	stw	r20,28(sp)
4102cc44:	dc800515 	stw	r18,20(sp)
4102cc48:	dc400415 	stw	r17,16(sp)
4102cc4c:	282f883a 	mov	r23,r5
4102cc50:	d9000015 	stw	r4,0(sp)
4102cc54:	d9800115 	stw	r6,4(sp)
4102cc58:	2821883a 	mov	r16,r5
4102cc5c:	84400007 	ldb	r17,0(r16)
4102cc60:	84000044 	addi	r16,r16,1
4102cc64:	9c47883a 	add	r3,r19,r17
4102cc68:	18800003 	ldbu	r2,0(r3)
4102cc6c:	1080020c 	andi	r2,r2,8
4102cc70:	103ffa1e 	bne	r2,zero,4102cc5c <_strtol_r+0x48>
4102cc74:	00800b44 	movi	r2,45
4102cc78:	88805c26 	beq	r17,r2,4102cdec <_strtol_r+0x1d8>
4102cc7c:	00800ac4 	movi	r2,43
4102cc80:	88805726 	beq	r17,r2,4102cde0 <_strtol_r+0x1cc>
4102cc84:	0039883a 	mov	fp,zero
4102cc88:	3807003a 	cmpeq	r3,r7,zero
4102cc8c:	1800431e 	bne	r3,zero,4102cd9c <_strtol_r+0x188>
4102cc90:	00800404 	movi	r2,16
4102cc94:	38804126 	beq	r7,r2,4102cd9c <_strtol_r+0x188>
4102cc98:	3829883a 	mov	r20,r7
4102cc9c:	e02cc03a 	cmpne	r22,fp,zero
4102cca0:	b0004b1e 	bne	r22,zero,4102cdd0 <_strtol_r+0x1bc>
4102cca4:	04a00034 	movhi	r18,32768
4102cca8:	94bfffc4 	addi	r18,r18,-1
4102ccac:	9009883a 	mov	r4,r18
4102ccb0:	a00b883a 	mov	r5,r20
4102ccb4:	d9c00215 	stw	r7,8(sp)
4102ccb8:	10223740 	call	41022374 <__umodsi3>
4102ccbc:	9009883a 	mov	r4,r18
4102ccc0:	a00b883a 	mov	r5,r20
4102ccc4:	102b883a 	mov	r21,r2
4102ccc8:	102236c0 	call	4102236c <__udivsi3>
4102cccc:	1011883a 	mov	r8,r2
4102ccd0:	9c45883a 	add	r2,r19,r17
4102ccd4:	11000003 	ldbu	r4,0(r2)
4102ccd8:	000b883a 	mov	r5,zero
4102ccdc:	000d883a 	mov	r6,zero
4102cce0:	20c0010c 	andi	r3,r4,4
4102cce4:	d9c00217 	ldw	r7,8(sp)
4102cce8:	18000e26 	beq	r3,zero,4102cd24 <_strtol_r+0x110>
4102ccec:	88fff404 	addi	r3,r17,-48
4102ccf0:	19c0140e 	bge	r3,r7,4102cd44 <_strtol_r+0x130>
4102ccf4:	30003116 	blt	r6,zero,4102cdbc <_strtol_r+0x1a8>
4102ccf8:	41403036 	bltu	r8,r5,4102cdbc <_strtol_r+0x1a8>
4102ccfc:	2a002e26 	beq	r5,r8,4102cdb8 <_strtol_r+0x1a4>
4102cd00:	2d05383a 	mul	r2,r5,r20
4102cd04:	01800044 	movi	r6,1
4102cd08:	10cb883a 	add	r5,r2,r3
4102cd0c:	84400007 	ldb	r17,0(r16)
4102cd10:	84000044 	addi	r16,r16,1
4102cd14:	9c45883a 	add	r2,r19,r17
4102cd18:	11000003 	ldbu	r4,0(r2)
4102cd1c:	20c0010c 	andi	r3,r4,4
4102cd20:	183ff21e 	bne	r3,zero,4102ccec <_strtol_r+0xd8>
4102cd24:	208000cc 	andi	r2,r4,3
4102cd28:	10000626 	beq	r2,zero,4102cd44 <_strtol_r+0x130>
4102cd2c:	2080004c 	andi	r2,r4,1
4102cd30:	1005003a 	cmpeq	r2,r2,zero
4102cd34:	1000231e 	bne	r2,zero,4102cdc4 <_strtol_r+0x1b0>
4102cd38:	00800dc4 	movi	r2,55
4102cd3c:	8887c83a 	sub	r3,r17,r2
4102cd40:	19ffec16 	blt	r3,r7,4102ccf4 <_strtol_r+0xe0>
4102cd44:	30002d16 	blt	r6,zero,4102cdfc <_strtol_r+0x1e8>
4102cd48:	b000231e 	bne	r22,zero,4102cdd8 <_strtol_r+0x1c4>
4102cd4c:	2807883a 	mov	r3,r5
4102cd50:	d8800117 	ldw	r2,4(sp)
4102cd54:	10000426 	beq	r2,zero,4102cd68 <_strtol_r+0x154>
4102cd58:	30000126 	beq	r6,zero,4102cd60 <_strtol_r+0x14c>
4102cd5c:	85ffffc4 	addi	r23,r16,-1
4102cd60:	d9000117 	ldw	r4,4(sp)
4102cd64:	25c00015 	stw	r23,0(r4)
4102cd68:	1805883a 	mov	r2,r3
4102cd6c:	dfc00c17 	ldw	ra,48(sp)
4102cd70:	df000b17 	ldw	fp,44(sp)
4102cd74:	ddc00a17 	ldw	r23,40(sp)
4102cd78:	dd800917 	ldw	r22,36(sp)
4102cd7c:	dd400817 	ldw	r21,32(sp)
4102cd80:	dd000717 	ldw	r20,28(sp)
4102cd84:	dcc00617 	ldw	r19,24(sp)
4102cd88:	dc800517 	ldw	r18,20(sp)
4102cd8c:	dc400417 	ldw	r17,16(sp)
4102cd90:	dc000317 	ldw	r16,12(sp)
4102cd94:	dec00d04 	addi	sp,sp,52
4102cd98:	f800283a 	ret
4102cd9c:	00800c04 	movi	r2,48
4102cda0:	88801d26 	beq	r17,r2,4102ce18 <_strtol_r+0x204>
4102cda4:	183fbc26 	beq	r3,zero,4102cc98 <_strtol_r+0x84>
4102cda8:	00800c04 	movi	r2,48
4102cdac:	88802726 	beq	r17,r2,4102ce4c <_strtol_r+0x238>
4102cdb0:	01c00284 	movi	r7,10
4102cdb4:	003fb806 	br	4102cc98 <_strtol_r+0x84>
4102cdb8:	a8ffd10e 	bge	r21,r3,4102cd00 <_strtol_r+0xec>
4102cdbc:	01bfffc4 	movi	r6,-1
4102cdc0:	003fd206 	br	4102cd0c <_strtol_r+0xf8>
4102cdc4:	008015c4 	movi	r2,87
4102cdc8:	8887c83a 	sub	r3,r17,r2
4102cdcc:	003fdc06 	br	4102cd40 <_strtol_r+0x12c>
4102cdd0:	04a00034 	movhi	r18,32768
4102cdd4:	003fb506 	br	4102ccac <_strtol_r+0x98>
4102cdd8:	0147c83a 	sub	r3,zero,r5
4102cddc:	003fdc06 	br	4102cd50 <_strtol_r+0x13c>
4102cde0:	84400007 	ldb	r17,0(r16)
4102cde4:	84000044 	addi	r16,r16,1
4102cde8:	003fa606 	br	4102cc84 <_strtol_r+0x70>
4102cdec:	84400007 	ldb	r17,0(r16)
4102cdf0:	07000044 	movi	fp,1
4102cdf4:	84000044 	addi	r16,r16,1
4102cdf8:	003fa306 	br	4102cc88 <_strtol_r+0x74>
4102cdfc:	e005003a 	cmpeq	r2,fp,zero
4102ce00:	10000f1e 	bne	r2,zero,4102ce40 <_strtol_r+0x22c>
4102ce04:	00e00034 	movhi	r3,32768
4102ce08:	d9000017 	ldw	r4,0(sp)
4102ce0c:	00800884 	movi	r2,34
4102ce10:	20800015 	stw	r2,0(r4)
4102ce14:	003fce06 	br	4102cd50 <_strtol_r+0x13c>
4102ce18:	81000007 	ldb	r4,0(r16)
4102ce1c:	00801e04 	movi	r2,120
4102ce20:	20800226 	beq	r4,r2,4102ce2c <_strtol_r+0x218>
4102ce24:	00801604 	movi	r2,88
4102ce28:	20bfde1e 	bne	r4,r2,4102cda4 <_strtol_r+0x190>
4102ce2c:	84400047 	ldb	r17,1(r16)
4102ce30:	01c00404 	movi	r7,16
4102ce34:	84000084 	addi	r16,r16,2
4102ce38:	3829883a 	mov	r20,r7
4102ce3c:	003f9706 	br	4102cc9c <_strtol_r+0x88>
4102ce40:	00e00034 	movhi	r3,32768
4102ce44:	18ffffc4 	addi	r3,r3,-1
4102ce48:	003fef06 	br	4102ce08 <_strtol_r+0x1f4>
4102ce4c:	01c00204 	movi	r7,8
4102ce50:	3829883a 	mov	r20,r7
4102ce54:	003f9106 	br	4102cc9c <_strtol_r+0x88>

4102ce58 <strtol>:
4102ce58:	00800034 	movhi	r2,0
4102ce5c:	108ad704 	addi	r2,r2,11100
4102ce60:	2013883a 	mov	r9,r4
4102ce64:	11000017 	ldw	r4,0(r2)
4102ce68:	2805883a 	mov	r2,r5
4102ce6c:	300f883a 	mov	r7,r6
4102ce70:	480b883a 	mov	r5,r9
4102ce74:	100d883a 	mov	r6,r2
4102ce78:	102cc141 	jmpi	4102cc14 <_strtol_r>

4102ce7c <_strtoll_r>:
4102ce7c:	00800034 	movhi	r2,0
4102ce80:	108adb04 	addi	r2,r2,11116
4102ce84:	10800017 	ldw	r2,0(r2)
4102ce88:	defff004 	addi	sp,sp,-64
4102ce8c:	df000e15 	stw	fp,56(sp)
4102ce90:	ddc00d15 	stw	r23,52(sp)
4102ce94:	dfc00f15 	stw	ra,60(sp)
4102ce98:	dd800c15 	stw	r22,48(sp)
4102ce9c:	dd400b15 	stw	r21,44(sp)
4102cea0:	dd000a15 	stw	r20,40(sp)
4102cea4:	dcc00915 	stw	r19,36(sp)
4102cea8:	dc800815 	stw	r18,32(sp)
4102ceac:	dc400715 	stw	r17,28(sp)
4102ceb0:	dc000615 	stw	r16,24(sp)
4102ceb4:	d8800115 	stw	r2,4(sp)
4102ceb8:	d9400315 	stw	r5,12(sp)
4102cebc:	d9000215 	stw	r4,8(sp)
4102cec0:	d9800415 	stw	r6,16(sp)
4102cec4:	3839883a 	mov	fp,r7
4102cec8:	282f883a 	mov	r23,r5
4102cecc:	bd800007 	ldb	r22,0(r23)
4102ced0:	d8800117 	ldw	r2,4(sp)
4102ced4:	bdc00044 	addi	r23,r23,1
4102ced8:	1587883a 	add	r3,r2,r22
4102cedc:	18800003 	ldbu	r2,0(r3)
4102cee0:	1080020c 	andi	r2,r2,8
4102cee4:	103ff91e 	bne	r2,zero,4102cecc <_strtoll_r+0x50>
4102cee8:	00800b44 	movi	r2,45
4102ceec:	b0808926 	beq	r22,r2,4102d114 <_strtoll_r+0x298>
4102cef0:	00800ac4 	movi	r2,43
4102cef4:	b0808426 	beq	r22,r2,4102d108 <_strtoll_r+0x28c>
4102cef8:	d8000015 	stw	zero,0(sp)
4102cefc:	e007003a 	cmpeq	r3,fp,zero
4102cf00:	1800611e 	bne	r3,zero,4102d088 <_strtoll_r+0x20c>
4102cf04:	00800404 	movi	r2,16
4102cf08:	e0805f26 	beq	fp,r2,4102d088 <_strtoll_r+0x20c>
4102cf0c:	e027d7fa 	srai	r19,fp,31
4102cf10:	e025883a 	mov	r18,fp
4102cf14:	d8800017 	ldw	r2,0(sp)
4102cf18:	1004c03a 	cmpne	r2,r2,zero
4102cf1c:	d8800515 	stw	r2,20(sp)
4102cf20:	1000651e 	bne	r2,zero,4102d0b8 <_strtoll_r+0x23c>
4102cf24:	043fffc4 	movi	r16,-1
4102cf28:	04600034 	movhi	r17,32768
4102cf2c:	8c7fffc4 	addi	r17,r17,-1
4102cf30:	8009883a 	mov	r4,r16
4102cf34:	880b883a 	mov	r5,r17
4102cf38:	900d883a 	mov	r6,r18
4102cf3c:	980f883a 	mov	r7,r19
4102cf40:	102f1680 	call	4102f168 <__umoddi3>
4102cf44:	8009883a 	mov	r4,r16
4102cf48:	980f883a 	mov	r7,r19
4102cf4c:	880b883a 	mov	r5,r17
4102cf50:	900d883a 	mov	r6,r18
4102cf54:	1021883a 	mov	r16,r2
4102cf58:	102eb8c0 	call	4102eb8c <__udivdi3>
4102cf5c:	1815883a 	mov	r10,r3
4102cf60:	d8c00117 	ldw	r3,4(sp)
4102cf64:	1013883a 	mov	r9,r2
4102cf68:	000f883a 	mov	r7,zero
4102cf6c:	1d85883a 	add	r2,r3,r22
4102cf70:	11000003 	ldbu	r4,0(r2)
4102cf74:	0011883a 	mov	r8,zero
4102cf78:	0017883a 	mov	r11,zero
4102cf7c:	20c0010c 	andi	r3,r4,4
4102cf80:	18001b26 	beq	r3,zero,4102cff0 <_strtoll_r+0x174>
4102cf84:	b0fff404 	addi	r3,r22,-48
4102cf88:	1f00210e 	bge	r3,fp,4102d010 <_strtoll_r+0x194>
4102cf8c:	58003c16 	blt	r11,zero,4102d080 <_strtoll_r+0x204>
4102cf90:	52003b36 	bltu	r10,r8,4102d080 <_strtoll_r+0x204>
4102cf94:	42803926 	beq	r8,r10,4102d07c <_strtoll_r+0x200>
4102cf98:	3a404d26 	beq	r7,r9,4102d0d0 <_strtoll_r+0x254>
4102cf9c:	99c5383a 	mul	r2,r19,r7
4102cfa0:	448d383a 	mul	r6,r8,r18
4102cfa4:	3ca9383a 	mul	r20,r7,r18
4102cfa8:	3caa383a 	mulxuu	r21,r7,r18
4102cfac:	180bd7fa 	srai	r5,r3,31
4102cfb0:	308d883a 	add	r6,r6,r2
4102cfb4:	356b883a 	add	r21,r6,r21
4102cfb8:	a0c5883a 	add	r2,r20,r3
4102cfbc:	150d803a 	cmpltu	r6,r2,r20
4102cfc0:	a947883a 	add	r3,r21,r5
4102cfc4:	30cd883a 	add	r6,r6,r3
4102cfc8:	100f883a 	mov	r7,r2
4102cfcc:	3011883a 	mov	r8,r6
4102cfd0:	02c00044 	movi	r11,1
4102cfd4:	bd800007 	ldb	r22,0(r23)
4102cfd8:	d8c00117 	ldw	r3,4(sp)
4102cfdc:	bdc00044 	addi	r23,r23,1
4102cfe0:	1d85883a 	add	r2,r3,r22
4102cfe4:	11000003 	ldbu	r4,0(r2)
4102cfe8:	20c0010c 	andi	r3,r4,4
4102cfec:	183fe51e 	bne	r3,zero,4102cf84 <_strtoll_r+0x108>
4102cff0:	208000cc 	andi	r2,r4,3
4102cff4:	10000626 	beq	r2,zero,4102d010 <_strtoll_r+0x194>
4102cff8:	2080004c 	andi	r2,r4,1
4102cffc:	1005003a 	cmpeq	r2,r2,zero
4102d000:	1000301e 	bne	r2,zero,4102d0c4 <_strtoll_r+0x248>
4102d004:	01000dc4 	movi	r4,55
4102d008:	b107c83a 	sub	r3,r22,r4
4102d00c:	1f3fdf16 	blt	r3,fp,4102cf8c <_strtoll_r+0x110>
4102d010:	58004516 	blt	r11,zero,4102d128 <_strtoll_r+0x2ac>
4102d014:	d8800517 	ldw	r2,20(sp)
4102d018:	1000331e 	bne	r2,zero,4102d0e8 <_strtoll_r+0x26c>
4102d01c:	380b883a 	mov	r5,r7
4102d020:	400d883a 	mov	r6,r8
4102d024:	d8c00417 	ldw	r3,16(sp)
4102d028:	18000626 	beq	r3,zero,4102d044 <_strtoll_r+0x1c8>
4102d02c:	58000226 	beq	r11,zero,4102d038 <_strtoll_r+0x1bc>
4102d030:	bdffffc4 	addi	r23,r23,-1
4102d034:	ddc00315 	stw	r23,12(sp)
4102d038:	d8c00317 	ldw	r3,12(sp)
4102d03c:	d8800417 	ldw	r2,16(sp)
4102d040:	10c00015 	stw	r3,0(r2)
4102d044:	2805883a 	mov	r2,r5
4102d048:	3007883a 	mov	r3,r6
4102d04c:	dfc00f17 	ldw	ra,60(sp)
4102d050:	df000e17 	ldw	fp,56(sp)
4102d054:	ddc00d17 	ldw	r23,52(sp)
4102d058:	dd800c17 	ldw	r22,48(sp)
4102d05c:	dd400b17 	ldw	r21,44(sp)
4102d060:	dd000a17 	ldw	r20,40(sp)
4102d064:	dcc00917 	ldw	r19,36(sp)
4102d068:	dc800817 	ldw	r18,32(sp)
4102d06c:	dc400717 	ldw	r17,28(sp)
4102d070:	dc000617 	ldw	r16,24(sp)
4102d074:	dec01004 	addi	sp,sp,64
4102d078:	f800283a 	ret
4102d07c:	49ffc62e 	bgeu	r9,r7,4102cf98 <_strtoll_r+0x11c>
4102d080:	02ffffc4 	movi	r11,-1
4102d084:	003fd306 	br	4102cfd4 <_strtoll_r+0x158>
4102d088:	00800c04 	movi	r2,48
4102d08c:	b0803126 	beq	r22,r2,4102d154 <_strtoll_r+0x2d8>
4102d090:	183f9e26 	beq	r3,zero,4102cf0c <_strtoll_r+0x90>
4102d094:	00800c04 	movi	r2,48
4102d098:	b0803d26 	beq	r22,r2,4102d190 <_strtoll_r+0x314>
4102d09c:	d8800017 	ldw	r2,0(sp)
4102d0a0:	07000284 	movi	fp,10
4102d0a4:	e025883a 	mov	r18,fp
4102d0a8:	1004c03a 	cmpne	r2,r2,zero
4102d0ac:	0027883a 	mov	r19,zero
4102d0b0:	d8800515 	stw	r2,20(sp)
4102d0b4:	103f9b26 	beq	r2,zero,4102cf24 <_strtoll_r+0xa8>
4102d0b8:	0021883a 	mov	r16,zero
4102d0bc:	04600034 	movhi	r17,32768
4102d0c0:	003f9b06 	br	4102cf30 <_strtoll_r+0xb4>
4102d0c4:	010015c4 	movi	r4,87
4102d0c8:	b107c83a 	sub	r3,r22,r4
4102d0cc:	003fcf06 	br	4102d00c <_strtoll_r+0x190>
4102d0d0:	42bfb21e 	bne	r8,r10,4102cf9c <_strtoll_r+0x120>
4102d0d4:	80ffb10e 	bge	r16,r3,4102cf9c <_strtoll_r+0x120>
4102d0d8:	480f883a 	mov	r7,r9
4102d0dc:	5011883a 	mov	r8,r10
4102d0e0:	02ffffc4 	movi	r11,-1
4102d0e4:	003fbb06 	br	4102cfd4 <_strtoll_r+0x158>
4102d0e8:	0009883a 	mov	r4,zero
4102d0ec:	21c5c83a 	sub	r2,r4,r7
4102d0f0:	2089803a 	cmpltu	r4,r4,r2
4102d0f4:	0207c83a 	sub	r3,zero,r8
4102d0f8:	1909c83a 	sub	r4,r3,r4
4102d0fc:	100b883a 	mov	r5,r2
4102d100:	200d883a 	mov	r6,r4
4102d104:	003fc706 	br	4102d024 <_strtoll_r+0x1a8>
4102d108:	bd800007 	ldb	r22,0(r23)
4102d10c:	bdc00044 	addi	r23,r23,1
4102d110:	003f7906 	br	4102cef8 <_strtoll_r+0x7c>
4102d114:	bd800007 	ldb	r22,0(r23)
4102d118:	00c00044 	movi	r3,1
4102d11c:	bdc00044 	addi	r23,r23,1
4102d120:	d8c00015 	stw	r3,0(sp)
4102d124:	003f7506 	br	4102cefc <_strtoll_r+0x80>
4102d128:	d8c00017 	ldw	r3,0(sp)
4102d12c:	1805003a 	cmpeq	r2,r3,zero
4102d130:	1000131e 	bne	r2,zero,4102d180 <_strtoll_r+0x304>
4102d134:	0005883a 	mov	r2,zero
4102d138:	00e00034 	movhi	r3,32768
4102d13c:	100b883a 	mov	r5,r2
4102d140:	180d883a 	mov	r6,r3
4102d144:	d8c00217 	ldw	r3,8(sp)
4102d148:	00800884 	movi	r2,34
4102d14c:	18800015 	stw	r2,0(r3)
4102d150:	003fb406 	br	4102d024 <_strtoll_r+0x1a8>
4102d154:	b9000007 	ldb	r4,0(r23)
4102d158:	00801e04 	movi	r2,120
4102d15c:	20800226 	beq	r4,r2,4102d168 <_strtoll_r+0x2ec>
4102d160:	00801604 	movi	r2,88
4102d164:	20bfca1e 	bne	r4,r2,4102d090 <_strtoll_r+0x214>
4102d168:	bd800047 	ldb	r22,1(r23)
4102d16c:	07000404 	movi	fp,16
4102d170:	e025883a 	mov	r18,fp
4102d174:	bdc00084 	addi	r23,r23,2
4102d178:	0027883a 	mov	r19,zero
4102d17c:	003f6506 	br	4102cf14 <_strtoll_r+0x98>
4102d180:	017fffc4 	movi	r5,-1
4102d184:	01a00034 	movhi	r6,32768
4102d188:	31bfffc4 	addi	r6,r6,-1
4102d18c:	003fed06 	br	4102d144 <_strtoll_r+0x2c8>
4102d190:	07000204 	movi	fp,8
4102d194:	e025883a 	mov	r18,fp
4102d198:	0027883a 	mov	r19,zero
4102d19c:	003f5d06 	br	4102cf14 <_strtoll_r+0x98>

4102d1a0 <_strtoul_r>:
4102d1a0:	defff604 	addi	sp,sp,-40
4102d1a4:	00800034 	movhi	r2,0
4102d1a8:	108adb04 	addi	r2,r2,11116
4102d1ac:	dd000415 	stw	r20,16(sp)
4102d1b0:	15000017 	ldw	r20,0(r2)
4102d1b4:	ddc00715 	stw	r23,28(sp)
4102d1b8:	dd800615 	stw	r22,24(sp)
4102d1bc:	dd400515 	stw	r21,20(sp)
4102d1c0:	dc800215 	stw	r18,8(sp)
4102d1c4:	dc000015 	stw	r16,0(sp)
4102d1c8:	dfc00915 	stw	ra,36(sp)
4102d1cc:	df000815 	stw	fp,32(sp)
4102d1d0:	dcc00315 	stw	r19,12(sp)
4102d1d4:	dc400115 	stw	r17,4(sp)
4102d1d8:	282b883a 	mov	r21,r5
4102d1dc:	202f883a 	mov	r23,r4
4102d1e0:	302d883a 	mov	r22,r6
4102d1e4:	3825883a 	mov	r18,r7
4102d1e8:	2821883a 	mov	r16,r5
4102d1ec:	84400007 	ldb	r17,0(r16)
4102d1f0:	84000044 	addi	r16,r16,1
4102d1f4:	a447883a 	add	r3,r20,r17
4102d1f8:	18800003 	ldbu	r2,0(r3)
4102d1fc:	1080020c 	andi	r2,r2,8
4102d200:	103ffa1e 	bne	r2,zero,4102d1ec <_strtoul_r+0x4c>
4102d204:	00800b44 	movi	r2,45
4102d208:	88805626 	beq	r17,r2,4102d364 <_strtoul_r+0x1c4>
4102d20c:	00800ac4 	movi	r2,43
4102d210:	88805126 	beq	r17,r2,4102d358 <_strtoul_r+0x1b8>
4102d214:	0039883a 	mov	fp,zero
4102d218:	9007003a 	cmpeq	r3,r18,zero
4102d21c:	18003b1e 	bne	r3,zero,4102d30c <_strtoul_r+0x16c>
4102d220:	00800404 	movi	r2,16
4102d224:	90803926 	beq	r18,r2,4102d30c <_strtoul_r+0x16c>
4102d228:	013fffc4 	movi	r4,-1
4102d22c:	900b883a 	mov	r5,r18
4102d230:	102236c0 	call	4102236c <__udivsi3>
4102d234:	013fffc4 	movi	r4,-1
4102d238:	900b883a 	mov	r5,r18
4102d23c:	1027883a 	mov	r19,r2
4102d240:	10223740 	call	41022374 <__umodsi3>
4102d244:	1011883a 	mov	r8,r2
4102d248:	900f883a 	mov	r7,r18
4102d24c:	a445883a 	add	r2,r20,r17
4102d250:	11000003 	ldbu	r4,0(r2)
4102d254:	000b883a 	mov	r5,zero
4102d258:	000d883a 	mov	r6,zero
4102d25c:	20c0010c 	andi	r3,r4,4
4102d260:	18000e26 	beq	r3,zero,4102d29c <_strtoul_r+0xfc>
4102d264:	88fff404 	addi	r3,r17,-48
4102d268:	1c80140e 	bge	r3,r18,4102d2bc <_strtoul_r+0x11c>
4102d26c:	30003316 	blt	r6,zero,4102d33c <_strtoul_r+0x19c>
4102d270:	99403236 	bltu	r19,r5,4102d33c <_strtoul_r+0x19c>
4102d274:	2cc03026 	beq	r5,r19,4102d338 <_strtoul_r+0x198>
4102d278:	29c5383a 	mul	r2,r5,r7
4102d27c:	01800044 	movi	r6,1
4102d280:	10cb883a 	add	r5,r2,r3
4102d284:	84400007 	ldb	r17,0(r16)
4102d288:	84000044 	addi	r16,r16,1
4102d28c:	a445883a 	add	r2,r20,r17
4102d290:	11000003 	ldbu	r4,0(r2)
4102d294:	20c0010c 	andi	r3,r4,4
4102d298:	183ff21e 	bne	r3,zero,4102d264 <_strtoul_r+0xc4>
4102d29c:	208000cc 	andi	r2,r4,3
4102d2a0:	10000626 	beq	r2,zero,4102d2bc <_strtoul_r+0x11c>
4102d2a4:	2080004c 	andi	r2,r4,1
4102d2a8:	1005003a 	cmpeq	r2,r2,zero
4102d2ac:	1000251e 	bne	r2,zero,4102d344 <_strtoul_r+0x1a4>
4102d2b0:	00800dc4 	movi	r2,55
4102d2b4:	8887c83a 	sub	r3,r17,r2
4102d2b8:	1cbfec16 	blt	r3,r18,4102d26c <_strtoul_r+0xcc>
4102d2bc:	3000400e 	bge	r6,zero,4102d3c0 <_strtoul_r+0x220>
4102d2c0:	00800884 	movi	r2,34
4102d2c4:	017fffc4 	movi	r5,-1
4102d2c8:	b8800015 	stw	r2,0(r23)
4102d2cc:	b0000226 	beq	r22,zero,4102d2d8 <_strtoul_r+0x138>
4102d2d0:	30001f1e 	bne	r6,zero,4102d350 <_strtoul_r+0x1b0>
4102d2d4:	b5400015 	stw	r21,0(r22)
4102d2d8:	2805883a 	mov	r2,r5
4102d2dc:	dfc00917 	ldw	ra,36(sp)
4102d2e0:	df000817 	ldw	fp,32(sp)
4102d2e4:	ddc00717 	ldw	r23,28(sp)
4102d2e8:	dd800617 	ldw	r22,24(sp)
4102d2ec:	dd400517 	ldw	r21,20(sp)
4102d2f0:	dd000417 	ldw	r20,16(sp)
4102d2f4:	dcc00317 	ldw	r19,12(sp)
4102d2f8:	dc800217 	ldw	r18,8(sp)
4102d2fc:	dc400117 	ldw	r17,4(sp)
4102d300:	dc000017 	ldw	r16,0(sp)
4102d304:	dec00a04 	addi	sp,sp,40
4102d308:	f800283a 	ret
4102d30c:	00800c04 	movi	r2,48
4102d310:	88801826 	beq	r17,r2,4102d374 <_strtoul_r+0x1d4>
4102d314:	183fc426 	beq	r3,zero,4102d228 <_strtoul_r+0x88>
4102d318:	00800c04 	movi	r2,48
4102d31c:	88802226 	beq	r17,r2,4102d3a8 <_strtoul_r+0x208>
4102d320:	04800284 	movi	r18,10
4102d324:	900f883a 	mov	r7,r18
4102d328:	04c666b4 	movhi	r19,6554
4102d32c:	9ce66644 	addi	r19,r19,-26215
4102d330:	02000144 	movi	r8,5
4102d334:	003fc506 	br	4102d24c <_strtoul_r+0xac>
4102d338:	40ffcf0e 	bge	r8,r3,4102d278 <_strtoul_r+0xd8>
4102d33c:	01bfffc4 	movi	r6,-1
4102d340:	003fd006 	br	4102d284 <_strtoul_r+0xe4>
4102d344:	008015c4 	movi	r2,87
4102d348:	8887c83a 	sub	r3,r17,r2
4102d34c:	003fda06 	br	4102d2b8 <_strtoul_r+0x118>
4102d350:	857fffc4 	addi	r21,r16,-1
4102d354:	003fdf06 	br	4102d2d4 <_strtoul_r+0x134>
4102d358:	84400007 	ldb	r17,0(r16)
4102d35c:	84000044 	addi	r16,r16,1
4102d360:	003fac06 	br	4102d214 <_strtoul_r+0x74>
4102d364:	84400007 	ldb	r17,0(r16)
4102d368:	07000044 	movi	fp,1
4102d36c:	84000044 	addi	r16,r16,1
4102d370:	003fa906 	br	4102d218 <_strtoul_r+0x78>
4102d374:	81000007 	ldb	r4,0(r16)
4102d378:	00801e04 	movi	r2,120
4102d37c:	20800226 	beq	r4,r2,4102d388 <_strtoul_r+0x1e8>
4102d380:	00801604 	movi	r2,88
4102d384:	20bfe31e 	bne	r4,r2,4102d314 <_strtoul_r+0x174>
4102d388:	84400047 	ldb	r17,1(r16)
4102d38c:	04800404 	movi	r18,16
4102d390:	84000084 	addi	r16,r16,2
4102d394:	900f883a 	mov	r7,r18
4102d398:	04c40034 	movhi	r19,4096
4102d39c:	9cffffc4 	addi	r19,r19,-1
4102d3a0:	020003c4 	movi	r8,15
4102d3a4:	003fa906 	br	4102d24c <_strtoul_r+0xac>
4102d3a8:	04800204 	movi	r18,8
4102d3ac:	900f883a 	mov	r7,r18
4102d3b0:	04c80034 	movhi	r19,8192
4102d3b4:	9cffffc4 	addi	r19,r19,-1
4102d3b8:	020001c4 	movi	r8,7
4102d3bc:	003fa306 	br	4102d24c <_strtoul_r+0xac>
4102d3c0:	e005003a 	cmpeq	r2,fp,zero
4102d3c4:	103fc11e 	bne	r2,zero,4102d2cc <_strtoul_r+0x12c>
4102d3c8:	014bc83a 	sub	r5,zero,r5
4102d3cc:	003fbf06 	br	4102d2cc <_strtoul_r+0x12c>

4102d3d0 <strtoul>:
4102d3d0:	00800034 	movhi	r2,0
4102d3d4:	108ad704 	addi	r2,r2,11100
4102d3d8:	2013883a 	mov	r9,r4
4102d3dc:	11000017 	ldw	r4,0(r2)
4102d3e0:	2805883a 	mov	r2,r5
4102d3e4:	300f883a 	mov	r7,r6
4102d3e8:	480b883a 	mov	r5,r9
4102d3ec:	100d883a 	mov	r6,r2
4102d3f0:	102d1a01 	jmpi	4102d1a0 <_strtoul_r>

4102d3f4 <_strtoull_r>:
4102d3f4:	00800034 	movhi	r2,0
4102d3f8:	108adb04 	addi	r2,r2,11116
4102d3fc:	10800017 	ldw	r2,0(r2)
4102d400:	defff104 	addi	sp,sp,-60
4102d404:	df000d15 	stw	fp,52(sp)
4102d408:	dd800b15 	stw	r22,44(sp)
4102d40c:	dfc00e15 	stw	ra,56(sp)
4102d410:	ddc00c15 	stw	r23,48(sp)
4102d414:	dd400a15 	stw	r21,40(sp)
4102d418:	dd000915 	stw	r20,36(sp)
4102d41c:	dcc00815 	stw	r19,32(sp)
4102d420:	dc800715 	stw	r18,28(sp)
4102d424:	dc400615 	stw	r17,24(sp)
4102d428:	dc000515 	stw	r16,20(sp)
4102d42c:	d8800115 	stw	r2,4(sp)
4102d430:	d9400315 	stw	r5,12(sp)
4102d434:	d9000215 	stw	r4,8(sp)
4102d438:	d9800415 	stw	r6,16(sp)
4102d43c:	3839883a 	mov	fp,r7
4102d440:	282d883a 	mov	r22,r5
4102d444:	b5c00007 	ldb	r23,0(r22)
4102d448:	d8800117 	ldw	r2,4(sp)
4102d44c:	b5800044 	addi	r22,r22,1
4102d450:	15c7883a 	add	r3,r2,r23
4102d454:	18800003 	ldbu	r2,0(r3)
4102d458:	1080020c 	andi	r2,r2,8
4102d45c:	103ff91e 	bne	r2,zero,4102d444 <_strtoull_r+0x50>
4102d460:	00800b44 	movi	r2,45
4102d464:	b8807a26 	beq	r23,r2,4102d650 <_strtoull_r+0x25c>
4102d468:	00800ac4 	movi	r2,43
4102d46c:	b8807526 	beq	r23,r2,4102d644 <_strtoull_r+0x250>
4102d470:	d8000015 	stw	zero,0(sp)
4102d474:	e007003a 	cmpeq	r3,fp,zero
4102d478:	18005a1e 	bne	r3,zero,4102d5e4 <_strtoull_r+0x1f0>
4102d47c:	00800404 	movi	r2,16
4102d480:	e0805826 	beq	fp,r2,4102d5e4 <_strtoull_r+0x1f0>
4102d484:	e027d7fa 	srai	r19,fp,31
4102d488:	043fffc4 	movi	r16,-1
4102d48c:	8009883a 	mov	r4,r16
4102d490:	800b883a 	mov	r5,r16
4102d494:	e00d883a 	mov	r6,fp
4102d498:	980f883a 	mov	r7,r19
4102d49c:	102eb8c0 	call	4102eb8c <__udivdi3>
4102d4a0:	8009883a 	mov	r4,r16
4102d4a4:	800b883a 	mov	r5,r16
4102d4a8:	e00d883a 	mov	r6,fp
4102d4ac:	980f883a 	mov	r7,r19
4102d4b0:	1021883a 	mov	r16,r2
4102d4b4:	1823883a 	mov	r17,r3
4102d4b8:	102f1680 	call	4102f168 <__umoddi3>
4102d4bc:	e025883a 	mov	r18,fp
4102d4c0:	1013883a 	mov	r9,r2
4102d4c4:	d8c00117 	ldw	r3,4(sp)
4102d4c8:	000f883a 	mov	r7,zero
4102d4cc:	0011883a 	mov	r8,zero
4102d4d0:	1dc5883a 	add	r2,r3,r23
4102d4d4:	11000003 	ldbu	r4,0(r2)
4102d4d8:	000d883a 	mov	r6,zero
4102d4dc:	20c0010c 	andi	r3,r4,4
4102d4e0:	18001b26 	beq	r3,zero,4102d550 <_strtoull_r+0x15c>
4102d4e4:	b8fff404 	addi	r3,r23,-48
4102d4e8:	1f00210e 	bge	r3,fp,4102d570 <_strtoull_r+0x17c>
4102d4ec:	30003b16 	blt	r6,zero,4102d5dc <_strtoull_r+0x1e8>
4102d4f0:	8a003a36 	bltu	r17,r8,4102d5dc <_strtoull_r+0x1e8>
4102d4f4:	44403826 	beq	r8,r17,4102d5d8 <_strtoull_r+0x1e4>
4102d4f8:	3c004b26 	beq	r7,r16,4102d628 <_strtoull_r+0x234>
4102d4fc:	99c5383a 	mul	r2,r19,r7
4102d500:	448d383a 	mul	r6,r8,r18
4102d504:	3ca9383a 	mul	r20,r7,r18
4102d508:	3caa383a 	mulxuu	r21,r7,r18
4102d50c:	180bd7fa 	srai	r5,r3,31
4102d510:	308d883a 	add	r6,r6,r2
4102d514:	356b883a 	add	r21,r6,r21
4102d518:	a0c5883a 	add	r2,r20,r3
4102d51c:	150d803a 	cmpltu	r6,r2,r20
4102d520:	a947883a 	add	r3,r21,r5
4102d524:	30cd883a 	add	r6,r6,r3
4102d528:	3011883a 	mov	r8,r6
4102d52c:	100f883a 	mov	r7,r2
4102d530:	01800044 	movi	r6,1
4102d534:	b5c00007 	ldb	r23,0(r22)
4102d538:	d8c00117 	ldw	r3,4(sp)
4102d53c:	b5800044 	addi	r22,r22,1
4102d540:	1dc5883a 	add	r2,r3,r23
4102d544:	11000003 	ldbu	r4,0(r2)
4102d548:	20c0010c 	andi	r3,r4,4
4102d54c:	183fe51e 	bne	r3,zero,4102d4e4 <_strtoull_r+0xf0>
4102d550:	208000cc 	andi	r2,r4,3
4102d554:	10000626 	beq	r2,zero,4102d570 <_strtoull_r+0x17c>
4102d558:	2080004c 	andi	r2,r4,1
4102d55c:	1005003a 	cmpeq	r2,r2,zero
4102d560:	10002e1e 	bne	r2,zero,4102d61c <_strtoull_r+0x228>
4102d564:	01000dc4 	movi	r4,55
4102d568:	b907c83a 	sub	r3,r23,r4
4102d56c:	1f3fdf16 	blt	r3,fp,4102d4ec <_strtoull_r+0xf8>
4102d570:	3000530e 	bge	r6,zero,4102d6c0 <_strtoull_r+0x2cc>
4102d574:	d8c00217 	ldw	r3,8(sp)
4102d578:	01ffffc4 	movi	r7,-1
4102d57c:	00800884 	movi	r2,34
4102d580:	3811883a 	mov	r8,r7
4102d584:	18800015 	stw	r2,0(r3)
4102d588:	d8800417 	ldw	r2,16(sp)
4102d58c:	10000426 	beq	r2,zero,4102d5a0 <_strtoull_r+0x1ac>
4102d590:	3000291e 	bne	r6,zero,4102d638 <_strtoull_r+0x244>
4102d594:	d8800317 	ldw	r2,12(sp)
4102d598:	d8c00417 	ldw	r3,16(sp)
4102d59c:	18800015 	stw	r2,0(r3)
4102d5a0:	3805883a 	mov	r2,r7
4102d5a4:	4007883a 	mov	r3,r8
4102d5a8:	dfc00e17 	ldw	ra,56(sp)
4102d5ac:	df000d17 	ldw	fp,52(sp)
4102d5b0:	ddc00c17 	ldw	r23,48(sp)
4102d5b4:	dd800b17 	ldw	r22,44(sp)
4102d5b8:	dd400a17 	ldw	r21,40(sp)
4102d5bc:	dd000917 	ldw	r20,36(sp)
4102d5c0:	dcc00817 	ldw	r19,32(sp)
4102d5c4:	dc800717 	ldw	r18,28(sp)
4102d5c8:	dc400617 	ldw	r17,24(sp)
4102d5cc:	dc000517 	ldw	r16,20(sp)
4102d5d0:	dec00f04 	addi	sp,sp,60
4102d5d4:	f800283a 	ret
4102d5d8:	81ffc72e 	bgeu	r16,r7,4102d4f8 <_strtoull_r+0x104>
4102d5dc:	01bfffc4 	movi	r6,-1
4102d5e0:	003fd406 	br	4102d534 <_strtoull_r+0x140>
4102d5e4:	00800c04 	movi	r2,48
4102d5e8:	b8801e26 	beq	r23,r2,4102d664 <_strtoull_r+0x270>
4102d5ec:	183fa526 	beq	r3,zero,4102d484 <_strtoull_r+0x90>
4102d5f0:	00800c04 	movi	r2,48
4102d5f4:	b8802a26 	beq	r23,r2,4102d6a0 <_strtoull_r+0x2ac>
4102d5f8:	07000284 	movi	fp,10
4102d5fc:	e025883a 	mov	r18,fp
4102d600:	042666b4 	movhi	r16,39322
4102d604:	84266644 	addi	r16,r16,-26215
4102d608:	0027883a 	mov	r19,zero
4102d60c:	044666b4 	movhi	r17,6554
4102d610:	8c666644 	addi	r17,r17,-26215
4102d614:	02400144 	movi	r9,5
4102d618:	003faa06 	br	4102d4c4 <_strtoull_r+0xd0>
4102d61c:	010015c4 	movi	r4,87
4102d620:	b907c83a 	sub	r3,r23,r4
4102d624:	003fd106 	br	4102d56c <_strtoull_r+0x178>
4102d628:	447fb41e 	bne	r8,r17,4102d4fc <_strtoull_r+0x108>
4102d62c:	48ffb30e 	bge	r9,r3,4102d4fc <_strtoull_r+0x108>
4102d630:	01bfffc4 	movi	r6,-1
4102d634:	003fbf06 	br	4102d534 <_strtoull_r+0x140>
4102d638:	b5bfffc4 	addi	r22,r22,-1
4102d63c:	dd800315 	stw	r22,12(sp)
4102d640:	003fd406 	br	4102d594 <_strtoull_r+0x1a0>
4102d644:	b5c00007 	ldb	r23,0(r22)
4102d648:	b5800044 	addi	r22,r22,1
4102d64c:	003f8806 	br	4102d470 <_strtoull_r+0x7c>
4102d650:	b5c00007 	ldb	r23,0(r22)
4102d654:	00c00044 	movi	r3,1
4102d658:	b5800044 	addi	r22,r22,1
4102d65c:	d8c00015 	stw	r3,0(sp)
4102d660:	003f8406 	br	4102d474 <_strtoull_r+0x80>
4102d664:	b1000007 	ldb	r4,0(r22)
4102d668:	00801e04 	movi	r2,120
4102d66c:	20800226 	beq	r4,r2,4102d678 <_strtoull_r+0x284>
4102d670:	00801604 	movi	r2,88
4102d674:	20bfdd1e 	bne	r4,r2,4102d5ec <_strtoull_r+0x1f8>
4102d678:	b5c00047 	ldb	r23,1(r22)
4102d67c:	07000404 	movi	fp,16
4102d680:	e025883a 	mov	r18,fp
4102d684:	043fffc4 	movi	r16,-1
4102d688:	b5800084 	addi	r22,r22,2
4102d68c:	0027883a 	mov	r19,zero
4102d690:	04440034 	movhi	r17,4096
4102d694:	8c7fffc4 	addi	r17,r17,-1
4102d698:	024003c4 	movi	r9,15
4102d69c:	003f8906 	br	4102d4c4 <_strtoull_r+0xd0>
4102d6a0:	07000204 	movi	fp,8
4102d6a4:	e025883a 	mov	r18,fp
4102d6a8:	043fffc4 	movi	r16,-1
4102d6ac:	0027883a 	mov	r19,zero
4102d6b0:	04480034 	movhi	r17,8192
4102d6b4:	8c7fffc4 	addi	r17,r17,-1
4102d6b8:	024001c4 	movi	r9,7
4102d6bc:	003f8106 	br	4102d4c4 <_strtoull_r+0xd0>
4102d6c0:	d8c00017 	ldw	r3,0(sp)
4102d6c4:	1805003a 	cmpeq	r2,r3,zero
4102d6c8:	103faf1e 	bne	r2,zero,4102d588 <_strtoull_r+0x194>
4102d6cc:	0009883a 	mov	r4,zero
4102d6d0:	21c5c83a 	sub	r2,r4,r7
4102d6d4:	0207c83a 	sub	r3,zero,r8
4102d6d8:	2089803a 	cmpltu	r4,r4,r2
4102d6dc:	1909c83a 	sub	r4,r3,r4
4102d6e0:	100f883a 	mov	r7,r2
4102d6e4:	2011883a 	mov	r8,r4
4102d6e8:	003fa706 	br	4102d588 <_strtoull_r+0x194>

4102d6ec <__submore>:
4102d6ec:	defffa04 	addi	sp,sp,-24
4102d6f0:	28c00c17 	ldw	r3,48(r5)
4102d6f4:	dc800215 	stw	r18,8(sp)
4102d6f8:	2825883a 	mov	r18,r5
4102d6fc:	dc000015 	stw	r16,0(sp)
4102d700:	90801004 	addi	r2,r18,64
4102d704:	04010004 	movi	r16,1024
4102d708:	dfc00515 	stw	ra,20(sp)
4102d70c:	dd000415 	stw	r20,16(sp)
4102d710:	dcc00315 	stw	r19,12(sp)
4102d714:	dc400115 	stw	r17,4(sp)
4102d718:	800b883a 	mov	r5,r16
4102d71c:	18801b26 	beq	r3,r2,4102d78c <__submore+0xa0>
4102d720:	94400d17 	ldw	r17,52(r18)
4102d724:	180b883a 	mov	r5,r3
4102d728:	8c69883a 	add	r20,r17,r17
4102d72c:	a00d883a 	mov	r6,r20
4102d730:	102a9c00 	call	4102a9c0 <_realloc_r>
4102d734:	1467883a 	add	r19,r2,r17
4102d738:	1021883a 	mov	r16,r2
4102d73c:	880d883a 	mov	r6,r17
4102d740:	9809883a 	mov	r4,r19
4102d744:	100b883a 	mov	r5,r2
4102d748:	10000e26 	beq	r2,zero,4102d784 <__submore+0x98>
4102d74c:	1022c800 	call	41022c80 <memcpy>
4102d750:	000d883a 	mov	r6,zero
4102d754:	95000d15 	stw	r20,52(r18)
4102d758:	94c00015 	stw	r19,0(r18)
4102d75c:	94000c15 	stw	r16,48(r18)
4102d760:	3005883a 	mov	r2,r6
4102d764:	dfc00517 	ldw	ra,20(sp)
4102d768:	dd000417 	ldw	r20,16(sp)
4102d76c:	dcc00317 	ldw	r19,12(sp)
4102d770:	dc800217 	ldw	r18,8(sp)
4102d774:	dc400117 	ldw	r17,4(sp)
4102d778:	dc000017 	ldw	r16,0(sp)
4102d77c:	dec00604 	addi	sp,sp,24
4102d780:	f800283a 	ret
4102d784:	01bfffc4 	movi	r6,-1
4102d788:	003ff506 	br	4102d760 <__submore+0x74>
4102d78c:	10224cc0 	call	410224cc <_malloc_r>
4102d790:	1009883a 	mov	r4,r2
4102d794:	1140ff44 	addi	r5,r2,1021
4102d798:	000d883a 	mov	r6,zero
4102d79c:	103ff926 	beq	r2,zero,4102d784 <__submore+0x98>
4102d7a0:	90801083 	ldbu	r2,66(r18)
4102d7a4:	94000d15 	stw	r16,52(r18)
4102d7a8:	91000c15 	stw	r4,48(r18)
4102d7ac:	28800085 	stb	r2,2(r5)
4102d7b0:	90c01043 	ldbu	r3,65(r18)
4102d7b4:	28c00045 	stb	r3,1(r5)
4102d7b8:	90801003 	ldbu	r2,64(r18)
4102d7bc:	2080ff45 	stb	r2,1021(r4)
4102d7c0:	91400015 	stw	r5,0(r18)
4102d7c4:	003fe606 	br	4102d760 <__submore+0x74>

4102d7c8 <_ungetc_r>:
4102d7c8:	defffc04 	addi	sp,sp,-16
4102d7cc:	00bfffc4 	movi	r2,-1
4102d7d0:	dc400215 	stw	r17,8(sp)
4102d7d4:	dc000115 	stw	r16,4(sp)
4102d7d8:	dfc00315 	stw	ra,12(sp)
4102d7dc:	2821883a 	mov	r16,r5
4102d7e0:	2023883a 	mov	r17,r4
4102d7e4:	28801826 	beq	r5,r2,4102d848 <_ungetc_r+0x80>
4102d7e8:	20000226 	beq	r4,zero,4102d7f4 <_ungetc_r+0x2c>
4102d7ec:	20800e17 	ldw	r2,56(r4)
4102d7f0:	10001b26 	beq	r2,zero,4102d860 <_ungetc_r+0x98>
4102d7f4:	3100030b 	ldhu	r4,12(r6)
4102d7f8:	00bff7c4 	movi	r2,-33
4102d7fc:	2084703a 	and	r2,r4,r2
4102d800:	117fffcc 	andi	r5,r2,65535
4102d804:	28c0010c 	andi	r3,r5,4
4102d808:	1009883a 	mov	r4,r2
4102d80c:	3080030d 	sth	r2,12(r6)
4102d810:	18003526 	beq	r3,zero,4102d8e8 <_ungetc_r+0x120>
4102d814:	30800c17 	ldw	r2,48(r6)
4102d818:	84003fcc 	andi	r16,r16,255
4102d81c:	10001426 	beq	r2,zero,4102d870 <_ungetc_r+0xa8>
4102d820:	30c00117 	ldw	r3,4(r6)
4102d824:	30800d17 	ldw	r2,52(r6)
4102d828:	1880380e 	bge	r3,r2,4102d90c <_ungetc_r+0x144>
4102d82c:	30c00017 	ldw	r3,0(r6)
4102d830:	19ffffc4 	addi	r7,r3,-1
4102d834:	31c00015 	stw	r7,0(r6)
4102d838:	1c3fffc5 	stb	r16,-1(r3)
4102d83c:	30800117 	ldw	r2,4(r6)
4102d840:	10800044 	addi	r2,r2,1
4102d844:	30800115 	stw	r2,4(r6)
4102d848:	8005883a 	mov	r2,r16
4102d84c:	dfc00317 	ldw	ra,12(sp)
4102d850:	dc400217 	ldw	r17,8(sp)
4102d854:	dc000117 	ldw	r16,4(sp)
4102d858:	dec00404 	addi	sp,sp,16
4102d85c:	f800283a 	ret
4102d860:	d9800015 	stw	r6,0(sp)
4102d864:	10283100 	call	41028310 <__sinit>
4102d868:	d9800017 	ldw	r6,0(sp)
4102d86c:	003fe106 	br	4102d7f4 <_ungetc_r+0x2c>
4102d870:	30800417 	ldw	r2,16(r6)
4102d874:	10002326 	beq	r2,zero,4102d904 <_ungetc_r+0x13c>
4102d878:	31c00017 	ldw	r7,0(r6)
4102d87c:	11c0022e 	bgeu	r2,r7,4102d888 <_ungetc_r+0xc0>
4102d880:	38bfffc3 	ldbu	r2,-1(r7)
4102d884:	80801226 	beq	r16,r2,4102d8d0 <_ungetc_r+0x108>
4102d888:	30c00117 	ldw	r3,4(r6)
4102d88c:	00800044 	movi	r2,1
4102d890:	30800115 	stw	r2,4(r6)
4102d894:	008000c4 	movi	r2,3
4102d898:	31001004 	addi	r4,r6,64
4102d89c:	31401084 	addi	r5,r6,66
4102d8a0:	30800d15 	stw	r2,52(r6)
4102d8a4:	8005883a 	mov	r2,r16
4102d8a8:	30c00f15 	stw	r3,60(r6)
4102d8ac:	31c00e15 	stw	r7,56(r6)
4102d8b0:	31000c15 	stw	r4,48(r6)
4102d8b4:	31400015 	stw	r5,0(r6)
4102d8b8:	34001085 	stb	r16,66(r6)
4102d8bc:	dfc00317 	ldw	ra,12(sp)
4102d8c0:	dc400217 	ldw	r17,8(sp)
4102d8c4:	dc000117 	ldw	r16,4(sp)
4102d8c8:	dec00404 	addi	sp,sp,16
4102d8cc:	f800283a 	ret
4102d8d0:	30800117 	ldw	r2,4(r6)
4102d8d4:	39ffffc4 	addi	r7,r7,-1
4102d8d8:	31c00015 	stw	r7,0(r6)
4102d8dc:	10800044 	addi	r2,r2,1
4102d8e0:	30800115 	stw	r2,4(r6)
4102d8e4:	003fd806 	br	4102d848 <_ungetc_r+0x80>
4102d8e8:	2880040c 	andi	r2,r5,16
4102d8ec:	10000d26 	beq	r2,zero,4102d924 <_ungetc_r+0x15c>
4102d8f0:	2880020c 	andi	r2,r5,8
4102d8f4:	10000d1e 	bne	r2,zero,4102d92c <_ungetc_r+0x164>
4102d8f8:	20800114 	ori	r2,r4,4
4102d8fc:	3080030d 	sth	r2,12(r6)
4102d900:	003fc406 	br	4102d814 <_ungetc_r+0x4c>
4102d904:	31c00017 	ldw	r7,0(r6)
4102d908:	003fdf06 	br	4102d888 <_ungetc_r+0xc0>
4102d90c:	300b883a 	mov	r5,r6
4102d910:	8809883a 	mov	r4,r17
4102d914:	d9800015 	stw	r6,0(sp)
4102d918:	102d6ec0 	call	4102d6ec <__submore>
4102d91c:	d9800017 	ldw	r6,0(sp)
4102d920:	103fc226 	beq	r2,zero,4102d82c <_ungetc_r+0x64>
4102d924:	043fffc4 	movi	r16,-1
4102d928:	003fc706 	br	4102d848 <_ungetc_r+0x80>
4102d92c:	300b883a 	mov	r5,r6
4102d930:	8809883a 	mov	r4,r17
4102d934:	d9800015 	stw	r6,0(sp)
4102d938:	10280780 	call	41028078 <_fflush_r>
4102d93c:	d9800017 	ldw	r6,0(sp)
4102d940:	103ff81e 	bne	r2,zero,4102d924 <_ungetc_r+0x15c>
4102d944:	3100030b 	ldhu	r4,12(r6)
4102d948:	00bffdc4 	movi	r2,-9
4102d94c:	30000215 	stw	zero,8(r6)
4102d950:	2084703a 	and	r2,r4,r2
4102d954:	1009883a 	mov	r4,r2
4102d958:	3080030d 	sth	r2,12(r6)
4102d95c:	30000615 	stw	zero,24(r6)
4102d960:	003fe506 	br	4102d8f8 <_ungetc_r+0x130>

4102d964 <ungetc>:
4102d964:	01800034 	movhi	r6,0
4102d968:	318ad704 	addi	r6,r6,11100
4102d96c:	2007883a 	mov	r3,r4
4102d970:	31000017 	ldw	r4,0(r6)
4102d974:	280d883a 	mov	r6,r5
4102d978:	180b883a 	mov	r5,r3
4102d97c:	102d7c81 	jmpi	4102d7c8 <_ungetc_r>

4102d980 <__swbuf_r>:
4102d980:	defffc04 	addi	sp,sp,-16
4102d984:	dc400215 	stw	r17,8(sp)
4102d988:	dc000115 	stw	r16,4(sp)
4102d98c:	dfc00315 	stw	ra,12(sp)
4102d990:	2023883a 	mov	r17,r4
4102d994:	2821883a 	mov	r16,r5
4102d998:	20000226 	beq	r4,zero,4102d9a4 <__swbuf_r+0x24>
4102d99c:	20800e17 	ldw	r2,56(r4)
4102d9a0:	10002f26 	beq	r2,zero,4102da60 <__swbuf_r+0xe0>
4102d9a4:	3080030b 	ldhu	r2,12(r6)
4102d9a8:	30c00617 	ldw	r3,24(r6)
4102d9ac:	1080020c 	andi	r2,r2,8
4102d9b0:	30c00215 	stw	r3,8(r6)
4102d9b4:	10002226 	beq	r2,zero,4102da40 <__swbuf_r+0xc0>
4102d9b8:	30c00417 	ldw	r3,16(r6)
4102d9bc:	18002026 	beq	r3,zero,4102da40 <__swbuf_r+0xc0>
4102d9c0:	31000017 	ldw	r4,0(r6)
4102d9c4:	30800517 	ldw	r2,20(r6)
4102d9c8:	20c7c83a 	sub	r3,r4,r3
4102d9cc:	18802f0e 	bge	r3,r2,4102da8c <__swbuf_r+0x10c>
4102d9d0:	19400044 	addi	r5,r3,1
4102d9d4:	30800217 	ldw	r2,8(r6)
4102d9d8:	84003fcc 	andi	r16,r16,255
4102d9dc:	20c00044 	addi	r3,r4,1
4102d9e0:	10bfffc4 	addi	r2,r2,-1
4102d9e4:	30800215 	stw	r2,8(r6)
4102d9e8:	24000005 	stb	r16,0(r4)
4102d9ec:	30800517 	ldw	r2,20(r6)
4102d9f0:	30c00015 	stw	r3,0(r6)
4102d9f4:	11400c26 	beq	r2,r5,4102da28 <__swbuf_r+0xa8>
4102d9f8:	3080030b 	ldhu	r2,12(r6)
4102d9fc:	1080004c 	andi	r2,r2,1
4102da00:	1005003a 	cmpeq	r2,r2,zero
4102da04:	10000626 	beq	r2,zero,4102da20 <__swbuf_r+0xa0>
4102da08:	8005883a 	mov	r2,r16
4102da0c:	dfc00317 	ldw	ra,12(sp)
4102da10:	dc400217 	ldw	r17,8(sp)
4102da14:	dc000117 	ldw	r16,4(sp)
4102da18:	dec00404 	addi	sp,sp,16
4102da1c:	f800283a 	ret
4102da20:	00800284 	movi	r2,10
4102da24:	80bff81e 	bne	r16,r2,4102da08 <__swbuf_r+0x88>
4102da28:	8809883a 	mov	r4,r17
4102da2c:	300b883a 	mov	r5,r6
4102da30:	10280780 	call	41028078 <_fflush_r>
4102da34:	103ff426 	beq	r2,zero,4102da08 <__swbuf_r+0x88>
4102da38:	043fffc4 	movi	r16,-1
4102da3c:	003ff206 	br	4102da08 <__swbuf_r+0x88>
4102da40:	300b883a 	mov	r5,r6
4102da44:	8809883a 	mov	r4,r17
4102da48:	d9800015 	stw	r6,0(sp)
4102da4c:	10267700 	call	41026770 <__swsetup_r>
4102da50:	d9800017 	ldw	r6,0(sp)
4102da54:	1000061e 	bne	r2,zero,4102da70 <__swbuf_r+0xf0>
4102da58:	30c00417 	ldw	r3,16(r6)
4102da5c:	003fd806 	br	4102d9c0 <__swbuf_r+0x40>
4102da60:	d9800015 	stw	r6,0(sp)
4102da64:	10283100 	call	41028310 <__sinit>
4102da68:	d9800017 	ldw	r6,0(sp)
4102da6c:	003fcd06 	br	4102d9a4 <__swbuf_r+0x24>
4102da70:	3080030b 	ldhu	r2,12(r6)
4102da74:	00c00244 	movi	r3,9
4102da78:	043fffc4 	movi	r16,-1
4102da7c:	10801014 	ori	r2,r2,64
4102da80:	3080030d 	sth	r2,12(r6)
4102da84:	88c00015 	stw	r3,0(r17)
4102da88:	003fdf06 	br	4102da08 <__swbuf_r+0x88>
4102da8c:	300b883a 	mov	r5,r6
4102da90:	8809883a 	mov	r4,r17
4102da94:	d9800015 	stw	r6,0(sp)
4102da98:	10280780 	call	41028078 <_fflush_r>
4102da9c:	d9800017 	ldw	r6,0(sp)
4102daa0:	103fe51e 	bne	r2,zero,4102da38 <__swbuf_r+0xb8>
4102daa4:	31000017 	ldw	r4,0(r6)
4102daa8:	01400044 	movi	r5,1
4102daac:	003fc906 	br	4102d9d4 <__swbuf_r+0x54>

4102dab0 <__swbuf>:
4102dab0:	01800034 	movhi	r6,0
4102dab4:	318ad704 	addi	r6,r6,11100
4102dab8:	2007883a 	mov	r3,r4
4102dabc:	31000017 	ldw	r4,0(r6)
4102dac0:	280d883a 	mov	r6,r5
4102dac4:	180b883a 	mov	r5,r3
4102dac8:	102d9801 	jmpi	4102d980 <__swbuf_r>

4102dacc <_write_r>:
4102dacc:	defffd04 	addi	sp,sp,-12
4102dad0:	dc000015 	stw	r16,0(sp)
4102dad4:	04000034 	movhi	r16,0
4102dad8:	840aef04 	addi	r16,r16,11196
4102dadc:	dc400115 	stw	r17,4(sp)
4102dae0:	80000015 	stw	zero,0(r16)
4102dae4:	2023883a 	mov	r17,r4
4102dae8:	2809883a 	mov	r4,r5
4102daec:	300b883a 	mov	r5,r6
4102daf0:	380d883a 	mov	r6,r7
4102daf4:	dfc00215 	stw	ra,8(sp)
4102daf8:	1031dd00 	call	41031dd0 <write>
4102dafc:	1007883a 	mov	r3,r2
4102db00:	00bfffc4 	movi	r2,-1
4102db04:	18800626 	beq	r3,r2,4102db20 <_write_r+0x54>
4102db08:	1805883a 	mov	r2,r3
4102db0c:	dfc00217 	ldw	ra,8(sp)
4102db10:	dc400117 	ldw	r17,4(sp)
4102db14:	dc000017 	ldw	r16,0(sp)
4102db18:	dec00304 	addi	sp,sp,12
4102db1c:	f800283a 	ret
4102db20:	80800017 	ldw	r2,0(r16)
4102db24:	103ff826 	beq	r2,zero,4102db08 <_write_r+0x3c>
4102db28:	88800015 	stw	r2,0(r17)
4102db2c:	1805883a 	mov	r2,r3
4102db30:	dfc00217 	ldw	ra,8(sp)
4102db34:	dc400117 	ldw	r17,4(sp)
4102db38:	dc000017 	ldw	r16,0(sp)
4102db3c:	dec00304 	addi	sp,sp,12
4102db40:	f800283a 	ret

4102db44 <_calloc_r>:
4102db44:	298b383a 	mul	r5,r5,r6
4102db48:	defffe04 	addi	sp,sp,-8
4102db4c:	dc000015 	stw	r16,0(sp)
4102db50:	dfc00115 	stw	ra,4(sp)
4102db54:	10224cc0 	call	410224cc <_malloc_r>
4102db58:	1021883a 	mov	r16,r2
4102db5c:	01c00904 	movi	r7,36
4102db60:	10000d26 	beq	r2,zero,4102db98 <_calloc_r+0x54>
4102db64:	10ffff17 	ldw	r3,-4(r2)
4102db68:	1009883a 	mov	r4,r2
4102db6c:	00bfff04 	movi	r2,-4
4102db70:	1886703a 	and	r3,r3,r2
4102db74:	1887883a 	add	r3,r3,r2
4102db78:	180d883a 	mov	r6,r3
4102db7c:	000b883a 	mov	r5,zero
4102db80:	38c01736 	bltu	r7,r3,4102dbe0 <_calloc_r+0x9c>
4102db84:	008004c4 	movi	r2,19
4102db88:	10c00836 	bltu	r2,r3,4102dbac <_calloc_r+0x68>
4102db8c:	20000215 	stw	zero,8(r4)
4102db90:	20000015 	stw	zero,0(r4)
4102db94:	20000115 	stw	zero,4(r4)
4102db98:	8005883a 	mov	r2,r16
4102db9c:	dfc00117 	ldw	ra,4(sp)
4102dba0:	dc000017 	ldw	r16,0(sp)
4102dba4:	dec00204 	addi	sp,sp,8
4102dba8:	f800283a 	ret
4102dbac:	008006c4 	movi	r2,27
4102dbb0:	80000015 	stw	zero,0(r16)
4102dbb4:	80000115 	stw	zero,4(r16)
4102dbb8:	81000204 	addi	r4,r16,8
4102dbbc:	10fff32e 	bgeu	r2,r3,4102db8c <_calloc_r+0x48>
4102dbc0:	80000215 	stw	zero,8(r16)
4102dbc4:	80000315 	stw	zero,12(r16)
4102dbc8:	81000404 	addi	r4,r16,16
4102dbcc:	19ffef1e 	bne	r3,r7,4102db8c <_calloc_r+0x48>
4102dbd0:	81000604 	addi	r4,r16,24
4102dbd4:	80000415 	stw	zero,16(r16)
4102dbd8:	80000515 	stw	zero,20(r16)
4102dbdc:	003feb06 	br	4102db8c <_calloc_r+0x48>
4102dbe0:	10297480 	call	41029748 <memset>
4102dbe4:	8005883a 	mov	r2,r16
4102dbe8:	dfc00117 	ldw	ra,4(sp)
4102dbec:	dc000017 	ldw	r16,0(sp)
4102dbf0:	dec00204 	addi	sp,sp,8
4102dbf4:	f800283a 	ret

4102dbf8 <_close_r>:
4102dbf8:	defffd04 	addi	sp,sp,-12
4102dbfc:	dc000015 	stw	r16,0(sp)
4102dc00:	04000034 	movhi	r16,0
4102dc04:	840aef04 	addi	r16,r16,11196
4102dc08:	dc400115 	stw	r17,4(sp)
4102dc0c:	80000015 	stw	zero,0(r16)
4102dc10:	2023883a 	mov	r17,r4
4102dc14:	2809883a 	mov	r4,r5
4102dc18:	dfc00215 	stw	ra,8(sp)
4102dc1c:	10313280 	call	41031328 <close>
4102dc20:	1007883a 	mov	r3,r2
4102dc24:	00bfffc4 	movi	r2,-1
4102dc28:	18800626 	beq	r3,r2,4102dc44 <_close_r+0x4c>
4102dc2c:	1805883a 	mov	r2,r3
4102dc30:	dfc00217 	ldw	ra,8(sp)
4102dc34:	dc400117 	ldw	r17,4(sp)
4102dc38:	dc000017 	ldw	r16,0(sp)
4102dc3c:	dec00304 	addi	sp,sp,12
4102dc40:	f800283a 	ret
4102dc44:	80800017 	ldw	r2,0(r16)
4102dc48:	103ff826 	beq	r2,zero,4102dc2c <_close_r+0x34>
4102dc4c:	88800015 	stw	r2,0(r17)
4102dc50:	1805883a 	mov	r2,r3
4102dc54:	dfc00217 	ldw	ra,8(sp)
4102dc58:	dc400117 	ldw	r17,4(sp)
4102dc5c:	dc000017 	ldw	r16,0(sp)
4102dc60:	dec00304 	addi	sp,sp,12
4102dc64:	f800283a 	ret

4102dc68 <_fclose_r>:
4102dc68:	defffc04 	addi	sp,sp,-16
4102dc6c:	dc400115 	stw	r17,4(sp)
4102dc70:	dc000015 	stw	r16,0(sp)
4102dc74:	dfc00315 	stw	ra,12(sp)
4102dc78:	dc800215 	stw	r18,8(sp)
4102dc7c:	2821883a 	mov	r16,r5
4102dc80:	2023883a 	mov	r17,r4
4102dc84:	28002926 	beq	r5,zero,4102dd2c <_fclose_r+0xc4>
4102dc88:	10283000 	call	41028300 <__sfp_lock_acquire>
4102dc8c:	88000226 	beq	r17,zero,4102dc98 <_fclose_r+0x30>
4102dc90:	88800e17 	ldw	r2,56(r17)
4102dc94:	10002d26 	beq	r2,zero,4102dd4c <_fclose_r+0xe4>
4102dc98:	8080030f 	ldh	r2,12(r16)
4102dc9c:	10002226 	beq	r2,zero,4102dd28 <_fclose_r+0xc0>
4102dca0:	8809883a 	mov	r4,r17
4102dca4:	800b883a 	mov	r5,r16
4102dca8:	10280780 	call	41028078 <_fflush_r>
4102dcac:	1025883a 	mov	r18,r2
4102dcb0:	80800b17 	ldw	r2,44(r16)
4102dcb4:	10000426 	beq	r2,zero,4102dcc8 <_fclose_r+0x60>
4102dcb8:	81400717 	ldw	r5,28(r16)
4102dcbc:	8809883a 	mov	r4,r17
4102dcc0:	103ee83a 	callr	r2
4102dcc4:	10002a16 	blt	r2,zero,4102dd70 <_fclose_r+0x108>
4102dcc8:	8080030b 	ldhu	r2,12(r16)
4102dccc:	1080200c 	andi	r2,r2,128
4102dcd0:	1000231e 	bne	r2,zero,4102dd60 <_fclose_r+0xf8>
4102dcd4:	81400c17 	ldw	r5,48(r16)
4102dcd8:	28000526 	beq	r5,zero,4102dcf0 <_fclose_r+0x88>
4102dcdc:	80801004 	addi	r2,r16,64
4102dce0:	28800226 	beq	r5,r2,4102dcec <_fclose_r+0x84>
4102dce4:	8809883a 	mov	r4,r17
4102dce8:	10288d00 	call	410288d0 <_free_r>
4102dcec:	80000c15 	stw	zero,48(r16)
4102dcf0:	81401117 	ldw	r5,68(r16)
4102dcf4:	28000326 	beq	r5,zero,4102dd04 <_fclose_r+0x9c>
4102dcf8:	8809883a 	mov	r4,r17
4102dcfc:	10288d00 	call	410288d0 <_free_r>
4102dd00:	80001115 	stw	zero,68(r16)
4102dd04:	8000030d 	sth	zero,12(r16)
4102dd08:	10283040 	call	41028304 <__sfp_lock_release>
4102dd0c:	9005883a 	mov	r2,r18
4102dd10:	dfc00317 	ldw	ra,12(sp)
4102dd14:	dc800217 	ldw	r18,8(sp)
4102dd18:	dc400117 	ldw	r17,4(sp)
4102dd1c:	dc000017 	ldw	r16,0(sp)
4102dd20:	dec00404 	addi	sp,sp,16
4102dd24:	f800283a 	ret
4102dd28:	10283040 	call	41028304 <__sfp_lock_release>
4102dd2c:	0025883a 	mov	r18,zero
4102dd30:	9005883a 	mov	r2,r18
4102dd34:	dfc00317 	ldw	ra,12(sp)
4102dd38:	dc800217 	ldw	r18,8(sp)
4102dd3c:	dc400117 	ldw	r17,4(sp)
4102dd40:	dc000017 	ldw	r16,0(sp)
4102dd44:	dec00404 	addi	sp,sp,16
4102dd48:	f800283a 	ret
4102dd4c:	8809883a 	mov	r4,r17
4102dd50:	10283100 	call	41028310 <__sinit>
4102dd54:	8080030f 	ldh	r2,12(r16)
4102dd58:	103fd11e 	bne	r2,zero,4102dca0 <_fclose_r+0x38>
4102dd5c:	003ff206 	br	4102dd28 <_fclose_r+0xc0>
4102dd60:	81400417 	ldw	r5,16(r16)
4102dd64:	8809883a 	mov	r4,r17
4102dd68:	10288d00 	call	410288d0 <_free_r>
4102dd6c:	003fd906 	br	4102dcd4 <_fclose_r+0x6c>
4102dd70:	04bfffc4 	movi	r18,-1
4102dd74:	003fd406 	br	4102dcc8 <_fclose_r+0x60>

4102dd78 <fclose>:
4102dd78:	00800034 	movhi	r2,0
4102dd7c:	108ad704 	addi	r2,r2,11100
4102dd80:	200b883a 	mov	r5,r4
4102dd84:	11000017 	ldw	r4,0(r2)
4102dd88:	102dc681 	jmpi	4102dc68 <_fclose_r>

4102dd8c <_fstat_r>:
4102dd8c:	defffd04 	addi	sp,sp,-12
4102dd90:	dc000015 	stw	r16,0(sp)
4102dd94:	04000034 	movhi	r16,0
4102dd98:	840aef04 	addi	r16,r16,11196
4102dd9c:	dc400115 	stw	r17,4(sp)
4102dda0:	80000015 	stw	zero,0(r16)
4102dda4:	2023883a 	mov	r17,r4
4102dda8:	2809883a 	mov	r4,r5
4102ddac:	300b883a 	mov	r5,r6
4102ddb0:	dfc00215 	stw	ra,8(sp)
4102ddb4:	10315f80 	call	410315f8 <fstat>
4102ddb8:	1007883a 	mov	r3,r2
4102ddbc:	00bfffc4 	movi	r2,-1
4102ddc0:	18800626 	beq	r3,r2,4102dddc <_fstat_r+0x50>
4102ddc4:	1805883a 	mov	r2,r3
4102ddc8:	dfc00217 	ldw	ra,8(sp)
4102ddcc:	dc400117 	ldw	r17,4(sp)
4102ddd0:	dc000017 	ldw	r16,0(sp)
4102ddd4:	dec00304 	addi	sp,sp,12
4102ddd8:	f800283a 	ret
4102dddc:	80800017 	ldw	r2,0(r16)
4102dde0:	103ff826 	beq	r2,zero,4102ddc4 <_fstat_r+0x38>
4102dde4:	88800015 	stw	r2,0(r17)
4102dde8:	1805883a 	mov	r2,r3
4102ddec:	dfc00217 	ldw	ra,8(sp)
4102ddf0:	dc400117 	ldw	r17,4(sp)
4102ddf4:	dc000017 	ldw	r16,0(sp)
4102ddf8:	dec00304 	addi	sp,sp,12
4102ddfc:	f800283a 	ret

4102de00 <htinit>:
4102de00:	28800003 	ldbu	r2,0(r5)
4102de04:	10000626 	beq	r2,zero,4102de20 <htinit+0x20>
4102de08:	1105883a 	add	r2,r2,r4
4102de0c:	11800005 	stb	r6,0(r2)
4102de10:	28800043 	ldbu	r2,1(r5)
4102de14:	31800044 	addi	r6,r6,1
4102de18:	29400044 	addi	r5,r5,1
4102de1c:	103ffa1e 	bne	r2,zero,4102de08 <htinit+0x8>
4102de20:	f800283a 	ret

4102de24 <__hexdig_init>:
4102de24:	defffd04 	addi	sp,sp,-12
4102de28:	dc400015 	stw	r17,0(sp)
4102de2c:	04400034 	movhi	r17,0
4102de30:	8c4b0304 	addi	r17,r17,11276
4102de34:	dcc00115 	stw	r19,4(sp)
4102de38:	8809883a 	mov	r4,r17
4102de3c:	04c00684 	movi	r19,26
4102de40:	01400034 	movhi	r5,0
4102de44:	2943ef04 	addi	r5,r5,4028
4102de48:	01800404 	movi	r6,16
4102de4c:	dfc00215 	stw	ra,8(sp)
4102de50:	102de000 	call	4102de00 <htinit>
4102de54:	980d883a 	mov	r6,r19
4102de58:	8809883a 	mov	r4,r17
4102de5c:	01400034 	movhi	r5,0
4102de60:	2943f204 	addi	r5,r5,4040
4102de64:	102de000 	call	4102de00 <htinit>
4102de68:	8809883a 	mov	r4,r17
4102de6c:	980d883a 	mov	r6,r19
4102de70:	01400034 	movhi	r5,0
4102de74:	2943f404 	addi	r5,r5,4048
4102de78:	dfc00217 	ldw	ra,8(sp)
4102de7c:	dcc00117 	ldw	r19,4(sp)
4102de80:	dc400017 	ldw	r17,0(sp)
4102de84:	dec00304 	addi	sp,sp,12
4102de88:	102de001 	jmpi	4102de00 <htinit>

4102de8c <rshift>:
4102de8c:	2807d17a 	srai	r3,r5,5
4102de90:	20800417 	ldw	r2,16(r4)
4102de94:	22400504 	addi	r9,r4,20
4102de98:	480f883a 	mov	r7,r9
4102de9c:	1880190e 	bge	r3,r2,4102df04 <rshift+0x78>
4102dea0:	1085883a 	add	r2,r2,r2
4102dea4:	18c7883a 	add	r3,r3,r3
4102dea8:	1085883a 	add	r2,r2,r2
4102deac:	18c7883a 	add	r3,r3,r3
4102deb0:	294007cc 	andi	r5,r5,31
4102deb4:	4891883a 	add	r8,r9,r2
4102deb8:	48cd883a 	add	r6,r9,r3
4102debc:	28001726 	beq	r5,zero,4102df1c <rshift+0x90>
4102dec0:	30c00017 	ldw	r3,0(r6)
4102dec4:	00800804 	movi	r2,32
4102dec8:	31800104 	addi	r6,r6,4
4102decc:	1155c83a 	sub	r10,r2,r5
4102ded0:	1946d83a 	srl	r3,r3,r5
4102ded4:	3200092e 	bgeu	r6,r8,4102defc <rshift+0x70>
4102ded8:	30800017 	ldw	r2,0(r6)
4102dedc:	1284983a 	sll	r2,r2,r10
4102dee0:	10c4b03a 	or	r2,r2,r3
4102dee4:	38800015 	stw	r2,0(r7)
4102dee8:	30c00017 	ldw	r3,0(r6)
4102deec:	31800104 	addi	r6,r6,4
4102def0:	39c00104 	addi	r7,r7,4
4102def4:	1946d83a 	srl	r3,r3,r5
4102def8:	323ff736 	bltu	r6,r8,4102ded8 <rshift+0x4c>
4102defc:	38c00015 	stw	r3,0(r7)
4102df00:	18000c1e 	bne	r3,zero,4102df34 <rshift+0xa8>
4102df04:	3a45c83a 	sub	r2,r7,r9
4102df08:	1005d0ba 	srai	r2,r2,2
4102df0c:	20800415 	stw	r2,16(r4)
4102df10:	1000011e 	bne	r2,zero,4102df18 <rshift+0x8c>
4102df14:	20000515 	stw	zero,20(r4)
4102df18:	f800283a 	ret
4102df1c:	323ff92e 	bgeu	r6,r8,4102df04 <rshift+0x78>
4102df20:	30800017 	ldw	r2,0(r6)
4102df24:	31800104 	addi	r6,r6,4
4102df28:	38800015 	stw	r2,0(r7)
4102df2c:	39c00104 	addi	r7,r7,4
4102df30:	003ffa06 	br	4102df1c <rshift+0x90>
4102df34:	39c00104 	addi	r7,r7,4
4102df38:	003ff206 	br	4102df04 <rshift+0x78>

4102df3c <__gethex>:
4102df3c:	defff304 	addi	sp,sp,-52
4102df40:	dd400815 	stw	r21,32(sp)
4102df44:	dd000715 	stw	r20,28(sp)
4102df48:	dcc00615 	stw	r19,24(sp)
4102df4c:	dc400415 	stw	r17,16(sp)
4102df50:	dfc00c15 	stw	ra,48(sp)
4102df54:	df000b15 	stw	fp,44(sp)
4102df58:	ddc00a15 	stw	r23,40(sp)
4102df5c:	dd800915 	stw	r22,36(sp)
4102df60:	dc800515 	stw	r18,20(sp)
4102df64:	dc000315 	stw	r16,12(sp)
4102df68:	04400034 	movhi	r17,0
4102df6c:	8c4b0304 	addi	r17,r17,11276
4102df70:	88800c03 	ldbu	r2,48(r17)
4102df74:	202b883a 	mov	r21,r4
4102df78:	2827883a 	mov	r19,r5
4102df7c:	3029883a 	mov	r20,r6
4102df80:	d9c00115 	stw	r7,4(sp)
4102df84:	10006e26 	beq	r2,zero,4102e140 <__gethex+0x204>
4102df88:	99800017 	ldw	r6,0(r19)
4102df8c:	00800c04 	movi	r2,48
4102df90:	31000083 	ldbu	r4,2(r6)
4102df94:	30c00084 	addi	r3,r6,2
4102df98:	20806f1e 	bne	r4,r2,4102e158 <__gethex+0x21c>
4102df9c:	200b883a 	mov	r5,r4
4102dfa0:	3007883a 	mov	r3,r6
4102dfa4:	188000c3 	ldbu	r2,3(r3)
4102dfa8:	18c00044 	addi	r3,r3,1
4102dfac:	1009883a 	mov	r4,r2
4102dfb0:	117ffc26 	beq	r2,r5,4102dfa4 <__gethex+0x68>
4102dfb4:	1997c83a 	sub	r11,r3,r6
4102dfb8:	19400084 	addi	r5,r3,2
4102dfbc:	2445883a 	add	r2,r4,r17
4102dfc0:	10c00003 	ldbu	r3,0(r2)
4102dfc4:	18002d26 	beq	r3,zero,4102e07c <__gethex+0x140>
4102dfc8:	29000003 	ldbu	r4,0(r5)
4102dfcc:	2825883a 	mov	r18,r5
4102dfd0:	000d883a 	mov	r6,zero
4102dfd4:	0013883a 	mov	r9,zero
4102dfd8:	21003fcc 	andi	r4,r4,255
4102dfdc:	2445883a 	add	r2,r4,r17
4102dfe0:	10c00003 	ldbu	r3,0(r2)
4102dfe4:	18000526 	beq	r3,zero,4102dffc <__gethex+0xc0>
4102dfe8:	29400044 	addi	r5,r5,1
4102dfec:	29000003 	ldbu	r4,0(r5)
4102dff0:	2445883a 	add	r2,r4,r17
4102dff4:	10c00003 	ldbu	r3,0(r2)
4102dff8:	183ffb1e 	bne	r3,zero,4102dfe8 <__gethex+0xac>
4102dffc:	00800b84 	movi	r2,46
4102e000:	20805826 	beq	r4,r2,4102e164 <__gethex+0x228>
4102e004:	30007a26 	beq	r6,zero,4102e1f0 <__gethex+0x2b4>
4102e008:	2985c83a 	sub	r2,r5,r6
4102e00c:	1085883a 	add	r2,r2,r2
4102e010:	1085883a 	add	r2,r2,r2
4102e014:	00adc83a 	sub	r22,zero,r2
4102e018:	2821883a 	mov	r16,r5
4102e01c:	80c00003 	ldbu	r3,0(r16)
4102e020:	00801404 	movi	r2,80
4102e024:	18801e26 	beq	r3,r2,4102e0a0 <__gethex+0x164>
4102e028:	00801c04 	movi	r2,112
4102e02c:	18801c26 	beq	r3,r2,4102e0a0 <__gethex+0x164>
4102e030:	800d883a 	mov	r6,r16
4102e034:	4805003a 	cmpeq	r2,r9,zero
4102e038:	99800015 	stw	r6,0(r19)
4102e03c:	1000861e 	bne	r2,zero,4102e258 <__gethex+0x31c>
4102e040:	58003d26 	beq	r11,zero,4102e138 <__gethex+0x1fc>
4102e044:	0025883a 	mov	r18,zero
4102e048:	9005883a 	mov	r2,r18
4102e04c:	dfc00c17 	ldw	ra,48(sp)
4102e050:	df000b17 	ldw	fp,44(sp)
4102e054:	ddc00a17 	ldw	r23,40(sp)
4102e058:	dd800917 	ldw	r22,36(sp)
4102e05c:	dd400817 	ldw	r21,32(sp)
4102e060:	dd000717 	ldw	r20,28(sp)
4102e064:	dcc00617 	ldw	r19,24(sp)
4102e068:	dc800517 	ldw	r18,20(sp)
4102e06c:	dc400417 	ldw	r17,16(sp)
4102e070:	dc000317 	ldw	r16,12(sp)
4102e074:	dec00d04 	addi	sp,sp,52
4102e078:	f800283a 	ret
4102e07c:	00800b84 	movi	r2,46
4102e080:	20804a26 	beq	r4,r2,4102e1ac <__gethex+0x270>
4102e084:	2821883a 	mov	r16,r5
4102e088:	80c00003 	ldbu	r3,0(r16)
4102e08c:	00801404 	movi	r2,80
4102e090:	2825883a 	mov	r18,r5
4102e094:	02400044 	movi	r9,1
4102e098:	002d883a 	mov	r22,zero
4102e09c:	18bfe21e 	bne	r3,r2,4102e028 <__gethex+0xec>
4102e0a0:	80c00043 	ldbu	r3,1(r16)
4102e0a4:	00800ac4 	movi	r2,43
4102e0a8:	81000044 	addi	r4,r16,1
4102e0ac:	18804a26 	beq	r3,r2,4102e1d8 <__gethex+0x29c>
4102e0b0:	00800b44 	movi	r2,45
4102e0b4:	18804c26 	beq	r3,r2,4102e1e8 <__gethex+0x2ac>
4102e0b8:	0015883a 	mov	r10,zero
4102e0bc:	1c45883a 	add	r2,r3,r17
4102e0c0:	10800003 	ldbu	r2,0(r2)
4102e0c4:	103fda26 	beq	r2,zero,4102e030 <__gethex+0xf4>
4102e0c8:	02000644 	movi	r8,25
4102e0cc:	40bfd816 	blt	r8,r2,4102e030 <__gethex+0xf4>
4102e0d0:	20c00043 	ldbu	r3,1(r4)
4102e0d4:	11fffc04 	addi	r7,r2,-16
4102e0d8:	00800034 	movhi	r2,0
4102e0dc:	108b0304 	addi	r2,r2,11276
4102e0e0:	1887883a 	add	r3,r3,r2
4102e0e4:	18800003 	ldbu	r2,0(r3)
4102e0e8:	21800044 	addi	r6,r4,1
4102e0ec:	10000d26 	beq	r2,zero,4102e124 <__gethex+0x1e8>
4102e0f0:	100b883a 	mov	r5,r2
4102e0f4:	4080020e 	bge	r8,r2,4102e100 <__gethex+0x1c4>
4102e0f8:	00000a06 	br	4102e124 <__gethex+0x1e8>
4102e0fc:	41000916 	blt	r8,r4,4102e124 <__gethex+0x1e8>
4102e100:	31800044 	addi	r6,r6,1
4102e104:	30800003 	ldbu	r2,0(r6)
4102e108:	38c002a4 	muli	r3,r7,10
4102e10c:	1445883a 	add	r2,r2,r17
4102e110:	11000003 	ldbu	r4,0(r2)
4102e114:	1947883a 	add	r3,r3,r5
4102e118:	19fffc04 	addi	r7,r3,-16
4102e11c:	200b883a 	mov	r5,r4
4102e120:	203ff61e 	bne	r4,zero,4102e0fc <__gethex+0x1c0>
4102e124:	5005003a 	cmpeq	r2,r10,zero
4102e128:	1000011e 	bne	r2,zero,4102e130 <__gethex+0x1f4>
4102e12c:	01cfc83a 	sub	r7,zero,r7
4102e130:	b1ed883a 	add	r22,r22,r7
4102e134:	003fbf06 	br	4102e034 <__gethex+0xf8>
4102e138:	04800184 	movi	r18,6
4102e13c:	003fc206 	br	4102e048 <__gethex+0x10c>
4102e140:	102de240 	call	4102de24 <__hexdig_init>
4102e144:	99800017 	ldw	r6,0(r19)
4102e148:	00800c04 	movi	r2,48
4102e14c:	31000083 	ldbu	r4,2(r6)
4102e150:	30c00084 	addi	r3,r6,2
4102e154:	20bf9126 	beq	r4,r2,4102df9c <__gethex+0x60>
4102e158:	180b883a 	mov	r5,r3
4102e15c:	0017883a 	mov	r11,zero
4102e160:	003f9606 	br	4102dfbc <__gethex+0x80>
4102e164:	303fa81e 	bne	r6,zero,4102e008 <__gethex+0xcc>
4102e168:	29400044 	addi	r5,r5,1
4102e16c:	28800003 	ldbu	r2,0(r5)
4102e170:	1445883a 	add	r2,r2,r17
4102e174:	10c00003 	ldbu	r3,0(r2)
4102e178:	1800ad26 	beq	r3,zero,4102e430 <__gethex+0x4f4>
4102e17c:	2809883a 	mov	r4,r5
4102e180:	21000044 	addi	r4,r4,1
4102e184:	20800003 	ldbu	r2,0(r4)
4102e188:	1445883a 	add	r2,r2,r17
4102e18c:	10c00003 	ldbu	r3,0(r2)
4102e190:	183ffb1e 	bne	r3,zero,4102e180 <__gethex+0x244>
4102e194:	2145c83a 	sub	r2,r4,r5
4102e198:	1085883a 	add	r2,r2,r2
4102e19c:	1085883a 	add	r2,r2,r2
4102e1a0:	00adc83a 	sub	r22,zero,r2
4102e1a4:	200b883a 	mov	r5,r4
4102e1a8:	003f9b06 	br	4102e018 <__gethex+0xdc>
4102e1ac:	29000043 	ldbu	r4,1(r5)
4102e1b0:	00800034 	movhi	r2,0
4102e1b4:	108b0304 	addi	r2,r2,11276
4102e1b8:	2c000044 	addi	r16,r5,1
4102e1bc:	2085883a 	add	r2,r4,r2
4102e1c0:	10c00003 	ldbu	r3,0(r2)
4102e1c4:	18000d1e 	bne	r3,zero,4102e1fc <__gethex+0x2c0>
4102e1c8:	2825883a 	mov	r18,r5
4102e1cc:	02400044 	movi	r9,1
4102e1d0:	002d883a 	mov	r22,zero
4102e1d4:	003f9106 	br	4102e01c <__gethex+0xe0>
4102e1d8:	0015883a 	mov	r10,zero
4102e1dc:	21000044 	addi	r4,r4,1
4102e1e0:	20c00003 	ldbu	r3,0(r4)
4102e1e4:	003fb506 	br	4102e0bc <__gethex+0x180>
4102e1e8:	02800044 	movi	r10,1
4102e1ec:	003ffb06 	br	4102e1dc <__gethex+0x2a0>
4102e1f0:	2821883a 	mov	r16,r5
4102e1f4:	002d883a 	mov	r22,zero
4102e1f8:	003f8806 	br	4102e01c <__gethex+0xe0>
4102e1fc:	00800c04 	movi	r2,48
4102e200:	20800e1e 	bne	r4,r2,4102e23c <__gethex+0x300>
4102e204:	2007883a 	mov	r3,r4
4102e208:	800b883a 	mov	r5,r16
4102e20c:	29400044 	addi	r5,r5,1
4102e210:	29000003 	ldbu	r4,0(r5)
4102e214:	20803fcc 	andi	r2,r4,255
4102e218:	10fffc26 	beq	r2,r3,4102e20c <__gethex+0x2d0>
4102e21c:	1445883a 	add	r2,r2,r17
4102e220:	10c00003 	ldbu	r3,0(r2)
4102e224:	1800071e 	bne	r3,zero,4102e244 <__gethex+0x308>
4102e228:	02c00044 	movi	r11,1
4102e22c:	800d883a 	mov	r6,r16
4102e230:	2825883a 	mov	r18,r5
4102e234:	5813883a 	mov	r9,r11
4102e238:	003f6706 	br	4102dfd8 <__gethex+0x9c>
4102e23c:	81000003 	ldbu	r4,0(r16)
4102e240:	800b883a 	mov	r5,r16
4102e244:	800d883a 	mov	r6,r16
4102e248:	2825883a 	mov	r18,r5
4102e24c:	02c00044 	movi	r11,1
4102e250:	0013883a 	mov	r9,zero
4102e254:	003f6006 	br	4102dfd8 <__gethex+0x9c>
4102e258:	8485c83a 	sub	r2,r16,r18
4102e25c:	10bfffc4 	addi	r2,r2,-1
4102e260:	00c001c4 	movi	r3,7
4102e264:	1880700e 	bge	r3,r2,4102e428 <__gethex+0x4ec>
4102e268:	000b883a 	mov	r5,zero
4102e26c:	1005d07a 	srai	r2,r2,1
4102e270:	29400044 	addi	r5,r5,1
4102e274:	18bffd16 	blt	r3,r2,4102e26c <__gethex+0x330>
4102e278:	a809883a 	mov	r4,r21
4102e27c:	1029d600 	call	41029d60 <_Balloc>
4102e280:	1027883a 	mov	r19,r2
4102e284:	10800504 	addi	r2,r2,20
4102e288:	d8800215 	stw	r2,8(sp)
4102e28c:	9400522e 	bgeu	r18,r16,4102e3d8 <__gethex+0x49c>
4102e290:	da000217 	ldw	r8,8(sp)
4102e294:	800b883a 	mov	r5,r16
4102e298:	000f883a 	mov	r7,zero
4102e29c:	0009883a 	mov	r4,zero
4102e2a0:	02400b84 	movi	r9,46
4102e2a4:	02800804 	movi	r10,32
4102e2a8:	297fffc4 	addi	r5,r5,-1
4102e2ac:	28c00003 	ldbu	r3,0(r5)
4102e2b0:	1a400826 	beq	r3,r9,4102e2d4 <__gethex+0x398>
4102e2b4:	380d883a 	mov	r6,r7
4102e2b8:	3a802726 	beq	r7,r10,4102e358 <__gethex+0x41c>
4102e2bc:	39c00104 	addi	r7,r7,4
4102e2c0:	1c47883a 	add	r3,r3,r17
4102e2c4:	18800003 	ldbu	r2,0(r3)
4102e2c8:	108003cc 	andi	r2,r2,15
4102e2cc:	1184983a 	sll	r2,r2,r6
4102e2d0:	2088b03a 	or	r4,r4,r2
4102e2d4:	917ff436 	bltu	r18,r5,4102e2a8 <__gethex+0x36c>
4102e2d8:	d8c00217 	ldw	r3,8(sp)
4102e2dc:	40800104 	addi	r2,r8,4
4102e2e0:	41000015 	stw	r4,0(r8)
4102e2e4:	10c5c83a 	sub	r2,r2,r3
4102e2e8:	1021d0ba 	srai	r16,r2,2
4102e2ec:	9c000415 	stw	r16,16(r19)
4102e2f0:	10298080 	call	41029808 <__hi0bits>
4102e2f4:	8006917a 	slli	r3,r16,5
4102e2f8:	a5c00017 	ldw	r23,0(r20)
4102e2fc:	1885c83a 	sub	r2,r3,r2
4102e300:	b8801c16 	blt	r23,r2,4102e374 <__gethex+0x438>
4102e304:	15c00a16 	blt	r2,r23,4102e330 <__gethex+0x3f4>
4102e308:	0039883a 	mov	fp,zero
4102e30c:	a0800217 	ldw	r2,8(r20)
4102e310:	1580340e 	bge	r2,r22,4102e3e4 <__gethex+0x4a8>
4102e314:	a809883a 	mov	r4,r21
4102e318:	980b883a 	mov	r5,r19
4102e31c:	10297e00 	call	410297e0 <_Bfree>
4102e320:	d8c00d17 	ldw	r3,52(sp)
4102e324:	048028c4 	movi	r18,163
4102e328:	18000015 	stw	zero,0(r3)
4102e32c:	003f4606 	br	4102e048 <__gethex+0x10c>
4102e330:	b8a1c83a 	sub	r16,r23,r2
4102e334:	980b883a 	mov	r5,r19
4102e338:	a809883a 	mov	r4,r21
4102e33c:	800d883a 	mov	r6,r16
4102e340:	102a1240 	call	4102a124 <__lshift>
4102e344:	1027883a 	mov	r19,r2
4102e348:	b42dc83a 	sub	r22,r22,r16
4102e34c:	10800504 	addi	r2,r2,20
4102e350:	d8800215 	stw	r2,8(sp)
4102e354:	003fec06 	br	4102e308 <__gethex+0x3cc>
4102e358:	41000015 	stw	r4,0(r8)
4102e35c:	28c00003 	ldbu	r3,0(r5)
4102e360:	01c00104 	movi	r7,4
4102e364:	000d883a 	mov	r6,zero
4102e368:	41d1883a 	add	r8,r8,r7
4102e36c:	0009883a 	mov	r4,zero
4102e370:	003fd306 	br	4102e2c0 <__gethex+0x384>
4102e374:	15e1c83a 	sub	r16,r2,r23
4102e378:	9809883a 	mov	r4,r19
4102e37c:	800b883a 	mov	r5,r16
4102e380:	1029cd80 	call	41029cd8 <__any_on>
4102e384:	1000061e 	bne	r2,zero,4102e3a0 <__gethex+0x464>
4102e388:	0039883a 	mov	fp,zero
4102e38c:	9809883a 	mov	r4,r19
4102e390:	800b883a 	mov	r5,r16
4102e394:	102de8c0 	call	4102de8c <rshift>
4102e398:	b42d883a 	add	r22,r22,r16
4102e39c:	003fdb06 	br	4102e30c <__gethex+0x3d0>
4102e3a0:	817fffc4 	addi	r5,r16,-1
4102e3a4:	2805d17a 	srai	r2,r5,5
4102e3a8:	d8c00217 	ldw	r3,8(sp)
4102e3ac:	290007cc 	andi	r4,r5,31
4102e3b0:	1085883a 	add	r2,r2,r2
4102e3b4:	1085883a 	add	r2,r2,r2
4102e3b8:	01800044 	movi	r6,1
4102e3bc:	10c5883a 	add	r2,r2,r3
4102e3c0:	3108983a 	sll	r4,r6,r4
4102e3c4:	10c00017 	ldw	r3,0(r2)
4102e3c8:	20c8703a 	and	r4,r4,r3
4102e3cc:	20001a1e 	bne	r4,zero,4102e438 <__gethex+0x4fc>
4102e3d0:	3039883a 	mov	fp,r6
4102e3d4:	003fed06 	br	4102e38c <__gethex+0x450>
4102e3d8:	1011883a 	mov	r8,r2
4102e3dc:	0009883a 	mov	r4,zero
4102e3e0:	003fbd06 	br	4102e2d8 <__gethex+0x39c>
4102e3e4:	a1000117 	ldw	r4,4(r20)
4102e3e8:	b1001a16 	blt	r22,r4,4102e454 <__gethex+0x518>
4102e3ec:	04800044 	movi	r18,1
4102e3f0:	e0000826 	beq	fp,zero,4102e414 <__gethex+0x4d8>
4102e3f4:	a1000317 	ldw	r4,12(r20)
4102e3f8:	00800084 	movi	r2,2
4102e3fc:	20809426 	beq	r4,r2,4102e650 <__gethex+0x714>
4102e400:	008000c4 	movi	r2,3
4102e404:	20805826 	beq	r4,r2,4102e568 <__gethex+0x62c>
4102e408:	00800044 	movi	r2,1
4102e40c:	20803f26 	beq	r4,r2,4102e50c <__gethex+0x5d0>
4102e410:	94800414 	ori	r18,r18,16
4102e414:	d8800d17 	ldw	r2,52(sp)
4102e418:	d8c00117 	ldw	r3,4(sp)
4102e41c:	14c00015 	stw	r19,0(r2)
4102e420:	1d800015 	stw	r22,0(r3)
4102e424:	003f0806 	br	4102e048 <__gethex+0x10c>
4102e428:	000b883a 	mov	r5,zero
4102e42c:	003f9206 	br	4102e278 <__gethex+0x33c>
4102e430:	002d883a 	mov	r22,zero
4102e434:	003ef806 	br	4102e018 <__gethex+0xdc>
4102e438:	3140160e 	bge	r6,r5,4102e494 <__gethex+0x558>
4102e43c:	9809883a 	mov	r4,r19
4102e440:	817fff84 	addi	r5,r16,-2
4102e444:	1029cd80 	call	41029cd8 <__any_on>
4102e448:	10001226 	beq	r2,zero,4102e494 <__gethex+0x558>
4102e44c:	070000c4 	movi	fp,3
4102e450:	003fce06 	br	4102e38c <__gethex+0x450>
4102e454:	25a3c83a 	sub	r17,r4,r22
4102e458:	8dc01016 	blt	r17,r23,4102e49c <__gethex+0x560>
4102e45c:	a0c00317 	ldw	r3,12(r20)
4102e460:	00800084 	movi	r2,2
4102e464:	18809326 	beq	r3,r2,4102e6b4 <__gethex+0x778>
4102e468:	008000c4 	movi	r2,3
4102e46c:	18808e26 	beq	r3,r2,4102e6a8 <__gethex+0x76c>
4102e470:	00800044 	movi	r2,1
4102e474:	18807b26 	beq	r3,r2,4102e664 <__gethex+0x728>
4102e478:	a809883a 	mov	r4,r21
4102e47c:	980b883a 	mov	r5,r19
4102e480:	10297e00 	call	410297e0 <_Bfree>
4102e484:	d8c00d17 	ldw	r3,52(sp)
4102e488:	04801404 	movi	r18,80
4102e48c:	18000015 	stw	zero,0(r3)
4102e490:	003eed06 	br	4102e048 <__gethex+0x10c>
4102e494:	07000084 	movi	fp,2
4102e498:	003fbc06 	br	4102e38c <__gethex+0x450>
4102e49c:	8c3fffc4 	addi	r16,r17,-1
4102e4a0:	e0001426 	beq	fp,zero,4102e4f4 <__gethex+0x5b8>
4102e4a4:	07000044 	movi	fp,1
4102e4a8:	8005d17a 	srai	r2,r16,5
4102e4ac:	d8c00217 	ldw	r3,8(sp)
4102e4b0:	814007cc 	andi	r5,r16,31
4102e4b4:	1085883a 	add	r2,r2,r2
4102e4b8:	1085883a 	add	r2,r2,r2
4102e4bc:	10c5883a 	add	r2,r2,r3
4102e4c0:	00c00044 	movi	r3,1
4102e4c4:	1946983a 	sll	r3,r3,r5
4102e4c8:	11000017 	ldw	r4,0(r2)
4102e4cc:	1906703a 	and	r3,r3,r4
4102e4d0:	18000126 	beq	r3,zero,4102e4d8 <__gethex+0x59c>
4102e4d4:	e7000094 	ori	fp,fp,2
4102e4d8:	880b883a 	mov	r5,r17
4102e4dc:	9809883a 	mov	r4,r19
4102e4e0:	102de8c0 	call	4102de8c <rshift>
4102e4e4:	a5800117 	ldw	r22,4(r20)
4102e4e8:	bc6fc83a 	sub	r23,r23,r17
4102e4ec:	04800084 	movi	r18,2
4102e4f0:	003fbf06 	br	4102e3f0 <__gethex+0x4b4>
4102e4f4:	043fec0e 	bge	zero,r16,4102e4a8 <__gethex+0x56c>
4102e4f8:	9809883a 	mov	r4,r19
4102e4fc:	800b883a 	mov	r5,r16
4102e500:	1029cd80 	call	41029cd8 <__any_on>
4102e504:	1039883a 	mov	fp,r2
4102e508:	003fe706 	br	4102e4a8 <__gethex+0x56c>
4102e50c:	e080008c 	andi	r2,fp,2
4102e510:	103fbf26 	beq	r2,zero,4102e410 <__gethex+0x4d4>
4102e514:	d8c00217 	ldw	r3,8(sp)
4102e518:	18800017 	ldw	r2,0(r3)
4102e51c:	e084b03a 	or	r2,fp,r2
4102e520:	1104703a 	and	r2,r2,r4
4102e524:	103fba26 	beq	r2,zero,4102e410 <__gethex+0x4d4>
4102e528:	9c000417 	ldw	r16,16(r19)
4102e52c:	d8c00217 	ldw	r3,8(sp)
4102e530:	017fffc4 	movi	r5,-1
4102e534:	8405883a 	add	r2,r16,r16
4102e538:	10b9883a 	add	fp,r2,r2
4102e53c:	1f09883a 	add	r4,r3,fp
4102e540:	dc000015 	stw	r16,0(sp)
4102e544:	00000306 	br	4102e554 <__gethex+0x618>
4102e548:	18000015 	stw	zero,0(r3)
4102e54c:	18c00104 	addi	r3,r3,4
4102e550:	1900082e 	bgeu	r3,r4,4102e574 <__gethex+0x638>
4102e554:	18800017 	ldw	r2,0(r3)
4102e558:	117ffb26 	beq	r2,r5,4102e548 <__gethex+0x60c>
4102e55c:	10800044 	addi	r2,r2,1
4102e560:	18800015 	stw	r2,0(r3)
4102e564:	00001f06 	br	4102e5e4 <__gethex+0x6a8>
4102e568:	d8800e17 	ldw	r2,56(sp)
4102e56c:	103fa826 	beq	r2,zero,4102e410 <__gethex+0x4d4>
4102e570:	003fed06 	br	4102e528 <__gethex+0x5ec>
4102e574:	98800217 	ldw	r2,8(r19)
4102e578:	80801316 	blt	r16,r2,4102e5c8 <__gethex+0x68c>
4102e57c:	99400117 	ldw	r5,4(r19)
4102e580:	a809883a 	mov	r4,r21
4102e584:	29400044 	addi	r5,r5,1
4102e588:	1029d600 	call	41029d60 <_Balloc>
4102e58c:	99800417 	ldw	r6,16(r19)
4102e590:	99400304 	addi	r5,r19,12
4102e594:	11000304 	addi	r4,r2,12
4102e598:	318d883a 	add	r6,r6,r6
4102e59c:	318d883a 	add	r6,r6,r6
4102e5a0:	31800204 	addi	r6,r6,8
4102e5a4:	1023883a 	mov	r17,r2
4102e5a8:	1022c800 	call	41022c80 <memcpy>
4102e5ac:	980b883a 	mov	r5,r19
4102e5b0:	a809883a 	mov	r4,r21
4102e5b4:	10297e00 	call	410297e0 <_Bfree>
4102e5b8:	8c000417 	ldw	r16,16(r17)
4102e5bc:	88800504 	addi	r2,r17,20
4102e5c0:	8827883a 	mov	r19,r17
4102e5c4:	d8800215 	stw	r2,8(sp)
4102e5c8:	8405883a 	add	r2,r16,r16
4102e5cc:	1085883a 	add	r2,r2,r2
4102e5d0:	14c5883a 	add	r2,r2,r19
4102e5d4:	84000044 	addi	r16,r16,1
4102e5d8:	00c00044 	movi	r3,1
4102e5dc:	10c00515 	stw	r3,20(r2)
4102e5e0:	9c000415 	stw	r16,16(r19)
4102e5e4:	00800084 	movi	r2,2
4102e5e8:	90801426 	beq	r18,r2,4102e63c <__gethex+0x700>
4102e5ec:	d8800017 	ldw	r2,0(sp)
4102e5f0:	14000b16 	blt	r2,r16,4102e620 <__gethex+0x6e4>
4102e5f4:	bc0007cc 	andi	r16,r23,31
4102e5f8:	8000021e 	bne	r16,zero,4102e604 <__gethex+0x6c8>
4102e5fc:	94800814 	ori	r18,r18,32
4102e600:	003f8406 	br	4102e414 <__gethex+0x4d8>
4102e604:	d8c00217 	ldw	r3,8(sp)
4102e608:	1f05883a 	add	r2,r3,fp
4102e60c:	113fff17 	ldw	r4,-4(r2)
4102e610:	10298080 	call	41029808 <__hi0bits>
4102e614:	00c00804 	movi	r3,32
4102e618:	1c07c83a 	sub	r3,r3,r16
4102e61c:	10fff70e 	bge	r2,r3,4102e5fc <__gethex+0x6c0>
4102e620:	9809883a 	mov	r4,r19
4102e624:	01400044 	movi	r5,1
4102e628:	102de8c0 	call	4102de8c <rshift>
4102e62c:	a0800217 	ldw	r2,8(r20)
4102e630:	b5800044 	addi	r22,r22,1
4102e634:	15bf3716 	blt	r2,r22,4102e314 <__gethex+0x3d8>
4102e638:	003ff006 	br	4102e5fc <__gethex+0x6c0>
4102e63c:	a0800017 	ldw	r2,0(r20)
4102e640:	10bfffc4 	addi	r2,r2,-1
4102e644:	b8801e26 	beq	r23,r2,4102e6c0 <__gethex+0x784>
4102e648:	04800884 	movi	r18,34
4102e64c:	003f7106 	br	4102e414 <__gethex+0x4d8>
4102e650:	d8c00e17 	ldw	r3,56(sp)
4102e654:	00800044 	movi	r2,1
4102e658:	10c5c83a 	sub	r2,r2,r3
4102e65c:	103f6c26 	beq	r2,zero,4102e410 <__gethex+0x4d4>
4102e660:	003fb106 	br	4102e528 <__gethex+0x5ec>
4102e664:	bc7f841e 	bne	r23,r17,4102e478 <__gethex+0x53c>
4102e668:	1dc0050e 	bge	r3,r23,4102e680 <__gethex+0x744>
4102e66c:	b8cbc83a 	sub	r5,r23,r3
4102e670:	9809883a 	mov	r4,r19
4102e674:	1029cd80 	call	41029cd8 <__any_on>
4102e678:	103f7f26 	beq	r2,zero,4102e478 <__gethex+0x53c>
4102e67c:	a1000117 	ldw	r4,4(r20)
4102e680:	d8800117 	ldw	r2,4(sp)
4102e684:	d8c00217 	ldw	r3,8(sp)
4102e688:	04000044 	movi	r16,1
4102e68c:	11000015 	stw	r4,0(r2)
4102e690:	d8800d17 	ldw	r2,52(sp)
4102e694:	04801884 	movi	r18,98
4102e698:	1c000015 	stw	r16,0(r3)
4102e69c:	14c00015 	stw	r19,0(r2)
4102e6a0:	9c000415 	stw	r16,16(r19)
4102e6a4:	003e6806 	br	4102e048 <__gethex+0x10c>
4102e6a8:	d8c00e17 	ldw	r3,56(sp)
4102e6ac:	183f7226 	beq	r3,zero,4102e478 <__gethex+0x53c>
4102e6b0:	003ff306 	br	4102e680 <__gethex+0x744>
4102e6b4:	d8800e17 	ldw	r2,56(sp)
4102e6b8:	103ff126 	beq	r2,zero,4102e680 <__gethex+0x744>
4102e6bc:	003f6e06 	br	4102e478 <__gethex+0x53c>
4102e6c0:	b805d17a 	srai	r2,r23,5
4102e6c4:	d8c00217 	ldw	r3,8(sp)
4102e6c8:	b94007cc 	andi	r5,r23,31
4102e6cc:	1085883a 	add	r2,r2,r2
4102e6d0:	1085883a 	add	r2,r2,r2
4102e6d4:	10c5883a 	add	r2,r2,r3
4102e6d8:	00c00044 	movi	r3,1
4102e6dc:	1946983a 	sll	r3,r3,r5
4102e6e0:	11000017 	ldw	r4,0(r2)
4102e6e4:	1906703a 	and	r3,r3,r4
4102e6e8:	183fd726 	beq	r3,zero,4102e648 <__gethex+0x70c>
4102e6ec:	04800844 	movi	r18,33
4102e6f0:	003f4806 	br	4102e414 <__gethex+0x4d8>

4102e6f4 <L_shift>:
4102e6f4:	00800204 	movi	r2,8
4102e6f8:	1185c83a 	sub	r2,r2,r6
4102e6fc:	1085883a 	add	r2,r2,r2
4102e700:	21c00017 	ldw	r7,0(r4)
4102e704:	1093883a 	add	r9,r2,r2
4102e708:	00800804 	movi	r2,32
4102e70c:	200d883a 	mov	r6,r4
4102e710:	1251c83a 	sub	r8,r2,r9
4102e714:	31800104 	addi	r6,r6,4
4102e718:	3805883a 	mov	r2,r7
4102e71c:	31c00017 	ldw	r7,0(r6)
4102e720:	3a08983a 	sll	r4,r7,r8
4102e724:	3a46d83a 	srl	r3,r7,r9
4102e728:	1104b03a 	or	r2,r2,r4
4102e72c:	180f883a 	mov	r7,r3
4102e730:	30bfff15 	stw	r2,-4(r6)
4102e734:	30c00015 	stw	r3,0(r6)
4102e738:	317ff636 	bltu	r6,r5,4102e714 <L_shift+0x20>
4102e73c:	f800283a 	ret

4102e740 <__hexnan>:
4102e740:	defff404 	addi	sp,sp,-48
4102e744:	dd800815 	stw	r22,32(sp)
4102e748:	05800034 	movhi	r22,0
4102e74c:	b58b0304 	addi	r22,r22,11276
4102e750:	b0800c03 	ldbu	r2,48(r22)
4102e754:	dcc00515 	stw	r19,20(sp)
4102e758:	dc000215 	stw	r16,8(sp)
4102e75c:	dfc00b15 	stw	ra,44(sp)
4102e760:	df000a15 	stw	fp,40(sp)
4102e764:	ddc00915 	stw	r23,36(sp)
4102e768:	dd400715 	stw	r21,28(sp)
4102e76c:	dd000615 	stw	r20,24(sp)
4102e770:	dc800415 	stw	r18,16(sp)
4102e774:	dc400315 	stw	r17,12(sp)
4102e778:	d9000115 	stw	r4,4(sp)
4102e77c:	2821883a 	mov	r16,r5
4102e780:	3027883a 	mov	r19,r6
4102e784:	10007426 	beq	r2,zero,4102e958 <__hexnan+0x218>
4102e788:	80c00017 	ldw	r3,0(r16)
4102e78c:	1805d17a 	srai	r2,r3,5
4102e790:	18c007cc 	andi	r3,r3,31
4102e794:	1839003a 	cmpeq	fp,r3,zero
4102e798:	1085883a 	add	r2,r2,r2
4102e79c:	1085883a 	add	r2,r2,r2
4102e7a0:	d8c00015 	stw	r3,0(sp)
4102e7a4:	14c5883a 	add	r2,r2,r19
4102e7a8:	e000011e 	bne	fp,zero,4102e7b0 <__hexnan+0x70>
4102e7ac:	10800104 	addi	r2,r2,4
4102e7b0:	d8c00117 	ldw	r3,4(sp)
4102e7b4:	153fff04 	addi	r20,r2,-4
4102e7b8:	a021883a 	mov	r16,r20
4102e7bc:	1c400017 	ldw	r17,0(r3)
4102e7c0:	a02b883a 	mov	r21,r20
4102e7c4:	0025883a 	mov	r18,zero
4102e7c8:	002f883a 	mov	r23,zero
4102e7cc:	000d883a 	mov	r6,zero
4102e7d0:	103fff15 	stw	zero,-4(r2)
4102e7d4:	8c400044 	addi	r17,r17,1
4102e7d8:	89000003 	ldbu	r4,0(r17)
4102e7dc:	20000e26 	beq	r4,zero,4102e818 <__hexnan+0xd8>
4102e7e0:	2585883a 	add	r2,r4,r22
4102e7e4:	10c00003 	ldbu	r3,0(r2)
4102e7e8:	18002e1e 	bne	r3,zero,4102e8a4 <__hexnan+0x164>
4102e7ec:	00800804 	movi	r2,32
4102e7f0:	11005536 	bltu	r2,r4,4102e948 <__hexnan+0x208>
4102e7f4:	bcbff70e 	bge	r23,r18,4102e7d4 <__hexnan+0x94>
4102e7f8:	8540022e 	bgeu	r16,r21,4102e804 <__hexnan+0xc4>
4102e7fc:	008001c4 	movi	r2,7
4102e800:	11803c0e 	bge	r2,r6,4102e8f4 <__hexnan+0x1b4>
4102e804:	9c003536 	bltu	r19,r16,4102e8dc <__hexnan+0x19c>
4102e808:	8c400044 	addi	r17,r17,1
4102e80c:	89000003 	ldbu	r4,0(r17)
4102e810:	01800204 	movi	r6,8
4102e814:	203ff21e 	bne	r4,zero,4102e7e0 <__hexnan+0xa0>
4102e818:	90004d26 	beq	r18,zero,4102e950 <__hexnan+0x210>
4102e81c:	85404336 	bltu	r16,r21,4102e92c <__hexnan+0x1ec>
4102e820:	9c00382e 	bgeu	r19,r16,4102e904 <__hexnan+0x1c4>
4102e824:	9807883a 	mov	r3,r19
4102e828:	80800017 	ldw	r2,0(r16)
4102e82c:	84000104 	addi	r16,r16,4
4102e830:	18800015 	stw	r2,0(r3)
4102e834:	18c00104 	addi	r3,r3,4
4102e838:	a43ffb2e 	bgeu	r20,r16,4102e828 <__hexnan+0xe8>
4102e83c:	18000015 	stw	zero,0(r3)
4102e840:	18c00104 	addi	r3,r3,4
4102e844:	a0fffd2e 	bgeu	r20,r3,4102e83c <__hexnan+0xfc>
4102e848:	a0800017 	ldw	r2,0(r20)
4102e84c:	1000071e 	bne	r2,zero,4102e86c <__hexnan+0x12c>
4102e850:	9d004326 	beq	r19,r20,4102e960 <__hexnan+0x220>
4102e854:	a007883a 	mov	r3,r20
4102e858:	00000106 	br	4102e860 <__hexnan+0x120>
4102e85c:	98c04026 	beq	r19,r3,4102e960 <__hexnan+0x220>
4102e860:	18ffff04 	addi	r3,r3,-4
4102e864:	18800017 	ldw	r2,0(r3)
4102e868:	103ffc26 	beq	r2,zero,4102e85c <__hexnan+0x11c>
4102e86c:	00c00144 	movi	r3,5
4102e870:	1805883a 	mov	r2,r3
4102e874:	dfc00b17 	ldw	ra,44(sp)
4102e878:	df000a17 	ldw	fp,40(sp)
4102e87c:	ddc00917 	ldw	r23,36(sp)
4102e880:	dd800817 	ldw	r22,32(sp)
4102e884:	dd400717 	ldw	r21,28(sp)
4102e888:	dd000617 	ldw	r20,24(sp)
4102e88c:	dcc00517 	ldw	r19,20(sp)
4102e890:	dc800417 	ldw	r18,16(sp)
4102e894:	dc400317 	ldw	r17,12(sp)
4102e898:	dc000217 	ldw	r16,8(sp)
4102e89c:	dec00c04 	addi	sp,sp,48
4102e8a0:	f800283a 	ret
4102e8a4:	31800044 	addi	r6,r6,1
4102e8a8:	00800204 	movi	r2,8
4102e8ac:	94800044 	addi	r18,r18,1
4102e8b0:	1180040e 	bge	r2,r6,4102e8c4 <__hexnan+0x184>
4102e8b4:	9c3fc72e 	bgeu	r19,r16,4102e7d4 <__hexnan+0x94>
4102e8b8:	843fff04 	addi	r16,r16,-4
4102e8bc:	80000015 	stw	zero,0(r16)
4102e8c0:	01800044 	movi	r6,1
4102e8c4:	80800017 	ldw	r2,0(r16)
4102e8c8:	18c003cc 	andi	r3,r3,15
4102e8cc:	1004913a 	slli	r2,r2,4
4102e8d0:	10c4b03a 	or	r2,r2,r3
4102e8d4:	80800015 	stw	r2,0(r16)
4102e8d8:	003fbe06 	br	4102e7d4 <__hexnan+0x94>
4102e8dc:	843fff04 	addi	r16,r16,-4
4102e8e0:	802b883a 	mov	r21,r16
4102e8e4:	902f883a 	mov	r23,r18
4102e8e8:	000d883a 	mov	r6,zero
4102e8ec:	80000015 	stw	zero,0(r16)
4102e8f0:	003fb806 	br	4102e7d4 <__hexnan+0x94>
4102e8f4:	8009883a 	mov	r4,r16
4102e8f8:	a80b883a 	mov	r5,r21
4102e8fc:	102e6f40 	call	4102e6f4 <L_shift>
4102e900:	003fc006 	br	4102e804 <__hexnan+0xc4>
4102e904:	e03fd01e 	bne	fp,zero,4102e848 <__hexnan+0x108>
4102e908:	d8c00017 	ldw	r3,0(sp)
4102e90c:	00800804 	movi	r2,32
4102e910:	10c5c83a 	sub	r2,r2,r3
4102e914:	00ffffc4 	movi	r3,-1
4102e918:	1886d83a 	srl	r3,r3,r2
4102e91c:	a0800017 	ldw	r2,0(r20)
4102e920:	10c4703a 	and	r2,r2,r3
4102e924:	a0800015 	stw	r2,0(r20)
4102e928:	003fc806 	br	4102e84c <__hexnan+0x10c>
4102e92c:	008001c4 	movi	r2,7
4102e930:	11bfbb16 	blt	r2,r6,4102e820 <__hexnan+0xe0>
4102e934:	a80b883a 	mov	r5,r21
4102e938:	8009883a 	mov	r4,r16
4102e93c:	102e6f40 	call	4102e6f4 <L_shift>
4102e940:	9c3ff02e 	bgeu	r19,r16,4102e904 <__hexnan+0x1c4>
4102e944:	003fb706 	br	4102e824 <__hexnan+0xe4>
4102e948:	00800a44 	movi	r2,41
4102e94c:	20800826 	beq	r4,r2,4102e970 <__hexnan+0x230>
4102e950:	00c00104 	movi	r3,4
4102e954:	003fc606 	br	4102e870 <__hexnan+0x130>
4102e958:	102de240 	call	4102de24 <__hexdig_init>
4102e95c:	003f8a06 	br	4102e788 <__hexnan+0x48>
4102e960:	00800044 	movi	r2,1
4102e964:	00c00144 	movi	r3,5
4102e968:	98800015 	stw	r2,0(r19)
4102e96c:	003fc006 	br	4102e870 <__hexnan+0x130>
4102e970:	903ff726 	beq	r18,zero,4102e950 <__hexnan+0x210>
4102e974:	d8c00117 	ldw	r3,4(sp)
4102e978:	88800044 	addi	r2,r17,1
4102e97c:	18800015 	stw	r2,0(r3)
4102e980:	857fa72e 	bgeu	r16,r21,4102e820 <__hexnan+0xe0>
4102e984:	003fe906 	br	4102e92c <__hexnan+0x1ec>

4102e988 <_isatty_r>:
4102e988:	defffd04 	addi	sp,sp,-12
4102e98c:	dc000015 	stw	r16,0(sp)
4102e990:	04000034 	movhi	r16,0
4102e994:	840aef04 	addi	r16,r16,11196
4102e998:	dc400115 	stw	r17,4(sp)
4102e99c:	80000015 	stw	zero,0(r16)
4102e9a0:	2023883a 	mov	r17,r4
4102e9a4:	2809883a 	mov	r4,r5
4102e9a8:	dfc00215 	stw	ra,8(sp)
4102e9ac:	103172c0 	call	4103172c <isatty>
4102e9b0:	1007883a 	mov	r3,r2
4102e9b4:	00bfffc4 	movi	r2,-1
4102e9b8:	18800626 	beq	r3,r2,4102e9d4 <_isatty_r+0x4c>
4102e9bc:	1805883a 	mov	r2,r3
4102e9c0:	dfc00217 	ldw	ra,8(sp)
4102e9c4:	dc400117 	ldw	r17,4(sp)
4102e9c8:	dc000017 	ldw	r16,0(sp)
4102e9cc:	dec00304 	addi	sp,sp,12
4102e9d0:	f800283a 	ret
4102e9d4:	80800017 	ldw	r2,0(r16)
4102e9d8:	103ff826 	beq	r2,zero,4102e9bc <_isatty_r+0x34>
4102e9dc:	88800015 	stw	r2,0(r17)
4102e9e0:	1805883a 	mov	r2,r3
4102e9e4:	dfc00217 	ldw	ra,8(sp)
4102e9e8:	dc400117 	ldw	r17,4(sp)
4102e9ec:	dc000017 	ldw	r16,0(sp)
4102e9f0:	dec00304 	addi	sp,sp,12
4102e9f4:	f800283a 	ret

4102e9f8 <_lseek_r>:
4102e9f8:	defffd04 	addi	sp,sp,-12
4102e9fc:	dc000015 	stw	r16,0(sp)
4102ea00:	04000034 	movhi	r16,0
4102ea04:	840aef04 	addi	r16,r16,11196
4102ea08:	dc400115 	stw	r17,4(sp)
4102ea0c:	80000015 	stw	zero,0(r16)
4102ea10:	2023883a 	mov	r17,r4
4102ea14:	2809883a 	mov	r4,r5
4102ea18:	300b883a 	mov	r5,r6
4102ea1c:	380d883a 	mov	r6,r7
4102ea20:	dfc00215 	stw	ra,8(sp)
4102ea24:	10319380 	call	41031938 <lseek>
4102ea28:	1007883a 	mov	r3,r2
4102ea2c:	00bfffc4 	movi	r2,-1
4102ea30:	18800626 	beq	r3,r2,4102ea4c <_lseek_r+0x54>
4102ea34:	1805883a 	mov	r2,r3
4102ea38:	dfc00217 	ldw	ra,8(sp)
4102ea3c:	dc400117 	ldw	r17,4(sp)
4102ea40:	dc000017 	ldw	r16,0(sp)
4102ea44:	dec00304 	addi	sp,sp,12
4102ea48:	f800283a 	ret
4102ea4c:	80800017 	ldw	r2,0(r16)
4102ea50:	103ff826 	beq	r2,zero,4102ea34 <_lseek_r+0x3c>
4102ea54:	88800015 	stw	r2,0(r17)
4102ea58:	1805883a 	mov	r2,r3
4102ea5c:	dfc00217 	ldw	ra,8(sp)
4102ea60:	dc400117 	ldw	r17,4(sp)
4102ea64:	dc000017 	ldw	r16,0(sp)
4102ea68:	dec00304 	addi	sp,sp,12
4102ea6c:	f800283a 	ret

4102ea70 <_read_r>:
4102ea70:	defffd04 	addi	sp,sp,-12
4102ea74:	dc000015 	stw	r16,0(sp)
4102ea78:	04000034 	movhi	r16,0
4102ea7c:	840aef04 	addi	r16,r16,11196
4102ea80:	dc400115 	stw	r17,4(sp)
4102ea84:	80000015 	stw	zero,0(r16)
4102ea88:	2023883a 	mov	r17,r4
4102ea8c:	2809883a 	mov	r4,r5
4102ea90:	300b883a 	mov	r5,r6
4102ea94:	380d883a 	mov	r6,r7
4102ea98:	dfc00215 	stw	ra,8(sp)
4102ea9c:	1031b340 	call	41031b34 <read>
4102eaa0:	1007883a 	mov	r3,r2
4102eaa4:	00bfffc4 	movi	r2,-1
4102eaa8:	18800626 	beq	r3,r2,4102eac4 <_read_r+0x54>
4102eaac:	1805883a 	mov	r2,r3
4102eab0:	dfc00217 	ldw	ra,8(sp)
4102eab4:	dc400117 	ldw	r17,4(sp)
4102eab8:	dc000017 	ldw	r16,0(sp)
4102eabc:	dec00304 	addi	sp,sp,12
4102eac0:	f800283a 	ret
4102eac4:	80800017 	ldw	r2,0(r16)
4102eac8:	103ff826 	beq	r2,zero,4102eaac <_read_r+0x3c>
4102eacc:	88800015 	stw	r2,0(r17)
4102ead0:	1805883a 	mov	r2,r3
4102ead4:	dfc00217 	ldw	ra,8(sp)
4102ead8:	dc400117 	ldw	r17,4(sp)
4102eadc:	dc000017 	ldw	r16,0(sp)
4102eae0:	dec00304 	addi	sp,sp,12
4102eae4:	f800283a 	ret

4102eae8 <__fixunsdfsi>:
4102eae8:	defffb04 	addi	sp,sp,-20
4102eaec:	dc400115 	stw	r17,4(sp)
4102eaf0:	dc000015 	stw	r16,0(sp)
4102eaf4:	04507834 	movhi	r17,16864
4102eaf8:	0021883a 	mov	r16,zero
4102eafc:	800d883a 	mov	r6,r16
4102eb00:	880f883a 	mov	r7,r17
4102eb04:	dcc00315 	stw	r19,12(sp)
4102eb08:	dc800215 	stw	r18,8(sp)
4102eb0c:	2827883a 	mov	r19,r5
4102eb10:	2025883a 	mov	r18,r4
4102eb14:	dfc00415 	stw	ra,16(sp)
4102eb18:	10305280 	call	41030528 <__gedf2>
4102eb1c:	000d883a 	mov	r6,zero
4102eb20:	880f883a 	mov	r7,r17
4102eb24:	980b883a 	mov	r5,r19
4102eb28:	9009883a 	mov	r4,r18
4102eb2c:	10000d16 	blt	r2,zero,4102eb64 <__fixunsdfsi+0x7c>
4102eb30:	102fc900 	call	4102fc90 <__subdf3>
4102eb34:	180b883a 	mov	r5,r3
4102eb38:	1009883a 	mov	r4,r2
4102eb3c:	10307b80 	call	410307b8 <__fixdfsi>
4102eb40:	00e00034 	movhi	r3,32768
4102eb44:	10c5883a 	add	r2,r2,r3
4102eb48:	dfc00417 	ldw	ra,16(sp)
4102eb4c:	dcc00317 	ldw	r19,12(sp)
4102eb50:	dc800217 	ldw	r18,8(sp)
4102eb54:	dc400117 	ldw	r17,4(sp)
4102eb58:	dc000017 	ldw	r16,0(sp)
4102eb5c:	dec00504 	addi	sp,sp,20
4102eb60:	f800283a 	ret
4102eb64:	980b883a 	mov	r5,r19
4102eb68:	9009883a 	mov	r4,r18
4102eb6c:	10307b80 	call	410307b8 <__fixdfsi>
4102eb70:	dfc00417 	ldw	ra,16(sp)
4102eb74:	dcc00317 	ldw	r19,12(sp)
4102eb78:	dc800217 	ldw	r18,8(sp)
4102eb7c:	dc400117 	ldw	r17,4(sp)
4102eb80:	dc000017 	ldw	r16,0(sp)
4102eb84:	dec00504 	addi	sp,sp,20
4102eb88:	f800283a 	ret

4102eb8c <__udivdi3>:
4102eb8c:	defff004 	addi	sp,sp,-64
4102eb90:	2005883a 	mov	r2,r4
4102eb94:	3011883a 	mov	r8,r6
4102eb98:	df000e15 	stw	fp,56(sp)
4102eb9c:	dd000a15 	stw	r20,40(sp)
4102eba0:	dc000615 	stw	r16,24(sp)
4102eba4:	dfc00f15 	stw	ra,60(sp)
4102eba8:	ddc00d15 	stw	r23,52(sp)
4102ebac:	dd800c15 	stw	r22,48(sp)
4102ebb0:	dd400b15 	stw	r21,44(sp)
4102ebb4:	dcc00915 	stw	r19,36(sp)
4102ebb8:	dc800815 	stw	r18,32(sp)
4102ebbc:	dc400715 	stw	r17,28(sp)
4102ebc0:	4021883a 	mov	r16,r8
4102ebc4:	1039883a 	mov	fp,r2
4102ebc8:	2829883a 	mov	r20,r5
4102ebcc:	38003b1e 	bne	r7,zero,4102ecbc <__udivdi3+0x130>
4102ebd0:	2a005c36 	bltu	r5,r8,4102ed44 <__udivdi3+0x1b8>
4102ebd4:	4000a626 	beq	r8,zero,4102ee70 <__udivdi3+0x2e4>
4102ebd8:	00bfffd4 	movui	r2,65535
4102ebdc:	14009e36 	bltu	r2,r16,4102ee58 <__udivdi3+0x2cc>
4102ebe0:	00803fc4 	movi	r2,255
4102ebe4:	14013d36 	bltu	r2,r16,4102f0dc <__udivdi3+0x550>
4102ebe8:	000b883a 	mov	r5,zero
4102ebec:	0005883a 	mov	r2,zero
4102ebf0:	8084d83a 	srl	r2,r16,r2
4102ebf4:	01000034 	movhi	r4,0
4102ebf8:	2103fb04 	addi	r4,r4,4076
4102ebfc:	01800804 	movi	r6,32
4102ec00:	1105883a 	add	r2,r2,r4
4102ec04:	10c00003 	ldbu	r3,0(r2)
4102ec08:	28c7883a 	add	r3,r5,r3
4102ec0c:	30edc83a 	sub	r22,r6,r3
4102ec10:	b000ee1e 	bne	r22,zero,4102efcc <__udivdi3+0x440>
4102ec14:	802ad43a 	srli	r21,r16,16
4102ec18:	00800044 	movi	r2,1
4102ec1c:	a423c83a 	sub	r17,r20,r16
4102ec20:	85ffffcc 	andi	r23,r16,65535
4102ec24:	d8800315 	stw	r2,12(sp)
4102ec28:	8809883a 	mov	r4,r17
4102ec2c:	a80b883a 	mov	r5,r21
4102ec30:	102236c0 	call	4102236c <__udivsi3>
4102ec34:	8809883a 	mov	r4,r17
4102ec38:	a80b883a 	mov	r5,r21
4102ec3c:	102d883a 	mov	r22,r2
4102ec40:	10223740 	call	41022374 <__umodsi3>
4102ec44:	1004943a 	slli	r2,r2,16
4102ec48:	e006d43a 	srli	r3,fp,16
4102ec4c:	bda3383a 	mul	r17,r23,r22
4102ec50:	10c4b03a 	or	r2,r2,r3
4102ec54:	1440042e 	bgeu	r2,r17,4102ec68 <__udivdi3+0xdc>
4102ec58:	1405883a 	add	r2,r2,r16
4102ec5c:	b5bfffc4 	addi	r22,r22,-1
4102ec60:	14000136 	bltu	r2,r16,4102ec68 <__udivdi3+0xdc>
4102ec64:	14413d36 	bltu	r2,r17,4102f15c <__udivdi3+0x5d0>
4102ec68:	1463c83a 	sub	r17,r2,r17
4102ec6c:	8809883a 	mov	r4,r17
4102ec70:	a80b883a 	mov	r5,r21
4102ec74:	102236c0 	call	4102236c <__udivsi3>
4102ec78:	8809883a 	mov	r4,r17
4102ec7c:	a80b883a 	mov	r5,r21
4102ec80:	1029883a 	mov	r20,r2
4102ec84:	10223740 	call	41022374 <__umodsi3>
4102ec88:	1004943a 	slli	r2,r2,16
4102ec8c:	bd09383a 	mul	r4,r23,r20
4102ec90:	e0ffffcc 	andi	r3,fp,65535
4102ec94:	10c4b03a 	or	r2,r2,r3
4102ec98:	1100042e 	bgeu	r2,r4,4102ecac <__udivdi3+0x120>
4102ec9c:	8085883a 	add	r2,r16,r2
4102eca0:	a53fffc4 	addi	r20,r20,-1
4102eca4:	14000136 	bltu	r2,r16,4102ecac <__udivdi3+0x120>
4102eca8:	11012036 	bltu	r2,r4,4102f12c <__udivdi3+0x5a0>
4102ecac:	b004943a 	slli	r2,r22,16
4102ecb0:	d9000317 	ldw	r4,12(sp)
4102ecb4:	a084b03a 	or	r2,r20,r2
4102ecb8:	00001506 	br	4102ed10 <__udivdi3+0x184>
4102ecbc:	380d883a 	mov	r6,r7
4102ecc0:	29c06236 	bltu	r5,r7,4102ee4c <__udivdi3+0x2c0>
4102ecc4:	00bfffd4 	movui	r2,65535
4102ecc8:	11c05a36 	bltu	r2,r7,4102ee34 <__udivdi3+0x2a8>
4102eccc:	00803fc4 	movi	r2,255
4102ecd0:	11c0fc36 	bltu	r2,r7,4102f0c4 <__udivdi3+0x538>
4102ecd4:	000b883a 	mov	r5,zero
4102ecd8:	0005883a 	mov	r2,zero
4102ecdc:	3084d83a 	srl	r2,r6,r2
4102ece0:	01000034 	movhi	r4,0
4102ece4:	2103fb04 	addi	r4,r4,4076
4102ece8:	01c00804 	movi	r7,32
4102ecec:	1105883a 	add	r2,r2,r4
4102ecf0:	10c00003 	ldbu	r3,0(r2)
4102ecf4:	28c7883a 	add	r3,r5,r3
4102ecf8:	38efc83a 	sub	r23,r7,r3
4102ecfc:	b800691e 	bne	r23,zero,4102eea4 <__udivdi3+0x318>
4102ed00:	35000136 	bltu	r6,r20,4102ed08 <__udivdi3+0x17c>
4102ed04:	e4005136 	bltu	fp,r16,4102ee4c <__udivdi3+0x2c0>
4102ed08:	00800044 	movi	r2,1
4102ed0c:	0009883a 	mov	r4,zero
4102ed10:	2007883a 	mov	r3,r4
4102ed14:	dfc00f17 	ldw	ra,60(sp)
4102ed18:	df000e17 	ldw	fp,56(sp)
4102ed1c:	ddc00d17 	ldw	r23,52(sp)
4102ed20:	dd800c17 	ldw	r22,48(sp)
4102ed24:	dd400b17 	ldw	r21,44(sp)
4102ed28:	dd000a17 	ldw	r20,40(sp)
4102ed2c:	dcc00917 	ldw	r19,36(sp)
4102ed30:	dc800817 	ldw	r18,32(sp)
4102ed34:	dc400717 	ldw	r17,28(sp)
4102ed38:	dc000617 	ldw	r16,24(sp)
4102ed3c:	dec01004 	addi	sp,sp,64
4102ed40:	f800283a 	ret
4102ed44:	00bfffd4 	movui	r2,65535
4102ed48:	12005036 	bltu	r2,r8,4102ee8c <__udivdi3+0x300>
4102ed4c:	00803fc4 	movi	r2,255
4102ed50:	1200e836 	bltu	r2,r8,4102f0f4 <__udivdi3+0x568>
4102ed54:	000b883a 	mov	r5,zero
4102ed58:	0005883a 	mov	r2,zero
4102ed5c:	8084d83a 	srl	r2,r16,r2
4102ed60:	01000034 	movhi	r4,0
4102ed64:	2103fb04 	addi	r4,r4,4076
4102ed68:	01800804 	movi	r6,32
4102ed6c:	1105883a 	add	r2,r2,r4
4102ed70:	10c00003 	ldbu	r3,0(r2)
4102ed74:	28c7883a 	add	r3,r5,r3
4102ed78:	30cbc83a 	sub	r5,r6,r3
4102ed7c:	28000626 	beq	r5,zero,4102ed98 <__udivdi3+0x20c>
4102ed80:	3145c83a 	sub	r2,r6,r5
4102ed84:	e084d83a 	srl	r2,fp,r2
4102ed88:	a146983a 	sll	r3,r20,r5
4102ed8c:	e178983a 	sll	fp,fp,r5
4102ed90:	8160983a 	sll	r16,r16,r5
4102ed94:	18a8b03a 	or	r20,r3,r2
4102ed98:	802ad43a 	srli	r21,r16,16
4102ed9c:	a009883a 	mov	r4,r20
4102eda0:	85ffffcc 	andi	r23,r16,65535
4102eda4:	a80b883a 	mov	r5,r21
4102eda8:	102236c0 	call	4102236c <__udivsi3>
4102edac:	a009883a 	mov	r4,r20
4102edb0:	a80b883a 	mov	r5,r21
4102edb4:	102d883a 	mov	r22,r2
4102edb8:	10223740 	call	41022374 <__umodsi3>
4102edbc:	1004943a 	slli	r2,r2,16
4102edc0:	e006d43a 	srli	r3,fp,16
4102edc4:	bda3383a 	mul	r17,r23,r22
4102edc8:	10c4b03a 	or	r2,r2,r3
4102edcc:	1440042e 	bgeu	r2,r17,4102ede0 <__udivdi3+0x254>
4102edd0:	1405883a 	add	r2,r2,r16
4102edd4:	b5bfffc4 	addi	r22,r22,-1
4102edd8:	14000136 	bltu	r2,r16,4102ede0 <__udivdi3+0x254>
4102eddc:	1440d536 	bltu	r2,r17,4102f134 <__udivdi3+0x5a8>
4102ede0:	1463c83a 	sub	r17,r2,r17
4102ede4:	8809883a 	mov	r4,r17
4102ede8:	a80b883a 	mov	r5,r21
4102edec:	102236c0 	call	4102236c <__udivsi3>
4102edf0:	8809883a 	mov	r4,r17
4102edf4:	a80b883a 	mov	r5,r21
4102edf8:	1029883a 	mov	r20,r2
4102edfc:	10223740 	call	41022374 <__umodsi3>
4102ee00:	1004943a 	slli	r2,r2,16
4102ee04:	bd09383a 	mul	r4,r23,r20
4102ee08:	e0ffffcc 	andi	r3,fp,65535
4102ee0c:	10c4b03a 	or	r2,r2,r3
4102ee10:	1100042e 	bgeu	r2,r4,4102ee24 <__udivdi3+0x298>
4102ee14:	8085883a 	add	r2,r16,r2
4102ee18:	a53fffc4 	addi	r20,r20,-1
4102ee1c:	14000136 	bltu	r2,r16,4102ee24 <__udivdi3+0x298>
4102ee20:	1100c736 	bltu	r2,r4,4102f140 <__udivdi3+0x5b4>
4102ee24:	b004943a 	slli	r2,r22,16
4102ee28:	0009883a 	mov	r4,zero
4102ee2c:	a084b03a 	or	r2,r20,r2
4102ee30:	003fb706 	br	4102ed10 <__udivdi3+0x184>
4102ee34:	00804034 	movhi	r2,256
4102ee38:	10bfffc4 	addi	r2,r2,-1
4102ee3c:	11c0a436 	bltu	r2,r7,4102f0d0 <__udivdi3+0x544>
4102ee40:	01400404 	movi	r5,16
4102ee44:	2805883a 	mov	r2,r5
4102ee48:	003fa406 	br	4102ecdc <__udivdi3+0x150>
4102ee4c:	0005883a 	mov	r2,zero
4102ee50:	0009883a 	mov	r4,zero
4102ee54:	003fae06 	br	4102ed10 <__udivdi3+0x184>
4102ee58:	00804034 	movhi	r2,256
4102ee5c:	10bfffc4 	addi	r2,r2,-1
4102ee60:	1400a136 	bltu	r2,r16,4102f0e8 <__udivdi3+0x55c>
4102ee64:	01400404 	movi	r5,16
4102ee68:	2805883a 	mov	r2,r5
4102ee6c:	003f6006 	br	4102ebf0 <__udivdi3+0x64>
4102ee70:	01000044 	movi	r4,1
4102ee74:	000b883a 	mov	r5,zero
4102ee78:	102236c0 	call	4102236c <__udivsi3>
4102ee7c:	1021883a 	mov	r16,r2
4102ee80:	00bfffd4 	movui	r2,65535
4102ee84:	143ff436 	bltu	r2,r16,4102ee58 <__udivdi3+0x2cc>
4102ee88:	003f5506 	br	4102ebe0 <__udivdi3+0x54>
4102ee8c:	00804034 	movhi	r2,256
4102ee90:	10bfffc4 	addi	r2,r2,-1
4102ee94:	12009a36 	bltu	r2,r8,4102f100 <__udivdi3+0x574>
4102ee98:	01400404 	movi	r5,16
4102ee9c:	2805883a 	mov	r2,r5
4102eea0:	003fae06 	br	4102ed5c <__udivdi3+0x1d0>
4102eea4:	3dc5c83a 	sub	r2,r7,r23
4102eea8:	35c8983a 	sll	r4,r6,r23
4102eeac:	8086d83a 	srl	r3,r16,r2
4102eeb0:	a0a2d83a 	srl	r17,r20,r2
4102eeb4:	e084d83a 	srl	r2,fp,r2
4102eeb8:	20eab03a 	or	r21,r4,r3
4102eebc:	a82cd43a 	srli	r22,r21,16
4102eec0:	a5c6983a 	sll	r3,r20,r23
4102eec4:	8809883a 	mov	r4,r17
4102eec8:	b00b883a 	mov	r5,r22
4102eecc:	1886b03a 	or	r3,r3,r2
4102eed0:	d8c00215 	stw	r3,8(sp)
4102eed4:	102236c0 	call	4102236c <__udivsi3>
4102eed8:	8809883a 	mov	r4,r17
4102eedc:	b00b883a 	mov	r5,r22
4102eee0:	1029883a 	mov	r20,r2
4102eee4:	10223740 	call	41022374 <__umodsi3>
4102eee8:	a8ffffcc 	andi	r3,r21,65535
4102eeec:	d8c00515 	stw	r3,20(sp)
4102eef0:	d9000217 	ldw	r4,8(sp)
4102eef4:	d9400517 	ldw	r5,20(sp)
4102eef8:	1004943a 	slli	r2,r2,16
4102eefc:	2006d43a 	srli	r3,r4,16
4102ef00:	85e0983a 	sll	r16,r16,r23
4102ef04:	2d23383a 	mul	r17,r5,r20
4102ef08:	10c4b03a 	or	r2,r2,r3
4102ef0c:	dc000015 	stw	r16,0(sp)
4102ef10:	1440032e 	bgeu	r2,r17,4102ef20 <__udivdi3+0x394>
4102ef14:	1545883a 	add	r2,r2,r21
4102ef18:	a53fffc4 	addi	r20,r20,-1
4102ef1c:	15407f2e 	bgeu	r2,r21,4102f11c <__udivdi3+0x590>
4102ef20:	1463c83a 	sub	r17,r2,r17
4102ef24:	8809883a 	mov	r4,r17
4102ef28:	b00b883a 	mov	r5,r22
4102ef2c:	102236c0 	call	4102236c <__udivsi3>
4102ef30:	8809883a 	mov	r4,r17
4102ef34:	b00b883a 	mov	r5,r22
4102ef38:	1021883a 	mov	r16,r2
4102ef3c:	10223740 	call	41022374 <__umodsi3>
4102ef40:	d8c00517 	ldw	r3,20(sp)
4102ef44:	d9000217 	ldw	r4,8(sp)
4102ef48:	1004943a 	slli	r2,r2,16
4102ef4c:	1c0f383a 	mul	r7,r3,r16
4102ef50:	20ffffcc 	andi	r3,r4,65535
4102ef54:	10e2b03a 	or	r17,r2,r3
4102ef58:	89c0032e 	bgeu	r17,r7,4102ef68 <__udivdi3+0x3dc>
4102ef5c:	8d63883a 	add	r17,r17,r21
4102ef60:	843fffc4 	addi	r16,r16,-1
4102ef64:	8d40692e 	bgeu	r17,r21,4102f10c <__udivdi3+0x580>
4102ef68:	a008943a 	slli	r4,r20,16
4102ef6c:	d9400017 	ldw	r5,0(sp)
4102ef70:	89e3c83a 	sub	r17,r17,r7
4102ef74:	8110b03a 	or	r8,r16,r4
4102ef78:	280cd43a 	srli	r6,r5,16
4102ef7c:	28ffffcc 	andi	r3,r5,65535
4102ef80:	40bfffcc 	andi	r2,r8,65535
4102ef84:	400ad43a 	srli	r5,r8,16
4102ef88:	10d3383a 	mul	r9,r2,r3
4102ef8c:	1185383a 	mul	r2,r2,r6
4102ef90:	28c7383a 	mul	r3,r5,r3
4102ef94:	4808d43a 	srli	r4,r9,16
4102ef98:	298b383a 	mul	r5,r5,r6
4102ef9c:	10c5883a 	add	r2,r2,r3
4102efa0:	2089883a 	add	r4,r4,r2
4102efa4:	20c0022e 	bgeu	r4,r3,4102efb0 <__udivdi3+0x424>
4102efa8:	00800074 	movhi	r2,1
4102efac:	288b883a 	add	r5,r5,r2
4102efb0:	2004d43a 	srli	r2,r4,16
4102efb4:	288b883a 	add	r5,r5,r2
4102efb8:	89403f36 	bltu	r17,r5,4102f0b8 <__udivdi3+0x52c>
4102efbc:	89403926 	beq	r17,r5,4102f0a4 <__udivdi3+0x518>
4102efc0:	4005883a 	mov	r2,r8
4102efc4:	0009883a 	mov	r4,zero
4102efc8:	003f5106 	br	4102ed10 <__udivdi3+0x184>
4102efcc:	85a0983a 	sll	r16,r16,r22
4102efd0:	3585c83a 	sub	r2,r6,r22
4102efd4:	a0a2d83a 	srl	r17,r20,r2
4102efd8:	802ad43a 	srli	r21,r16,16
4102efdc:	e084d83a 	srl	r2,fp,r2
4102efe0:	a586983a 	sll	r3,r20,r22
4102efe4:	8809883a 	mov	r4,r17
4102efe8:	a80b883a 	mov	r5,r21
4102efec:	1886b03a 	or	r3,r3,r2
4102eff0:	d8c00115 	stw	r3,4(sp)
4102eff4:	102236c0 	call	4102236c <__udivsi3>
4102eff8:	8809883a 	mov	r4,r17
4102effc:	a80b883a 	mov	r5,r21
4102f000:	d8800415 	stw	r2,16(sp)
4102f004:	10223740 	call	41022374 <__umodsi3>
4102f008:	d9000117 	ldw	r4,4(sp)
4102f00c:	d9400417 	ldw	r5,16(sp)
4102f010:	1004943a 	slli	r2,r2,16
4102f014:	85ffffcc 	andi	r23,r16,65535
4102f018:	2006d43a 	srli	r3,r4,16
4102f01c:	b963383a 	mul	r17,r23,r5
4102f020:	10c4b03a 	or	r2,r2,r3
4102f024:	1440042e 	bgeu	r2,r17,4102f038 <__udivdi3+0x4ac>
4102f028:	297fffc4 	addi	r5,r5,-1
4102f02c:	1405883a 	add	r2,r2,r16
4102f030:	d9400415 	stw	r5,16(sp)
4102f034:	1400442e 	bgeu	r2,r16,4102f148 <__udivdi3+0x5bc>
4102f038:	1463c83a 	sub	r17,r2,r17
4102f03c:	8809883a 	mov	r4,r17
4102f040:	a80b883a 	mov	r5,r21
4102f044:	102236c0 	call	4102236c <__udivsi3>
4102f048:	8809883a 	mov	r4,r17
4102f04c:	a80b883a 	mov	r5,r21
4102f050:	1029883a 	mov	r20,r2
4102f054:	10223740 	call	41022374 <__umodsi3>
4102f058:	d9400117 	ldw	r5,4(sp)
4102f05c:	1004943a 	slli	r2,r2,16
4102f060:	bd09383a 	mul	r4,r23,r20
4102f064:	28ffffcc 	andi	r3,r5,65535
4102f068:	10c6b03a 	or	r3,r2,r3
4102f06c:	1900062e 	bgeu	r3,r4,4102f088 <__udivdi3+0x4fc>
4102f070:	1c07883a 	add	r3,r3,r16
4102f074:	a53fffc4 	addi	r20,r20,-1
4102f078:	1c000336 	bltu	r3,r16,4102f088 <__udivdi3+0x4fc>
4102f07c:	1900022e 	bgeu	r3,r4,4102f088 <__udivdi3+0x4fc>
4102f080:	a53fffc4 	addi	r20,r20,-1
4102f084:	1c07883a 	add	r3,r3,r16
4102f088:	d9400417 	ldw	r5,16(sp)
4102f08c:	e5b8983a 	sll	fp,fp,r22
4102f090:	1923c83a 	sub	r17,r3,r4
4102f094:	2804943a 	slli	r2,r5,16
4102f098:	a0a8b03a 	or	r20,r20,r2
4102f09c:	dd000315 	stw	r20,12(sp)
4102f0a0:	003ee106 	br	4102ec28 <__udivdi3+0x9c>
4102f0a4:	2004943a 	slli	r2,r4,16
4102f0a8:	e5c8983a 	sll	r4,fp,r23
4102f0ac:	48ffffcc 	andi	r3,r9,65535
4102f0b0:	10c5883a 	add	r2,r2,r3
4102f0b4:	20bfc22e 	bgeu	r4,r2,4102efc0 <__udivdi3+0x434>
4102f0b8:	40bfffc4 	addi	r2,r8,-1
4102f0bc:	0009883a 	mov	r4,zero
4102f0c0:	003f1306 	br	4102ed10 <__udivdi3+0x184>
4102f0c4:	01400204 	movi	r5,8
4102f0c8:	2805883a 	mov	r2,r5
4102f0cc:	003f0306 	br	4102ecdc <__udivdi3+0x150>
4102f0d0:	01400604 	movi	r5,24
4102f0d4:	2805883a 	mov	r2,r5
4102f0d8:	003f0006 	br	4102ecdc <__udivdi3+0x150>
4102f0dc:	01400204 	movi	r5,8
4102f0e0:	2805883a 	mov	r2,r5
4102f0e4:	003ec206 	br	4102ebf0 <__udivdi3+0x64>
4102f0e8:	01400604 	movi	r5,24
4102f0ec:	2805883a 	mov	r2,r5
4102f0f0:	003ebf06 	br	4102ebf0 <__udivdi3+0x64>
4102f0f4:	01400204 	movi	r5,8
4102f0f8:	2805883a 	mov	r2,r5
4102f0fc:	003f1706 	br	4102ed5c <__udivdi3+0x1d0>
4102f100:	01400604 	movi	r5,24
4102f104:	2805883a 	mov	r2,r5
4102f108:	003f1406 	br	4102ed5c <__udivdi3+0x1d0>
4102f10c:	89ff962e 	bgeu	r17,r7,4102ef68 <__udivdi3+0x3dc>
4102f110:	8d63883a 	add	r17,r17,r21
4102f114:	843fffc4 	addi	r16,r16,-1
4102f118:	003f9306 	br	4102ef68 <__udivdi3+0x3dc>
4102f11c:	147f802e 	bgeu	r2,r17,4102ef20 <__udivdi3+0x394>
4102f120:	a53fffc4 	addi	r20,r20,-1
4102f124:	1545883a 	add	r2,r2,r21
4102f128:	003f7d06 	br	4102ef20 <__udivdi3+0x394>
4102f12c:	a53fffc4 	addi	r20,r20,-1
4102f130:	003ede06 	br	4102ecac <__udivdi3+0x120>
4102f134:	b5bfffc4 	addi	r22,r22,-1
4102f138:	1405883a 	add	r2,r2,r16
4102f13c:	003f2806 	br	4102ede0 <__udivdi3+0x254>
4102f140:	a53fffc4 	addi	r20,r20,-1
4102f144:	003f3706 	br	4102ee24 <__udivdi3+0x298>
4102f148:	147fbb2e 	bgeu	r2,r17,4102f038 <__udivdi3+0x4ac>
4102f14c:	297fffc4 	addi	r5,r5,-1
4102f150:	1405883a 	add	r2,r2,r16
4102f154:	d9400415 	stw	r5,16(sp)
4102f158:	003fb706 	br	4102f038 <__udivdi3+0x4ac>
4102f15c:	b5bfffc4 	addi	r22,r22,-1
4102f160:	1405883a 	add	r2,r2,r16
4102f164:	003ec006 	br	4102ec68 <__udivdi3+0xdc>

4102f168 <__umoddi3>:
4102f168:	defff104 	addi	sp,sp,-60
4102f16c:	dd800b15 	stw	r22,44(sp)
4102f170:	dd000915 	stw	r20,36(sp)
4102f174:	dc000515 	stw	r16,20(sp)
4102f178:	dfc00e15 	stw	ra,56(sp)
4102f17c:	df000d15 	stw	fp,52(sp)
4102f180:	ddc00c15 	stw	r23,48(sp)
4102f184:	dd400a15 	stw	r21,40(sp)
4102f188:	dcc00815 	stw	r19,32(sp)
4102f18c:	dc800715 	stw	r18,28(sp)
4102f190:	dc400615 	stw	r17,24(sp)
4102f194:	3021883a 	mov	r16,r6
4102f198:	202d883a 	mov	r22,r4
4102f19c:	2829883a 	mov	r20,r5
4102f1a0:	38002b1e 	bne	r7,zero,4102f250 <__umoddi3+0xe8>
4102f1a4:	29805036 	bltu	r5,r6,4102f2e8 <__umoddi3+0x180>
4102f1a8:	30008a26 	beq	r6,zero,4102f3d4 <__umoddi3+0x26c>
4102f1ac:	00bfffd4 	movui	r2,65535
4102f1b0:	14008236 	bltu	r2,r16,4102f3bc <__umoddi3+0x254>
4102f1b4:	00803fc4 	movi	r2,255
4102f1b8:	14013636 	bltu	r2,r16,4102f694 <__umoddi3+0x52c>
4102f1bc:	000b883a 	mov	r5,zero
4102f1c0:	0005883a 	mov	r2,zero
4102f1c4:	8084d83a 	srl	r2,r16,r2
4102f1c8:	01000034 	movhi	r4,0
4102f1cc:	2103fb04 	addi	r4,r4,4076
4102f1d0:	01800804 	movi	r6,32
4102f1d4:	1105883a 	add	r2,r2,r4
4102f1d8:	10c00003 	ldbu	r3,0(r2)
4102f1dc:	28c7883a 	add	r3,r5,r3
4102f1e0:	30efc83a 	sub	r23,r6,r3
4102f1e4:	b800941e 	bne	r23,zero,4102f438 <__umoddi3+0x2d0>
4102f1e8:	802ad43a 	srli	r21,r16,16
4102f1ec:	a423c83a 	sub	r17,r20,r16
4102f1f0:	0039883a 	mov	fp,zero
4102f1f4:	853fffcc 	andi	r20,r16,65535
4102f1f8:	8809883a 	mov	r4,r17
4102f1fc:	a80b883a 	mov	r5,r21
4102f200:	102236c0 	call	4102236c <__udivsi3>
4102f204:	8809883a 	mov	r4,r17
4102f208:	a80b883a 	mov	r5,r21
4102f20c:	a0a3383a 	mul	r17,r20,r2
4102f210:	10223740 	call	41022374 <__umodsi3>
4102f214:	1004943a 	slli	r2,r2,16
4102f218:	b006d43a 	srli	r3,r22,16
4102f21c:	10c4b03a 	or	r2,r2,r3
4102f220:	1440032e 	bgeu	r2,r17,4102f230 <__umoddi3+0xc8>
4102f224:	1405883a 	add	r2,r2,r16
4102f228:	14000136 	bltu	r2,r16,4102f230 <__umoddi3+0xc8>
4102f22c:	14413536 	bltu	r2,r17,4102f704 <__umoddi3+0x59c>
4102f230:	1463c83a 	sub	r17,r2,r17
4102f234:	8809883a 	mov	r4,r17
4102f238:	a80b883a 	mov	r5,r21
4102f23c:	102236c0 	call	4102236c <__udivsi3>
4102f240:	8809883a 	mov	r4,r17
4102f244:	a0a3383a 	mul	r17,r20,r2
4102f248:	a80b883a 	mov	r5,r21
4102f24c:	00004d06 	br	4102f384 <__umoddi3+0x21c>
4102f250:	380d883a 	mov	r6,r7
4102f254:	29c0102e 	bgeu	r5,r7,4102f298 <__umoddi3+0x130>
4102f258:	2011883a 	mov	r8,r4
4102f25c:	2813883a 	mov	r9,r5
4102f260:	4005883a 	mov	r2,r8
4102f264:	4807883a 	mov	r3,r9
4102f268:	dfc00e17 	ldw	ra,56(sp)
4102f26c:	df000d17 	ldw	fp,52(sp)
4102f270:	ddc00c17 	ldw	r23,48(sp)
4102f274:	dd800b17 	ldw	r22,44(sp)
4102f278:	dd400a17 	ldw	r21,40(sp)
4102f27c:	dd000917 	ldw	r20,36(sp)
4102f280:	dcc00817 	ldw	r19,32(sp)
4102f284:	dc800717 	ldw	r18,28(sp)
4102f288:	dc400617 	ldw	r17,24(sp)
4102f28c:	dc000517 	ldw	r16,20(sp)
4102f290:	dec00f04 	addi	sp,sp,60
4102f294:	f800283a 	ret
4102f298:	00bfffd4 	movui	r2,65535
4102f29c:	11c05a36 	bltu	r2,r7,4102f408 <__umoddi3+0x2a0>
4102f2a0:	00803fc4 	movi	r2,255
4102f2a4:	11c0fe36 	bltu	r2,r7,4102f6a0 <__umoddi3+0x538>
4102f2a8:	000b883a 	mov	r5,zero
4102f2ac:	0005883a 	mov	r2,zero
4102f2b0:	3084d83a 	srl	r2,r6,r2
4102f2b4:	01000034 	movhi	r4,0
4102f2b8:	2103fb04 	addi	r4,r4,4076
4102f2bc:	01c00804 	movi	r7,32
4102f2c0:	1105883a 	add	r2,r2,r4
4102f2c4:	10c00003 	ldbu	r3,0(r2)
4102f2c8:	28c7883a 	add	r3,r5,r3
4102f2cc:	38ebc83a 	sub	r21,r7,r3
4102f2d0:	a800851e 	bne	r21,zero,4102f4e8 <__umoddi3+0x380>
4102f2d4:	35005236 	bltu	r6,r20,4102f420 <__umoddi3+0x2b8>
4102f2d8:	b400512e 	bgeu	r22,r16,4102f420 <__umoddi3+0x2b8>
4102f2dc:	b011883a 	mov	r8,r22
4102f2e0:	a013883a 	mov	r9,r20
4102f2e4:	003fde06 	br	4102f260 <__umoddi3+0xf8>
4102f2e8:	00bfffd4 	movui	r2,65535
4102f2ec:	11804036 	bltu	r2,r6,4102f3f0 <__umoddi3+0x288>
4102f2f0:	00803fc4 	movi	r2,255
4102f2f4:	1180ed36 	bltu	r2,r6,4102f6ac <__umoddi3+0x544>
4102f2f8:	000b883a 	mov	r5,zero
4102f2fc:	0005883a 	mov	r2,zero
4102f300:	8084d83a 	srl	r2,r16,r2
4102f304:	01000034 	movhi	r4,0
4102f308:	2103fb04 	addi	r4,r4,4076
4102f30c:	01800804 	movi	r6,32
4102f310:	1105883a 	add	r2,r2,r4
4102f314:	10c00003 	ldbu	r3,0(r2)
4102f318:	28c7883a 	add	r3,r5,r3
4102f31c:	30c7c83a 	sub	r3,r6,r3
4102f320:	1800bf1e 	bne	r3,zero,4102f620 <__umoddi3+0x4b8>
4102f324:	0039883a 	mov	fp,zero
4102f328:	802ad43a 	srli	r21,r16,16
4102f32c:	a009883a 	mov	r4,r20
4102f330:	85ffffcc 	andi	r23,r16,65535
4102f334:	a80b883a 	mov	r5,r21
4102f338:	102236c0 	call	4102236c <__udivsi3>
4102f33c:	a009883a 	mov	r4,r20
4102f340:	a80b883a 	mov	r5,r21
4102f344:	b8a3383a 	mul	r17,r23,r2
4102f348:	10223740 	call	41022374 <__umodsi3>
4102f34c:	1004943a 	slli	r2,r2,16
4102f350:	b006d43a 	srli	r3,r22,16
4102f354:	10c4b03a 	or	r2,r2,r3
4102f358:	1440032e 	bgeu	r2,r17,4102f368 <__umoddi3+0x200>
4102f35c:	1405883a 	add	r2,r2,r16
4102f360:	14000136 	bltu	r2,r16,4102f368 <__umoddi3+0x200>
4102f364:	1440e536 	bltu	r2,r17,4102f6fc <__umoddi3+0x594>
4102f368:	1463c83a 	sub	r17,r2,r17
4102f36c:	8809883a 	mov	r4,r17
4102f370:	a80b883a 	mov	r5,r21
4102f374:	102236c0 	call	4102236c <__udivsi3>
4102f378:	8809883a 	mov	r4,r17
4102f37c:	b8a3383a 	mul	r17,r23,r2
4102f380:	a80b883a 	mov	r5,r21
4102f384:	10223740 	call	41022374 <__umodsi3>
4102f388:	1004943a 	slli	r2,r2,16
4102f38c:	b0ffffcc 	andi	r3,r22,65535
4102f390:	10c4b03a 	or	r2,r2,r3
4102f394:	1440042e 	bgeu	r2,r17,4102f3a8 <__umoddi3+0x240>
4102f398:	1405883a 	add	r2,r2,r16
4102f39c:	14000236 	bltu	r2,r16,4102f3a8 <__umoddi3+0x240>
4102f3a0:	1440012e 	bgeu	r2,r17,4102f3a8 <__umoddi3+0x240>
4102f3a4:	1405883a 	add	r2,r2,r16
4102f3a8:	1445c83a 	sub	r2,r2,r17
4102f3ac:	1724d83a 	srl	r18,r2,fp
4102f3b0:	0013883a 	mov	r9,zero
4102f3b4:	9011883a 	mov	r8,r18
4102f3b8:	003fa906 	br	4102f260 <__umoddi3+0xf8>
4102f3bc:	00804034 	movhi	r2,256
4102f3c0:	10bfffc4 	addi	r2,r2,-1
4102f3c4:	1400b036 	bltu	r2,r16,4102f688 <__umoddi3+0x520>
4102f3c8:	01400404 	movi	r5,16
4102f3cc:	2805883a 	mov	r2,r5
4102f3d0:	003f7c06 	br	4102f1c4 <__umoddi3+0x5c>
4102f3d4:	01000044 	movi	r4,1
4102f3d8:	000b883a 	mov	r5,zero
4102f3dc:	102236c0 	call	4102236c <__udivsi3>
4102f3e0:	1021883a 	mov	r16,r2
4102f3e4:	00bfffd4 	movui	r2,65535
4102f3e8:	143ff436 	bltu	r2,r16,4102f3bc <__umoddi3+0x254>
4102f3ec:	003f7106 	br	4102f1b4 <__umoddi3+0x4c>
4102f3f0:	00804034 	movhi	r2,256
4102f3f4:	10bfffc4 	addi	r2,r2,-1
4102f3f8:	1180af36 	bltu	r2,r6,4102f6b8 <__umoddi3+0x550>
4102f3fc:	01400404 	movi	r5,16
4102f400:	2805883a 	mov	r2,r5
4102f404:	003fbe06 	br	4102f300 <__umoddi3+0x198>
4102f408:	00804034 	movhi	r2,256
4102f40c:	10bfffc4 	addi	r2,r2,-1
4102f410:	11c0ac36 	bltu	r2,r7,4102f6c4 <__umoddi3+0x55c>
4102f414:	01400404 	movi	r5,16
4102f418:	2805883a 	mov	r2,r5
4102f41c:	003fa406 	br	4102f2b0 <__umoddi3+0x148>
4102f420:	b409c83a 	sub	r4,r22,r16
4102f424:	b105803a 	cmpltu	r2,r22,r4
4102f428:	a187c83a 	sub	r3,r20,r6
4102f42c:	18a9c83a 	sub	r20,r3,r2
4102f430:	202d883a 	mov	r22,r4
4102f434:	003fa906 	br	4102f2dc <__umoddi3+0x174>
4102f438:	85e0983a 	sll	r16,r16,r23
4102f43c:	35c5c83a 	sub	r2,r6,r23
4102f440:	a0a2d83a 	srl	r17,r20,r2
4102f444:	802ad43a 	srli	r21,r16,16
4102f448:	b084d83a 	srl	r2,r22,r2
4102f44c:	a5c6983a 	sll	r3,r20,r23
4102f450:	8809883a 	mov	r4,r17
4102f454:	a80b883a 	mov	r5,r21
4102f458:	1886b03a 	or	r3,r3,r2
4102f45c:	d8c00115 	stw	r3,4(sp)
4102f460:	853fffcc 	andi	r20,r16,65535
4102f464:	102236c0 	call	4102236c <__udivsi3>
4102f468:	8809883a 	mov	r4,r17
4102f46c:	a80b883a 	mov	r5,r21
4102f470:	a0a3383a 	mul	r17,r20,r2
4102f474:	10223740 	call	41022374 <__umodsi3>
4102f478:	d9000117 	ldw	r4,4(sp)
4102f47c:	1004943a 	slli	r2,r2,16
4102f480:	b839883a 	mov	fp,r23
4102f484:	2006d43a 	srli	r3,r4,16
4102f488:	10c4b03a 	or	r2,r2,r3
4102f48c:	1440022e 	bgeu	r2,r17,4102f498 <__umoddi3+0x330>
4102f490:	1405883a 	add	r2,r2,r16
4102f494:	1400962e 	bgeu	r2,r16,4102f6f0 <__umoddi3+0x588>
4102f498:	1463c83a 	sub	r17,r2,r17
4102f49c:	8809883a 	mov	r4,r17
4102f4a0:	a80b883a 	mov	r5,r21
4102f4a4:	102236c0 	call	4102236c <__udivsi3>
4102f4a8:	8809883a 	mov	r4,r17
4102f4ac:	a80b883a 	mov	r5,r21
4102f4b0:	a0a3383a 	mul	r17,r20,r2
4102f4b4:	10223740 	call	41022374 <__umodsi3>
4102f4b8:	d9400117 	ldw	r5,4(sp)
4102f4bc:	1004943a 	slli	r2,r2,16
4102f4c0:	28ffffcc 	andi	r3,r5,65535
4102f4c4:	10c4b03a 	or	r2,r2,r3
4102f4c8:	1440042e 	bgeu	r2,r17,4102f4dc <__umoddi3+0x374>
4102f4cc:	1405883a 	add	r2,r2,r16
4102f4d0:	14000236 	bltu	r2,r16,4102f4dc <__umoddi3+0x374>
4102f4d4:	1440012e 	bgeu	r2,r17,4102f4dc <__umoddi3+0x374>
4102f4d8:	1405883a 	add	r2,r2,r16
4102f4dc:	b5ec983a 	sll	r22,r22,r23
4102f4e0:	1463c83a 	sub	r17,r2,r17
4102f4e4:	003f4406 	br	4102f1f8 <__umoddi3+0x90>
4102f4e8:	3d4fc83a 	sub	r7,r7,r21
4102f4ec:	3546983a 	sll	r3,r6,r21
4102f4f0:	81c4d83a 	srl	r2,r16,r7
4102f4f4:	a1e2d83a 	srl	r17,r20,r7
4102f4f8:	a54c983a 	sll	r6,r20,r21
4102f4fc:	18aeb03a 	or	r23,r3,r2
4102f500:	b828d43a 	srli	r20,r23,16
4102f504:	b1c4d83a 	srl	r2,r22,r7
4102f508:	8809883a 	mov	r4,r17
4102f50c:	a00b883a 	mov	r5,r20
4102f510:	308cb03a 	or	r6,r6,r2
4102f514:	d9c00315 	stw	r7,12(sp)
4102f518:	d9800215 	stw	r6,8(sp)
4102f51c:	102236c0 	call	4102236c <__udivsi3>
4102f520:	8809883a 	mov	r4,r17
4102f524:	a00b883a 	mov	r5,r20
4102f528:	1039883a 	mov	fp,r2
4102f52c:	10223740 	call	41022374 <__umodsi3>
4102f530:	b8ffffcc 	andi	r3,r23,65535
4102f534:	d8c00415 	stw	r3,16(sp)
4102f538:	d9000217 	ldw	r4,8(sp)
4102f53c:	d9400417 	ldw	r5,16(sp)
4102f540:	1004943a 	slli	r2,r2,16
4102f544:	2006d43a 	srli	r3,r4,16
4102f548:	8560983a 	sll	r16,r16,r21
4102f54c:	2f23383a 	mul	r17,r5,fp
4102f550:	10c4b03a 	or	r2,r2,r3
4102f554:	dc000015 	stw	r16,0(sp)
4102f558:	b56c983a 	sll	r22,r22,r21
4102f55c:	1440032e 	bgeu	r2,r17,4102f56c <__umoddi3+0x404>
4102f560:	15c5883a 	add	r2,r2,r23
4102f564:	e73fffc4 	addi	fp,fp,-1
4102f568:	15c05d2e 	bgeu	r2,r23,4102f6e0 <__umoddi3+0x578>
4102f56c:	1463c83a 	sub	r17,r2,r17
4102f570:	8809883a 	mov	r4,r17
4102f574:	a00b883a 	mov	r5,r20
4102f578:	102236c0 	call	4102236c <__udivsi3>
4102f57c:	8809883a 	mov	r4,r17
4102f580:	a00b883a 	mov	r5,r20
4102f584:	1021883a 	mov	r16,r2
4102f588:	10223740 	call	41022374 <__umodsi3>
4102f58c:	d8c00417 	ldw	r3,16(sp)
4102f590:	d9000217 	ldw	r4,8(sp)
4102f594:	1004943a 	slli	r2,r2,16
4102f598:	1c23383a 	mul	r17,r3,r16
4102f59c:	20ffffcc 	andi	r3,r4,65535
4102f5a0:	10ceb03a 	or	r7,r2,r3
4102f5a4:	3c40032e 	bgeu	r7,r17,4102f5b4 <__umoddi3+0x44c>
4102f5a8:	3dcf883a 	add	r7,r7,r23
4102f5ac:	843fffc4 	addi	r16,r16,-1
4102f5b0:	3dc0472e 	bgeu	r7,r23,4102f6d0 <__umoddi3+0x568>
4102f5b4:	e004943a 	slli	r2,fp,16
4102f5b8:	d9400017 	ldw	r5,0(sp)
4102f5bc:	3c4fc83a 	sub	r7,r7,r17
4102f5c0:	8084b03a 	or	r2,r16,r2
4102f5c4:	28ffffcc 	andi	r3,r5,65535
4102f5c8:	280cd43a 	srli	r6,r5,16
4102f5cc:	100ad43a 	srli	r5,r2,16
4102f5d0:	10bfffcc 	andi	r2,r2,65535
4102f5d4:	10d1383a 	mul	r8,r2,r3
4102f5d8:	28c7383a 	mul	r3,r5,r3
4102f5dc:	1185383a 	mul	r2,r2,r6
4102f5e0:	4008d43a 	srli	r4,r8,16
4102f5e4:	298b383a 	mul	r5,r5,r6
4102f5e8:	10c5883a 	add	r2,r2,r3
4102f5ec:	2089883a 	add	r4,r4,r2
4102f5f0:	20c0022e 	bgeu	r4,r3,4102f5fc <__umoddi3+0x494>
4102f5f4:	00800074 	movhi	r2,1
4102f5f8:	288b883a 	add	r5,r5,r2
4102f5fc:	2004d43a 	srli	r2,r4,16
4102f600:	2008943a 	slli	r4,r4,16
4102f604:	40ffffcc 	andi	r3,r8,65535
4102f608:	288b883a 	add	r5,r5,r2
4102f60c:	20c9883a 	add	r4,r4,r3
4102f610:	39400b36 	bltu	r7,r5,4102f640 <__umoddi3+0x4d8>
4102f614:	39403d26 	beq	r7,r5,4102f70c <__umoddi3+0x5a4>
4102f618:	394bc83a 	sub	r5,r7,r5
4102f61c:	00000f06 	br	4102f65c <__umoddi3+0x4f4>
4102f620:	30c5c83a 	sub	r2,r6,r3
4102f624:	1839883a 	mov	fp,r3
4102f628:	b084d83a 	srl	r2,r22,r2
4102f62c:	a0c6983a 	sll	r3,r20,r3
4102f630:	8720983a 	sll	r16,r16,fp
4102f634:	b72c983a 	sll	r22,r22,fp
4102f638:	18a8b03a 	or	r20,r3,r2
4102f63c:	003f3a06 	br	4102f328 <__umoddi3+0x1c0>
4102f640:	d8c00017 	ldw	r3,0(sp)
4102f644:	20c5c83a 	sub	r2,r4,r3
4102f648:	2089803a 	cmpltu	r4,r4,r2
4102f64c:	2dc7c83a 	sub	r3,r5,r23
4102f650:	1907c83a 	sub	r3,r3,r4
4102f654:	38cbc83a 	sub	r5,r7,r3
4102f658:	1009883a 	mov	r4,r2
4102f65c:	b105c83a 	sub	r2,r22,r4
4102f660:	b087803a 	cmpltu	r3,r22,r2
4102f664:	28c7c83a 	sub	r3,r5,r3
4102f668:	d9400317 	ldw	r5,12(sp)
4102f66c:	1544d83a 	srl	r2,r2,r21
4102f670:	1948983a 	sll	r4,r3,r5
4102f674:	1d46d83a 	srl	r3,r3,r21
4102f678:	20a4b03a 	or	r18,r4,r2
4102f67c:	9011883a 	mov	r8,r18
4102f680:	1813883a 	mov	r9,r3
4102f684:	003ef606 	br	4102f260 <__umoddi3+0xf8>
4102f688:	01400604 	movi	r5,24
4102f68c:	2805883a 	mov	r2,r5
4102f690:	003ecc06 	br	4102f1c4 <__umoddi3+0x5c>
4102f694:	01400204 	movi	r5,8
4102f698:	2805883a 	mov	r2,r5
4102f69c:	003ec906 	br	4102f1c4 <__umoddi3+0x5c>
4102f6a0:	01400204 	movi	r5,8
4102f6a4:	2805883a 	mov	r2,r5
4102f6a8:	003f0106 	br	4102f2b0 <__umoddi3+0x148>
4102f6ac:	01400204 	movi	r5,8
4102f6b0:	2805883a 	mov	r2,r5
4102f6b4:	003f1206 	br	4102f300 <__umoddi3+0x198>
4102f6b8:	01400604 	movi	r5,24
4102f6bc:	2805883a 	mov	r2,r5
4102f6c0:	003f0f06 	br	4102f300 <__umoddi3+0x198>
4102f6c4:	01400604 	movi	r5,24
4102f6c8:	2805883a 	mov	r2,r5
4102f6cc:	003ef806 	br	4102f2b0 <__umoddi3+0x148>
4102f6d0:	3c7fb82e 	bgeu	r7,r17,4102f5b4 <__umoddi3+0x44c>
4102f6d4:	843fffc4 	addi	r16,r16,-1
4102f6d8:	3dcf883a 	add	r7,r7,r23
4102f6dc:	003fb506 	br	4102f5b4 <__umoddi3+0x44c>
4102f6e0:	147fa22e 	bgeu	r2,r17,4102f56c <__umoddi3+0x404>
4102f6e4:	e73fffc4 	addi	fp,fp,-1
4102f6e8:	15c5883a 	add	r2,r2,r23
4102f6ec:	003f9f06 	br	4102f56c <__umoddi3+0x404>
4102f6f0:	147f692e 	bgeu	r2,r17,4102f498 <__umoddi3+0x330>
4102f6f4:	1405883a 	add	r2,r2,r16
4102f6f8:	003f6706 	br	4102f498 <__umoddi3+0x330>
4102f6fc:	1405883a 	add	r2,r2,r16
4102f700:	003f1906 	br	4102f368 <__umoddi3+0x200>
4102f704:	1405883a 	add	r2,r2,r16
4102f708:	003ec906 	br	4102f230 <__umoddi3+0xc8>
4102f70c:	b13fcc36 	bltu	r22,r4,4102f640 <__umoddi3+0x4d8>
4102f710:	000b883a 	mov	r5,zero
4102f714:	003fd106 	br	4102f65c <__umoddi3+0x4f4>

4102f718 <__nesf2>:
4102f718:	defff304 	addi	sp,sp,-52
4102f71c:	dc400b15 	stw	r17,44(sp)
4102f720:	dc400204 	addi	r17,sp,8
4102f724:	dc000a15 	stw	r16,40(sp)
4102f728:	d9000015 	stw	r4,0(sp)
4102f72c:	d9400115 	stw	r5,4(sp)
4102f730:	d809883a 	mov	r4,sp
4102f734:	880b883a 	mov	r5,r17
4102f738:	dc000604 	addi	r16,sp,24
4102f73c:	dfc00c15 	stw	ra,48(sp)
4102f740:	1030b180 	call	41030b18 <__unpack_f>
4102f744:	d9000104 	addi	r4,sp,4
4102f748:	800b883a 	mov	r5,r16
4102f74c:	1030b180 	call	41030b18 <__unpack_f>
4102f750:	d8800217 	ldw	r2,8(sp)
4102f754:	00c00044 	movi	r3,1
4102f758:	180d883a 	mov	r6,r3
4102f75c:	1880062e 	bgeu	r3,r2,4102f778 <__nesf2+0x60>
4102f760:	d8800617 	ldw	r2,24(sp)
4102f764:	8809883a 	mov	r4,r17
4102f768:	800b883a 	mov	r5,r16
4102f76c:	1880022e 	bgeu	r3,r2,4102f778 <__nesf2+0x60>
4102f770:	1030be00 	call	41030be0 <__fpcmp_parts_f>
4102f774:	100d883a 	mov	r6,r2
4102f778:	3005883a 	mov	r2,r6
4102f77c:	dfc00c17 	ldw	ra,48(sp)
4102f780:	dc400b17 	ldw	r17,44(sp)
4102f784:	dc000a17 	ldw	r16,40(sp)
4102f788:	dec00d04 	addi	sp,sp,52
4102f78c:	f800283a 	ret

4102f790 <__gtsf2>:
4102f790:	defff304 	addi	sp,sp,-52
4102f794:	dc400b15 	stw	r17,44(sp)
4102f798:	dc400204 	addi	r17,sp,8
4102f79c:	dc000a15 	stw	r16,40(sp)
4102f7a0:	d9000015 	stw	r4,0(sp)
4102f7a4:	d9400115 	stw	r5,4(sp)
4102f7a8:	d809883a 	mov	r4,sp
4102f7ac:	880b883a 	mov	r5,r17
4102f7b0:	dc000604 	addi	r16,sp,24
4102f7b4:	dfc00c15 	stw	ra,48(sp)
4102f7b8:	1030b180 	call	41030b18 <__unpack_f>
4102f7bc:	d9000104 	addi	r4,sp,4
4102f7c0:	800b883a 	mov	r5,r16
4102f7c4:	1030b180 	call	41030b18 <__unpack_f>
4102f7c8:	d8800217 	ldw	r2,8(sp)
4102f7cc:	00c00044 	movi	r3,1
4102f7d0:	01bfffc4 	movi	r6,-1
4102f7d4:	1880062e 	bgeu	r3,r2,4102f7f0 <__gtsf2+0x60>
4102f7d8:	d8800617 	ldw	r2,24(sp)
4102f7dc:	8809883a 	mov	r4,r17
4102f7e0:	800b883a 	mov	r5,r16
4102f7e4:	1880022e 	bgeu	r3,r2,4102f7f0 <__gtsf2+0x60>
4102f7e8:	1030be00 	call	41030be0 <__fpcmp_parts_f>
4102f7ec:	100d883a 	mov	r6,r2
4102f7f0:	3005883a 	mov	r2,r6
4102f7f4:	dfc00c17 	ldw	ra,48(sp)
4102f7f8:	dc400b17 	ldw	r17,44(sp)
4102f7fc:	dc000a17 	ldw	r16,40(sp)
4102f800:	dec00d04 	addi	sp,sp,52
4102f804:	f800283a 	ret

4102f808 <__ltsf2>:
4102f808:	defff304 	addi	sp,sp,-52
4102f80c:	dc400b15 	stw	r17,44(sp)
4102f810:	dc400204 	addi	r17,sp,8
4102f814:	dc000a15 	stw	r16,40(sp)
4102f818:	d9000015 	stw	r4,0(sp)
4102f81c:	d9400115 	stw	r5,4(sp)
4102f820:	d809883a 	mov	r4,sp
4102f824:	880b883a 	mov	r5,r17
4102f828:	dc000604 	addi	r16,sp,24
4102f82c:	dfc00c15 	stw	ra,48(sp)
4102f830:	1030b180 	call	41030b18 <__unpack_f>
4102f834:	d9000104 	addi	r4,sp,4
4102f838:	800b883a 	mov	r5,r16
4102f83c:	1030b180 	call	41030b18 <__unpack_f>
4102f840:	d8800217 	ldw	r2,8(sp)
4102f844:	00c00044 	movi	r3,1
4102f848:	180d883a 	mov	r6,r3
4102f84c:	1880062e 	bgeu	r3,r2,4102f868 <__ltsf2+0x60>
4102f850:	d8800617 	ldw	r2,24(sp)
4102f854:	8809883a 	mov	r4,r17
4102f858:	800b883a 	mov	r5,r16
4102f85c:	1880022e 	bgeu	r3,r2,4102f868 <__ltsf2+0x60>
4102f860:	1030be00 	call	41030be0 <__fpcmp_parts_f>
4102f864:	100d883a 	mov	r6,r2
4102f868:	3005883a 	mov	r2,r6
4102f86c:	dfc00c17 	ldw	ra,48(sp)
4102f870:	dc400b17 	ldw	r17,44(sp)
4102f874:	dc000a17 	ldw	r16,40(sp)
4102f878:	dec00d04 	addi	sp,sp,52
4102f87c:	f800283a 	ret

4102f880 <_fpadd_parts>:
4102f880:	defff804 	addi	sp,sp,-32
4102f884:	dcc00315 	stw	r19,12(sp)
4102f888:	2027883a 	mov	r19,r4
4102f88c:	21000017 	ldw	r4,0(r4)
4102f890:	00c00044 	movi	r3,1
4102f894:	dd400515 	stw	r21,20(sp)
4102f898:	dd000415 	stw	r20,16(sp)
4102f89c:	ddc00715 	stw	r23,28(sp)
4102f8a0:	dd800615 	stw	r22,24(sp)
4102f8a4:	dc800215 	stw	r18,8(sp)
4102f8a8:	dc400115 	stw	r17,4(sp)
4102f8ac:	dc000015 	stw	r16,0(sp)
4102f8b0:	282b883a 	mov	r21,r5
4102f8b4:	3029883a 	mov	r20,r6
4102f8b8:	1900632e 	bgeu	r3,r4,4102fa48 <_fpadd_parts+0x1c8>
4102f8bc:	28800017 	ldw	r2,0(r5)
4102f8c0:	1880812e 	bgeu	r3,r2,4102fac8 <_fpadd_parts+0x248>
4102f8c4:	00c00104 	movi	r3,4
4102f8c8:	20c0dc26 	beq	r4,r3,4102fc3c <_fpadd_parts+0x3bc>
4102f8cc:	10c07e26 	beq	r2,r3,4102fac8 <_fpadd_parts+0x248>
4102f8d0:	00c00084 	movi	r3,2
4102f8d4:	10c06726 	beq	r2,r3,4102fa74 <_fpadd_parts+0x1f4>
4102f8d8:	20c07b26 	beq	r4,r3,4102fac8 <_fpadd_parts+0x248>
4102f8dc:	9dc00217 	ldw	r23,8(r19)
4102f8e0:	28c00217 	ldw	r3,8(r5)
4102f8e4:	9c400317 	ldw	r17,12(r19)
4102f8e8:	2bc00317 	ldw	r15,12(r5)
4102f8ec:	b8cdc83a 	sub	r6,r23,r3
4102f8f0:	9c800417 	ldw	r18,16(r19)
4102f8f4:	2c000417 	ldw	r16,16(r5)
4102f8f8:	3009883a 	mov	r4,r6
4102f8fc:	30009716 	blt	r6,zero,4102fb5c <_fpadd_parts+0x2dc>
4102f900:	00800fc4 	movi	r2,63
4102f904:	11806b16 	blt	r2,r6,4102fab4 <_fpadd_parts+0x234>
4102f908:	0100a40e 	bge	zero,r4,4102fb9c <_fpadd_parts+0x31c>
4102f90c:	35bff804 	addi	r22,r6,-32
4102f910:	b000bc16 	blt	r22,zero,4102fc04 <_fpadd_parts+0x384>
4102f914:	8596d83a 	srl	r11,r16,r22
4102f918:	0019883a 	mov	r12,zero
4102f91c:	0013883a 	mov	r9,zero
4102f920:	01000044 	movi	r4,1
4102f924:	0015883a 	mov	r10,zero
4102f928:	b000be16 	blt	r22,zero,4102fc24 <_fpadd_parts+0x3a4>
4102f92c:	2590983a 	sll	r8,r4,r22
4102f930:	000f883a 	mov	r7,zero
4102f934:	00bfffc4 	movi	r2,-1
4102f938:	3889883a 	add	r4,r7,r2
4102f93c:	408b883a 	add	r5,r8,r2
4102f940:	21cd803a 	cmpltu	r6,r4,r7
4102f944:	314b883a 	add	r5,r6,r5
4102f948:	7904703a 	and	r2,r15,r4
4102f94c:	8146703a 	and	r3,r16,r5
4102f950:	10c4b03a 	or	r2,r2,r3
4102f954:	10000226 	beq	r2,zero,4102f960 <_fpadd_parts+0xe0>
4102f958:	02400044 	movi	r9,1
4102f95c:	0015883a 	mov	r10,zero
4102f960:	5a5eb03a 	or	r15,r11,r9
4102f964:	62a0b03a 	or	r16,r12,r10
4102f968:	99400117 	ldw	r5,4(r19)
4102f96c:	a8800117 	ldw	r2,4(r21)
4102f970:	28806e26 	beq	r5,r2,4102fb2c <_fpadd_parts+0x2ac>
4102f974:	28006626 	beq	r5,zero,4102fb10 <_fpadd_parts+0x290>
4102f978:	7c45c83a 	sub	r2,r15,r17
4102f97c:	7889803a 	cmpltu	r4,r15,r2
4102f980:	8487c83a 	sub	r3,r16,r18
4102f984:	1909c83a 	sub	r4,r3,r4
4102f988:	100d883a 	mov	r6,r2
4102f98c:	200f883a 	mov	r7,r4
4102f990:	38007716 	blt	r7,zero,4102fb70 <_fpadd_parts+0x2f0>
4102f994:	a5c00215 	stw	r23,8(r20)
4102f998:	a1c00415 	stw	r7,16(r20)
4102f99c:	a0000115 	stw	zero,4(r20)
4102f9a0:	a1800315 	stw	r6,12(r20)
4102f9a4:	a2000317 	ldw	r8,12(r20)
4102f9a8:	a2400417 	ldw	r9,16(r20)
4102f9ac:	00bfffc4 	movi	r2,-1
4102f9b0:	408b883a 	add	r5,r8,r2
4102f9b4:	2a09803a 	cmpltu	r4,r5,r8
4102f9b8:	488d883a 	add	r6,r9,r2
4102f9bc:	01c40034 	movhi	r7,4096
4102f9c0:	39ffffc4 	addi	r7,r7,-1
4102f9c4:	218d883a 	add	r6,r4,r6
4102f9c8:	39801736 	bltu	r7,r6,4102fa28 <_fpadd_parts+0x1a8>
4102f9cc:	31c06526 	beq	r6,r7,4102fb64 <_fpadd_parts+0x2e4>
4102f9d0:	a3000217 	ldw	r12,8(r20)
4102f9d4:	4209883a 	add	r4,r8,r8
4102f9d8:	00bfffc4 	movi	r2,-1
4102f9dc:	220f803a 	cmpltu	r7,r4,r8
4102f9e0:	4a4b883a 	add	r5,r9,r9
4102f9e4:	394f883a 	add	r7,r7,r5
4102f9e8:	2095883a 	add	r10,r4,r2
4102f9ec:	3897883a 	add	r11,r7,r2
4102f9f0:	510d803a 	cmpltu	r6,r10,r4
4102f9f4:	6099883a 	add	r12,r12,r2
4102f9f8:	32d7883a 	add	r11,r6,r11
4102f9fc:	00840034 	movhi	r2,4096
4102fa00:	10bfffc4 	addi	r2,r2,-1
4102fa04:	2011883a 	mov	r8,r4
4102fa08:	3813883a 	mov	r9,r7
4102fa0c:	a1000315 	stw	r4,12(r20)
4102fa10:	a1c00415 	stw	r7,16(r20)
4102fa14:	a3000215 	stw	r12,8(r20)
4102fa18:	12c00336 	bltu	r2,r11,4102fa28 <_fpadd_parts+0x1a8>
4102fa1c:	58bfed1e 	bne	r11,r2,4102f9d4 <_fpadd_parts+0x154>
4102fa20:	00bfff84 	movi	r2,-2
4102fa24:	12bfeb2e 	bgeu	r2,r10,4102f9d4 <_fpadd_parts+0x154>
4102fa28:	a2800417 	ldw	r10,16(r20)
4102fa2c:	008000c4 	movi	r2,3
4102fa30:	00c80034 	movhi	r3,8192
4102fa34:	18ffffc4 	addi	r3,r3,-1
4102fa38:	a2400317 	ldw	r9,12(r20)
4102fa3c:	a0800015 	stw	r2,0(r20)
4102fa40:	1a802336 	bltu	r3,r10,4102fad0 <_fpadd_parts+0x250>
4102fa44:	a027883a 	mov	r19,r20
4102fa48:	9805883a 	mov	r2,r19
4102fa4c:	ddc00717 	ldw	r23,28(sp)
4102fa50:	dd800617 	ldw	r22,24(sp)
4102fa54:	dd400517 	ldw	r21,20(sp)
4102fa58:	dd000417 	ldw	r20,16(sp)
4102fa5c:	dcc00317 	ldw	r19,12(sp)
4102fa60:	dc800217 	ldw	r18,8(sp)
4102fa64:	dc400117 	ldw	r17,4(sp)
4102fa68:	dc000017 	ldw	r16,0(sp)
4102fa6c:	dec00804 	addi	sp,sp,32
4102fa70:	f800283a 	ret
4102fa74:	20fff41e 	bne	r4,r3,4102fa48 <_fpadd_parts+0x1c8>
4102fa78:	31000015 	stw	r4,0(r6)
4102fa7c:	98800117 	ldw	r2,4(r19)
4102fa80:	30800115 	stw	r2,4(r6)
4102fa84:	98c00217 	ldw	r3,8(r19)
4102fa88:	30c00215 	stw	r3,8(r6)
4102fa8c:	98800317 	ldw	r2,12(r19)
4102fa90:	30800315 	stw	r2,12(r6)
4102fa94:	98c00417 	ldw	r3,16(r19)
4102fa98:	30c00415 	stw	r3,16(r6)
4102fa9c:	98800117 	ldw	r2,4(r19)
4102faa0:	28c00117 	ldw	r3,4(r5)
4102faa4:	3027883a 	mov	r19,r6
4102faa8:	10c4703a 	and	r2,r2,r3
4102faac:	30800115 	stw	r2,4(r6)
4102fab0:	003fe506 	br	4102fa48 <_fpadd_parts+0x1c8>
4102fab4:	1dc02616 	blt	r3,r23,4102fb50 <_fpadd_parts+0x2d0>
4102fab8:	0023883a 	mov	r17,zero
4102fabc:	182f883a 	mov	r23,r3
4102fac0:	0025883a 	mov	r18,zero
4102fac4:	003fa806 	br	4102f968 <_fpadd_parts+0xe8>
4102fac8:	a827883a 	mov	r19,r21
4102facc:	003fde06 	br	4102fa48 <_fpadd_parts+0x1c8>
4102fad0:	01800044 	movi	r6,1
4102fad4:	500497fa 	slli	r2,r10,31
4102fad8:	4808d07a 	srli	r4,r9,1
4102fadc:	518ad83a 	srl	r5,r10,r6
4102fae0:	a2000217 	ldw	r8,8(r20)
4102fae4:	1108b03a 	or	r4,r2,r4
4102fae8:	0007883a 	mov	r3,zero
4102faec:	4984703a 	and	r2,r9,r6
4102faf0:	208cb03a 	or	r6,r4,r2
4102faf4:	28ceb03a 	or	r7,r5,r3
4102faf8:	42000044 	addi	r8,r8,1
4102fafc:	a027883a 	mov	r19,r20
4102fb00:	a1c00415 	stw	r7,16(r20)
4102fb04:	a2000215 	stw	r8,8(r20)
4102fb08:	a1800315 	stw	r6,12(r20)
4102fb0c:	003fce06 	br	4102fa48 <_fpadd_parts+0x1c8>
4102fb10:	8bc5c83a 	sub	r2,r17,r15
4102fb14:	8889803a 	cmpltu	r4,r17,r2
4102fb18:	9407c83a 	sub	r3,r18,r16
4102fb1c:	1909c83a 	sub	r4,r3,r4
4102fb20:	100d883a 	mov	r6,r2
4102fb24:	200f883a 	mov	r7,r4
4102fb28:	003f9906 	br	4102f990 <_fpadd_parts+0x110>
4102fb2c:	7c45883a 	add	r2,r15,r17
4102fb30:	13c9803a 	cmpltu	r4,r2,r15
4102fb34:	8487883a 	add	r3,r16,r18
4102fb38:	20c9883a 	add	r4,r4,r3
4102fb3c:	a1400115 	stw	r5,4(r20)
4102fb40:	a5c00215 	stw	r23,8(r20)
4102fb44:	a0800315 	stw	r2,12(r20)
4102fb48:	a1000415 	stw	r4,16(r20)
4102fb4c:	003fb606 	br	4102fa28 <_fpadd_parts+0x1a8>
4102fb50:	001f883a 	mov	r15,zero
4102fb54:	0021883a 	mov	r16,zero
4102fb58:	003f8306 	br	4102f968 <_fpadd_parts+0xe8>
4102fb5c:	018dc83a 	sub	r6,zero,r6
4102fb60:	003f6706 	br	4102f900 <_fpadd_parts+0x80>
4102fb64:	00bfff84 	movi	r2,-2
4102fb68:	117faf36 	bltu	r2,r5,4102fa28 <_fpadd_parts+0x1a8>
4102fb6c:	003f9806 	br	4102f9d0 <_fpadd_parts+0x150>
4102fb70:	0005883a 	mov	r2,zero
4102fb74:	1189c83a 	sub	r4,r2,r6
4102fb78:	1105803a 	cmpltu	r2,r2,r4
4102fb7c:	01cbc83a 	sub	r5,zero,r7
4102fb80:	2885c83a 	sub	r2,r5,r2
4102fb84:	01800044 	movi	r6,1
4102fb88:	a1800115 	stw	r6,4(r20)
4102fb8c:	a5c00215 	stw	r23,8(r20)
4102fb90:	a1000315 	stw	r4,12(r20)
4102fb94:	a0800415 	stw	r2,16(r20)
4102fb98:	003f8206 	br	4102f9a4 <_fpadd_parts+0x124>
4102fb9c:	203f7226 	beq	r4,zero,4102f968 <_fpadd_parts+0xe8>
4102fba0:	35bff804 	addi	r22,r6,-32
4102fba4:	b9af883a 	add	r23,r23,r6
4102fba8:	b0003116 	blt	r22,zero,4102fc70 <_fpadd_parts+0x3f0>
4102fbac:	959ad83a 	srl	r13,r18,r22
4102fbb0:	001d883a 	mov	r14,zero
4102fbb4:	000f883a 	mov	r7,zero
4102fbb8:	01000044 	movi	r4,1
4102fbbc:	0011883a 	mov	r8,zero
4102fbc0:	b0002516 	blt	r22,zero,4102fc58 <_fpadd_parts+0x3d8>
4102fbc4:	2594983a 	sll	r10,r4,r22
4102fbc8:	0013883a 	mov	r9,zero
4102fbcc:	00bfffc4 	movi	r2,-1
4102fbd0:	4889883a 	add	r4,r9,r2
4102fbd4:	508b883a 	add	r5,r10,r2
4102fbd8:	224d803a 	cmpltu	r6,r4,r9
4102fbdc:	314b883a 	add	r5,r6,r5
4102fbe0:	8904703a 	and	r2,r17,r4
4102fbe4:	9146703a 	and	r3,r18,r5
4102fbe8:	10c4b03a 	or	r2,r2,r3
4102fbec:	10000226 	beq	r2,zero,4102fbf8 <_fpadd_parts+0x378>
4102fbf0:	01c00044 	movi	r7,1
4102fbf4:	0011883a 	mov	r8,zero
4102fbf8:	69e2b03a 	or	r17,r13,r7
4102fbfc:	7224b03a 	or	r18,r14,r8
4102fc00:	003f5906 	br	4102f968 <_fpadd_parts+0xe8>
4102fc04:	8407883a 	add	r3,r16,r16
4102fc08:	008007c4 	movi	r2,31
4102fc0c:	1185c83a 	sub	r2,r2,r6
4102fc10:	1886983a 	sll	r3,r3,r2
4102fc14:	7996d83a 	srl	r11,r15,r6
4102fc18:	8198d83a 	srl	r12,r16,r6
4102fc1c:	1ad6b03a 	or	r11,r3,r11
4102fc20:	003f3e06 	br	4102f91c <_fpadd_parts+0x9c>
4102fc24:	2006d07a 	srli	r3,r4,1
4102fc28:	008007c4 	movi	r2,31
4102fc2c:	1185c83a 	sub	r2,r2,r6
4102fc30:	1890d83a 	srl	r8,r3,r2
4102fc34:	218e983a 	sll	r7,r4,r6
4102fc38:	003f3e06 	br	4102f934 <_fpadd_parts+0xb4>
4102fc3c:	113f821e 	bne	r2,r4,4102fa48 <_fpadd_parts+0x1c8>
4102fc40:	28c00117 	ldw	r3,4(r5)
4102fc44:	98800117 	ldw	r2,4(r19)
4102fc48:	10ff7f26 	beq	r2,r3,4102fa48 <_fpadd_parts+0x1c8>
4102fc4c:	04c00034 	movhi	r19,0
4102fc50:	9cc3f604 	addi	r19,r19,4056
4102fc54:	003f7c06 	br	4102fa48 <_fpadd_parts+0x1c8>
4102fc58:	2006d07a 	srli	r3,r4,1
4102fc5c:	008007c4 	movi	r2,31
4102fc60:	1185c83a 	sub	r2,r2,r6
4102fc64:	1894d83a 	srl	r10,r3,r2
4102fc68:	2192983a 	sll	r9,r4,r6
4102fc6c:	003fd706 	br	4102fbcc <_fpadd_parts+0x34c>
4102fc70:	9487883a 	add	r3,r18,r18
4102fc74:	008007c4 	movi	r2,31
4102fc78:	1185c83a 	sub	r2,r2,r6
4102fc7c:	1886983a 	sll	r3,r3,r2
4102fc80:	899ad83a 	srl	r13,r17,r6
4102fc84:	919cd83a 	srl	r14,r18,r6
4102fc88:	1b5ab03a 	or	r13,r3,r13
4102fc8c:	003fc906 	br	4102fbb4 <_fpadd_parts+0x334>

4102fc90 <__subdf3>:
4102fc90:	deffea04 	addi	sp,sp,-88
4102fc94:	dcc01415 	stw	r19,80(sp)
4102fc98:	dcc00404 	addi	r19,sp,16
4102fc9c:	2011883a 	mov	r8,r4
4102fca0:	2813883a 	mov	r9,r5
4102fca4:	dc401315 	stw	r17,76(sp)
4102fca8:	d809883a 	mov	r4,sp
4102fcac:	980b883a 	mov	r5,r19
4102fcb0:	dc400904 	addi	r17,sp,36
4102fcb4:	dfc01515 	stw	ra,84(sp)
4102fcb8:	da400115 	stw	r9,4(sp)
4102fcbc:	d9c00315 	stw	r7,12(sp)
4102fcc0:	da000015 	stw	r8,0(sp)
4102fcc4:	d9800215 	stw	r6,8(sp)
4102fcc8:	1030fc80 	call	41030fc8 <__unpack_d>
4102fccc:	d9000204 	addi	r4,sp,8
4102fcd0:	880b883a 	mov	r5,r17
4102fcd4:	1030fc80 	call	41030fc8 <__unpack_d>
4102fcd8:	d8800a17 	ldw	r2,40(sp)
4102fcdc:	880b883a 	mov	r5,r17
4102fce0:	9809883a 	mov	r4,r19
4102fce4:	d9800e04 	addi	r6,sp,56
4102fce8:	1080005c 	xori	r2,r2,1
4102fcec:	d8800a15 	stw	r2,40(sp)
4102fcf0:	102f8800 	call	4102f880 <_fpadd_parts>
4102fcf4:	1009883a 	mov	r4,r2
4102fcf8:	1030cb40 	call	41030cb4 <__pack_d>
4102fcfc:	dfc01517 	ldw	ra,84(sp)
4102fd00:	dcc01417 	ldw	r19,80(sp)
4102fd04:	dc401317 	ldw	r17,76(sp)
4102fd08:	dec01604 	addi	sp,sp,88
4102fd0c:	f800283a 	ret

4102fd10 <__adddf3>:
4102fd10:	deffea04 	addi	sp,sp,-88
4102fd14:	dcc01415 	stw	r19,80(sp)
4102fd18:	dcc00404 	addi	r19,sp,16
4102fd1c:	2011883a 	mov	r8,r4
4102fd20:	2813883a 	mov	r9,r5
4102fd24:	dc401315 	stw	r17,76(sp)
4102fd28:	d809883a 	mov	r4,sp
4102fd2c:	980b883a 	mov	r5,r19
4102fd30:	dc400904 	addi	r17,sp,36
4102fd34:	dfc01515 	stw	ra,84(sp)
4102fd38:	da400115 	stw	r9,4(sp)
4102fd3c:	d9c00315 	stw	r7,12(sp)
4102fd40:	da000015 	stw	r8,0(sp)
4102fd44:	d9800215 	stw	r6,8(sp)
4102fd48:	1030fc80 	call	41030fc8 <__unpack_d>
4102fd4c:	d9000204 	addi	r4,sp,8
4102fd50:	880b883a 	mov	r5,r17
4102fd54:	1030fc80 	call	41030fc8 <__unpack_d>
4102fd58:	d9800e04 	addi	r6,sp,56
4102fd5c:	9809883a 	mov	r4,r19
4102fd60:	880b883a 	mov	r5,r17
4102fd64:	102f8800 	call	4102f880 <_fpadd_parts>
4102fd68:	1009883a 	mov	r4,r2
4102fd6c:	1030cb40 	call	41030cb4 <__pack_d>
4102fd70:	dfc01517 	ldw	ra,84(sp)
4102fd74:	dcc01417 	ldw	r19,80(sp)
4102fd78:	dc401317 	ldw	r17,76(sp)
4102fd7c:	dec01604 	addi	sp,sp,88
4102fd80:	f800283a 	ret

4102fd84 <__muldf3>:
4102fd84:	deffdd04 	addi	sp,sp,-140
4102fd88:	df002115 	stw	fp,132(sp)
4102fd8c:	df000404 	addi	fp,sp,16
4102fd90:	2011883a 	mov	r8,r4
4102fd94:	2813883a 	mov	r9,r5
4102fd98:	d809883a 	mov	r4,sp
4102fd9c:	e00b883a 	mov	r5,fp
4102fda0:	dfc02215 	stw	ra,136(sp)
4102fda4:	da400115 	stw	r9,4(sp)
4102fda8:	d9c00315 	stw	r7,12(sp)
4102fdac:	da000015 	stw	r8,0(sp)
4102fdb0:	d9800215 	stw	r6,8(sp)
4102fdb4:	ddc02015 	stw	r23,128(sp)
4102fdb8:	dd801f15 	stw	r22,124(sp)
4102fdbc:	dd401e15 	stw	r21,120(sp)
4102fdc0:	dd001d15 	stw	r20,116(sp)
4102fdc4:	dcc01c15 	stw	r19,112(sp)
4102fdc8:	dc801b15 	stw	r18,108(sp)
4102fdcc:	dc401a15 	stw	r17,104(sp)
4102fdd0:	dc001915 	stw	r16,100(sp)
4102fdd4:	1030fc80 	call	41030fc8 <__unpack_d>
4102fdd8:	d9000204 	addi	r4,sp,8
4102fddc:	d9400904 	addi	r5,sp,36
4102fde0:	1030fc80 	call	41030fc8 <__unpack_d>
4102fde4:	d9000417 	ldw	r4,16(sp)
4102fde8:	00800044 	movi	r2,1
4102fdec:	1100102e 	bgeu	r2,r4,4102fe30 <__muldf3+0xac>
4102fdf0:	d8c00917 	ldw	r3,36(sp)
4102fdf4:	10c0062e 	bgeu	r2,r3,4102fe10 <__muldf3+0x8c>
4102fdf8:	00800104 	movi	r2,4
4102fdfc:	20800a26 	beq	r4,r2,4102fe28 <__muldf3+0xa4>
4102fe00:	1880c826 	beq	r3,r2,41030124 <__muldf3+0x3a0>
4102fe04:	00800084 	movi	r2,2
4102fe08:	20800926 	beq	r4,r2,4102fe30 <__muldf3+0xac>
4102fe0c:	18801a1e 	bne	r3,r2,4102fe78 <__muldf3+0xf4>
4102fe10:	d8c00a17 	ldw	r3,40(sp)
4102fe14:	d8800517 	ldw	r2,20(sp)
4102fe18:	d9000904 	addi	r4,sp,36
4102fe1c:	10c4c03a 	cmpne	r2,r2,r3
4102fe20:	d8800a15 	stw	r2,40(sp)
4102fe24:	00000706 	br	4102fe44 <__muldf3+0xc0>
4102fe28:	00800084 	movi	r2,2
4102fe2c:	1880bf26 	beq	r3,r2,4103012c <__muldf3+0x3a8>
4102fe30:	d8800517 	ldw	r2,20(sp)
4102fe34:	d8c00a17 	ldw	r3,40(sp)
4102fe38:	e009883a 	mov	r4,fp
4102fe3c:	10c4c03a 	cmpne	r2,r2,r3
4102fe40:	d8800515 	stw	r2,20(sp)
4102fe44:	1030cb40 	call	41030cb4 <__pack_d>
4102fe48:	dfc02217 	ldw	ra,136(sp)
4102fe4c:	df002117 	ldw	fp,132(sp)
4102fe50:	ddc02017 	ldw	r23,128(sp)
4102fe54:	dd801f17 	ldw	r22,124(sp)
4102fe58:	dd401e17 	ldw	r21,120(sp)
4102fe5c:	dd001d17 	ldw	r20,116(sp)
4102fe60:	dcc01c17 	ldw	r19,112(sp)
4102fe64:	dc801b17 	ldw	r18,108(sp)
4102fe68:	dc401a17 	ldw	r17,104(sp)
4102fe6c:	dc001917 	ldw	r16,100(sp)
4102fe70:	dec02304 	addi	sp,sp,140
4102fe74:	f800283a 	ret
4102fe78:	db000c17 	ldw	r12,48(sp)
4102fe7c:	db800717 	ldw	r14,28(sp)
4102fe80:	dbc00817 	ldw	r15,32(sp)
4102fe84:	db400d17 	ldw	r13,52(sp)
4102fe88:	6009883a 	mov	r4,r12
4102fe8c:	000d883a 	mov	r6,zero
4102fe90:	0011883a 	mov	r8,zero
4102fe94:	000b883a 	mov	r5,zero
4102fe98:	0007883a 	mov	r3,zero
4102fe9c:	0019883a 	mov	r12,zero
4102fea0:	4393383a 	mul	r9,r8,r14
4102fea4:	d9801415 	stw	r6,80(sp)
4102fea8:	6111383a 	mul	r8,r12,r4
4102feac:	d9801615 	stw	r6,88(sp)
4102feb0:	1b4f383a 	mul	r7,r3,r13
4102feb4:	2bcd383a 	mul	r6,r5,r15
4102feb8:	7361383a 	mul	r16,r14,r13
4102febc:	23e5383a 	mul	r18,r4,r15
4102fec0:	7362383a 	mulxuu	r17,r14,r13
4102fec4:	23e6383a 	mulxuu	r19,r4,r15
4102fec8:	3a4f883a 	add	r7,r7,r9
4102fecc:	320d883a 	add	r6,r6,r8
4102fed0:	3c63883a 	add	r17,r7,r17
4102fed4:	34e7883a 	add	r19,r6,r19
4102fed8:	8495883a 	add	r10,r16,r18
4102fedc:	23aa383a 	mulxuu	r21,r4,r14
4102fee0:	540f803a 	cmpltu	r7,r10,r16
4102fee4:	8cd7883a 	add	r11,r17,r19
4102fee8:	3acf883a 	add	r7,r7,r11
4102feec:	4a0d883a 	add	r6,r9,r8
4102fef0:	db401315 	stw	r13,76(sp)
4102fef4:	dbc01515 	stw	r15,84(sp)
4102fef8:	23a9383a 	mul	r20,r4,r14
4102fefc:	da801715 	stw	r10,92(sp)
4102ff00:	d9c01815 	stw	r7,96(sp)
4102ff04:	356b883a 	add	r21,r6,r21
4102ff08:	3c40682e 	bgeu	r7,r17,410300ac <__muldf3+0x328>
4102ff0c:	000f883a 	mov	r7,zero
4102ff10:	02000044 	movi	r8,1
4102ff14:	d9401717 	ldw	r5,92(sp)
4102ff18:	0009883a 	mov	r4,zero
4102ff1c:	a105883a 	add	r2,r20,r4
4102ff20:	150d803a 	cmpltu	r6,r2,r20
4102ff24:	a947883a 	add	r3,r21,r5
4102ff28:	30cd883a 	add	r6,r6,r3
4102ff2c:	101f883a 	mov	r15,r2
4102ff30:	3021883a 	mov	r16,r6
4102ff34:	35406236 	bltu	r6,r21,410300c0 <__muldf3+0x33c>
4102ff38:	a9806026 	beq	r21,r6,410300bc <__muldf3+0x338>
4102ff3c:	d9801317 	ldw	r6,76(sp)
4102ff40:	db001517 	ldw	r12,84(sp)
4102ff44:	d8c01417 	ldw	r3,80(sp)
4102ff48:	d9401617 	ldw	r5,88(sp)
4102ff4c:	6009883a 	mov	r4,r12
4102ff50:	1b05383a 	mul	r2,r3,r12
4102ff54:	2987383a 	mul	r3,r5,r6
4102ff58:	332d383a 	mul	r22,r6,r12
4102ff5c:	312e383a 	mulxuu	r23,r6,r4
4102ff60:	d9801817 	ldw	r6,96(sp)
4102ff64:	10c5883a 	add	r2,r2,r3
4102ff68:	15ef883a 	add	r23,r2,r23
4102ff6c:	000b883a 	mov	r5,zero
4102ff70:	b185883a 	add	r2,r22,r6
4102ff74:	158d803a 	cmpltu	r6,r2,r22
4102ff78:	b947883a 	add	r3,r23,r5
4102ff7c:	30c7883a 	add	r3,r6,r3
4102ff80:	40cb883a 	add	r5,r8,r3
4102ff84:	d8c00617 	ldw	r3,24(sp)
4102ff88:	3889883a 	add	r4,r7,r2
4102ff8c:	d8800b17 	ldw	r2,44(sp)
4102ff90:	18c00104 	addi	r3,r3,4
4102ff94:	21cd803a 	cmpltu	r6,r4,r7
4102ff98:	10c7883a 	add	r3,r2,r3
4102ff9c:	2013883a 	mov	r9,r4
4102ffa0:	d8800a17 	ldw	r2,40(sp)
4102ffa4:	d9000517 	ldw	r4,20(sp)
4102ffa8:	314d883a 	add	r6,r6,r5
4102ffac:	3015883a 	mov	r10,r6
4102ffb0:	2088c03a 	cmpne	r4,r4,r2
4102ffb4:	00880034 	movhi	r2,8192
4102ffb8:	10bfffc4 	addi	r2,r2,-1
4102ffbc:	d9000f15 	stw	r4,60(sp)
4102ffc0:	d8c01015 	stw	r3,64(sp)
4102ffc4:	1180162e 	bgeu	r2,r6,41030020 <__muldf3+0x29c>
4102ffc8:	1811883a 	mov	r8,r3
4102ffcc:	1023883a 	mov	r17,r2
4102ffd0:	800497fa 	slli	r2,r16,31
4102ffd4:	7816d07a 	srli	r11,r15,1
4102ffd8:	500697fa 	slli	r3,r10,31
4102ffdc:	480cd07a 	srli	r6,r9,1
4102ffe0:	500ed07a 	srli	r7,r10,1
4102ffe4:	12d6b03a 	or	r11,r2,r11
4102ffe8:	00800044 	movi	r2,1
4102ffec:	198cb03a 	or	r6,r3,r6
4102fff0:	4888703a 	and	r4,r9,r2
4102fff4:	8018d07a 	srli	r12,r16,1
4102fff8:	001b883a 	mov	r13,zero
4102fffc:	03a00034 	movhi	r14,32768
41030000:	3013883a 	mov	r9,r6
41030004:	3815883a 	mov	r10,r7
41030008:	4091883a 	add	r8,r8,r2
4103000c:	20000226 	beq	r4,zero,41030018 <__muldf3+0x294>
41030010:	5b5eb03a 	or	r15,r11,r13
41030014:	63a0b03a 	or	r16,r12,r14
41030018:	8abfed36 	bltu	r17,r10,4102ffd0 <__muldf3+0x24c>
4103001c:	da001015 	stw	r8,64(sp)
41030020:	00840034 	movhi	r2,4096
41030024:	10bfffc4 	addi	r2,r2,-1
41030028:	12801436 	bltu	r2,r10,4103007c <__muldf3+0x2f8>
4103002c:	da001017 	ldw	r8,64(sp)
41030030:	1023883a 	mov	r17,r2
41030034:	4a45883a 	add	r2,r9,r9
41030038:	124d803a 	cmpltu	r6,r2,r9
4103003c:	5287883a 	add	r3,r10,r10
41030040:	7bd7883a 	add	r11,r15,r15
41030044:	5bcf803a 	cmpltu	r7,r11,r15
41030048:	8419883a 	add	r12,r16,r16
4103004c:	01000044 	movi	r4,1
41030050:	30cd883a 	add	r6,r6,r3
41030054:	3b0f883a 	add	r7,r7,r12
41030058:	423fffc4 	addi	r8,r8,-1
4103005c:	1013883a 	mov	r9,r2
41030060:	3015883a 	mov	r10,r6
41030064:	111ab03a 	or	r13,r2,r4
41030068:	80002a16 	blt	r16,zero,41030114 <__muldf3+0x390>
4103006c:	581f883a 	mov	r15,r11
41030070:	3821883a 	mov	r16,r7
41030074:	8abfef2e 	bgeu	r17,r10,41030034 <__muldf3+0x2b0>
41030078:	da001015 	stw	r8,64(sp)
4103007c:	00803fc4 	movi	r2,255
41030080:	488e703a 	and	r7,r9,r2
41030084:	00802004 	movi	r2,128
41030088:	0007883a 	mov	r3,zero
4103008c:	0011883a 	mov	r8,zero
41030090:	38801226 	beq	r7,r2,410300dc <__muldf3+0x358>
41030094:	008000c4 	movi	r2,3
41030098:	d9000e04 	addi	r4,sp,56
4103009c:	da801215 	stw	r10,72(sp)
410300a0:	d8800e15 	stw	r2,56(sp)
410300a4:	da401115 	stw	r9,68(sp)
410300a8:	003f6606 	br	4102fe44 <__muldf3+0xc0>
410300ac:	89c01b26 	beq	r17,r7,4103011c <__muldf3+0x398>
410300b0:	000f883a 	mov	r7,zero
410300b4:	0011883a 	mov	r8,zero
410300b8:	003f9606 	br	4102ff14 <__muldf3+0x190>
410300bc:	153f9f2e 	bgeu	r2,r20,4102ff3c <__muldf3+0x1b8>
410300c0:	00800044 	movi	r2,1
410300c4:	3889883a 	add	r4,r7,r2
410300c8:	21cd803a 	cmpltu	r6,r4,r7
410300cc:	320d883a 	add	r6,r6,r8
410300d0:	200f883a 	mov	r7,r4
410300d4:	3011883a 	mov	r8,r6
410300d8:	003f9806 	br	4102ff3c <__muldf3+0x1b8>
410300dc:	403fed1e 	bne	r8,zero,41030094 <__muldf3+0x310>
410300e0:	01004004 	movi	r4,256
410300e4:	4904703a 	and	r2,r9,r4
410300e8:	10c4b03a 	or	r2,r2,r3
410300ec:	103fe91e 	bne	r2,zero,41030094 <__muldf3+0x310>
410300f0:	7c04b03a 	or	r2,r15,r16
410300f4:	103fe726 	beq	r2,zero,41030094 <__muldf3+0x310>
410300f8:	49c5883a 	add	r2,r9,r7
410300fc:	1251803a 	cmpltu	r8,r2,r9
41030100:	4291883a 	add	r8,r8,r10
41030104:	013fc004 	movi	r4,-256
41030108:	1112703a 	and	r9,r2,r4
4103010c:	4015883a 	mov	r10,r8
41030110:	003fe006 	br	41030094 <__muldf3+0x310>
41030114:	6813883a 	mov	r9,r13
41030118:	003fd406 	br	4103006c <__muldf3+0x2e8>
4103011c:	543f7b36 	bltu	r10,r16,4102ff0c <__muldf3+0x188>
41030120:	003fe306 	br	410300b0 <__muldf3+0x32c>
41030124:	00800084 	movi	r2,2
41030128:	20bf391e 	bne	r4,r2,4102fe10 <__muldf3+0x8c>
4103012c:	01000034 	movhi	r4,0
41030130:	2103f604 	addi	r4,r4,4056
41030134:	003f4306 	br	4102fe44 <__muldf3+0xc0>

41030138 <__divdf3>:
41030138:	deffed04 	addi	sp,sp,-76
4103013c:	dcc01115 	stw	r19,68(sp)
41030140:	dcc00404 	addi	r19,sp,16
41030144:	2011883a 	mov	r8,r4
41030148:	2813883a 	mov	r9,r5
4103014c:	dc000e15 	stw	r16,56(sp)
41030150:	d809883a 	mov	r4,sp
41030154:	980b883a 	mov	r5,r19
41030158:	dc000904 	addi	r16,sp,36
4103015c:	dfc01215 	stw	ra,72(sp)
41030160:	da400115 	stw	r9,4(sp)
41030164:	d9c00315 	stw	r7,12(sp)
41030168:	da000015 	stw	r8,0(sp)
4103016c:	d9800215 	stw	r6,8(sp)
41030170:	dc801015 	stw	r18,64(sp)
41030174:	dc400f15 	stw	r17,60(sp)
41030178:	1030fc80 	call	41030fc8 <__unpack_d>
4103017c:	d9000204 	addi	r4,sp,8
41030180:	800b883a 	mov	r5,r16
41030184:	1030fc80 	call	41030fc8 <__unpack_d>
41030188:	d9000417 	ldw	r4,16(sp)
4103018c:	00800044 	movi	r2,1
41030190:	11000b2e 	bgeu	r2,r4,410301c0 <__divdf3+0x88>
41030194:	d9400917 	ldw	r5,36(sp)
41030198:	1140762e 	bgeu	r2,r5,41030374 <__divdf3+0x23c>
4103019c:	d8800517 	ldw	r2,20(sp)
410301a0:	d8c00a17 	ldw	r3,40(sp)
410301a4:	01800104 	movi	r6,4
410301a8:	10c4f03a 	xor	r2,r2,r3
410301ac:	d8800515 	stw	r2,20(sp)
410301b0:	21800226 	beq	r4,r6,410301bc <__divdf3+0x84>
410301b4:	00800084 	movi	r2,2
410301b8:	2080141e 	bne	r4,r2,4103020c <__divdf3+0xd4>
410301bc:	29000926 	beq	r5,r4,410301e4 <__divdf3+0xac>
410301c0:	9809883a 	mov	r4,r19
410301c4:	1030cb40 	call	41030cb4 <__pack_d>
410301c8:	dfc01217 	ldw	ra,72(sp)
410301cc:	dcc01117 	ldw	r19,68(sp)
410301d0:	dc801017 	ldw	r18,64(sp)
410301d4:	dc400f17 	ldw	r17,60(sp)
410301d8:	dc000e17 	ldw	r16,56(sp)
410301dc:	dec01304 	addi	sp,sp,76
410301e0:	f800283a 	ret
410301e4:	01000034 	movhi	r4,0
410301e8:	2103f604 	addi	r4,r4,4056
410301ec:	1030cb40 	call	41030cb4 <__pack_d>
410301f0:	dfc01217 	ldw	ra,72(sp)
410301f4:	dcc01117 	ldw	r19,68(sp)
410301f8:	dc801017 	ldw	r18,64(sp)
410301fc:	dc400f17 	ldw	r17,60(sp)
41030200:	dc000e17 	ldw	r16,56(sp)
41030204:	dec01304 	addi	sp,sp,76
41030208:	f800283a 	ret
4103020c:	29805b26 	beq	r5,r6,4103037c <__divdf3+0x244>
41030210:	28802d26 	beq	r5,r2,410302c8 <__divdf3+0x190>
41030214:	d8c00617 	ldw	r3,24(sp)
41030218:	d8800b17 	ldw	r2,44(sp)
4103021c:	d9c00817 	ldw	r7,32(sp)
41030220:	dc400d17 	ldw	r17,52(sp)
41030224:	188bc83a 	sub	r5,r3,r2
41030228:	d9800717 	ldw	r6,28(sp)
4103022c:	dc000c17 	ldw	r16,48(sp)
41030230:	d9400615 	stw	r5,24(sp)
41030234:	3c403836 	bltu	r7,r17,41030318 <__divdf3+0x1e0>
41030238:	89c03626 	beq	r17,r7,41030314 <__divdf3+0x1dc>
4103023c:	0015883a 	mov	r10,zero
41030240:	001d883a 	mov	r14,zero
41030244:	02c40034 	movhi	r11,4096
41030248:	001f883a 	mov	r15,zero
4103024c:	003f883a 	mov	ra,zero
41030250:	04800f44 	movi	r18,61
41030254:	00000f06 	br	41030294 <__divdf3+0x15c>
41030258:	601d883a 	mov	r14,r12
4103025c:	681f883a 	mov	r15,r13
41030260:	400d883a 	mov	r6,r8
41030264:	100f883a 	mov	r7,r2
41030268:	3191883a 	add	r8,r6,r6
4103026c:	5808d07a 	srli	r4,r11,1
41030270:	4185803a 	cmpltu	r2,r8,r6
41030274:	39d3883a 	add	r9,r7,r7
41030278:	28c6b03a 	or	r3,r5,r3
4103027c:	1245883a 	add	r2,r2,r9
41030280:	1815883a 	mov	r10,r3
41030284:	2017883a 	mov	r11,r4
41030288:	400d883a 	mov	r6,r8
4103028c:	100f883a 	mov	r7,r2
41030290:	fc801726 	beq	ra,r18,410302f0 <__divdf3+0x1b8>
41030294:	580a97fa 	slli	r5,r11,31
41030298:	5006d07a 	srli	r3,r10,1
4103029c:	ffc00044 	addi	ra,ra,1
410302a0:	3c7ff136 	bltu	r7,r17,41030268 <__divdf3+0x130>
410302a4:	3411c83a 	sub	r8,r6,r16
410302a8:	3205803a 	cmpltu	r2,r6,r8
410302ac:	3c53c83a 	sub	r9,r7,r17
410302b0:	7298b03a 	or	r12,r14,r10
410302b4:	7adab03a 	or	r13,r15,r11
410302b8:	4885c83a 	sub	r2,r9,r2
410302bc:	89ffe61e 	bne	r17,r7,41030258 <__divdf3+0x120>
410302c0:	343fe936 	bltu	r6,r16,41030268 <__divdf3+0x130>
410302c4:	003fe406 	br	41030258 <__divdf3+0x120>
410302c8:	9809883a 	mov	r4,r19
410302cc:	d9800415 	stw	r6,16(sp)
410302d0:	1030cb40 	call	41030cb4 <__pack_d>
410302d4:	dfc01217 	ldw	ra,72(sp)
410302d8:	dcc01117 	ldw	r19,68(sp)
410302dc:	dc801017 	ldw	r18,64(sp)
410302e0:	dc400f17 	ldw	r17,60(sp)
410302e4:	dc000e17 	ldw	r16,56(sp)
410302e8:	dec01304 	addi	sp,sp,76
410302ec:	f800283a 	ret
410302f0:	00803fc4 	movi	r2,255
410302f4:	7090703a 	and	r8,r14,r2
410302f8:	00802004 	movi	r2,128
410302fc:	0007883a 	mov	r3,zero
41030300:	0013883a 	mov	r9,zero
41030304:	40800d26 	beq	r8,r2,4103033c <__divdf3+0x204>
41030308:	dbc00815 	stw	r15,32(sp)
4103030c:	db800715 	stw	r14,28(sp)
41030310:	003fab06 	br	410301c0 <__divdf3+0x88>
41030314:	343fc92e 	bgeu	r6,r16,4103023c <__divdf3+0x104>
41030318:	3185883a 	add	r2,r6,r6
4103031c:	1189803a 	cmpltu	r4,r2,r6
41030320:	39c7883a 	add	r3,r7,r7
41030324:	20c9883a 	add	r4,r4,r3
41030328:	297fffc4 	addi	r5,r5,-1
4103032c:	100d883a 	mov	r6,r2
41030330:	200f883a 	mov	r7,r4
41030334:	d9400615 	stw	r5,24(sp)
41030338:	003fc006 	br	4103023c <__divdf3+0x104>
4103033c:	483ff21e 	bne	r9,zero,41030308 <__divdf3+0x1d0>
41030340:	01004004 	movi	r4,256
41030344:	7104703a 	and	r2,r14,r4
41030348:	10c4b03a 	or	r2,r2,r3
4103034c:	103fee1e 	bne	r2,zero,41030308 <__divdf3+0x1d0>
41030350:	31c4b03a 	or	r2,r6,r7
41030354:	103fec26 	beq	r2,zero,41030308 <__divdf3+0x1d0>
41030358:	7205883a 	add	r2,r14,r8
4103035c:	1391803a 	cmpltu	r8,r2,r14
41030360:	43d1883a 	add	r8,r8,r15
41030364:	013fc004 	movi	r4,-256
41030368:	111c703a 	and	r14,r2,r4
4103036c:	401f883a 	mov	r15,r8
41030370:	003fe506 	br	41030308 <__divdf3+0x1d0>
41030374:	8009883a 	mov	r4,r16
41030378:	003f9206 	br	410301c4 <__divdf3+0x8c>
4103037c:	9809883a 	mov	r4,r19
41030380:	d8000715 	stw	zero,28(sp)
41030384:	d8000815 	stw	zero,32(sp)
41030388:	d8000615 	stw	zero,24(sp)
4103038c:	003f8d06 	br	410301c4 <__divdf3+0x8c>

41030390 <__eqdf2>:
41030390:	deffef04 	addi	sp,sp,-68
41030394:	dc400f15 	stw	r17,60(sp)
41030398:	dc400404 	addi	r17,sp,16
4103039c:	2005883a 	mov	r2,r4
410303a0:	2807883a 	mov	r3,r5
410303a4:	dc000e15 	stw	r16,56(sp)
410303a8:	d809883a 	mov	r4,sp
410303ac:	880b883a 	mov	r5,r17
410303b0:	dc000904 	addi	r16,sp,36
410303b4:	d8c00115 	stw	r3,4(sp)
410303b8:	d8800015 	stw	r2,0(sp)
410303bc:	d9800215 	stw	r6,8(sp)
410303c0:	dfc01015 	stw	ra,64(sp)
410303c4:	d9c00315 	stw	r7,12(sp)
410303c8:	1030fc80 	call	41030fc8 <__unpack_d>
410303cc:	d9000204 	addi	r4,sp,8
410303d0:	800b883a 	mov	r5,r16
410303d4:	1030fc80 	call	41030fc8 <__unpack_d>
410303d8:	d8800417 	ldw	r2,16(sp)
410303dc:	00c00044 	movi	r3,1
410303e0:	180d883a 	mov	r6,r3
410303e4:	1880062e 	bgeu	r3,r2,41030400 <__eqdf2+0x70>
410303e8:	d8800917 	ldw	r2,36(sp)
410303ec:	8809883a 	mov	r4,r17
410303f0:	800b883a 	mov	r5,r16
410303f4:	1880022e 	bgeu	r3,r2,41030400 <__eqdf2+0x70>
410303f8:	10311000 	call	41031100 <__fpcmp_parts_d>
410303fc:	100d883a 	mov	r6,r2
41030400:	3005883a 	mov	r2,r6
41030404:	dfc01017 	ldw	ra,64(sp)
41030408:	dc400f17 	ldw	r17,60(sp)
4103040c:	dc000e17 	ldw	r16,56(sp)
41030410:	dec01104 	addi	sp,sp,68
41030414:	f800283a 	ret

41030418 <__nedf2>:
41030418:	deffef04 	addi	sp,sp,-68
4103041c:	dc400f15 	stw	r17,60(sp)
41030420:	dc400404 	addi	r17,sp,16
41030424:	2005883a 	mov	r2,r4
41030428:	2807883a 	mov	r3,r5
4103042c:	dc000e15 	stw	r16,56(sp)
41030430:	d809883a 	mov	r4,sp
41030434:	880b883a 	mov	r5,r17
41030438:	dc000904 	addi	r16,sp,36
4103043c:	d8c00115 	stw	r3,4(sp)
41030440:	d8800015 	stw	r2,0(sp)
41030444:	d9800215 	stw	r6,8(sp)
41030448:	dfc01015 	stw	ra,64(sp)
4103044c:	d9c00315 	stw	r7,12(sp)
41030450:	1030fc80 	call	41030fc8 <__unpack_d>
41030454:	d9000204 	addi	r4,sp,8
41030458:	800b883a 	mov	r5,r16
4103045c:	1030fc80 	call	41030fc8 <__unpack_d>
41030460:	d8800417 	ldw	r2,16(sp)
41030464:	00c00044 	movi	r3,1
41030468:	180d883a 	mov	r6,r3
4103046c:	1880062e 	bgeu	r3,r2,41030488 <__nedf2+0x70>
41030470:	d8800917 	ldw	r2,36(sp)
41030474:	8809883a 	mov	r4,r17
41030478:	800b883a 	mov	r5,r16
4103047c:	1880022e 	bgeu	r3,r2,41030488 <__nedf2+0x70>
41030480:	10311000 	call	41031100 <__fpcmp_parts_d>
41030484:	100d883a 	mov	r6,r2
41030488:	3005883a 	mov	r2,r6
4103048c:	dfc01017 	ldw	ra,64(sp)
41030490:	dc400f17 	ldw	r17,60(sp)
41030494:	dc000e17 	ldw	r16,56(sp)
41030498:	dec01104 	addi	sp,sp,68
4103049c:	f800283a 	ret

410304a0 <__gtdf2>:
410304a0:	deffef04 	addi	sp,sp,-68
410304a4:	dc400f15 	stw	r17,60(sp)
410304a8:	dc400404 	addi	r17,sp,16
410304ac:	2005883a 	mov	r2,r4
410304b0:	2807883a 	mov	r3,r5
410304b4:	dc000e15 	stw	r16,56(sp)
410304b8:	d809883a 	mov	r4,sp
410304bc:	880b883a 	mov	r5,r17
410304c0:	dc000904 	addi	r16,sp,36
410304c4:	d8c00115 	stw	r3,4(sp)
410304c8:	d8800015 	stw	r2,0(sp)
410304cc:	d9800215 	stw	r6,8(sp)
410304d0:	dfc01015 	stw	ra,64(sp)
410304d4:	d9c00315 	stw	r7,12(sp)
410304d8:	1030fc80 	call	41030fc8 <__unpack_d>
410304dc:	d9000204 	addi	r4,sp,8
410304e0:	800b883a 	mov	r5,r16
410304e4:	1030fc80 	call	41030fc8 <__unpack_d>
410304e8:	d8800417 	ldw	r2,16(sp)
410304ec:	00c00044 	movi	r3,1
410304f0:	01bfffc4 	movi	r6,-1
410304f4:	1880062e 	bgeu	r3,r2,41030510 <__gtdf2+0x70>
410304f8:	d8800917 	ldw	r2,36(sp)
410304fc:	8809883a 	mov	r4,r17
41030500:	800b883a 	mov	r5,r16
41030504:	1880022e 	bgeu	r3,r2,41030510 <__gtdf2+0x70>
41030508:	10311000 	call	41031100 <__fpcmp_parts_d>
4103050c:	100d883a 	mov	r6,r2
41030510:	3005883a 	mov	r2,r6
41030514:	dfc01017 	ldw	ra,64(sp)
41030518:	dc400f17 	ldw	r17,60(sp)
4103051c:	dc000e17 	ldw	r16,56(sp)
41030520:	dec01104 	addi	sp,sp,68
41030524:	f800283a 	ret

41030528 <__gedf2>:
41030528:	deffef04 	addi	sp,sp,-68
4103052c:	dc400f15 	stw	r17,60(sp)
41030530:	dc400404 	addi	r17,sp,16
41030534:	2005883a 	mov	r2,r4
41030538:	2807883a 	mov	r3,r5
4103053c:	dc000e15 	stw	r16,56(sp)
41030540:	d809883a 	mov	r4,sp
41030544:	880b883a 	mov	r5,r17
41030548:	dc000904 	addi	r16,sp,36
4103054c:	d8c00115 	stw	r3,4(sp)
41030550:	d8800015 	stw	r2,0(sp)
41030554:	d9800215 	stw	r6,8(sp)
41030558:	dfc01015 	stw	ra,64(sp)
4103055c:	d9c00315 	stw	r7,12(sp)
41030560:	1030fc80 	call	41030fc8 <__unpack_d>
41030564:	d9000204 	addi	r4,sp,8
41030568:	800b883a 	mov	r5,r16
4103056c:	1030fc80 	call	41030fc8 <__unpack_d>
41030570:	d8800417 	ldw	r2,16(sp)
41030574:	00c00044 	movi	r3,1
41030578:	01bfffc4 	movi	r6,-1
4103057c:	1880062e 	bgeu	r3,r2,41030598 <__gedf2+0x70>
41030580:	d8800917 	ldw	r2,36(sp)
41030584:	8809883a 	mov	r4,r17
41030588:	800b883a 	mov	r5,r16
4103058c:	1880022e 	bgeu	r3,r2,41030598 <__gedf2+0x70>
41030590:	10311000 	call	41031100 <__fpcmp_parts_d>
41030594:	100d883a 	mov	r6,r2
41030598:	3005883a 	mov	r2,r6
4103059c:	dfc01017 	ldw	ra,64(sp)
410305a0:	dc400f17 	ldw	r17,60(sp)
410305a4:	dc000e17 	ldw	r16,56(sp)
410305a8:	dec01104 	addi	sp,sp,68
410305ac:	f800283a 	ret

410305b0 <__ltdf2>:
410305b0:	deffef04 	addi	sp,sp,-68
410305b4:	dc400f15 	stw	r17,60(sp)
410305b8:	dc400404 	addi	r17,sp,16
410305bc:	2005883a 	mov	r2,r4
410305c0:	2807883a 	mov	r3,r5
410305c4:	dc000e15 	stw	r16,56(sp)
410305c8:	d809883a 	mov	r4,sp
410305cc:	880b883a 	mov	r5,r17
410305d0:	dc000904 	addi	r16,sp,36
410305d4:	d8c00115 	stw	r3,4(sp)
410305d8:	d8800015 	stw	r2,0(sp)
410305dc:	d9800215 	stw	r6,8(sp)
410305e0:	dfc01015 	stw	ra,64(sp)
410305e4:	d9c00315 	stw	r7,12(sp)
410305e8:	1030fc80 	call	41030fc8 <__unpack_d>
410305ec:	d9000204 	addi	r4,sp,8
410305f0:	800b883a 	mov	r5,r16
410305f4:	1030fc80 	call	41030fc8 <__unpack_d>
410305f8:	d8800417 	ldw	r2,16(sp)
410305fc:	00c00044 	movi	r3,1
41030600:	180d883a 	mov	r6,r3
41030604:	1880062e 	bgeu	r3,r2,41030620 <__ltdf2+0x70>
41030608:	d8800917 	ldw	r2,36(sp)
4103060c:	8809883a 	mov	r4,r17
41030610:	800b883a 	mov	r5,r16
41030614:	1880022e 	bgeu	r3,r2,41030620 <__ltdf2+0x70>
41030618:	10311000 	call	41031100 <__fpcmp_parts_d>
4103061c:	100d883a 	mov	r6,r2
41030620:	3005883a 	mov	r2,r6
41030624:	dfc01017 	ldw	ra,64(sp)
41030628:	dc400f17 	ldw	r17,60(sp)
4103062c:	dc000e17 	ldw	r16,56(sp)
41030630:	dec01104 	addi	sp,sp,68
41030634:	f800283a 	ret

41030638 <__ledf2>:
41030638:	deffef04 	addi	sp,sp,-68
4103063c:	dc400f15 	stw	r17,60(sp)
41030640:	dc400404 	addi	r17,sp,16
41030644:	2005883a 	mov	r2,r4
41030648:	2807883a 	mov	r3,r5
4103064c:	dc000e15 	stw	r16,56(sp)
41030650:	d809883a 	mov	r4,sp
41030654:	880b883a 	mov	r5,r17
41030658:	dc000904 	addi	r16,sp,36
4103065c:	d8c00115 	stw	r3,4(sp)
41030660:	d8800015 	stw	r2,0(sp)
41030664:	d9800215 	stw	r6,8(sp)
41030668:	dfc01015 	stw	ra,64(sp)
4103066c:	d9c00315 	stw	r7,12(sp)
41030670:	1030fc80 	call	41030fc8 <__unpack_d>
41030674:	d9000204 	addi	r4,sp,8
41030678:	800b883a 	mov	r5,r16
4103067c:	1030fc80 	call	41030fc8 <__unpack_d>
41030680:	d8800417 	ldw	r2,16(sp)
41030684:	00c00044 	movi	r3,1
41030688:	180d883a 	mov	r6,r3
4103068c:	1880062e 	bgeu	r3,r2,410306a8 <__ledf2+0x70>
41030690:	d8800917 	ldw	r2,36(sp)
41030694:	8809883a 	mov	r4,r17
41030698:	800b883a 	mov	r5,r16
4103069c:	1880022e 	bgeu	r3,r2,410306a8 <__ledf2+0x70>
410306a0:	10311000 	call	41031100 <__fpcmp_parts_d>
410306a4:	100d883a 	mov	r6,r2
410306a8:	3005883a 	mov	r2,r6
410306ac:	dfc01017 	ldw	ra,64(sp)
410306b0:	dc400f17 	ldw	r17,60(sp)
410306b4:	dc000e17 	ldw	r16,56(sp)
410306b8:	dec01104 	addi	sp,sp,68
410306bc:	f800283a 	ret

410306c0 <__floatsidf>:
410306c0:	2006d7fa 	srli	r3,r4,31
410306c4:	defff604 	addi	sp,sp,-40
410306c8:	008000c4 	movi	r2,3
410306cc:	dfc00915 	stw	ra,36(sp)
410306d0:	dcc00815 	stw	r19,32(sp)
410306d4:	dc800715 	stw	r18,28(sp)
410306d8:	dc400615 	stw	r17,24(sp)
410306dc:	dc000515 	stw	r16,20(sp)
410306e0:	d8800015 	stw	r2,0(sp)
410306e4:	d8c00115 	stw	r3,4(sp)
410306e8:	20000f1e 	bne	r4,zero,41030728 <__floatsidf+0x68>
410306ec:	00800084 	movi	r2,2
410306f0:	d8800015 	stw	r2,0(sp)
410306f4:	d809883a 	mov	r4,sp
410306f8:	1030cb40 	call	41030cb4 <__pack_d>
410306fc:	1009883a 	mov	r4,r2
41030700:	180b883a 	mov	r5,r3
41030704:	2005883a 	mov	r2,r4
41030708:	2807883a 	mov	r3,r5
4103070c:	dfc00917 	ldw	ra,36(sp)
41030710:	dcc00817 	ldw	r19,32(sp)
41030714:	dc800717 	ldw	r18,28(sp)
41030718:	dc400617 	ldw	r17,24(sp)
4103071c:	dc000517 	ldw	r16,20(sp)
41030720:	dec00a04 	addi	sp,sp,40
41030724:	f800283a 	ret
41030728:	00800f04 	movi	r2,60
4103072c:	1807003a 	cmpeq	r3,r3,zero
41030730:	d8800215 	stw	r2,8(sp)
41030734:	18001126 	beq	r3,zero,4103077c <__floatsidf+0xbc>
41030738:	0027883a 	mov	r19,zero
4103073c:	2025883a 	mov	r18,r4
41030740:	d9000315 	stw	r4,12(sp)
41030744:	dcc00415 	stw	r19,16(sp)
41030748:	1030a980 	call	41030a98 <__clzsi2>
4103074c:	11000744 	addi	r4,r2,29
41030750:	013fe80e 	bge	zero,r4,410306f4 <__floatsidf+0x34>
41030754:	10bfff44 	addi	r2,r2,-3
41030758:	10000c16 	blt	r2,zero,4103078c <__floatsidf+0xcc>
4103075c:	90a2983a 	sll	r17,r18,r2
41030760:	0021883a 	mov	r16,zero
41030764:	d8800217 	ldw	r2,8(sp)
41030768:	dc400415 	stw	r17,16(sp)
4103076c:	dc000315 	stw	r16,12(sp)
41030770:	1105c83a 	sub	r2,r2,r4
41030774:	d8800215 	stw	r2,8(sp)
41030778:	003fde06 	br	410306f4 <__floatsidf+0x34>
4103077c:	00a00034 	movhi	r2,32768
41030780:	20800a26 	beq	r4,r2,410307ac <__floatsidf+0xec>
41030784:	0109c83a 	sub	r4,zero,r4
41030788:	003feb06 	br	41030738 <__floatsidf+0x78>
4103078c:	9006d07a 	srli	r3,r18,1
41030790:	008007c4 	movi	r2,31
41030794:	1105c83a 	sub	r2,r2,r4
41030798:	1886d83a 	srl	r3,r3,r2
4103079c:	9922983a 	sll	r17,r19,r4
410307a0:	9120983a 	sll	r16,r18,r4
410307a4:	1c62b03a 	or	r17,r3,r17
410307a8:	003fee06 	br	41030764 <__floatsidf+0xa4>
410307ac:	0009883a 	mov	r4,zero
410307b0:	01707834 	movhi	r5,49632
410307b4:	003fd306 	br	41030704 <__floatsidf+0x44>

410307b8 <__fixdfsi>:
410307b8:	defff804 	addi	sp,sp,-32
410307bc:	2005883a 	mov	r2,r4
410307c0:	2807883a 	mov	r3,r5
410307c4:	d809883a 	mov	r4,sp
410307c8:	d9400204 	addi	r5,sp,8
410307cc:	d8c00115 	stw	r3,4(sp)
410307d0:	d8800015 	stw	r2,0(sp)
410307d4:	dfc00715 	stw	ra,28(sp)
410307d8:	1030fc80 	call	41030fc8 <__unpack_d>
410307dc:	d8c00217 	ldw	r3,8(sp)
410307e0:	00800084 	movi	r2,2
410307e4:	1880051e 	bne	r3,r2,410307fc <__fixdfsi+0x44>
410307e8:	0007883a 	mov	r3,zero
410307ec:	1805883a 	mov	r2,r3
410307f0:	dfc00717 	ldw	ra,28(sp)
410307f4:	dec00804 	addi	sp,sp,32
410307f8:	f800283a 	ret
410307fc:	00800044 	movi	r2,1
41030800:	10fff92e 	bgeu	r2,r3,410307e8 <__fixdfsi+0x30>
41030804:	00800104 	movi	r2,4
41030808:	18800426 	beq	r3,r2,4103081c <__fixdfsi+0x64>
4103080c:	d8c00417 	ldw	r3,16(sp)
41030810:	183ff516 	blt	r3,zero,410307e8 <__fixdfsi+0x30>
41030814:	00800784 	movi	r2,30
41030818:	10c0080e 	bge	r2,r3,4103083c <__fixdfsi+0x84>
4103081c:	d8800317 	ldw	r2,12(sp)
41030820:	1000121e 	bne	r2,zero,4103086c <__fixdfsi+0xb4>
41030824:	00e00034 	movhi	r3,32768
41030828:	18ffffc4 	addi	r3,r3,-1
4103082c:	1805883a 	mov	r2,r3
41030830:	dfc00717 	ldw	ra,28(sp)
41030834:	dec00804 	addi	sp,sp,32
41030838:	f800283a 	ret
4103083c:	00800f04 	movi	r2,60
41030840:	10d1c83a 	sub	r8,r2,r3
41030844:	40bff804 	addi	r2,r8,-32
41030848:	d9800517 	ldw	r6,20(sp)
4103084c:	d9c00617 	ldw	r7,24(sp)
41030850:	10000816 	blt	r2,zero,41030874 <__fixdfsi+0xbc>
41030854:	3888d83a 	srl	r4,r7,r2
41030858:	d8800317 	ldw	r2,12(sp)
4103085c:	2007883a 	mov	r3,r4
41030860:	103fe226 	beq	r2,zero,410307ec <__fixdfsi+0x34>
41030864:	0107c83a 	sub	r3,zero,r4
41030868:	003fe006 	br	410307ec <__fixdfsi+0x34>
4103086c:	00e00034 	movhi	r3,32768
41030870:	003fde06 	br	410307ec <__fixdfsi+0x34>
41030874:	39c7883a 	add	r3,r7,r7
41030878:	008007c4 	movi	r2,31
4103087c:	1205c83a 	sub	r2,r2,r8
41030880:	1886983a 	sll	r3,r3,r2
41030884:	3208d83a 	srl	r4,r6,r8
41030888:	1908b03a 	or	r4,r3,r4
4103088c:	003ff206 	br	41030858 <__fixdfsi+0xa0>

41030890 <__truncdfsf2>:
41030890:	defff804 	addi	sp,sp,-32
41030894:	2005883a 	mov	r2,r4
41030898:	2807883a 	mov	r3,r5
4103089c:	d809883a 	mov	r4,sp
410308a0:	d9400204 	addi	r5,sp,8
410308a4:	d8c00115 	stw	r3,4(sp)
410308a8:	d8800015 	stw	r2,0(sp)
410308ac:	dfc00715 	stw	ra,28(sp)
410308b0:	1030fc80 	call	41030fc8 <__unpack_d>
410308b4:	d9c00517 	ldw	r7,20(sp)
410308b8:	da000617 	ldw	r8,24(sp)
410308bc:	02d00034 	movhi	r11,16384
410308c0:	5affffc4 	addi	r11,r11,-1
410308c4:	3812d7ba 	srli	r9,r7,30
410308c8:	401a90ba 	slli	r13,r8,2
410308cc:	3ac4703a 	and	r2,r7,r11
410308d0:	0007883a 	mov	r3,zero
410308d4:	6a52b03a 	or	r9,r13,r9
410308d8:	10c4b03a 	or	r2,r2,r3
410308dc:	d9000217 	ldw	r4,8(sp)
410308e0:	d9400317 	ldw	r5,12(sp)
410308e4:	d9800417 	ldw	r6,16(sp)
410308e8:	480f883a 	mov	r7,r9
410308ec:	10000126 	beq	r2,zero,410308f4 <__truncdfsf2+0x64>
410308f0:	49c00054 	ori	r7,r9,1
410308f4:	1030c880 	call	41030c88 <__make_fp>
410308f8:	dfc00717 	ldw	ra,28(sp)
410308fc:	dec00804 	addi	sp,sp,32
41030900:	f800283a 	ret

41030904 <__floatunsidf>:
41030904:	defff204 	addi	sp,sp,-56
41030908:	dfc00d15 	stw	ra,52(sp)
4103090c:	ddc00c15 	stw	r23,48(sp)
41030910:	dd800b15 	stw	r22,44(sp)
41030914:	dd400a15 	stw	r21,40(sp)
41030918:	dd000915 	stw	r20,36(sp)
4103091c:	dcc00815 	stw	r19,32(sp)
41030920:	dc800715 	stw	r18,28(sp)
41030924:	dc400615 	stw	r17,24(sp)
41030928:	dc000515 	stw	r16,20(sp)
4103092c:	d8000115 	stw	zero,4(sp)
41030930:	20000f1e 	bne	r4,zero,41030970 <__floatunsidf+0x6c>
41030934:	00800084 	movi	r2,2
41030938:	d8800015 	stw	r2,0(sp)
4103093c:	d809883a 	mov	r4,sp
41030940:	1030cb40 	call	41030cb4 <__pack_d>
41030944:	dfc00d17 	ldw	ra,52(sp)
41030948:	ddc00c17 	ldw	r23,48(sp)
4103094c:	dd800b17 	ldw	r22,44(sp)
41030950:	dd400a17 	ldw	r21,40(sp)
41030954:	dd000917 	ldw	r20,36(sp)
41030958:	dcc00817 	ldw	r19,32(sp)
4103095c:	dc800717 	ldw	r18,28(sp)
41030960:	dc400617 	ldw	r17,24(sp)
41030964:	dc000517 	ldw	r16,20(sp)
41030968:	dec00e04 	addi	sp,sp,56
4103096c:	f800283a 	ret
41030970:	008000c4 	movi	r2,3
41030974:	00c00f04 	movi	r3,60
41030978:	002f883a 	mov	r23,zero
4103097c:	202d883a 	mov	r22,r4
41030980:	d8800015 	stw	r2,0(sp)
41030984:	d8c00215 	stw	r3,8(sp)
41030988:	d9000315 	stw	r4,12(sp)
4103098c:	ddc00415 	stw	r23,16(sp)
41030990:	1030a980 	call	41030a98 <__clzsi2>
41030994:	12400744 	addi	r9,r2,29
41030998:	48000b16 	blt	r9,zero,410309c8 <__floatunsidf+0xc4>
4103099c:	483fe726 	beq	r9,zero,4103093c <__floatunsidf+0x38>
410309a0:	10bfff44 	addi	r2,r2,-3
410309a4:	10002e16 	blt	r2,zero,41030a60 <__floatunsidf+0x15c>
410309a8:	b0a2983a 	sll	r17,r22,r2
410309ac:	0021883a 	mov	r16,zero
410309b0:	d8800217 	ldw	r2,8(sp)
410309b4:	dc400415 	stw	r17,16(sp)
410309b8:	dc000315 	stw	r16,12(sp)
410309bc:	1245c83a 	sub	r2,r2,r9
410309c0:	d8800215 	stw	r2,8(sp)
410309c4:	003fdd06 	br	4103093c <__floatunsidf+0x38>
410309c8:	0255c83a 	sub	r10,zero,r9
410309cc:	51bff804 	addi	r6,r10,-32
410309d0:	30001b16 	blt	r6,zero,41030a40 <__floatunsidf+0x13c>
410309d4:	b9a8d83a 	srl	r20,r23,r6
410309d8:	002b883a 	mov	r21,zero
410309dc:	000f883a 	mov	r7,zero
410309e0:	01000044 	movi	r4,1
410309e4:	0011883a 	mov	r8,zero
410309e8:	30002516 	blt	r6,zero,41030a80 <__floatunsidf+0x17c>
410309ec:	21a6983a 	sll	r19,r4,r6
410309f0:	0025883a 	mov	r18,zero
410309f4:	00bfffc4 	movi	r2,-1
410309f8:	9089883a 	add	r4,r18,r2
410309fc:	988b883a 	add	r5,r19,r2
41030a00:	248d803a 	cmpltu	r6,r4,r18
41030a04:	314b883a 	add	r5,r6,r5
41030a08:	b104703a 	and	r2,r22,r4
41030a0c:	b946703a 	and	r3,r23,r5
41030a10:	10c4b03a 	or	r2,r2,r3
41030a14:	10000226 	beq	r2,zero,41030a20 <__floatunsidf+0x11c>
41030a18:	01c00044 	movi	r7,1
41030a1c:	0011883a 	mov	r8,zero
41030a20:	d9000217 	ldw	r4,8(sp)
41030a24:	a1c4b03a 	or	r2,r20,r7
41030a28:	aa06b03a 	or	r3,r21,r8
41030a2c:	2249c83a 	sub	r4,r4,r9
41030a30:	d8c00415 	stw	r3,16(sp)
41030a34:	d9000215 	stw	r4,8(sp)
41030a38:	d8800315 	stw	r2,12(sp)
41030a3c:	003fbf06 	br	4103093c <__floatunsidf+0x38>
41030a40:	bdc7883a 	add	r3,r23,r23
41030a44:	008007c4 	movi	r2,31
41030a48:	1285c83a 	sub	r2,r2,r10
41030a4c:	1886983a 	sll	r3,r3,r2
41030a50:	b2a8d83a 	srl	r20,r22,r10
41030a54:	baaad83a 	srl	r21,r23,r10
41030a58:	1d28b03a 	or	r20,r3,r20
41030a5c:	003fdf06 	br	410309dc <__floatunsidf+0xd8>
41030a60:	b006d07a 	srli	r3,r22,1
41030a64:	008007c4 	movi	r2,31
41030a68:	1245c83a 	sub	r2,r2,r9
41030a6c:	1886d83a 	srl	r3,r3,r2
41030a70:	ba62983a 	sll	r17,r23,r9
41030a74:	b260983a 	sll	r16,r22,r9
41030a78:	1c62b03a 	or	r17,r3,r17
41030a7c:	003fcc06 	br	410309b0 <__floatunsidf+0xac>
41030a80:	2006d07a 	srli	r3,r4,1
41030a84:	008007c4 	movi	r2,31
41030a88:	1285c83a 	sub	r2,r2,r10
41030a8c:	18a6d83a 	srl	r19,r3,r2
41030a90:	22a4983a 	sll	r18,r4,r10
41030a94:	003fd706 	br	410309f4 <__floatunsidf+0xf0>

41030a98 <__clzsi2>:
41030a98:	00bfffd4 	movui	r2,65535
41030a9c:	11000e36 	bltu	r2,r4,41030ad8 <__clzsi2+0x40>
41030aa0:	00803fc4 	movi	r2,255
41030aa4:	01400204 	movi	r5,8
41030aa8:	0007883a 	mov	r3,zero
41030aac:	11001036 	bltu	r2,r4,41030af0 <__clzsi2+0x58>
41030ab0:	000b883a 	mov	r5,zero
41030ab4:	20c6d83a 	srl	r3,r4,r3
41030ab8:	00800034 	movhi	r2,0
41030abc:	1083fb04 	addi	r2,r2,4076
41030ac0:	1887883a 	add	r3,r3,r2
41030ac4:	18800003 	ldbu	r2,0(r3)
41030ac8:	00c00804 	movi	r3,32
41030acc:	2885883a 	add	r2,r5,r2
41030ad0:	1885c83a 	sub	r2,r3,r2
41030ad4:	f800283a 	ret
41030ad8:	01400404 	movi	r5,16
41030adc:	00804034 	movhi	r2,256
41030ae0:	10bfffc4 	addi	r2,r2,-1
41030ae4:	2807883a 	mov	r3,r5
41030ae8:	113ff22e 	bgeu	r2,r4,41030ab4 <__clzsi2+0x1c>
41030aec:	01400604 	movi	r5,24
41030af0:	2807883a 	mov	r3,r5
41030af4:	20c6d83a 	srl	r3,r4,r3
41030af8:	00800034 	movhi	r2,0
41030afc:	1083fb04 	addi	r2,r2,4076
41030b00:	1887883a 	add	r3,r3,r2
41030b04:	18800003 	ldbu	r2,0(r3)
41030b08:	00c00804 	movi	r3,32
41030b0c:	2885883a 	add	r2,r5,r2
41030b10:	1885c83a 	sub	r2,r3,r2
41030b14:	f800283a 	ret

41030b18 <__unpack_f>:
41030b18:	21800017 	ldw	r6,0(r4)
41030b1c:	00c02034 	movhi	r3,128
41030b20:	18ffffc4 	addi	r3,r3,-1
41030b24:	3004d5fa 	srli	r2,r6,23
41030b28:	3008d7fa 	srli	r4,r6,31
41030b2c:	30ce703a 	and	r7,r6,r3
41030b30:	10c03fcc 	andi	r3,r2,255
41030b34:	29000115 	stw	r4,4(r5)
41030b38:	1800131e 	bne	r3,zero,41030b88 <__unpack_f+0x70>
41030b3c:	38000f26 	beq	r7,zero,41030b7c <__unpack_f+0x64>
41030b40:	380691fa 	slli	r3,r7,7
41030b44:	01bfe084 	movi	r6,-126
41030b48:	008000c4 	movi	r2,3
41030b4c:	01100034 	movhi	r4,16384
41030b50:	213fffc4 	addi	r4,r4,-1
41030b54:	28800015 	stw	r2,0(r5)
41030b58:	29800215 	stw	r6,8(r5)
41030b5c:	20c00536 	bltu	r4,r3,41030b74 <__unpack_f+0x5c>
41030b60:	3005883a 	mov	r2,r6
41030b64:	18c7883a 	add	r3,r3,r3
41030b68:	10bfffc4 	addi	r2,r2,-1
41030b6c:	20fffd2e 	bgeu	r4,r3,41030b64 <__unpack_f+0x4c>
41030b70:	28800215 	stw	r2,8(r5)
41030b74:	28c00315 	stw	r3,12(r5)
41030b78:	f800283a 	ret
41030b7c:	00800084 	movi	r2,2
41030b80:	28800015 	stw	r2,0(r5)
41030b84:	f800283a 	ret
41030b88:	00803fc4 	movi	r2,255
41030b8c:	18800826 	beq	r3,r2,41030bb0 <__unpack_f+0x98>
41030b90:	380491fa 	slli	r2,r7,7
41030b94:	18ffe044 	addi	r3,r3,-127
41030b98:	28c00215 	stw	r3,8(r5)
41030b9c:	10900034 	orhi	r2,r2,16384
41030ba0:	28800315 	stw	r2,12(r5)
41030ba4:	008000c4 	movi	r2,3
41030ba8:	28800015 	stw	r2,0(r5)
41030bac:	f800283a 	ret
41030bb0:	3800031e 	bne	r7,zero,41030bc0 <__unpack_f+0xa8>
41030bb4:	00800104 	movi	r2,4
41030bb8:	28800015 	stw	r2,0(r5)
41030bbc:	f800283a 	ret
41030bc0:	3080042c 	andhi	r2,r6,16
41030bc4:	10000426 	beq	r2,zero,41030bd8 <__unpack_f+0xc0>
41030bc8:	00800044 	movi	r2,1
41030bcc:	28800015 	stw	r2,0(r5)
41030bd0:	29c00315 	stw	r7,12(r5)
41030bd4:	f800283a 	ret
41030bd8:	28000015 	stw	zero,0(r5)
41030bdc:	003ffc06 	br	41030bd0 <__unpack_f+0xb8>

41030be0 <__fpcmp_parts_f>:
41030be0:	21800017 	ldw	r6,0(r4)
41030be4:	00c00044 	movi	r3,1
41030be8:	19800a2e 	bgeu	r3,r6,41030c14 <__fpcmp_parts_f+0x34>
41030bec:	28800017 	ldw	r2,0(r5)
41030bf0:	1880082e 	bgeu	r3,r2,41030c14 <__fpcmp_parts_f+0x34>
41030bf4:	00c00104 	movi	r3,4
41030bf8:	30c01e26 	beq	r6,r3,41030c74 <__fpcmp_parts_f+0x94>
41030bfc:	10c01a26 	beq	r2,r3,41030c68 <__fpcmp_parts_f+0x88>
41030c00:	00c00084 	movi	r3,2
41030c04:	30c00526 	beq	r6,r3,41030c1c <__fpcmp_parts_f+0x3c>
41030c08:	10c0071e 	bne	r2,r3,41030c28 <__fpcmp_parts_f+0x48>
41030c0c:	20800117 	ldw	r2,4(r4)
41030c10:	1000091e 	bne	r2,zero,41030c38 <__fpcmp_parts_f+0x58>
41030c14:	00800044 	movi	r2,1
41030c18:	f800283a 	ret
41030c1c:	10c0121e 	bne	r2,r3,41030c68 <__fpcmp_parts_f+0x88>
41030c20:	0005883a 	mov	r2,zero
41030c24:	f800283a 	ret
41030c28:	20c00117 	ldw	r3,4(r4)
41030c2c:	28800117 	ldw	r2,4(r5)
41030c30:	18800326 	beq	r3,r2,41030c40 <__fpcmp_parts_f+0x60>
41030c34:	183ff726 	beq	r3,zero,41030c14 <__fpcmp_parts_f+0x34>
41030c38:	00bfffc4 	movi	r2,-1
41030c3c:	f800283a 	ret
41030c40:	21800217 	ldw	r6,8(r4)
41030c44:	28800217 	ldw	r2,8(r5)
41030c48:	11bffa16 	blt	r2,r6,41030c34 <__fpcmp_parts_f+0x54>
41030c4c:	30800416 	blt	r6,r2,41030c60 <__fpcmp_parts_f+0x80>
41030c50:	21000317 	ldw	r4,12(r4)
41030c54:	29400317 	ldw	r5,12(r5)
41030c58:	293ff636 	bltu	r5,r4,41030c34 <__fpcmp_parts_f+0x54>
41030c5c:	217ff02e 	bgeu	r4,r5,41030c20 <__fpcmp_parts_f+0x40>
41030c60:	183fec1e 	bne	r3,zero,41030c14 <__fpcmp_parts_f+0x34>
41030c64:	003ff406 	br	41030c38 <__fpcmp_parts_f+0x58>
41030c68:	28800117 	ldw	r2,4(r5)
41030c6c:	103fe91e 	bne	r2,zero,41030c14 <__fpcmp_parts_f+0x34>
41030c70:	003ff106 	br	41030c38 <__fpcmp_parts_f+0x58>
41030c74:	11bfe51e 	bne	r2,r6,41030c0c <__fpcmp_parts_f+0x2c>
41030c78:	28c00117 	ldw	r3,4(r5)
41030c7c:	20800117 	ldw	r2,4(r4)
41030c80:	1885c83a 	sub	r2,r3,r2
41030c84:	f800283a 	ret

41030c88 <__make_fp>:
41030c88:	defffb04 	addi	sp,sp,-20
41030c8c:	d9000015 	stw	r4,0(sp)
41030c90:	d809883a 	mov	r4,sp
41030c94:	dfc00415 	stw	ra,16(sp)
41030c98:	d9400115 	stw	r5,4(sp)
41030c9c:	d9800215 	stw	r6,8(sp)
41030ca0:	d9c00315 	stw	r7,12(sp)
41030ca4:	10311c80 	call	410311c8 <__pack_f>
41030ca8:	dfc00417 	ldw	ra,16(sp)
41030cac:	dec00504 	addi	sp,sp,20
41030cb0:	f800283a 	ret

41030cb4 <__pack_d>:
41030cb4:	20c00017 	ldw	r3,0(r4)
41030cb8:	defffd04 	addi	sp,sp,-12
41030cbc:	dc000015 	stw	r16,0(sp)
41030cc0:	dc800215 	stw	r18,8(sp)
41030cc4:	dc400115 	stw	r17,4(sp)
41030cc8:	00800044 	movi	r2,1
41030ccc:	22000317 	ldw	r8,12(r4)
41030cd0:	001f883a 	mov	r15,zero
41030cd4:	22400417 	ldw	r9,16(r4)
41030cd8:	24000117 	ldw	r16,4(r4)
41030cdc:	10c0552e 	bgeu	r2,r3,41030e34 <__pack_d+0x180>
41030ce0:	00800104 	movi	r2,4
41030ce4:	18804f26 	beq	r3,r2,41030e24 <__pack_d+0x170>
41030ce8:	00800084 	movi	r2,2
41030cec:	18800226 	beq	r3,r2,41030cf8 <__pack_d+0x44>
41030cf0:	4244b03a 	or	r2,r8,r9
41030cf4:	10001a1e 	bne	r2,zero,41030d60 <__pack_d+0xac>
41030cf8:	000d883a 	mov	r6,zero
41030cfc:	000f883a 	mov	r7,zero
41030d00:	0011883a 	mov	r8,zero
41030d04:	00800434 	movhi	r2,16
41030d08:	10bfffc4 	addi	r2,r2,-1
41030d0c:	301d883a 	mov	r14,r6
41030d10:	3884703a 	and	r2,r7,r2
41030d14:	400a953a 	slli	r5,r8,20
41030d18:	79bffc2c 	andhi	r6,r15,65520
41030d1c:	308cb03a 	or	r6,r6,r2
41030d20:	00e00434 	movhi	r3,32784
41030d24:	18ffffc4 	addi	r3,r3,-1
41030d28:	800497fa 	slli	r2,r16,31
41030d2c:	30c6703a 	and	r3,r6,r3
41030d30:	1946b03a 	or	r3,r3,r5
41030d34:	01600034 	movhi	r5,32768
41030d38:	297fffc4 	addi	r5,r5,-1
41030d3c:	194a703a 	and	r5,r3,r5
41030d40:	288ab03a 	or	r5,r5,r2
41030d44:	2807883a 	mov	r3,r5
41030d48:	7005883a 	mov	r2,r14
41030d4c:	dc800217 	ldw	r18,8(sp)
41030d50:	dc400117 	ldw	r17,4(sp)
41030d54:	dc000017 	ldw	r16,0(sp)
41030d58:	dec00304 	addi	sp,sp,12
41030d5c:	f800283a 	ret
41030d60:	21000217 	ldw	r4,8(r4)
41030d64:	00bf0084 	movi	r2,-1022
41030d68:	20803f16 	blt	r4,r2,41030e68 <__pack_d+0x1b4>
41030d6c:	0080ffc4 	movi	r2,1023
41030d70:	11002c16 	blt	r2,r4,41030e24 <__pack_d+0x170>
41030d74:	00803fc4 	movi	r2,255
41030d78:	408c703a 	and	r6,r8,r2
41030d7c:	00802004 	movi	r2,128
41030d80:	0007883a 	mov	r3,zero
41030d84:	000f883a 	mov	r7,zero
41030d88:	2280ffc4 	addi	r10,r4,1023
41030d8c:	30801e26 	beq	r6,r2,41030e08 <__pack_d+0x154>
41030d90:	00801fc4 	movi	r2,127
41030d94:	4089883a 	add	r4,r8,r2
41030d98:	220d803a 	cmpltu	r6,r4,r8
41030d9c:	324d883a 	add	r6,r6,r9
41030da0:	2011883a 	mov	r8,r4
41030da4:	3013883a 	mov	r9,r6
41030da8:	00880034 	movhi	r2,8192
41030dac:	10bfffc4 	addi	r2,r2,-1
41030db0:	12400d36 	bltu	r2,r9,41030de8 <__pack_d+0x134>
41030db4:	4804963a 	slli	r2,r9,24
41030db8:	400cd23a 	srli	r6,r8,8
41030dbc:	480ed23a 	srli	r7,r9,8
41030dc0:	013fffc4 	movi	r4,-1
41030dc4:	118cb03a 	or	r6,r2,r6
41030dc8:	01400434 	movhi	r5,16
41030dcc:	297fffc4 	addi	r5,r5,-1
41030dd0:	3104703a 	and	r2,r6,r4
41030dd4:	3946703a 	and	r3,r7,r5
41030dd8:	5201ffcc 	andi	r8,r10,2047
41030ddc:	100d883a 	mov	r6,r2
41030de0:	180f883a 	mov	r7,r3
41030de4:	003fc706 	br	41030d04 <__pack_d+0x50>
41030de8:	480897fa 	slli	r4,r9,31
41030dec:	4004d07a 	srli	r2,r8,1
41030df0:	4806d07a 	srli	r3,r9,1
41030df4:	52800044 	addi	r10,r10,1
41030df8:	2084b03a 	or	r2,r4,r2
41030dfc:	1011883a 	mov	r8,r2
41030e00:	1813883a 	mov	r9,r3
41030e04:	003feb06 	br	41030db4 <__pack_d+0x100>
41030e08:	383fe11e 	bne	r7,zero,41030d90 <__pack_d+0xdc>
41030e0c:	01004004 	movi	r4,256
41030e10:	4104703a 	and	r2,r8,r4
41030e14:	10c4b03a 	or	r2,r2,r3
41030e18:	103fe326 	beq	r2,zero,41030da8 <__pack_d+0xf4>
41030e1c:	3005883a 	mov	r2,r6
41030e20:	003fdc06 	br	41030d94 <__pack_d+0xe0>
41030e24:	000d883a 	mov	r6,zero
41030e28:	000f883a 	mov	r7,zero
41030e2c:	0201ffc4 	movi	r8,2047
41030e30:	003fb406 	br	41030d04 <__pack_d+0x50>
41030e34:	0005883a 	mov	r2,zero
41030e38:	00c00234 	movhi	r3,8
41030e3c:	408cb03a 	or	r6,r8,r2
41030e40:	48ceb03a 	or	r7,r9,r3
41030e44:	013fffc4 	movi	r4,-1
41030e48:	01400434 	movhi	r5,16
41030e4c:	297fffc4 	addi	r5,r5,-1
41030e50:	3104703a 	and	r2,r6,r4
41030e54:	3946703a 	and	r3,r7,r5
41030e58:	100d883a 	mov	r6,r2
41030e5c:	180f883a 	mov	r7,r3
41030e60:	0201ffc4 	movi	r8,2047
41030e64:	003fa706 	br	41030d04 <__pack_d+0x50>
41030e68:	1109c83a 	sub	r4,r2,r4
41030e6c:	00800e04 	movi	r2,56
41030e70:	11004316 	blt	r2,r4,41030f80 <__pack_d+0x2cc>
41030e74:	21fff804 	addi	r7,r4,-32
41030e78:	38004516 	blt	r7,zero,41030f90 <__pack_d+0x2dc>
41030e7c:	49d8d83a 	srl	r12,r9,r7
41030e80:	001b883a 	mov	r13,zero
41030e84:	0023883a 	mov	r17,zero
41030e88:	01400044 	movi	r5,1
41030e8c:	0025883a 	mov	r18,zero
41030e90:	38004716 	blt	r7,zero,41030fb0 <__pack_d+0x2fc>
41030e94:	29d6983a 	sll	r11,r5,r7
41030e98:	0015883a 	mov	r10,zero
41030e9c:	00bfffc4 	movi	r2,-1
41030ea0:	5089883a 	add	r4,r10,r2
41030ea4:	588b883a 	add	r5,r11,r2
41030ea8:	228d803a 	cmpltu	r6,r4,r10
41030eac:	314b883a 	add	r5,r6,r5
41030eb0:	4104703a 	and	r2,r8,r4
41030eb4:	4946703a 	and	r3,r9,r5
41030eb8:	10c4b03a 	or	r2,r2,r3
41030ebc:	10000226 	beq	r2,zero,41030ec8 <__pack_d+0x214>
41030ec0:	04400044 	movi	r17,1
41030ec4:	0025883a 	mov	r18,zero
41030ec8:	00803fc4 	movi	r2,255
41030ecc:	644eb03a 	or	r7,r12,r17
41030ed0:	3892703a 	and	r9,r7,r2
41030ed4:	00802004 	movi	r2,128
41030ed8:	6c90b03a 	or	r8,r13,r18
41030edc:	0015883a 	mov	r10,zero
41030ee0:	48801626 	beq	r9,r2,41030f3c <__pack_d+0x288>
41030ee4:	01001fc4 	movi	r4,127
41030ee8:	3905883a 	add	r2,r7,r4
41030eec:	11cd803a 	cmpltu	r6,r2,r7
41030ef0:	320d883a 	add	r6,r6,r8
41030ef4:	100f883a 	mov	r7,r2
41030ef8:	00840034 	movhi	r2,4096
41030efc:	10bfffc4 	addi	r2,r2,-1
41030f00:	3011883a 	mov	r8,r6
41030f04:	0007883a 	mov	r3,zero
41030f08:	11801b36 	bltu	r2,r6,41030f78 <__pack_d+0x2c4>
41030f0c:	4004963a 	slli	r2,r8,24
41030f10:	3808d23a 	srli	r4,r7,8
41030f14:	400ad23a 	srli	r5,r8,8
41030f18:	1813883a 	mov	r9,r3
41030f1c:	1108b03a 	or	r4,r2,r4
41030f20:	00bfffc4 	movi	r2,-1
41030f24:	00c00434 	movhi	r3,16
41030f28:	18ffffc4 	addi	r3,r3,-1
41030f2c:	208c703a 	and	r6,r4,r2
41030f30:	28ce703a 	and	r7,r5,r3
41030f34:	4a01ffcc 	andi	r8,r9,2047
41030f38:	003f7206 	br	41030d04 <__pack_d+0x50>
41030f3c:	503fe91e 	bne	r10,zero,41030ee4 <__pack_d+0x230>
41030f40:	01004004 	movi	r4,256
41030f44:	3904703a 	and	r2,r7,r4
41030f48:	0007883a 	mov	r3,zero
41030f4c:	10c4b03a 	or	r2,r2,r3
41030f50:	10000626 	beq	r2,zero,41030f6c <__pack_d+0x2b8>
41030f54:	3a45883a 	add	r2,r7,r9
41030f58:	11cd803a 	cmpltu	r6,r2,r7
41030f5c:	320d883a 	add	r6,r6,r8
41030f60:	100f883a 	mov	r7,r2
41030f64:	3011883a 	mov	r8,r6
41030f68:	0007883a 	mov	r3,zero
41030f6c:	00840034 	movhi	r2,4096
41030f70:	10bfffc4 	addi	r2,r2,-1
41030f74:	123fe52e 	bgeu	r2,r8,41030f0c <__pack_d+0x258>
41030f78:	00c00044 	movi	r3,1
41030f7c:	003fe306 	br	41030f0c <__pack_d+0x258>
41030f80:	0009883a 	mov	r4,zero
41030f84:	0013883a 	mov	r9,zero
41030f88:	000b883a 	mov	r5,zero
41030f8c:	003fe406 	br	41030f20 <__pack_d+0x26c>
41030f90:	4a47883a 	add	r3,r9,r9
41030f94:	008007c4 	movi	r2,31
41030f98:	1105c83a 	sub	r2,r2,r4
41030f9c:	1886983a 	sll	r3,r3,r2
41030fa0:	4118d83a 	srl	r12,r8,r4
41030fa4:	491ad83a 	srl	r13,r9,r4
41030fa8:	1b18b03a 	or	r12,r3,r12
41030fac:	003fb506 	br	41030e84 <__pack_d+0x1d0>
41030fb0:	2806d07a 	srli	r3,r5,1
41030fb4:	008007c4 	movi	r2,31
41030fb8:	1105c83a 	sub	r2,r2,r4
41030fbc:	1896d83a 	srl	r11,r3,r2
41030fc0:	2914983a 	sll	r10,r5,r4
41030fc4:	003fb506 	br	41030e9c <__pack_d+0x1e8>

41030fc8 <__unpack_d>:
41030fc8:	20c00117 	ldw	r3,4(r4)
41030fcc:	22400017 	ldw	r9,0(r4)
41030fd0:	00800434 	movhi	r2,16
41030fd4:	10bfffc4 	addi	r2,r2,-1
41030fd8:	1808d53a 	srli	r4,r3,20
41030fdc:	180cd7fa 	srli	r6,r3,31
41030fe0:	1894703a 	and	r10,r3,r2
41030fe4:	2201ffcc 	andi	r8,r4,2047
41030fe8:	281b883a 	mov	r13,r5
41030fec:	4817883a 	mov	r11,r9
41030ff0:	29800115 	stw	r6,4(r5)
41030ff4:	5019883a 	mov	r12,r10
41030ff8:	40001e1e 	bne	r8,zero,41031074 <__unpack_d+0xac>
41030ffc:	4a84b03a 	or	r2,r9,r10
41031000:	10001926 	beq	r2,zero,41031068 <__unpack_d+0xa0>
41031004:	4804d63a 	srli	r2,r9,24
41031008:	500c923a 	slli	r6,r10,8
4103100c:	013f0084 	movi	r4,-1022
41031010:	00c40034 	movhi	r3,4096
41031014:	18ffffc4 	addi	r3,r3,-1
41031018:	118cb03a 	or	r6,r2,r6
4103101c:	008000c4 	movi	r2,3
41031020:	480a923a 	slli	r5,r9,8
41031024:	68800015 	stw	r2,0(r13)
41031028:	69000215 	stw	r4,8(r13)
4103102c:	19800b36 	bltu	r3,r6,4103105c <__unpack_d+0x94>
41031030:	200f883a 	mov	r7,r4
41031034:	1811883a 	mov	r8,r3
41031038:	2945883a 	add	r2,r5,r5
4103103c:	1149803a 	cmpltu	r4,r2,r5
41031040:	3187883a 	add	r3,r6,r6
41031044:	20c9883a 	add	r4,r4,r3
41031048:	100b883a 	mov	r5,r2
4103104c:	200d883a 	mov	r6,r4
41031050:	39ffffc4 	addi	r7,r7,-1
41031054:	413ff82e 	bgeu	r8,r4,41031038 <__unpack_d+0x70>
41031058:	69c00215 	stw	r7,8(r13)
4103105c:	69800415 	stw	r6,16(r13)
41031060:	69400315 	stw	r5,12(r13)
41031064:	f800283a 	ret
41031068:	00800084 	movi	r2,2
4103106c:	28800015 	stw	r2,0(r5)
41031070:	f800283a 	ret
41031074:	0081ffc4 	movi	r2,2047
41031078:	40800f26 	beq	r8,r2,410310b8 <__unpack_d+0xf0>
4103107c:	480cd63a 	srli	r6,r9,24
41031080:	5006923a 	slli	r3,r10,8
41031084:	4804923a 	slli	r2,r9,8
41031088:	0009883a 	mov	r4,zero
4103108c:	30c6b03a 	or	r3,r6,r3
41031090:	01440034 	movhi	r5,4096
41031094:	110cb03a 	or	r6,r2,r4
41031098:	423f0044 	addi	r8,r8,-1023
4103109c:	194eb03a 	or	r7,r3,r5
410310a0:	008000c4 	movi	r2,3
410310a4:	69c00415 	stw	r7,16(r13)
410310a8:	6a000215 	stw	r8,8(r13)
410310ac:	68800015 	stw	r2,0(r13)
410310b0:	69800315 	stw	r6,12(r13)
410310b4:	f800283a 	ret
410310b8:	4a84b03a 	or	r2,r9,r10
410310bc:	1000031e 	bne	r2,zero,410310cc <__unpack_d+0x104>
410310c0:	00800104 	movi	r2,4
410310c4:	28800015 	stw	r2,0(r5)
410310c8:	f800283a 	ret
410310cc:	0009883a 	mov	r4,zero
410310d0:	01400234 	movhi	r5,8
410310d4:	4904703a 	and	r2,r9,r4
410310d8:	5146703a 	and	r3,r10,r5
410310dc:	10c4b03a 	or	r2,r2,r3
410310e0:	10000526 	beq	r2,zero,410310f8 <__unpack_d+0x130>
410310e4:	00800044 	movi	r2,1
410310e8:	68800015 	stw	r2,0(r13)
410310ec:	6b000415 	stw	r12,16(r13)
410310f0:	6ac00315 	stw	r11,12(r13)
410310f4:	f800283a 	ret
410310f8:	68000015 	stw	zero,0(r13)
410310fc:	003ffb06 	br	410310ec <__unpack_d+0x124>

41031100 <__fpcmp_parts_d>:
41031100:	21800017 	ldw	r6,0(r4)
41031104:	00c00044 	movi	r3,1
41031108:	19800a2e 	bgeu	r3,r6,41031134 <__fpcmp_parts_d+0x34>
4103110c:	28800017 	ldw	r2,0(r5)
41031110:	1880082e 	bgeu	r3,r2,41031134 <__fpcmp_parts_d+0x34>
41031114:	00c00104 	movi	r3,4
41031118:	30c02626 	beq	r6,r3,410311b4 <__fpcmp_parts_d+0xb4>
4103111c:	10c02226 	beq	r2,r3,410311a8 <__fpcmp_parts_d+0xa8>
41031120:	00c00084 	movi	r3,2
41031124:	30c00526 	beq	r6,r3,4103113c <__fpcmp_parts_d+0x3c>
41031128:	10c0071e 	bne	r2,r3,41031148 <__fpcmp_parts_d+0x48>
4103112c:	20800117 	ldw	r2,4(r4)
41031130:	1000091e 	bne	r2,zero,41031158 <__fpcmp_parts_d+0x58>
41031134:	00800044 	movi	r2,1
41031138:	f800283a 	ret
4103113c:	10c01a1e 	bne	r2,r3,410311a8 <__fpcmp_parts_d+0xa8>
41031140:	0005883a 	mov	r2,zero
41031144:	f800283a 	ret
41031148:	22000117 	ldw	r8,4(r4)
4103114c:	28800117 	ldw	r2,4(r5)
41031150:	40800326 	beq	r8,r2,41031160 <__fpcmp_parts_d+0x60>
41031154:	403ff726 	beq	r8,zero,41031134 <__fpcmp_parts_d+0x34>
41031158:	00bfffc4 	movi	r2,-1
4103115c:	f800283a 	ret
41031160:	20c00217 	ldw	r3,8(r4)
41031164:	28800217 	ldw	r2,8(r5)
41031168:	10fffa16 	blt	r2,r3,41031154 <__fpcmp_parts_d+0x54>
4103116c:	18800916 	blt	r3,r2,41031194 <__fpcmp_parts_d+0x94>
41031170:	21c00417 	ldw	r7,16(r4)
41031174:	28c00417 	ldw	r3,16(r5)
41031178:	21800317 	ldw	r6,12(r4)
4103117c:	28800317 	ldw	r2,12(r5)
41031180:	19fff436 	bltu	r3,r7,41031154 <__fpcmp_parts_d+0x54>
41031184:	38c00526 	beq	r7,r3,4103119c <__fpcmp_parts_d+0x9c>
41031188:	38c00236 	bltu	r7,r3,41031194 <__fpcmp_parts_d+0x94>
4103118c:	19ffec1e 	bne	r3,r7,41031140 <__fpcmp_parts_d+0x40>
41031190:	30bfeb2e 	bgeu	r6,r2,41031140 <__fpcmp_parts_d+0x40>
41031194:	403fe71e 	bne	r8,zero,41031134 <__fpcmp_parts_d+0x34>
41031198:	003fef06 	br	41031158 <__fpcmp_parts_d+0x58>
4103119c:	11bffa2e 	bgeu	r2,r6,41031188 <__fpcmp_parts_d+0x88>
410311a0:	403fe426 	beq	r8,zero,41031134 <__fpcmp_parts_d+0x34>
410311a4:	003fec06 	br	41031158 <__fpcmp_parts_d+0x58>
410311a8:	28800117 	ldw	r2,4(r5)
410311ac:	103fe11e 	bne	r2,zero,41031134 <__fpcmp_parts_d+0x34>
410311b0:	003fe906 	br	41031158 <__fpcmp_parts_d+0x58>
410311b4:	11bfdd1e 	bne	r2,r6,4103112c <__fpcmp_parts_d+0x2c>
410311b8:	28c00117 	ldw	r3,4(r5)
410311bc:	20800117 	ldw	r2,4(r4)
410311c0:	1885c83a 	sub	r2,r3,r2
410311c4:	f800283a 	ret

410311c8 <__pack_f>:
410311c8:	20c00017 	ldw	r3,0(r4)
410311cc:	01c00044 	movi	r7,1
410311d0:	21800317 	ldw	r6,12(r4)
410311d4:	21400117 	ldw	r5,4(r4)
410311d8:	38c02d2e 	bgeu	r7,r3,41031290 <__pack_f+0xc8>
410311dc:	00800104 	movi	r2,4
410311e0:	18802826 	beq	r3,r2,41031284 <__pack_f+0xbc>
410311e4:	00800084 	movi	r2,2
410311e8:	18800126 	beq	r3,r2,410311f0 <__pack_f+0x28>
410311ec:	3000101e 	bne	r6,zero,41031230 <__pack_f+0x68>
410311f0:	000d883a 	mov	r6,zero
410311f4:	0007883a 	mov	r3,zero
410311f8:	19003fcc 	andi	r4,r3,255
410311fc:	200895fa 	slli	r4,r4,23
41031200:	00c02034 	movhi	r3,128
41031204:	18ffffc4 	addi	r3,r3,-1
41031208:	30c6703a 	and	r3,r6,r3
4103120c:	10a0002c 	andhi	r2,r2,32768
41031210:	10c4b03a 	or	r2,r2,r3
41031214:	280a97fa 	slli	r5,r5,31
41031218:	1104b03a 	or	r2,r2,r4
4103121c:	00e00034 	movhi	r3,32768
41031220:	18ffffc4 	addi	r3,r3,-1
41031224:	10c4703a 	and	r2,r2,r3
41031228:	1144b03a 	or	r2,r2,r5
4103122c:	f800283a 	ret
41031230:	21000217 	ldw	r4,8(r4)
41031234:	00bfe084 	movi	r2,-126
41031238:	20801b16 	blt	r4,r2,410312a8 <__pack_f+0xe0>
4103123c:	00801fc4 	movi	r2,127
41031240:	11001016 	blt	r2,r4,41031284 <__pack_f+0xbc>
41031244:	308e703a 	and	r7,r6,r2
41031248:	2087883a 	add	r3,r4,r2
4103124c:	00801004 	movi	r2,64
41031250:	38800526 	beq	r7,r2,41031268 <__pack_f+0xa0>
41031254:	31800fc4 	addi	r6,r6,63
41031258:	30000716 	blt	r6,zero,41031278 <__pack_f+0xb0>
4103125c:	300490ba 	slli	r2,r6,2
41031260:	100cd27a 	srli	r6,r2,9
41031264:	003fe406 	br	410311f8 <__pack_f+0x30>
41031268:	3080200c 	andi	r2,r6,128
4103126c:	103ffa26 	beq	r2,zero,41031258 <__pack_f+0x90>
41031270:	31cd883a 	add	r6,r6,r7
41031274:	003ff806 	br	41031258 <__pack_f+0x90>
41031278:	300cd07a 	srli	r6,r6,1
4103127c:	18c00044 	addi	r3,r3,1
41031280:	003ff606 	br	4103125c <__pack_f+0x94>
41031284:	000d883a 	mov	r6,zero
41031288:	00ffffc4 	movi	r3,-1
4103128c:	003fda06 	br	410311f8 <__pack_f+0x30>
41031290:	31800434 	orhi	r6,r6,16
41031294:	00802034 	movhi	r2,128
41031298:	10bfffc4 	addi	r2,r2,-1
4103129c:	308c703a 	and	r6,r6,r2
410312a0:	00ffffc4 	movi	r3,-1
410312a4:	003fd406 	br	410311f8 <__pack_f+0x30>
410312a8:	1109c83a 	sub	r4,r2,r4
410312ac:	00800644 	movi	r2,25
410312b0:	11001216 	blt	r2,r4,410312fc <__pack_f+0x134>
410312b4:	3904983a 	sll	r2,r7,r4
410312b8:	3106d83a 	srl	r3,r6,r4
410312bc:	10bfffc4 	addi	r2,r2,-1
410312c0:	3084703a 	and	r2,r6,r2
410312c4:	1004c03a 	cmpne	r2,r2,zero
410312c8:	1886b03a 	or	r3,r3,r2
410312cc:	19001fcc 	andi	r4,r3,127
410312d0:	00801004 	movi	r2,64
410312d4:	20800c26 	beq	r4,r2,41031308 <__pack_f+0x140>
410312d8:	18c00fc4 	addi	r3,r3,63
410312dc:	00900034 	movhi	r2,16384
410312e0:	10bfffc4 	addi	r2,r2,-1
410312e4:	180cd1fa 	srli	r6,r3,7
410312e8:	10c7803a 	cmpltu	r3,r2,r3
410312ec:	00802034 	movhi	r2,128
410312f0:	10bfffc4 	addi	r2,r2,-1
410312f4:	308c703a 	and	r6,r6,r2
410312f8:	003fbf06 	br	410311f8 <__pack_f+0x30>
410312fc:	0007883a 	mov	r3,zero
41031300:	000d883a 	mov	r6,zero
41031304:	003ff906 	br	410312ec <__pack_f+0x124>
41031308:	1880200c 	andi	r2,r3,128
4103130c:	10000126 	beq	r2,zero,41031314 <__pack_f+0x14c>
41031310:	1907883a 	add	r3,r3,r4
41031314:	180cd1fa 	srli	r6,r3,7
41031318:	00900034 	movhi	r2,16384
4103131c:	10bfffc4 	addi	r2,r2,-1
41031320:	10c7803a 	cmpltu	r3,r2,r3
41031324:	003ff106 	br	410312ec <__pack_f+0x124>

41031328 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
41031328:	defff804 	addi	sp,sp,-32
4103132c:	dfc00715 	stw	ra,28(sp)
41031330:	df000615 	stw	fp,24(sp)
41031334:	df000604 	addi	fp,sp,24
41031338:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
4103133c:	e0bffc17 	ldw	r2,-16(fp)
41031340:	1004803a 	cmplt	r2,r2,zero
41031344:	1000081e 	bne	r2,zero,41031368 <close+0x40>
41031348:	e0bffc17 	ldw	r2,-16(fp)
4103134c:	10800324 	muli	r2,r2,12
41031350:	1007883a 	mov	r3,r2
41031354:	00800034 	movhi	r2,0
41031358:	10865f04 	addi	r2,r2,6524
4103135c:	1887883a 	add	r3,r3,r2
41031360:	e0ffff15 	stw	r3,-4(fp)
41031364:	00000106 	br	4103136c <close+0x44>
41031368:	e03fff15 	stw	zero,-4(fp)
4103136c:	e0bfff17 	ldw	r2,-4(fp)
41031370:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
41031374:	e0bffb17 	ldw	r2,-20(fp)
41031378:	1005003a 	cmpeq	r2,r2,zero
4103137c:	10001d1e 	bne	r2,zero,410313f4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
41031380:	e0bffb17 	ldw	r2,-20(fp)
41031384:	10800017 	ldw	r2,0(r2)
41031388:	10800417 	ldw	r2,16(r2)
4103138c:	1005003a 	cmpeq	r2,r2,zero
41031390:	1000071e 	bne	r2,zero,410313b0 <close+0x88>
41031394:	e0bffb17 	ldw	r2,-20(fp)
41031398:	10800017 	ldw	r2,0(r2)
4103139c:	10800417 	ldw	r2,16(r2)
410313a0:	e13ffb17 	ldw	r4,-20(fp)
410313a4:	103ee83a 	callr	r2
410313a8:	e0bffe15 	stw	r2,-8(fp)
410313ac:	00000106 	br	410313b4 <close+0x8c>
410313b0:	e03ffe15 	stw	zero,-8(fp)
410313b4:	e0bffe17 	ldw	r2,-8(fp)
410313b8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
410313bc:	e13ffc17 	ldw	r4,-16(fp)
410313c0:	1031cb40 	call	41031cb4 <alt_release_fd>
    if (rval < 0)
410313c4:	e0bffa17 	ldw	r2,-24(fp)
410313c8:	1004403a 	cmpge	r2,r2,zero
410313cc:	1000071e 	bne	r2,zero,410313ec <close+0xc4>
    {
      ALT_ERRNO = -rval;
410313d0:	10314240 	call	41031424 <alt_get_errno>
410313d4:	e0fffa17 	ldw	r3,-24(fp)
410313d8:	00c7c83a 	sub	r3,zero,r3
410313dc:	10c00015 	stw	r3,0(r2)
      return -1;
410313e0:	00bfffc4 	movi	r2,-1
410313e4:	e0bffd15 	stw	r2,-12(fp)
410313e8:	00000806 	br	4103140c <close+0xe4>
    }
    return 0;
410313ec:	e03ffd15 	stw	zero,-12(fp)
410313f0:	00000606 	br	4103140c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
410313f4:	10314240 	call	41031424 <alt_get_errno>
410313f8:	1007883a 	mov	r3,r2
410313fc:	00801444 	movi	r2,81
41031400:	18800015 	stw	r2,0(r3)
    return -1;
41031404:	00bfffc4 	movi	r2,-1
41031408:	e0bffd15 	stw	r2,-12(fp)
4103140c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
41031410:	e037883a 	mov	sp,fp
41031414:	dfc00117 	ldw	ra,4(sp)
41031418:	df000017 	ldw	fp,0(sp)
4103141c:	dec00204 	addi	sp,sp,8
41031420:	f800283a 	ret

41031424 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41031424:	defffd04 	addi	sp,sp,-12
41031428:	dfc00215 	stw	ra,8(sp)
4103142c:	df000115 	stw	fp,4(sp)
41031430:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41031434:	00800034 	movhi	r2,0
41031438:	108ae304 	addi	r2,r2,11148
4103143c:	10800017 	ldw	r2,0(r2)
41031440:	1005003a 	cmpeq	r2,r2,zero
41031444:	1000061e 	bne	r2,zero,41031460 <alt_get_errno+0x3c>
41031448:	00800034 	movhi	r2,0
4103144c:	108ae304 	addi	r2,r2,11148
41031450:	10800017 	ldw	r2,0(r2)
41031454:	103ee83a 	callr	r2
41031458:	e0bfff15 	stw	r2,-4(fp)
4103145c:	00000306 	br	4103146c <alt_get_errno+0x48>
41031460:	00800034 	movhi	r2,0
41031464:	108aef04 	addi	r2,r2,11196
41031468:	e0bfff15 	stw	r2,-4(fp)
4103146c:	e0bfff17 	ldw	r2,-4(fp)
}
41031470:	e037883a 	mov	sp,fp
41031474:	dfc00117 	ldw	ra,4(sp)
41031478:	df000017 	ldw	fp,0(sp)
4103147c:	dec00204 	addi	sp,sp,8
41031480:	f800283a 	ret

41031484 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
41031484:	defffb04 	addi	sp,sp,-20
41031488:	df000415 	stw	fp,16(sp)
4103148c:	df000404 	addi	fp,sp,16
41031490:	e13ffe15 	stw	r4,-8(fp)
41031494:	e17fff15 	stw	r5,-4(fp)
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
41031498:	e0fffe17 	ldw	r3,-8(fp)
4103149c:	e0bfff17 	ldw	r2,-4(fp)
410314a0:	1885883a 	add	r2,r3,r2
410314a4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
410314a8:	e0bffe17 	ldw	r2,-8(fp)
410314ac:	e0bffd15 	stw	r2,-12(fp)
410314b0:	00000506 	br	410314c8 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
410314b4:	e0bffd17 	ldw	r2,-12(fp)
410314b8:	1000001b 	flushda	0(r2)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
410314bc:	e0bffd17 	ldw	r2,-12(fp)
410314c0:	10800804 	addi	r2,r2,32
410314c4:	e0bffd15 	stw	r2,-12(fp)
410314c8:	e0fffd17 	ldw	r3,-12(fp)
410314cc:	e0bffc17 	ldw	r2,-16(fp)
410314d0:	18bff836 	bltu	r3,r2,410314b4 <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
410314d4:	e0bffe17 	ldw	r2,-8(fp)
410314d8:	108007cc 	andi	r2,r2,31
410314dc:	1005003a 	cmpeq	r2,r2,zero
410314e0:	1000021e 	bne	r2,zero,410314ec <alt_dcache_flush+0x68>
  {
    ALT_FLUSH_DATA(i);
410314e4:	e0bffd17 	ldw	r2,-12(fp)
410314e8:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
410314ec:	e037883a 	mov	sp,fp
410314f0:	df000017 	ldw	fp,0(sp)
410314f4:	dec00104 	addi	sp,sp,4
410314f8:	f800283a 	ret

410314fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
410314fc:	defffc04 	addi	sp,sp,-16
41031500:	df000315 	stw	fp,12(sp)
41031504:	df000304 	addi	fp,sp,12
41031508:	e13ffd15 	stw	r4,-12(fp)
4103150c:	e17ffe15 	stw	r5,-8(fp)
41031510:	e1bfff15 	stw	r6,-4(fp)
  return len;
41031514:	e0bfff17 	ldw	r2,-4(fp)
}
41031518:	e037883a 	mov	sp,fp
4103151c:	df000017 	ldw	fp,0(sp)
41031520:	dec00104 	addi	sp,sp,4
41031524:	f800283a 	ret

41031528 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
41031528:	defffb04 	addi	sp,sp,-20
4103152c:	dfc00415 	stw	ra,16(sp)
41031530:	df000315 	stw	fp,12(sp)
41031534:	df000304 	addi	fp,sp,12
41031538:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
4103153c:	e13ffe17 	ldw	r4,-8(fp)
41031540:	d1600d04 	addi	r5,gp,-32716
41031544:	1032f340 	call	41032f34 <alt_find_dev>
41031548:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
4103154c:	e0bffd17 	ldw	r2,-12(fp)
41031550:	1005003a 	cmpeq	r2,r2,zero
41031554:	10000b1e 	bne	r2,zero,41031584 <alt_flash_open_dev+0x5c>
41031558:	e0bffd17 	ldw	r2,-12(fp)
4103155c:	10800317 	ldw	r2,12(r2)
41031560:	1005003a 	cmpeq	r2,r2,zero
41031564:	1000071e 	bne	r2,zero,41031584 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
41031568:	e0bffd17 	ldw	r2,-12(fp)
4103156c:	10800317 	ldw	r2,12(r2)
41031570:	e13ffd17 	ldw	r4,-12(fp)
41031574:	e17ffe17 	ldw	r5,-8(fp)
41031578:	103ee83a 	callr	r2
4103157c:	e0bfff15 	stw	r2,-4(fp)
41031580:	00000206 	br	4103158c <alt_flash_open_dev+0x64>
  }

  return dev;
41031584:	e0bffd17 	ldw	r2,-12(fp)
41031588:	e0bfff15 	stw	r2,-4(fp)
4103158c:	e0bfff17 	ldw	r2,-4(fp)
}
41031590:	e037883a 	mov	sp,fp
41031594:	dfc00117 	ldw	ra,4(sp)
41031598:	df000017 	ldw	fp,0(sp)
4103159c:	dec00204 	addi	sp,sp,8
410315a0:	f800283a 	ret

410315a4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
410315a4:	defffd04 	addi	sp,sp,-12
410315a8:	dfc00215 	stw	ra,8(sp)
410315ac:	df000115 	stw	fp,4(sp)
410315b0:	df000104 	addi	fp,sp,4
410315b4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
410315b8:	e0bfff17 	ldw	r2,-4(fp)
410315bc:	1005003a 	cmpeq	r2,r2,zero
410315c0:	1000081e 	bne	r2,zero,410315e4 <alt_flash_close_dev+0x40>
410315c4:	e0bfff17 	ldw	r2,-4(fp)
410315c8:	10800417 	ldw	r2,16(r2)
410315cc:	1005003a 	cmpeq	r2,r2,zero
410315d0:	1000041e 	bne	r2,zero,410315e4 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
410315d4:	e0bfff17 	ldw	r2,-4(fp)
410315d8:	10800417 	ldw	r2,16(r2)
410315dc:	e13fff17 	ldw	r4,-4(fp)
410315e0:	103ee83a 	callr	r2
  }
  return;
}
410315e4:	e037883a 	mov	sp,fp
410315e8:	dfc00117 	ldw	ra,4(sp)
410315ec:	df000017 	ldw	fp,0(sp)
410315f0:	dec00204 	addi	sp,sp,8
410315f4:	f800283a 	ret

410315f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
410315f8:	defff904 	addi	sp,sp,-28
410315fc:	dfc00615 	stw	ra,24(sp)
41031600:	df000515 	stw	fp,20(sp)
41031604:	df000504 	addi	fp,sp,20
41031608:	e13ffc15 	stw	r4,-16(fp)
4103160c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41031610:	e0bffc17 	ldw	r2,-16(fp)
41031614:	1004803a 	cmplt	r2,r2,zero
41031618:	1000081e 	bne	r2,zero,4103163c <fstat+0x44>
4103161c:	e0bffc17 	ldw	r2,-16(fp)
41031620:	10800324 	muli	r2,r2,12
41031624:	1007883a 	mov	r3,r2
41031628:	00800034 	movhi	r2,0
4103162c:	10865f04 	addi	r2,r2,6524
41031630:	1887883a 	add	r3,r3,r2
41031634:	e0ffff15 	stw	r3,-4(fp)
41031638:	00000106 	br	41031640 <fstat+0x48>
4103163c:	e03fff15 	stw	zero,-4(fp)
41031640:	e0bfff17 	ldw	r2,-4(fp)
41031644:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
41031648:	e0bffb17 	ldw	r2,-20(fp)
4103164c:	1005003a 	cmpeq	r2,r2,zero
41031650:	1000121e 	bne	r2,zero,4103169c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
41031654:	e0bffb17 	ldw	r2,-20(fp)
41031658:	10800017 	ldw	r2,0(r2)
4103165c:	10800817 	ldw	r2,32(r2)
41031660:	1005003a 	cmpeq	r2,r2,zero
41031664:	1000081e 	bne	r2,zero,41031688 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
41031668:	e0bffb17 	ldw	r2,-20(fp)
4103166c:	10800017 	ldw	r2,0(r2)
41031670:	10800817 	ldw	r2,32(r2)
41031674:	e13ffb17 	ldw	r4,-20(fp)
41031678:	e17ffd17 	ldw	r5,-12(fp)
4103167c:	103ee83a 	callr	r2
41031680:	e0bffe15 	stw	r2,-8(fp)
41031684:	00000b06 	br	410316b4 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
41031688:	e0fffd17 	ldw	r3,-12(fp)
4103168c:	00880004 	movi	r2,8192
41031690:	18800115 	stw	r2,4(r3)
      return 0;
41031694:	e03ffe15 	stw	zero,-8(fp)
41031698:	00000606 	br	410316b4 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
4103169c:	10316cc0 	call	410316cc <alt_get_errno>
410316a0:	1007883a 	mov	r3,r2
410316a4:	00801444 	movi	r2,81
410316a8:	18800015 	stw	r2,0(r3)
    return -1;
410316ac:	00bfffc4 	movi	r2,-1
410316b0:	e0bffe15 	stw	r2,-8(fp)
410316b4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
410316b8:	e037883a 	mov	sp,fp
410316bc:	dfc00117 	ldw	ra,4(sp)
410316c0:	df000017 	ldw	fp,0(sp)
410316c4:	dec00204 	addi	sp,sp,8
410316c8:	f800283a 	ret

410316cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
410316cc:	defffd04 	addi	sp,sp,-12
410316d0:	dfc00215 	stw	ra,8(sp)
410316d4:	df000115 	stw	fp,4(sp)
410316d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
410316dc:	00800034 	movhi	r2,0
410316e0:	108ae304 	addi	r2,r2,11148
410316e4:	10800017 	ldw	r2,0(r2)
410316e8:	1005003a 	cmpeq	r2,r2,zero
410316ec:	1000061e 	bne	r2,zero,41031708 <alt_get_errno+0x3c>
410316f0:	00800034 	movhi	r2,0
410316f4:	108ae304 	addi	r2,r2,11148
410316f8:	10800017 	ldw	r2,0(r2)
410316fc:	103ee83a 	callr	r2
41031700:	e0bfff15 	stw	r2,-4(fp)
41031704:	00000306 	br	41031714 <alt_get_errno+0x48>
41031708:	00800034 	movhi	r2,0
4103170c:	108aef04 	addi	r2,r2,11196
41031710:	e0bfff15 	stw	r2,-4(fp)
41031714:	e0bfff17 	ldw	r2,-4(fp)
}
41031718:	e037883a 	mov	sp,fp
4103171c:	dfc00117 	ldw	ra,4(sp)
41031720:	df000017 	ldw	fp,0(sp)
41031724:	dec00204 	addi	sp,sp,8
41031728:	f800283a 	ret

4103172c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
4103172c:	deffeb04 	addi	sp,sp,-84
41031730:	dfc01415 	stw	ra,80(sp)
41031734:	df001315 	stw	fp,76(sp)
41031738:	df001304 	addi	fp,sp,76
4103173c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41031740:	e0bffd17 	ldw	r2,-12(fp)
41031744:	1004803a 	cmplt	r2,r2,zero
41031748:	1000081e 	bne	r2,zero,4103176c <isatty+0x40>
4103174c:	e0bffd17 	ldw	r2,-12(fp)
41031750:	10800324 	muli	r2,r2,12
41031754:	1007883a 	mov	r3,r2
41031758:	00800034 	movhi	r2,0
4103175c:	10865f04 	addi	r2,r2,6524
41031760:	1887883a 	add	r3,r3,r2
41031764:	e0ffff15 	stw	r3,-4(fp)
41031768:	00000106 	br	41031770 <isatty+0x44>
4103176c:	e03fff15 	stw	zero,-4(fp)
41031770:	e0bfff17 	ldw	r2,-4(fp)
41031774:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
41031778:	e0bfed17 	ldw	r2,-76(fp)
4103177c:	1005003a 	cmpeq	r2,r2,zero
41031780:	10000f1e 	bne	r2,zero,410317c0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
41031784:	e0bfed17 	ldw	r2,-76(fp)
41031788:	10800017 	ldw	r2,0(r2)
4103178c:	10800817 	ldw	r2,32(r2)
41031790:	1004c03a 	cmpne	r2,r2,zero
41031794:	1000031e 	bne	r2,zero,410317a4 <isatty+0x78>
    {
      return 1;
41031798:	00800044 	movi	r2,1
4103179c:	e0bffe15 	stw	r2,-8(fp)
410317a0:	00000c06 	br	410317d4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
410317a4:	e17fee04 	addi	r5,fp,-72
410317a8:	e13ffd17 	ldw	r4,-12(fp)
410317ac:	10315f80 	call	410315f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
410317b0:	e0bfef17 	ldw	r2,-68(fp)
410317b4:	10880020 	cmpeqi	r2,r2,8192
410317b8:	e0bffe15 	stw	r2,-8(fp)
410317bc:	00000506 	br	410317d4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
410317c0:	10317ec0 	call	410317ec <alt_get_errno>
410317c4:	1007883a 	mov	r3,r2
410317c8:	00801444 	movi	r2,81
410317cc:	18800015 	stw	r2,0(r3)
    return 0;
410317d0:	e03ffe15 	stw	zero,-8(fp)
410317d4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
410317d8:	e037883a 	mov	sp,fp
410317dc:	dfc00117 	ldw	ra,4(sp)
410317e0:	df000017 	ldw	fp,0(sp)
410317e4:	dec00204 	addi	sp,sp,8
410317e8:	f800283a 	ret

410317ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
410317ec:	defffd04 	addi	sp,sp,-12
410317f0:	dfc00215 	stw	ra,8(sp)
410317f4:	df000115 	stw	fp,4(sp)
410317f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
410317fc:	00800034 	movhi	r2,0
41031800:	108ae304 	addi	r2,r2,11148
41031804:	10800017 	ldw	r2,0(r2)
41031808:	1005003a 	cmpeq	r2,r2,zero
4103180c:	1000061e 	bne	r2,zero,41031828 <alt_get_errno+0x3c>
41031810:	00800034 	movhi	r2,0
41031814:	108ae304 	addi	r2,r2,11148
41031818:	10800017 	ldw	r2,0(r2)
4103181c:	103ee83a 	callr	r2
41031820:	e0bfff15 	stw	r2,-4(fp)
41031824:	00000306 	br	41031834 <alt_get_errno+0x48>
41031828:	00800034 	movhi	r2,0
4103182c:	108aef04 	addi	r2,r2,11196
41031830:	e0bfff15 	stw	r2,-4(fp)
41031834:	e0bfff17 	ldw	r2,-4(fp)
}
41031838:	e037883a 	mov	sp,fp
4103183c:	dfc00117 	ldw	ra,4(sp)
41031840:	df000017 	ldw	fp,0(sp)
41031844:	dec00204 	addi	sp,sp,8
41031848:	f800283a 	ret

4103184c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
4103184c:	defffe04 	addi	sp,sp,-8
41031850:	dfc00115 	stw	ra,4(sp)
41031854:	df000015 	stw	fp,0(sp)
41031858:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
4103185c:	011040f4 	movhi	r4,16643
41031860:	2113e804 	addi	r4,r4,20384
41031864:	01400034 	movhi	r5,0
41031868:	29444604 	addi	r5,r5,4376
4103186c:	01800034 	movhi	r6,0
41031870:	318aea04 	addi	r6,r6,11176
41031874:	10318cc0 	call	410318cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
41031878:	011040b4 	movhi	r4,16642
4103187c:	21000804 	addi	r4,r4,32
41031880:	015040b4 	movhi	r5,16642
41031884:	29400804 	addi	r5,r5,32
41031888:	019040b4 	movhi	r6,16642
4103188c:	31806d04 	addi	r6,r6,436
41031890:	10318cc0 	call	410318cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
41031894:	011040f4 	movhi	r4,16643
41031898:	210fa204 	addi	r4,r4,16008
4103189c:	01400034 	movhi	r5,0
410318a0:	29400004 	addi	r5,r5,0
410318a4:	01800034 	movhi	r6,0
410318a8:	31844604 	addi	r6,r6,4376
410318ac:	10318cc0 	call	410318cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
410318b0:	1032d140 	call	41032d14 <alt_dcache_flush_all>
  alt_icache_flush_all();
410318b4:	1032fc80 	call	41032fc8 <alt_icache_flush_all>
}
410318b8:	e037883a 	mov	sp,fp
410318bc:	dfc00117 	ldw	ra,4(sp)
410318c0:	df000017 	ldw	fp,0(sp)
410318c4:	dec00204 	addi	sp,sp,8
410318c8:	f800283a 	ret

410318cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
410318cc:	defffc04 	addi	sp,sp,-16
410318d0:	df000315 	stw	fp,12(sp)
410318d4:	df000304 	addi	fp,sp,12
410318d8:	e13ffd15 	stw	r4,-12(fp)
410318dc:	e17ffe15 	stw	r5,-8(fp)
410318e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
410318e4:	e0fffe17 	ldw	r3,-8(fp)
410318e8:	e0bffd17 	ldw	r2,-12(fp)
410318ec:	18800e26 	beq	r3,r2,41031928 <alt_load_section+0x5c>
  {
    while( to != end )
410318f0:	00000a06 	br	4103191c <alt_load_section+0x50>
    {
      *to++ = *from++;
410318f4:	e0bffd17 	ldw	r2,-12(fp)
410318f8:	10c00017 	ldw	r3,0(r2)
410318fc:	e0bffe17 	ldw	r2,-8(fp)
41031900:	10c00015 	stw	r3,0(r2)
41031904:	e0bffe17 	ldw	r2,-8(fp)
41031908:	10800104 	addi	r2,r2,4
4103190c:	e0bffe15 	stw	r2,-8(fp)
41031910:	e0bffd17 	ldw	r2,-12(fp)
41031914:	10800104 	addi	r2,r2,4
41031918:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
4103191c:	e0fffe17 	ldw	r3,-8(fp)
41031920:	e0bfff17 	ldw	r2,-4(fp)
41031924:	18bff31e 	bne	r3,r2,410318f4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
41031928:	e037883a 	mov	sp,fp
4103192c:	df000017 	ldw	fp,0(sp)
41031930:	dec00104 	addi	sp,sp,4
41031934:	f800283a 	ret

41031938 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
41031938:	defff804 	addi	sp,sp,-32
4103193c:	dfc00715 	stw	ra,28(sp)
41031940:	df000615 	stw	fp,24(sp)
41031944:	df000604 	addi	fp,sp,24
41031948:	e13ffc15 	stw	r4,-16(fp)
4103194c:	e17ffd15 	stw	r5,-12(fp)
41031950:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
41031954:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41031958:	e0bffc17 	ldw	r2,-16(fp)
4103195c:	1004803a 	cmplt	r2,r2,zero
41031960:	1000081e 	bne	r2,zero,41031984 <lseek+0x4c>
41031964:	e0bffc17 	ldw	r2,-16(fp)
41031968:	10800324 	muli	r2,r2,12
4103196c:	1007883a 	mov	r3,r2
41031970:	00800034 	movhi	r2,0
41031974:	10865f04 	addi	r2,r2,6524
41031978:	1887883a 	add	r3,r3,r2
4103197c:	e0ffff15 	stw	r3,-4(fp)
41031980:	00000106 	br	41031988 <lseek+0x50>
41031984:	e03fff15 	stw	zero,-4(fp)
41031988:	e0bfff17 	ldw	r2,-4(fp)
4103198c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
41031990:	e0bffb17 	ldw	r2,-20(fp)
41031994:	1005003a 	cmpeq	r2,r2,zero
41031998:	1000111e 	bne	r2,zero,410319e0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
4103199c:	e0bffb17 	ldw	r2,-20(fp)
410319a0:	10800017 	ldw	r2,0(r2)
410319a4:	10800717 	ldw	r2,28(r2)
410319a8:	1005003a 	cmpeq	r2,r2,zero
410319ac:	1000091e 	bne	r2,zero,410319d4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
410319b0:	e0bffb17 	ldw	r2,-20(fp)
410319b4:	10800017 	ldw	r2,0(r2)
410319b8:	10800717 	ldw	r2,28(r2)
410319bc:	e13ffb17 	ldw	r4,-20(fp)
410319c0:	e17ffd17 	ldw	r5,-12(fp)
410319c4:	e1bffe17 	ldw	r6,-8(fp)
410319c8:	103ee83a 	callr	r2
410319cc:	e0bffa15 	stw	r2,-24(fp)
410319d0:	00000506 	br	410319e8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
410319d4:	00bfde84 	movi	r2,-134
410319d8:	e0bffa15 	stw	r2,-24(fp)
410319dc:	00000206 	br	410319e8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
410319e0:	00bfebc4 	movi	r2,-81
410319e4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
410319e8:	e0bffa17 	ldw	r2,-24(fp)
410319ec:	1004403a 	cmpge	r2,r2,zero
410319f0:	1000071e 	bne	r2,zero,41031a10 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
410319f4:	1031a280 	call	41031a28 <alt_get_errno>
410319f8:	1007883a 	mov	r3,r2
410319fc:	e0bffa17 	ldw	r2,-24(fp)
41031a00:	0085c83a 	sub	r2,zero,r2
41031a04:	18800015 	stw	r2,0(r3)
    rc = -1;
41031a08:	00bfffc4 	movi	r2,-1
41031a0c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
41031a10:	e0bffa17 	ldw	r2,-24(fp)
}
41031a14:	e037883a 	mov	sp,fp
41031a18:	dfc00117 	ldw	ra,4(sp)
41031a1c:	df000017 	ldw	fp,0(sp)
41031a20:	dec00204 	addi	sp,sp,8
41031a24:	f800283a 	ret

41031a28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41031a28:	defffd04 	addi	sp,sp,-12
41031a2c:	dfc00215 	stw	ra,8(sp)
41031a30:	df000115 	stw	fp,4(sp)
41031a34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41031a38:	00800034 	movhi	r2,0
41031a3c:	108ae304 	addi	r2,r2,11148
41031a40:	10800017 	ldw	r2,0(r2)
41031a44:	1005003a 	cmpeq	r2,r2,zero
41031a48:	1000061e 	bne	r2,zero,41031a64 <alt_get_errno+0x3c>
41031a4c:	00800034 	movhi	r2,0
41031a50:	108ae304 	addi	r2,r2,11148
41031a54:	10800017 	ldw	r2,0(r2)
41031a58:	103ee83a 	callr	r2
41031a5c:	e0bfff15 	stw	r2,-4(fp)
41031a60:	00000306 	br	41031a70 <alt_get_errno+0x48>
41031a64:	00800034 	movhi	r2,0
41031a68:	108aef04 	addi	r2,r2,11196
41031a6c:	e0bfff15 	stw	r2,-4(fp)
41031a70:	e0bfff17 	ldw	r2,-4(fp)
}
41031a74:	e037883a 	mov	sp,fp
41031a78:	dfc00117 	ldw	ra,4(sp)
41031a7c:	df000017 	ldw	fp,0(sp)
41031a80:	dec00204 	addi	sp,sp,8
41031a84:	f800283a 	ret

41031a88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
41031a88:	defffd04 	addi	sp,sp,-12
41031a8c:	dfc00215 	stw	ra,8(sp)
41031a90:	df000115 	stw	fp,4(sp)
41031a94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
41031a98:	0009883a 	mov	r4,zero
41031a9c:	1031f500 	call	41031f50 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
41031aa0:	1031f840 	call	41031f84 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
41031aa4:	01000034 	movhi	r4,0
41031aa8:	21043e04 	addi	r4,r4,4344
41031aac:	01400034 	movhi	r5,0
41031ab0:	29443e04 	addi	r5,r5,4344
41031ab4:	01800034 	movhi	r6,0
41031ab8:	31843e04 	addi	r6,r6,4344
41031abc:	10333880 	call	41033388 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
41031ac0:	1032e6c0 	call	41032e6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
41031ac4:	011040f4 	movhi	r4,16643
41031ac8:	210bb404 	addi	r4,r4,11984
41031acc:	1033af00 	call	41033af0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
41031ad0:	d1201c17 	ldw	r4,-32656(gp)
41031ad4:	d1601d17 	ldw	r5,-32652(gp)
41031ad8:	d1a01e17 	ldw	r6,-32648(gp)
41031adc:	10221e40 	call	410221e4 <main>
41031ae0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
41031ae4:	01000044 	movi	r4,1
41031ae8:	10313280 	call	41031328 <close>
  exit (result);
41031aec:	e13fff17 	ldw	r4,-4(fp)
41031af0:	1033b040 	call	41033b04 <exit>

41031af4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
41031af4:	defffe04 	addi	sp,sp,-8
41031af8:	df000115 	stw	fp,4(sp)
41031afc:	df000104 	addi	fp,sp,4
41031b00:	e13fff15 	stw	r4,-4(fp)
}
41031b04:	e037883a 	mov	sp,fp
41031b08:	df000017 	ldw	fp,0(sp)
41031b0c:	dec00104 	addi	sp,sp,4
41031b10:	f800283a 	ret

41031b14 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
41031b14:	defffe04 	addi	sp,sp,-8
41031b18:	df000115 	stw	fp,4(sp)
41031b1c:	df000104 	addi	fp,sp,4
41031b20:	e13fff15 	stw	r4,-4(fp)
}
41031b24:	e037883a 	mov	sp,fp
41031b28:	df000017 	ldw	fp,0(sp)
41031b2c:	dec00104 	addi	sp,sp,4
41031b30:	f800283a 	ret

41031b34 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
41031b34:	defff704 	addi	sp,sp,-36
41031b38:	dfc00815 	stw	ra,32(sp)
41031b3c:	df000715 	stw	fp,28(sp)
41031b40:	df000704 	addi	fp,sp,28
41031b44:	e13ffb15 	stw	r4,-20(fp)
41031b48:	e17ffc15 	stw	r5,-16(fp)
41031b4c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41031b50:	e0bffb17 	ldw	r2,-20(fp)
41031b54:	1004803a 	cmplt	r2,r2,zero
41031b58:	1000081e 	bne	r2,zero,41031b7c <read+0x48>
41031b5c:	e0bffb17 	ldw	r2,-20(fp)
41031b60:	10800324 	muli	r2,r2,12
41031b64:	1007883a 	mov	r3,r2
41031b68:	00800034 	movhi	r2,0
41031b6c:	10865f04 	addi	r2,r2,6524
41031b70:	1887883a 	add	r3,r3,r2
41031b74:	e0ffff15 	stw	r3,-4(fp)
41031b78:	00000106 	br	41031b80 <read+0x4c>
41031b7c:	e03fff15 	stw	zero,-4(fp)
41031b80:	e0bfff17 	ldw	r2,-4(fp)
41031b84:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
41031b88:	e0bffa17 	ldw	r2,-24(fp)
41031b8c:	1005003a 	cmpeq	r2,r2,zero
41031b90:	1000241e 	bne	r2,zero,41031c24 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
41031b94:	e0bffa17 	ldw	r2,-24(fp)
41031b98:	10800217 	ldw	r2,8(r2)
41031b9c:	108000cc 	andi	r2,r2,3
41031ba0:	10800060 	cmpeqi	r2,r2,1
41031ba4:	10001a1e 	bne	r2,zero,41031c10 <read+0xdc>
41031ba8:	e0bffa17 	ldw	r2,-24(fp)
41031bac:	10800017 	ldw	r2,0(r2)
41031bb0:	10800517 	ldw	r2,20(r2)
41031bb4:	1005003a 	cmpeq	r2,r2,zero
41031bb8:	1000151e 	bne	r2,zero,41031c10 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
41031bbc:	e0bffa17 	ldw	r2,-24(fp)
41031bc0:	10800017 	ldw	r2,0(r2)
41031bc4:	10800517 	ldw	r2,20(r2)
41031bc8:	e17ffc17 	ldw	r5,-16(fp)
41031bcc:	e1bffd17 	ldw	r6,-12(fp)
41031bd0:	e13ffa17 	ldw	r4,-24(fp)
41031bd4:	103ee83a 	callr	r2
41031bd8:	e0bff915 	stw	r2,-28(fp)
41031bdc:	e0bff917 	ldw	r2,-28(fp)
41031be0:	1004403a 	cmpge	r2,r2,zero
41031be4:	1000071e 	bne	r2,zero,41031c04 <read+0xd0>
        {
          ALT_ERRNO = -rval;
41031be8:	1031c540 	call	41031c54 <alt_get_errno>
41031bec:	e0fff917 	ldw	r3,-28(fp)
41031bf0:	00c7c83a 	sub	r3,zero,r3
41031bf4:	10c00015 	stw	r3,0(r2)
          return -1;
41031bf8:	00bfffc4 	movi	r2,-1
41031bfc:	e0bffe15 	stw	r2,-8(fp)
41031c00:	00000e06 	br	41031c3c <read+0x108>
        }
        return rval;
41031c04:	e0bff917 	ldw	r2,-28(fp)
41031c08:	e0bffe15 	stw	r2,-8(fp)
41031c0c:	00000b06 	br	41031c3c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
41031c10:	1031c540 	call	41031c54 <alt_get_errno>
41031c14:	1007883a 	mov	r3,r2
41031c18:	00800344 	movi	r2,13
41031c1c:	18800015 	stw	r2,0(r3)
41031c20:	00000406 	br	41031c34 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
41031c24:	1031c540 	call	41031c54 <alt_get_errno>
41031c28:	1007883a 	mov	r3,r2
41031c2c:	00801444 	movi	r2,81
41031c30:	18800015 	stw	r2,0(r3)
  }
  return -1;
41031c34:	00bfffc4 	movi	r2,-1
41031c38:	e0bffe15 	stw	r2,-8(fp)
41031c3c:	e0bffe17 	ldw	r2,-8(fp)
}
41031c40:	e037883a 	mov	sp,fp
41031c44:	dfc00117 	ldw	ra,4(sp)
41031c48:	df000017 	ldw	fp,0(sp)
41031c4c:	dec00204 	addi	sp,sp,8
41031c50:	f800283a 	ret

41031c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41031c54:	defffd04 	addi	sp,sp,-12
41031c58:	dfc00215 	stw	ra,8(sp)
41031c5c:	df000115 	stw	fp,4(sp)
41031c60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41031c64:	00800034 	movhi	r2,0
41031c68:	108ae304 	addi	r2,r2,11148
41031c6c:	10800017 	ldw	r2,0(r2)
41031c70:	1005003a 	cmpeq	r2,r2,zero
41031c74:	1000061e 	bne	r2,zero,41031c90 <alt_get_errno+0x3c>
41031c78:	00800034 	movhi	r2,0
41031c7c:	108ae304 	addi	r2,r2,11148
41031c80:	10800017 	ldw	r2,0(r2)
41031c84:	103ee83a 	callr	r2
41031c88:	e0bfff15 	stw	r2,-4(fp)
41031c8c:	00000306 	br	41031c9c <alt_get_errno+0x48>
41031c90:	00800034 	movhi	r2,0
41031c94:	108aef04 	addi	r2,r2,11196
41031c98:	e0bfff15 	stw	r2,-4(fp)
41031c9c:	e0bfff17 	ldw	r2,-4(fp)
}
41031ca0:	e037883a 	mov	sp,fp
41031ca4:	dfc00117 	ldw	ra,4(sp)
41031ca8:	df000017 	ldw	fp,0(sp)
41031cac:	dec00204 	addi	sp,sp,8
41031cb0:	f800283a 	ret

41031cb4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
41031cb4:	defffe04 	addi	sp,sp,-8
41031cb8:	df000115 	stw	fp,4(sp)
41031cbc:	df000104 	addi	fp,sp,4
41031cc0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
41031cc4:	e0bfff17 	ldw	r2,-4(fp)
41031cc8:	108000d0 	cmplti	r2,r2,3
41031ccc:	10000d1e 	bne	r2,zero,41031d04 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
41031cd0:	e0bfff17 	ldw	r2,-4(fp)
41031cd4:	00c00034 	movhi	r3,0
41031cd8:	18c65f04 	addi	r3,r3,6524
41031cdc:	10800324 	muli	r2,r2,12
41031ce0:	10c5883a 	add	r2,r2,r3
41031ce4:	10800204 	addi	r2,r2,8
41031ce8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
41031cec:	e0bfff17 	ldw	r2,-4(fp)
41031cf0:	00c00034 	movhi	r3,0
41031cf4:	18c65f04 	addi	r3,r3,6524
41031cf8:	10800324 	muli	r2,r2,12
41031cfc:	10c5883a 	add	r2,r2,r3
41031d00:	10000015 	stw	zero,0(r2)
  }
}
41031d04:	e037883a 	mov	sp,fp
41031d08:	df000017 	ldw	fp,0(sp)
41031d0c:	dec00104 	addi	sp,sp,4
41031d10:	f800283a 	ret

41031d14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
41031d14:	defff804 	addi	sp,sp,-32
41031d18:	df000715 	stw	fp,28(sp)
41031d1c:	df000704 	addi	fp,sp,28
41031d20:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41031d24:	0005303a 	rdctl	r2,status
41031d28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41031d2c:	e0fffb17 	ldw	r3,-20(fp)
41031d30:	00bfff84 	movi	r2,-2
41031d34:	1884703a 	and	r2,r3,r2
41031d38:	1001703a 	wrctl	status,r2
  
  return context;
41031d3c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
41031d40:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
41031d44:	d0a00f17 	ldw	r2,-32708(gp)
41031d48:	10c000c4 	addi	r3,r2,3
41031d4c:	00bfff04 	movi	r2,-4
41031d50:	1884703a 	and	r2,r3,r2
41031d54:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
41031d58:	d0e00f17 	ldw	r3,-32708(gp)
41031d5c:	e0bffe17 	ldw	r2,-8(fp)
41031d60:	1887883a 	add	r3,r3,r2
41031d64:	00900034 	movhi	r2,16384
41031d68:	10800004 	addi	r2,r2,0
41031d6c:	10c0072e 	bgeu	r2,r3,41031d8c <sbrk+0x78>
41031d70:	e0bffd17 	ldw	r2,-12(fp)
41031d74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41031d78:	e0bffa17 	ldw	r2,-24(fp)
41031d7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
41031d80:	00bfffc4 	movi	r2,-1
41031d84:	e0bfff15 	stw	r2,-4(fp)
41031d88:	00000c06 	br	41031dbc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
41031d8c:	d0a00f17 	ldw	r2,-32708(gp)
41031d90:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
41031d94:	d0e00f17 	ldw	r3,-32708(gp)
41031d98:	e0bffe17 	ldw	r2,-8(fp)
41031d9c:	1885883a 	add	r2,r3,r2
41031da0:	d0a00f15 	stw	r2,-32708(gp)
41031da4:	e0bffd17 	ldw	r2,-12(fp)
41031da8:	e0bff915 	stw	r2,-28(fp)
41031dac:	e0bff917 	ldw	r2,-28(fp)
41031db0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
41031db4:	e0bffc17 	ldw	r2,-16(fp)
41031db8:	e0bfff15 	stw	r2,-4(fp)
41031dbc:	e0bfff17 	ldw	r2,-4(fp)
} 
41031dc0:	e037883a 	mov	sp,fp
41031dc4:	df000017 	ldw	fp,0(sp)
41031dc8:	dec00104 	addi	sp,sp,4
41031dcc:	f800283a 	ret

41031dd0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
41031dd0:	defff704 	addi	sp,sp,-36
41031dd4:	dfc00815 	stw	ra,32(sp)
41031dd8:	df000715 	stw	fp,28(sp)
41031ddc:	df000704 	addi	fp,sp,28
41031de0:	e13ffb15 	stw	r4,-20(fp)
41031de4:	e17ffc15 	stw	r5,-16(fp)
41031de8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41031dec:	e0bffb17 	ldw	r2,-20(fp)
41031df0:	1004803a 	cmplt	r2,r2,zero
41031df4:	1000081e 	bne	r2,zero,41031e18 <write+0x48>
41031df8:	e0bffb17 	ldw	r2,-20(fp)
41031dfc:	10800324 	muli	r2,r2,12
41031e00:	1007883a 	mov	r3,r2
41031e04:	00800034 	movhi	r2,0
41031e08:	10865f04 	addi	r2,r2,6524
41031e0c:	1887883a 	add	r3,r3,r2
41031e10:	e0ffff15 	stw	r3,-4(fp)
41031e14:	00000106 	br	41031e1c <write+0x4c>
41031e18:	e03fff15 	stw	zero,-4(fp)
41031e1c:	e0bfff17 	ldw	r2,-4(fp)
41031e20:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
41031e24:	e0bffa17 	ldw	r2,-24(fp)
41031e28:	1005003a 	cmpeq	r2,r2,zero
41031e2c:	1000241e 	bne	r2,zero,41031ec0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
41031e30:	e0bffa17 	ldw	r2,-24(fp)
41031e34:	10800217 	ldw	r2,8(r2)
41031e38:	108000cc 	andi	r2,r2,3
41031e3c:	1005003a 	cmpeq	r2,r2,zero
41031e40:	10001a1e 	bne	r2,zero,41031eac <write+0xdc>
41031e44:	e0bffa17 	ldw	r2,-24(fp)
41031e48:	10800017 	ldw	r2,0(r2)
41031e4c:	10800617 	ldw	r2,24(r2)
41031e50:	1005003a 	cmpeq	r2,r2,zero
41031e54:	1000151e 	bne	r2,zero,41031eac <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
41031e58:	e0bffa17 	ldw	r2,-24(fp)
41031e5c:	10800017 	ldw	r2,0(r2)
41031e60:	10800617 	ldw	r2,24(r2)
41031e64:	e17ffc17 	ldw	r5,-16(fp)
41031e68:	e1bffd17 	ldw	r6,-12(fp)
41031e6c:	e13ffa17 	ldw	r4,-24(fp)
41031e70:	103ee83a 	callr	r2
41031e74:	e0bff915 	stw	r2,-28(fp)
41031e78:	e0bff917 	ldw	r2,-28(fp)
41031e7c:	1004403a 	cmpge	r2,r2,zero
41031e80:	1000071e 	bne	r2,zero,41031ea0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
41031e84:	1031ef00 	call	41031ef0 <alt_get_errno>
41031e88:	e0fff917 	ldw	r3,-28(fp)
41031e8c:	00c7c83a 	sub	r3,zero,r3
41031e90:	10c00015 	stw	r3,0(r2)
        return -1;
41031e94:	00bfffc4 	movi	r2,-1
41031e98:	e0bffe15 	stw	r2,-8(fp)
41031e9c:	00000e06 	br	41031ed8 <write+0x108>
      }
      return rval;
41031ea0:	e0bff917 	ldw	r2,-28(fp)
41031ea4:	e0bffe15 	stw	r2,-8(fp)
41031ea8:	00000b06 	br	41031ed8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
41031eac:	1031ef00 	call	41031ef0 <alt_get_errno>
41031eb0:	1007883a 	mov	r3,r2
41031eb4:	00800344 	movi	r2,13
41031eb8:	18800015 	stw	r2,0(r3)
41031ebc:	00000406 	br	41031ed0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
41031ec0:	1031ef00 	call	41031ef0 <alt_get_errno>
41031ec4:	1007883a 	mov	r3,r2
41031ec8:	00801444 	movi	r2,81
41031ecc:	18800015 	stw	r2,0(r3)
  }
  return -1;
41031ed0:	00bfffc4 	movi	r2,-1
41031ed4:	e0bffe15 	stw	r2,-8(fp)
41031ed8:	e0bffe17 	ldw	r2,-8(fp)
}
41031edc:	e037883a 	mov	sp,fp
41031ee0:	dfc00117 	ldw	ra,4(sp)
41031ee4:	df000017 	ldw	fp,0(sp)
41031ee8:	dec00204 	addi	sp,sp,8
41031eec:	f800283a 	ret

41031ef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41031ef0:	defffd04 	addi	sp,sp,-12
41031ef4:	dfc00215 	stw	ra,8(sp)
41031ef8:	df000115 	stw	fp,4(sp)
41031efc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41031f00:	00800034 	movhi	r2,0
41031f04:	108ae304 	addi	r2,r2,11148
41031f08:	10800017 	ldw	r2,0(r2)
41031f0c:	1005003a 	cmpeq	r2,r2,zero
41031f10:	1000061e 	bne	r2,zero,41031f2c <alt_get_errno+0x3c>
41031f14:	00800034 	movhi	r2,0
41031f18:	108ae304 	addi	r2,r2,11148
41031f1c:	10800017 	ldw	r2,0(r2)
41031f20:	103ee83a 	callr	r2
41031f24:	e0bfff15 	stw	r2,-4(fp)
41031f28:	00000306 	br	41031f38 <alt_get_errno+0x48>
41031f2c:	00800034 	movhi	r2,0
41031f30:	108aef04 	addi	r2,r2,11196
41031f34:	e0bfff15 	stw	r2,-4(fp)
41031f38:	e0bfff17 	ldw	r2,-4(fp)
}
41031f3c:	e037883a 	mov	sp,fp
41031f40:	dfc00117 	ldw	ra,4(sp)
41031f44:	df000017 	ldw	fp,0(sp)
41031f48:	dec00204 	addi	sp,sp,8
41031f4c:	f800283a 	ret

41031f50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
41031f50:	defffd04 	addi	sp,sp,-12
41031f54:	dfc00215 	stw	ra,8(sp)
41031f58:	df000115 	stw	fp,4(sp)
41031f5c:	df000104 	addi	fp,sp,4
41031f60:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
41031f64:	10338680 	call	41033868 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
41031f68:	00800044 	movi	r2,1
41031f6c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
41031f70:	e037883a 	mov	sp,fp
41031f74:	dfc00117 	ldw	ra,4(sp)
41031f78:	df000017 	ldw	fp,0(sp)
41031f7c:	dec00204 	addi	sp,sp,8
41031f80:	f800283a 	ret

41031f84 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
41031f84:	defffe04 	addi	sp,sp,-8
41031f88:	dfc00115 	stw	ra,4(sp)
41031f8c:	df000015 	stw	fp,0(sp)
41031f90:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
41031f94:	01100034 	movhi	r4,16384
41031f98:	000b883a 	mov	r5,zero
41031f9c:	01800044 	movi	r6,1
41031fa0:	01c0fa04 	movi	r7,1000
41031fa4:	1032b300 	call	41032b30 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
41031fa8:	01000034 	movhi	r4,0
41031fac:	2106c904 	addi	r4,r4,6948
41031fb0:	000b883a 	mov	r5,zero
41031fb4:	000d883a 	mov	r6,zero
41031fb8:	103215c0 	call	4103215c <altera_avalon_jtag_uart_init>
41031fbc:	01000034 	movhi	r4,0
41031fc0:	2106bf04 	addi	r4,r4,6908
41031fc4:	1031fdc0 	call	41031fdc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
41031fc8:	e037883a 	mov	sp,fp
41031fcc:	dfc00117 	ldw	ra,4(sp)
41031fd0:	df000017 	ldw	fp,0(sp)
41031fd4:	dec00204 	addi	sp,sp,8
41031fd8:	f800283a 	ret

41031fdc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
41031fdc:	defffd04 	addi	sp,sp,-12
41031fe0:	dfc00215 	stw	ra,8(sp)
41031fe4:	df000115 	stw	fp,4(sp)
41031fe8:	df000104 	addi	fp,sp,4
41031fec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
41031ff0:	e13fff17 	ldw	r4,-4(fp)
41031ff4:	01400034 	movhi	r5,0
41031ff8:	294ae004 	addi	r5,r5,11136
41031ffc:	1032d580 	call	41032d58 <alt_dev_llist_insert>
}
41032000:	e037883a 	mov	sp,fp
41032004:	dfc00117 	ldw	ra,4(sp)
41032008:	df000017 	ldw	fp,0(sp)
4103200c:	dec00204 	addi	sp,sp,8
41032010:	f800283a 	ret

41032014 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
41032014:	defffa04 	addi	sp,sp,-24
41032018:	dfc00515 	stw	ra,20(sp)
4103201c:	df000415 	stw	fp,16(sp)
41032020:	df000404 	addi	fp,sp,16
41032024:	e13ffd15 	stw	r4,-12(fp)
41032028:	e17ffe15 	stw	r5,-8(fp)
4103202c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
41032030:	e0bffd17 	ldw	r2,-12(fp)
41032034:	10800017 	ldw	r2,0(r2)
41032038:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
4103203c:	e0bffc17 	ldw	r2,-16(fp)
41032040:	11000a04 	addi	r4,r2,40
41032044:	e0bffd17 	ldw	r2,-12(fp)
41032048:	11c00217 	ldw	r7,8(r2)
4103204c:	e17ffe17 	ldw	r5,-8(fp)
41032050:	e1bfff17 	ldw	r6,-4(fp)
41032054:	103265c0 	call	4103265c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
41032058:	e037883a 	mov	sp,fp
4103205c:	dfc00117 	ldw	ra,4(sp)
41032060:	df000017 	ldw	fp,0(sp)
41032064:	dec00204 	addi	sp,sp,8
41032068:	f800283a 	ret

4103206c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
4103206c:	defffa04 	addi	sp,sp,-24
41032070:	dfc00515 	stw	ra,20(sp)
41032074:	df000415 	stw	fp,16(sp)
41032078:	df000404 	addi	fp,sp,16
4103207c:	e13ffd15 	stw	r4,-12(fp)
41032080:	e17ffe15 	stw	r5,-8(fp)
41032084:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
41032088:	e0bffd17 	ldw	r2,-12(fp)
4103208c:	10800017 	ldw	r2,0(r2)
41032090:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
41032094:	e0bffc17 	ldw	r2,-16(fp)
41032098:	11000a04 	addi	r4,r2,40
4103209c:	e0bffd17 	ldw	r2,-12(fp)
410320a0:	11c00217 	ldw	r7,8(r2)
410320a4:	e17ffe17 	ldw	r5,-8(fp)
410320a8:	e1bfff17 	ldw	r6,-4(fp)
410320ac:	10328800 	call	41032880 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
410320b0:	e037883a 	mov	sp,fp
410320b4:	dfc00117 	ldw	ra,4(sp)
410320b8:	df000017 	ldw	fp,0(sp)
410320bc:	dec00204 	addi	sp,sp,8
410320c0:	f800283a 	ret

410320c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
410320c4:	defffc04 	addi	sp,sp,-16
410320c8:	dfc00315 	stw	ra,12(sp)
410320cc:	df000215 	stw	fp,8(sp)
410320d0:	df000204 	addi	fp,sp,8
410320d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
410320d8:	e0bfff17 	ldw	r2,-4(fp)
410320dc:	10800017 	ldw	r2,0(r2)
410320e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
410320e4:	e0bffe17 	ldw	r2,-8(fp)
410320e8:	11000a04 	addi	r4,r2,40
410320ec:	e0bfff17 	ldw	r2,-4(fp)
410320f0:	11400217 	ldw	r5,8(r2)
410320f4:	10324f40 	call	410324f4 <altera_avalon_jtag_uart_close>
}
410320f8:	e037883a 	mov	sp,fp
410320fc:	dfc00117 	ldw	ra,4(sp)
41032100:	df000017 	ldw	fp,0(sp)
41032104:	dec00204 	addi	sp,sp,8
41032108:	f800283a 	ret

4103210c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
4103210c:	defffa04 	addi	sp,sp,-24
41032110:	dfc00515 	stw	ra,20(sp)
41032114:	df000415 	stw	fp,16(sp)
41032118:	df000404 	addi	fp,sp,16
4103211c:	e13ffd15 	stw	r4,-12(fp)
41032120:	e17ffe15 	stw	r5,-8(fp)
41032124:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
41032128:	e0bffd17 	ldw	r2,-12(fp)
4103212c:	10800017 	ldw	r2,0(r2)
41032130:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
41032134:	e0bffc17 	ldw	r2,-16(fp)
41032138:	11000a04 	addi	r4,r2,40
4103213c:	e17ffe17 	ldw	r5,-8(fp)
41032140:	e1bfff17 	ldw	r6,-4(fp)
41032144:	10325680 	call	41032568 <altera_avalon_jtag_uart_ioctl>
}
41032148:	e037883a 	mov	sp,fp
4103214c:	dfc00117 	ldw	ra,4(sp)
41032150:	df000017 	ldw	fp,0(sp)
41032154:	dec00204 	addi	sp,sp,8
41032158:	f800283a 	ret

4103215c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
4103215c:	defffa04 	addi	sp,sp,-24
41032160:	dfc00515 	stw	ra,20(sp)
41032164:	df000415 	stw	fp,16(sp)
41032168:	df000404 	addi	fp,sp,16
4103216c:	e13ffd15 	stw	r4,-12(fp)
41032170:	e17ffe15 	stw	r5,-8(fp)
41032174:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
41032178:	e0fffd17 	ldw	r3,-12(fp)
4103217c:	00800044 	movi	r2,1
41032180:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
41032184:	e0bffd17 	ldw	r2,-12(fp)
41032188:	10800017 	ldw	r2,0(r2)
4103218c:	11000104 	addi	r4,r2,4
41032190:	e0bffd17 	ldw	r2,-12(fp)
41032194:	10800817 	ldw	r2,32(r2)
41032198:	1007883a 	mov	r3,r2
4103219c:	2005883a 	mov	r2,r4
410321a0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
410321a4:	e13ffe17 	ldw	r4,-8(fp)
410321a8:	e17fff17 	ldw	r5,-4(fp)
410321ac:	d8000015 	stw	zero,0(sp)
410321b0:	019040f4 	movhi	r6,16643
410321b4:	31888704 	addi	r6,r6,8732
410321b8:	e1fffd17 	ldw	r7,-12(fp)
410321bc:	1032ff80 	call	41032ff8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
410321c0:	e0bffd17 	ldw	r2,-12(fp)
410321c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
410321c8:	e0bffd17 	ldw	r2,-12(fp)
410321cc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
410321d0:	00800034 	movhi	r2,0
410321d4:	108af704 	addi	r2,r2,11228
410321d8:	10800017 	ldw	r2,0(r2)
410321dc:	100b883a 	mov	r5,r2
410321e0:	019040f4 	movhi	r6,16643
410321e4:	31891104 	addi	r6,r6,9284
410321e8:	e1fffd17 	ldw	r7,-12(fp)
410321ec:	1032bc00 	call	41032bc0 <alt_alarm_start>
410321f0:	1004403a 	cmpge	r2,r2,zero
410321f4:	1000041e 	bne	r2,zero,41032208 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
410321f8:	e0fffd17 	ldw	r3,-12(fp)
410321fc:	00a00034 	movhi	r2,32768
41032200:	10bfffc4 	addi	r2,r2,-1
41032204:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
41032208:	e037883a 	mov	sp,fp
4103220c:	dfc00117 	ldw	ra,4(sp)
41032210:	df000017 	ldw	fp,0(sp)
41032214:	dec00204 	addi	sp,sp,8
41032218:	f800283a 	ret

4103221c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
4103221c:	defff804 	addi	sp,sp,-32
41032220:	df000715 	stw	fp,28(sp)
41032224:	df000704 	addi	fp,sp,28
41032228:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
4103222c:	e0bfff17 	ldw	r2,-4(fp)
41032230:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
41032234:	e0bffe17 	ldw	r2,-8(fp)
41032238:	10800017 	ldw	r2,0(r2)
4103223c:	e0bffd15 	stw	r2,-12(fp)
41032240:	00000006 	br	41032244 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
41032244:	e0bffd17 	ldw	r2,-12(fp)
41032248:	10800104 	addi	r2,r2,4
4103224c:	10800037 	ldwio	r2,0(r2)
41032250:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
41032254:	e0bffc17 	ldw	r2,-16(fp)
41032258:	1080c00c 	andi	r2,r2,768
4103225c:	1005003a 	cmpeq	r2,r2,zero
41032260:	1000741e 	bne	r2,zero,41032434 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
41032264:	e0bffc17 	ldw	r2,-16(fp)
41032268:	1080400c 	andi	r2,r2,256
4103226c:	1005003a 	cmpeq	r2,r2,zero
41032270:	1000351e 	bne	r2,zero,41032348 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
41032274:	00800074 	movhi	r2,1
41032278:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4103227c:	e0bffe17 	ldw	r2,-8(fp)
41032280:	10800a17 	ldw	r2,40(r2)
41032284:	10800044 	addi	r2,r2,1
41032288:	1081ffcc 	andi	r2,r2,2047
4103228c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
41032290:	e0bffe17 	ldw	r2,-8(fp)
41032294:	10c00b17 	ldw	r3,44(r2)
41032298:	e0bffa17 	ldw	r2,-24(fp)
4103229c:	18801626 	beq	r3,r2,410322f8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
410322a0:	e0bffd17 	ldw	r2,-12(fp)
410322a4:	10800037 	ldwio	r2,0(r2)
410322a8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
410322ac:	e0bffb17 	ldw	r2,-20(fp)
410322b0:	10a0000c 	andi	r2,r2,32768
410322b4:	1005003a 	cmpeq	r2,r2,zero
410322b8:	10000f1e 	bne	r2,zero,410322f8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
410322bc:	e0bffe17 	ldw	r2,-8(fp)
410322c0:	10c00a17 	ldw	r3,40(r2)
410322c4:	e0bffb17 	ldw	r2,-20(fp)
410322c8:	1009883a 	mov	r4,r2
410322cc:	e0bffe17 	ldw	r2,-8(fp)
410322d0:	1885883a 	add	r2,r3,r2
410322d4:	10800e04 	addi	r2,r2,56
410322d8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
410322dc:	e0bffe17 	ldw	r2,-8(fp)
410322e0:	10800a17 	ldw	r2,40(r2)
410322e4:	10800044 	addi	r2,r2,1
410322e8:	10c1ffcc 	andi	r3,r2,2047
410322ec:	e0bffe17 	ldw	r2,-8(fp)
410322f0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
410322f4:	003fe106 	br	4103227c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
410322f8:	e0bffb17 	ldw	r2,-20(fp)
410322fc:	10bfffec 	andhi	r2,r2,65535
41032300:	1005003a 	cmpeq	r2,r2,zero
41032304:	1000101e 	bne	r2,zero,41032348 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
41032308:	e0bffe17 	ldw	r2,-8(fp)
4103230c:	10c00817 	ldw	r3,32(r2)
41032310:	00bfff84 	movi	r2,-2
41032314:	1886703a 	and	r3,r3,r2
41032318:	e0bffe17 	ldw	r2,-8(fp)
4103231c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
41032320:	e0bffd17 	ldw	r2,-12(fp)
41032324:	11000104 	addi	r4,r2,4
41032328:	e0bffe17 	ldw	r2,-8(fp)
4103232c:	10800817 	ldw	r2,32(r2)
41032330:	1007883a 	mov	r3,r2
41032334:	2005883a 	mov	r2,r4
41032338:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4103233c:	e0bffd17 	ldw	r2,-12(fp)
41032340:	10800104 	addi	r2,r2,4
41032344:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
41032348:	e0bffc17 	ldw	r2,-16(fp)
4103234c:	1080800c 	andi	r2,r2,512
41032350:	1005003a 	cmpeq	r2,r2,zero
41032354:	103fbb1e 	bne	r2,zero,41032244 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
41032358:	e0bffc17 	ldw	r2,-16(fp)
4103235c:	10bfffec 	andhi	r2,r2,65535
41032360:	1004d43a 	srli	r2,r2,16
41032364:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
41032368:	00001506 	br	410323c0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
4103236c:	e13ffd17 	ldw	r4,-12(fp)
41032370:	e0bffe17 	ldw	r2,-8(fp)
41032374:	10c00d17 	ldw	r3,52(r2)
41032378:	e0bffe17 	ldw	r2,-8(fp)
4103237c:	1885883a 	add	r2,r3,r2
41032380:	10820e04 	addi	r2,r2,2104
41032384:	10800003 	ldbu	r2,0(r2)
41032388:	10c03fcc 	andi	r3,r2,255
4103238c:	18c0201c 	xori	r3,r3,128
41032390:	18ffe004 	addi	r3,r3,-128
41032394:	2005883a 	mov	r2,r4
41032398:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4103239c:	e0bffe17 	ldw	r2,-8(fp)
410323a0:	10800d17 	ldw	r2,52(r2)
410323a4:	10800044 	addi	r2,r2,1
410323a8:	10c1ffcc 	andi	r3,r2,2047
410323ac:	e0bffe17 	ldw	r2,-8(fp)
410323b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
410323b4:	e0bff917 	ldw	r2,-28(fp)
410323b8:	10bfffc4 	addi	r2,r2,-1
410323bc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
410323c0:	e0bff917 	ldw	r2,-28(fp)
410323c4:	1005003a 	cmpeq	r2,r2,zero
410323c8:	1000051e 	bne	r2,zero,410323e0 <altera_avalon_jtag_uart_irq+0x1c4>
410323cc:	e0bffe17 	ldw	r2,-8(fp)
410323d0:	10c00d17 	ldw	r3,52(r2)
410323d4:	e0bffe17 	ldw	r2,-8(fp)
410323d8:	10800c17 	ldw	r2,48(r2)
410323dc:	18bfe31e 	bne	r3,r2,4103236c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
410323e0:	e0bff917 	ldw	r2,-28(fp)
410323e4:	1005003a 	cmpeq	r2,r2,zero
410323e8:	103f961e 	bne	r2,zero,41032244 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
410323ec:	e0bffe17 	ldw	r2,-8(fp)
410323f0:	10c00817 	ldw	r3,32(r2)
410323f4:	00bfff44 	movi	r2,-3
410323f8:	1886703a 	and	r3,r3,r2
410323fc:	e0bffe17 	ldw	r2,-8(fp)
41032400:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
41032404:	e0bffe17 	ldw	r2,-8(fp)
41032408:	10800017 	ldw	r2,0(r2)
4103240c:	11000104 	addi	r4,r2,4
41032410:	e0bffe17 	ldw	r2,-8(fp)
41032414:	10800817 	ldw	r2,32(r2)
41032418:	1007883a 	mov	r3,r2
4103241c:	2005883a 	mov	r2,r4
41032420:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
41032424:	e0bffd17 	ldw	r2,-12(fp)
41032428:	10800104 	addi	r2,r2,4
4103242c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
41032430:	003f8406 	br	41032244 <altera_avalon_jtag_uart_irq+0x28>
}
41032434:	e037883a 	mov	sp,fp
41032438:	df000017 	ldw	fp,0(sp)
4103243c:	dec00104 	addi	sp,sp,4
41032440:	f800283a 	ret

41032444 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
41032444:	defffc04 	addi	sp,sp,-16
41032448:	df000315 	stw	fp,12(sp)
4103244c:	df000304 	addi	fp,sp,12
41032450:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
41032454:	e0bfff17 	ldw	r2,-4(fp)
41032458:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
4103245c:	e0bffe17 	ldw	r2,-8(fp)
41032460:	10800017 	ldw	r2,0(r2)
41032464:	10800104 	addi	r2,r2,4
41032468:	10800037 	ldwio	r2,0(r2)
4103246c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
41032470:	e0bffd17 	ldw	r2,-12(fp)
41032474:	1081000c 	andi	r2,r2,1024
41032478:	1005003a 	cmpeq	r2,r2,zero
4103247c:	10000c1e 	bne	r2,zero,410324b0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
41032480:	e0bffe17 	ldw	r2,-8(fp)
41032484:	10800017 	ldw	r2,0(r2)
41032488:	11000104 	addi	r4,r2,4
4103248c:	e0bffe17 	ldw	r2,-8(fp)
41032490:	10800817 	ldw	r2,32(r2)
41032494:	10810014 	ori	r2,r2,1024
41032498:	1007883a 	mov	r3,r2
4103249c:	2005883a 	mov	r2,r4
410324a0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
410324a4:	e0bffe17 	ldw	r2,-8(fp)
410324a8:	10000915 	stw	zero,36(r2)
410324ac:	00000a06 	br	410324d8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
410324b0:	e0bffe17 	ldw	r2,-8(fp)
410324b4:	10c00917 	ldw	r3,36(r2)
410324b8:	00a00034 	movhi	r2,32768
410324bc:	10bfff04 	addi	r2,r2,-4
410324c0:	10c00536 	bltu	r2,r3,410324d8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
410324c4:	e0bffe17 	ldw	r2,-8(fp)
410324c8:	10800917 	ldw	r2,36(r2)
410324cc:	10c00044 	addi	r3,r2,1
410324d0:	e0bffe17 	ldw	r2,-8(fp)
410324d4:	10c00915 	stw	r3,36(r2)
410324d8:	00800034 	movhi	r2,0
410324dc:	108af704 	addi	r2,r2,11228
410324e0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
410324e4:	e037883a 	mov	sp,fp
410324e8:	df000017 	ldw	fp,0(sp)
410324ec:	dec00104 	addi	sp,sp,4
410324f0:	f800283a 	ret

410324f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
410324f4:	defffc04 	addi	sp,sp,-16
410324f8:	df000315 	stw	fp,12(sp)
410324fc:	df000304 	addi	fp,sp,12
41032500:	e13ffd15 	stw	r4,-12(fp)
41032504:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
41032508:	00000706 	br	41032528 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
4103250c:	e0bffe17 	ldw	r2,-8(fp)
41032510:	1090000c 	andi	r2,r2,16384
41032514:	1005003a 	cmpeq	r2,r2,zero
41032518:	1000031e 	bne	r2,zero,41032528 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
4103251c:	00bffd44 	movi	r2,-11
41032520:	e0bfff15 	stw	r2,-4(fp)
41032524:	00000b06 	br	41032554 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
41032528:	e0bffd17 	ldw	r2,-12(fp)
4103252c:	10c00d17 	ldw	r3,52(r2)
41032530:	e0bffd17 	ldw	r2,-12(fp)
41032534:	10800c17 	ldw	r2,48(r2)
41032538:	18800526 	beq	r3,r2,41032550 <altera_avalon_jtag_uart_close+0x5c>
4103253c:	e0bffd17 	ldw	r2,-12(fp)
41032540:	10c00917 	ldw	r3,36(r2)
41032544:	e0bffd17 	ldw	r2,-12(fp)
41032548:	10800117 	ldw	r2,4(r2)
4103254c:	18bfef36 	bltu	r3,r2,4103250c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
41032550:	e03fff15 	stw	zero,-4(fp)
41032554:	e0bfff17 	ldw	r2,-4(fp)
}
41032558:	e037883a 	mov	sp,fp
4103255c:	df000017 	ldw	fp,0(sp)
41032560:	dec00104 	addi	sp,sp,4
41032564:	f800283a 	ret

41032568 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
41032568:	defff804 	addi	sp,sp,-32
4103256c:	df000715 	stw	fp,28(sp)
41032570:	df000704 	addi	fp,sp,28
41032574:	e13ffb15 	stw	r4,-20(fp)
41032578:	e17ffc15 	stw	r5,-16(fp)
4103257c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
41032580:	00bff9c4 	movi	r2,-25
41032584:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
41032588:	e0bffc17 	ldw	r2,-16(fp)
4103258c:	e0bfff15 	stw	r2,-4(fp)
41032590:	e0ffff17 	ldw	r3,-4(fp)
41032594:	189a8060 	cmpeqi	r2,r3,27137
41032598:	1000041e 	bne	r2,zero,410325ac <altera_avalon_jtag_uart_ioctl+0x44>
4103259c:	e0ffff17 	ldw	r3,-4(fp)
410325a0:	189a80a0 	cmpeqi	r2,r3,27138
410325a4:	10001b1e 	bne	r2,zero,41032614 <altera_avalon_jtag_uart_ioctl+0xac>
410325a8:	00002706 	br	41032648 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
410325ac:	e0bffb17 	ldw	r2,-20(fp)
410325b0:	10c00117 	ldw	r3,4(r2)
410325b4:	00a00034 	movhi	r2,32768
410325b8:	10bfffc4 	addi	r2,r2,-1
410325bc:	18802226 	beq	r3,r2,41032648 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
410325c0:	e0bffd17 	ldw	r2,-12(fp)
410325c4:	10800017 	ldw	r2,0(r2)
410325c8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
410325cc:	e0bff917 	ldw	r2,-28(fp)
410325d0:	10800090 	cmplti	r2,r2,2
410325d4:	1000071e 	bne	r2,zero,410325f4 <altera_avalon_jtag_uart_ioctl+0x8c>
410325d8:	e0fff917 	ldw	r3,-28(fp)
410325dc:	00a00034 	movhi	r2,32768
410325e0:	10bfffc4 	addi	r2,r2,-1
410325e4:	18800326 	beq	r3,r2,410325f4 <altera_avalon_jtag_uart_ioctl+0x8c>
410325e8:	e0bff917 	ldw	r2,-28(fp)
410325ec:	e0bffe15 	stw	r2,-8(fp)
410325f0:	00000306 	br	41032600 <altera_avalon_jtag_uart_ioctl+0x98>
410325f4:	00e00034 	movhi	r3,32768
410325f8:	18ffff84 	addi	r3,r3,-2
410325fc:	e0fffe15 	stw	r3,-8(fp)
41032600:	e0bffb17 	ldw	r2,-20(fp)
41032604:	e0fffe17 	ldw	r3,-8(fp)
41032608:	10c00115 	stw	r3,4(r2)
      rc = 0;
4103260c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
41032610:	00000d06 	br	41032648 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
41032614:	e0bffb17 	ldw	r2,-20(fp)
41032618:	10c00117 	ldw	r3,4(r2)
4103261c:	00a00034 	movhi	r2,32768
41032620:	10bfffc4 	addi	r2,r2,-1
41032624:	18800826 	beq	r3,r2,41032648 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
41032628:	e13ffd17 	ldw	r4,-12(fp)
4103262c:	e0bffb17 	ldw	r2,-20(fp)
41032630:	10c00917 	ldw	r3,36(r2)
41032634:	e0bffb17 	ldw	r2,-20(fp)
41032638:	10800117 	ldw	r2,4(r2)
4103263c:	1885803a 	cmpltu	r2,r3,r2
41032640:	20800015 	stw	r2,0(r4)
      rc = 0;
41032644:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
41032648:	e0bffa17 	ldw	r2,-24(fp)
}
4103264c:	e037883a 	mov	sp,fp
41032650:	df000017 	ldw	fp,0(sp)
41032654:	dec00104 	addi	sp,sp,4
41032658:	f800283a 	ret

4103265c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
4103265c:	defff204 	addi	sp,sp,-56
41032660:	dfc00d15 	stw	ra,52(sp)
41032664:	df000c15 	stw	fp,48(sp)
41032668:	df000c04 	addi	fp,sp,48
4103266c:	e13ffb15 	stw	r4,-20(fp)
41032670:	e17ffc15 	stw	r5,-16(fp)
41032674:	e1bffd15 	stw	r6,-12(fp)
41032678:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
4103267c:	e0bffc17 	ldw	r2,-16(fp)
41032680:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
41032684:	00004806 	br	410327a8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
41032688:	e0bffb17 	ldw	r2,-20(fp)
4103268c:	10800a17 	ldw	r2,40(r2)
41032690:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
41032694:	e0bffb17 	ldw	r2,-20(fp)
41032698:	10800b17 	ldw	r2,44(r2)
4103269c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
410326a0:	e0fff717 	ldw	r3,-36(fp)
410326a4:	e0bff617 	ldw	r2,-40(fp)
410326a8:	18800536 	bltu	r3,r2,410326c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
410326ac:	e0bff717 	ldw	r2,-36(fp)
410326b0:	e0fff617 	ldw	r3,-40(fp)
410326b4:	10c5c83a 	sub	r2,r2,r3
410326b8:	e0bff815 	stw	r2,-32(fp)
410326bc:	00000406 	br	410326d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
410326c0:	00820004 	movi	r2,2048
410326c4:	e0fff617 	ldw	r3,-40(fp)
410326c8:	10c5c83a 	sub	r2,r2,r3
410326cc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
410326d0:	e0bff817 	ldw	r2,-32(fp)
410326d4:	1005003a 	cmpeq	r2,r2,zero
410326d8:	10001f1e 	bne	r2,zero,41032758 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
410326dc:	e0fffd17 	ldw	r3,-12(fp)
410326e0:	e0bff817 	ldw	r2,-32(fp)
410326e4:	1880022e 	bgeu	r3,r2,410326f0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
410326e8:	e0bffd17 	ldw	r2,-12(fp)
410326ec:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
410326f0:	e0bffb17 	ldw	r2,-20(fp)
410326f4:	10c00e04 	addi	r3,r2,56
410326f8:	e0bff617 	ldw	r2,-40(fp)
410326fc:	1887883a 	add	r3,r3,r2
41032700:	e0bffa17 	ldw	r2,-24(fp)
41032704:	1009883a 	mov	r4,r2
41032708:	180b883a 	mov	r5,r3
4103270c:	e1bff817 	ldw	r6,-32(fp)
41032710:	1022c800 	call	41022c80 <memcpy>
      ptr   += n;
41032714:	e0fff817 	ldw	r3,-32(fp)
41032718:	e0bffa17 	ldw	r2,-24(fp)
4103271c:	10c5883a 	add	r2,r2,r3
41032720:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
41032724:	e0fffd17 	ldw	r3,-12(fp)
41032728:	e0bff817 	ldw	r2,-32(fp)
4103272c:	1885c83a 	sub	r2,r3,r2
41032730:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
41032734:	e0fff617 	ldw	r3,-40(fp)
41032738:	e0bff817 	ldw	r2,-32(fp)
4103273c:	1885883a 	add	r2,r3,r2
41032740:	10c1ffcc 	andi	r3,r2,2047
41032744:	e0bffb17 	ldw	r2,-20(fp)
41032748:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
4103274c:	e0bffd17 	ldw	r2,-12(fp)
41032750:	10800048 	cmpgei	r2,r2,1
41032754:	103fcc1e 	bne	r2,zero,41032688 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
41032758:	e0fffa17 	ldw	r3,-24(fp)
4103275c:	e0bffc17 	ldw	r2,-16(fp)
41032760:	1880141e 	bne	r3,r2,410327b4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
41032764:	e0bffe17 	ldw	r2,-8(fp)
41032768:	1090000c 	andi	r2,r2,16384
4103276c:	1004c03a 	cmpne	r2,r2,zero
41032770:	1000101e 	bne	r2,zero,410327b4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
41032774:	e0bffb17 	ldw	r2,-20(fp)
41032778:	10c00a17 	ldw	r3,40(r2)
4103277c:	e0bff717 	ldw	r2,-36(fp)
41032780:	1880051e 	bne	r3,r2,41032798 <altera_avalon_jtag_uart_read+0x13c>
41032784:	e0bffb17 	ldw	r2,-20(fp)
41032788:	10c00917 	ldw	r3,36(r2)
4103278c:	e0bffb17 	ldw	r2,-20(fp)
41032790:	10800117 	ldw	r2,4(r2)
41032794:	18bff736 	bltu	r3,r2,41032774 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
41032798:	e0bffb17 	ldw	r2,-20(fp)
4103279c:	10c00a17 	ldw	r3,40(r2)
410327a0:	e0bff717 	ldw	r2,-36(fp)
410327a4:	18800326 	beq	r3,r2,410327b4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
410327a8:	e0bffd17 	ldw	r2,-12(fp)
410327ac:	10800048 	cmpgei	r2,r2,1
410327b0:	103fb51e 	bne	r2,zero,41032688 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
410327b4:	e0fffa17 	ldw	r3,-24(fp)
410327b8:	e0bffc17 	ldw	r2,-16(fp)
410327bc:	18801926 	beq	r3,r2,41032824 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
410327c0:	0005303a 	rdctl	r2,status
410327c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
410327c8:	e0fff517 	ldw	r3,-44(fp)
410327cc:	00bfff84 	movi	r2,-2
410327d0:	1884703a 	and	r2,r3,r2
410327d4:	1001703a 	wrctl	status,r2
  
  return context;
410327d8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
410327dc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
410327e0:	e0bffb17 	ldw	r2,-20(fp)
410327e4:	10800817 	ldw	r2,32(r2)
410327e8:	10c00054 	ori	r3,r2,1
410327ec:	e0bffb17 	ldw	r2,-20(fp)
410327f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
410327f4:	e0bffb17 	ldw	r2,-20(fp)
410327f8:	10800017 	ldw	r2,0(r2)
410327fc:	11000104 	addi	r4,r2,4
41032800:	e0bffb17 	ldw	r2,-20(fp)
41032804:	10800817 	ldw	r2,32(r2)
41032808:	1007883a 	mov	r3,r2
4103280c:	2005883a 	mov	r2,r4
41032810:	10c00035 	stwio	r3,0(r2)
41032814:	e0bff917 	ldw	r2,-28(fp)
41032818:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4103281c:	e0bff417 	ldw	r2,-48(fp)
41032820:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
41032824:	e0fffa17 	ldw	r3,-24(fp)
41032828:	e0bffc17 	ldw	r2,-16(fp)
4103282c:	18800526 	beq	r3,r2,41032844 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
41032830:	e0fffa17 	ldw	r3,-24(fp)
41032834:	e0bffc17 	ldw	r2,-16(fp)
41032838:	1887c83a 	sub	r3,r3,r2
4103283c:	e0ffff15 	stw	r3,-4(fp)
41032840:	00000906 	br	41032868 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
41032844:	e0bffe17 	ldw	r2,-8(fp)
41032848:	1090000c 	andi	r2,r2,16384
4103284c:	1005003a 	cmpeq	r2,r2,zero
41032850:	1000031e 	bne	r2,zero,41032860 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
41032854:	00bffd44 	movi	r2,-11
41032858:	e0bfff15 	stw	r2,-4(fp)
4103285c:	00000206 	br	41032868 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
41032860:	00bffec4 	movi	r2,-5
41032864:	e0bfff15 	stw	r2,-4(fp)
41032868:	e0bfff17 	ldw	r2,-4(fp)
}
4103286c:	e037883a 	mov	sp,fp
41032870:	dfc00117 	ldw	ra,4(sp)
41032874:	df000017 	ldw	fp,0(sp)
41032878:	dec00204 	addi	sp,sp,8
4103287c:	f800283a 	ret

41032880 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
41032880:	defff204 	addi	sp,sp,-56
41032884:	dfc00d15 	stw	ra,52(sp)
41032888:	df000c15 	stw	fp,48(sp)
4103288c:	df000c04 	addi	fp,sp,48
41032890:	e13ffb15 	stw	r4,-20(fp)
41032894:	e17ffc15 	stw	r5,-16(fp)
41032898:	e1bffd15 	stw	r6,-12(fp)
4103289c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
410328a0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
410328a4:	e0bffc17 	ldw	r2,-16(fp)
410328a8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
410328ac:	00003a06 	br	41032998 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
410328b0:	e0bffb17 	ldw	r2,-20(fp)
410328b4:	10800c17 	ldw	r2,48(r2)
410328b8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
410328bc:	e0bffb17 	ldw	r2,-20(fp)
410328c0:	10800d17 	ldw	r2,52(r2)
410328c4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
410328c8:	e0fffa17 	ldw	r3,-24(fp)
410328cc:	e0bff917 	ldw	r2,-28(fp)
410328d0:	1880062e 	bgeu	r3,r2,410328ec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
410328d4:	e0fff917 	ldw	r3,-28(fp)
410328d8:	e0bffa17 	ldw	r2,-24(fp)
410328dc:	1885c83a 	sub	r2,r3,r2
410328e0:	10bfffc4 	addi	r2,r2,-1
410328e4:	e0bff815 	stw	r2,-32(fp)
410328e8:	00000c06 	br	4103291c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
410328ec:	e0bff917 	ldw	r2,-28(fp)
410328f0:	1005003a 	cmpeq	r2,r2,zero
410328f4:	1000051e 	bne	r2,zero,4103290c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
410328f8:	00820004 	movi	r2,2048
410328fc:	e0fffa17 	ldw	r3,-24(fp)
41032900:	10c5c83a 	sub	r2,r2,r3
41032904:	e0bff815 	stw	r2,-32(fp)
41032908:	00000406 	br	4103291c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
4103290c:	0081ffc4 	movi	r2,2047
41032910:	e0fffa17 	ldw	r3,-24(fp)
41032914:	10c5c83a 	sub	r2,r2,r3
41032918:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
4103291c:	e0bff817 	ldw	r2,-32(fp)
41032920:	1005003a 	cmpeq	r2,r2,zero
41032924:	10001f1e 	bne	r2,zero,410329a4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
41032928:	e0fffd17 	ldw	r3,-12(fp)
4103292c:	e0bff817 	ldw	r2,-32(fp)
41032930:	1880022e 	bgeu	r3,r2,4103293c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
41032934:	e0bffd17 	ldw	r2,-12(fp)
41032938:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
4103293c:	e0bffb17 	ldw	r2,-20(fp)
41032940:	10c20e04 	addi	r3,r2,2104
41032944:	e0bffa17 	ldw	r2,-24(fp)
41032948:	1885883a 	add	r2,r3,r2
4103294c:	e0fffc17 	ldw	r3,-16(fp)
41032950:	1009883a 	mov	r4,r2
41032954:	180b883a 	mov	r5,r3
41032958:	e1bff817 	ldw	r6,-32(fp)
4103295c:	1022c800 	call	41022c80 <memcpy>
      ptr   += n;
41032960:	e0fff817 	ldw	r3,-32(fp)
41032964:	e0bffc17 	ldw	r2,-16(fp)
41032968:	10c5883a 	add	r2,r2,r3
4103296c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
41032970:	e0fffd17 	ldw	r3,-12(fp)
41032974:	e0bff817 	ldw	r2,-32(fp)
41032978:	1885c83a 	sub	r2,r3,r2
4103297c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
41032980:	e0fffa17 	ldw	r3,-24(fp)
41032984:	e0bff817 	ldw	r2,-32(fp)
41032988:	1885883a 	add	r2,r3,r2
4103298c:	10c1ffcc 	andi	r3,r2,2047
41032990:	e0bffb17 	ldw	r2,-20(fp)
41032994:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
41032998:	e0bffd17 	ldw	r2,-12(fp)
4103299c:	10800048 	cmpgei	r2,r2,1
410329a0:	103fc31e 	bne	r2,zero,410328b0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
410329a4:	0005303a 	rdctl	r2,status
410329a8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
410329ac:	e0fff517 	ldw	r3,-44(fp)
410329b0:	00bfff84 	movi	r2,-2
410329b4:	1884703a 	and	r2,r3,r2
410329b8:	1001703a 	wrctl	status,r2
  
  return context;
410329bc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
410329c0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
410329c4:	e0bffb17 	ldw	r2,-20(fp)
410329c8:	10800817 	ldw	r2,32(r2)
410329cc:	10c00094 	ori	r3,r2,2
410329d0:	e0bffb17 	ldw	r2,-20(fp)
410329d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
410329d8:	e0bffb17 	ldw	r2,-20(fp)
410329dc:	10800017 	ldw	r2,0(r2)
410329e0:	11000104 	addi	r4,r2,4
410329e4:	e0bffb17 	ldw	r2,-20(fp)
410329e8:	10800817 	ldw	r2,32(r2)
410329ec:	1007883a 	mov	r3,r2
410329f0:	2005883a 	mov	r2,r4
410329f4:	10c00035 	stwio	r3,0(r2)
410329f8:	e0bff717 	ldw	r2,-36(fp)
410329fc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41032a00:	e0bff417 	ldw	r2,-48(fp)
41032a04:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
41032a08:	e0bffd17 	ldw	r2,-12(fp)
41032a0c:	10800050 	cmplti	r2,r2,1
41032a10:	1000111e 	bne	r2,zero,41032a58 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
41032a14:	e0bffe17 	ldw	r2,-8(fp)
41032a18:	1090000c 	andi	r2,r2,16384
41032a1c:	1004c03a 	cmpne	r2,r2,zero
41032a20:	1000101e 	bne	r2,zero,41032a64 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
41032a24:	e0bffb17 	ldw	r2,-20(fp)
41032a28:	10c00d17 	ldw	r3,52(r2)
41032a2c:	e0bff917 	ldw	r2,-28(fp)
41032a30:	1880051e 	bne	r3,r2,41032a48 <altera_avalon_jtag_uart_write+0x1c8>
41032a34:	e0bffb17 	ldw	r2,-20(fp)
41032a38:	10c00917 	ldw	r3,36(r2)
41032a3c:	e0bffb17 	ldw	r2,-20(fp)
41032a40:	10800117 	ldw	r2,4(r2)
41032a44:	18bff736 	bltu	r3,r2,41032a24 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
41032a48:	e0bffb17 	ldw	r2,-20(fp)
41032a4c:	10c00d17 	ldw	r3,52(r2)
41032a50:	e0bff917 	ldw	r2,-28(fp)
41032a54:	18800326 	beq	r3,r2,41032a64 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
41032a58:	e0bffd17 	ldw	r2,-12(fp)
41032a5c:	10800048 	cmpgei	r2,r2,1
41032a60:	103fcd1e 	bne	r2,zero,41032998 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
41032a64:	e0fffc17 	ldw	r3,-16(fp)
41032a68:	e0bff617 	ldw	r2,-40(fp)
41032a6c:	18800526 	beq	r3,r2,41032a84 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
41032a70:	e0fffc17 	ldw	r3,-16(fp)
41032a74:	e0bff617 	ldw	r2,-40(fp)
41032a78:	1887c83a 	sub	r3,r3,r2
41032a7c:	e0ffff15 	stw	r3,-4(fp)
41032a80:	00000906 	br	41032aa8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
41032a84:	e0bffe17 	ldw	r2,-8(fp)
41032a88:	1090000c 	andi	r2,r2,16384
41032a8c:	1005003a 	cmpeq	r2,r2,zero
41032a90:	1000031e 	bne	r2,zero,41032aa0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
41032a94:	00bffd44 	movi	r2,-11
41032a98:	e0bfff15 	stw	r2,-4(fp)
41032a9c:	00000206 	br	41032aa8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
41032aa0:	00bffec4 	movi	r2,-5
41032aa4:	e0bfff15 	stw	r2,-4(fp)
41032aa8:	e0bfff17 	ldw	r2,-4(fp)
}
41032aac:	e037883a 	mov	sp,fp
41032ab0:	dfc00117 	ldw	ra,4(sp)
41032ab4:	df000017 	ldw	fp,0(sp)
41032ab8:	dec00204 	addi	sp,sp,8
41032abc:	f800283a 	ret

41032ac0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
41032ac0:	defffa04 	addi	sp,sp,-24
41032ac4:	dfc00515 	stw	ra,20(sp)
41032ac8:	df000415 	stw	fp,16(sp)
41032acc:	df000404 	addi	fp,sp,16
41032ad0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
41032ad4:	e0bfff17 	ldw	r2,-4(fp)
41032ad8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
41032adc:	e0bfff17 	ldw	r2,-4(fp)
41032ae0:	10800104 	addi	r2,r2,4
41032ae4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41032ae8:	0005303a 	rdctl	r2,status
41032aec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41032af0:	e0fffd17 	ldw	r3,-12(fp)
41032af4:	00bfff84 	movi	r2,-2
41032af8:	1884703a 	and	r2,r3,r2
41032afc:	1001703a 	wrctl	status,r2
  
  return context;
41032b00:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
41032b04:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
41032b08:	103375c0 	call	4103375c <alt_tick>
41032b0c:	e0bffe17 	ldw	r2,-8(fp)
41032b10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41032b14:	e0bffc17 	ldw	r2,-16(fp)
41032b18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
41032b1c:	e037883a 	mov	sp,fp
41032b20:	dfc00117 	ldw	ra,4(sp)
41032b24:	df000017 	ldw	fp,0(sp)
41032b28:	dec00204 	addi	sp,sp,8
41032b2c:	f800283a 	ret

41032b30 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
41032b30:	defff804 	addi	sp,sp,-32
41032b34:	dfc00715 	stw	ra,28(sp)
41032b38:	df000615 	stw	fp,24(sp)
41032b3c:	df000604 	addi	fp,sp,24
41032b40:	e13ffc15 	stw	r4,-16(fp)
41032b44:	e17ffd15 	stw	r5,-12(fp)
41032b48:	e1bffe15 	stw	r6,-8(fp)
41032b4c:	e1ffff15 	stw	r7,-4(fp)
41032b50:	e0bfff17 	ldw	r2,-4(fp)
41032b54:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
41032b58:	00800034 	movhi	r2,0
41032b5c:	108af704 	addi	r2,r2,11228
41032b60:	10800017 	ldw	r2,0(r2)
41032b64:	1004c03a 	cmpne	r2,r2,zero
41032b68:	1000041e 	bne	r2,zero,41032b7c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
41032b6c:	00c00034 	movhi	r3,0
41032b70:	18caf704 	addi	r3,r3,11228
41032b74:	e0bffb17 	ldw	r2,-20(fp)
41032b78:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
41032b7c:	e0bffc17 	ldw	r2,-16(fp)
41032b80:	10800104 	addi	r2,r2,4
41032b84:	1007883a 	mov	r3,r2
41032b88:	008001c4 	movi	r2,7
41032b8c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
41032b90:	d8000015 	stw	zero,0(sp)
41032b94:	e13ffd17 	ldw	r4,-12(fp)
41032b98:	e17ffe17 	ldw	r5,-8(fp)
41032b9c:	019040f4 	movhi	r6,16643
41032ba0:	318ab004 	addi	r6,r6,10944
41032ba4:	e1fffc17 	ldw	r7,-16(fp)
41032ba8:	1032ff80 	call	41032ff8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
41032bac:	e037883a 	mov	sp,fp
41032bb0:	dfc00117 	ldw	ra,4(sp)
41032bb4:	df000017 	ldw	fp,0(sp)
41032bb8:	dec00204 	addi	sp,sp,8
41032bbc:	f800283a 	ret

41032bc0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
41032bc0:	defff404 	addi	sp,sp,-48
41032bc4:	df000b15 	stw	fp,44(sp)
41032bc8:	df000b04 	addi	fp,sp,44
41032bcc:	e13ffb15 	stw	r4,-20(fp)
41032bd0:	e17ffc15 	stw	r5,-16(fp)
41032bd4:	e1bffd15 	stw	r6,-12(fp)
41032bd8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
41032bdc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
41032be0:	00800034 	movhi	r2,0
41032be4:	108af704 	addi	r2,r2,11228
41032be8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
41032bec:	1005003a 	cmpeq	r2,r2,zero
41032bf0:	1000411e 	bne	r2,zero,41032cf8 <alt_alarm_start+0x138>
  {
    if (alarm)
41032bf4:	e0bffb17 	ldw	r2,-20(fp)
41032bf8:	1005003a 	cmpeq	r2,r2,zero
41032bfc:	10003b1e 	bne	r2,zero,41032cec <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
41032c00:	e0fffb17 	ldw	r3,-20(fp)
41032c04:	e0bffd17 	ldw	r2,-12(fp)
41032c08:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
41032c0c:	e0fffb17 	ldw	r3,-20(fp)
41032c10:	e0bffe17 	ldw	r2,-8(fp)
41032c14:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41032c18:	0005303a 	rdctl	r2,status
41032c1c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41032c20:	e0fff817 	ldw	r3,-32(fp)
41032c24:	00bfff84 	movi	r2,-2
41032c28:	1884703a 	and	r2,r3,r2
41032c2c:	1001703a 	wrctl	status,r2
  
  return context;
41032c30:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
41032c34:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
41032c38:	00800034 	movhi	r2,0
41032c3c:	108af804 	addi	r2,r2,11232
41032c40:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
41032c44:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
41032c48:	e0fffc17 	ldw	r3,-16(fp)
41032c4c:	e0bff917 	ldw	r2,-28(fp)
41032c50:	1885883a 	add	r2,r3,r2
41032c54:	10c00044 	addi	r3,r2,1
41032c58:	e0bffb17 	ldw	r2,-20(fp)
41032c5c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
41032c60:	e0bffb17 	ldw	r2,-20(fp)
41032c64:	10c00217 	ldw	r3,8(r2)
41032c68:	e0bff917 	ldw	r2,-28(fp)
41032c6c:	1880042e 	bgeu	r3,r2,41032c80 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
41032c70:	e0fffb17 	ldw	r3,-20(fp)
41032c74:	00800044 	movi	r2,1
41032c78:	18800405 	stb	r2,16(r3)
41032c7c:	00000206 	br	41032c88 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
41032c80:	e0bffb17 	ldw	r2,-20(fp)
41032c84:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
41032c88:	e0fffb17 	ldw	r3,-20(fp)
41032c8c:	00800034 	movhi	r2,0
41032c90:	108ae804 	addi	r2,r2,11168
41032c94:	e0bff615 	stw	r2,-40(fp)
41032c98:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
41032c9c:	e0fff717 	ldw	r3,-36(fp)
41032ca0:	e0bff617 	ldw	r2,-40(fp)
41032ca4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
41032ca8:	e0bff617 	ldw	r2,-40(fp)
41032cac:	10c00017 	ldw	r3,0(r2)
41032cb0:	e0bff717 	ldw	r2,-36(fp)
41032cb4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
41032cb8:	e0bff617 	ldw	r2,-40(fp)
41032cbc:	10c00017 	ldw	r3,0(r2)
41032cc0:	e0bff717 	ldw	r2,-36(fp)
41032cc4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
41032cc8:	e0fff617 	ldw	r3,-40(fp)
41032ccc:	e0bff717 	ldw	r2,-36(fp)
41032cd0:	18800015 	stw	r2,0(r3)
41032cd4:	e0bffa17 	ldw	r2,-24(fp)
41032cd8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41032cdc:	e0bff517 	ldw	r2,-44(fp)
41032ce0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
41032ce4:	e03fff15 	stw	zero,-4(fp)
41032ce8:	00000506 	br	41032d00 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
41032cec:	00bffa84 	movi	r2,-22
41032cf0:	e0bfff15 	stw	r2,-4(fp)
41032cf4:	00000206 	br	41032d00 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
41032cf8:	00bfde84 	movi	r2,-134
41032cfc:	e0bfff15 	stw	r2,-4(fp)
41032d00:	e0bfff17 	ldw	r2,-4(fp)
  }
}
41032d04:	e037883a 	mov	sp,fp
41032d08:	df000017 	ldw	fp,0(sp)
41032d0c:	dec00104 	addi	sp,sp,4
41032d10:	f800283a 	ret

41032d14 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
41032d14:	defffe04 	addi	sp,sp,-8
41032d18:	df000115 	stw	fp,4(sp)
41032d1c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
41032d20:	e03fff15 	stw	zero,-4(fp)
41032d24:	00000506 	br	41032d3c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
41032d28:	e0bfff17 	ldw	r2,-4(fp)
41032d2c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
41032d30:	e0bfff17 	ldw	r2,-4(fp)
41032d34:	10800804 	addi	r2,r2,32
41032d38:	e0bfff15 	stw	r2,-4(fp)
41032d3c:	e0bfff17 	ldw	r2,-4(fp)
41032d40:	10820030 	cmpltui	r2,r2,2048
41032d44:	103ff81e 	bne	r2,zero,41032d28 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
41032d48:	e037883a 	mov	sp,fp
41032d4c:	df000017 	ldw	fp,0(sp)
41032d50:	dec00104 	addi	sp,sp,4
41032d54:	f800283a 	ret

41032d58 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
41032d58:	defff904 	addi	sp,sp,-28
41032d5c:	dfc00615 	stw	ra,24(sp)
41032d60:	df000515 	stw	fp,20(sp)
41032d64:	df000504 	addi	fp,sp,20
41032d68:	e13ffd15 	stw	r4,-12(fp)
41032d6c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
41032d70:	e0bffd17 	ldw	r2,-12(fp)
41032d74:	1005003a 	cmpeq	r2,r2,zero
41032d78:	1000041e 	bne	r2,zero,41032d8c <alt_dev_llist_insert+0x34>
41032d7c:	e0bffd17 	ldw	r2,-12(fp)
41032d80:	10800217 	ldw	r2,8(r2)
41032d84:	1004c03a 	cmpne	r2,r2,zero
41032d88:	1000071e 	bne	r2,zero,41032da8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
41032d8c:	1032e0c0 	call	41032e0c <alt_get_errno>
41032d90:	1007883a 	mov	r3,r2
41032d94:	00800584 	movi	r2,22
41032d98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
41032d9c:	00bffa84 	movi	r2,-22
41032da0:	e0bfff15 	stw	r2,-4(fp)
41032da4:	00001306 	br	41032df4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
41032da8:	e0fffd17 	ldw	r3,-12(fp)
41032dac:	e0bffe17 	ldw	r2,-8(fp)
41032db0:	e0bffb15 	stw	r2,-20(fp)
41032db4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
41032db8:	e0fffc17 	ldw	r3,-16(fp)
41032dbc:	e0bffb17 	ldw	r2,-20(fp)
41032dc0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
41032dc4:	e0bffb17 	ldw	r2,-20(fp)
41032dc8:	10c00017 	ldw	r3,0(r2)
41032dcc:	e0bffc17 	ldw	r2,-16(fp)
41032dd0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
41032dd4:	e0bffb17 	ldw	r2,-20(fp)
41032dd8:	10c00017 	ldw	r3,0(r2)
41032ddc:	e0bffc17 	ldw	r2,-16(fp)
41032de0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
41032de4:	e0fffb17 	ldw	r3,-20(fp)
41032de8:	e0bffc17 	ldw	r2,-16(fp)
41032dec:	18800015 	stw	r2,0(r3)

  return 0;  
41032df0:	e03fff15 	stw	zero,-4(fp)
41032df4:	e0bfff17 	ldw	r2,-4(fp)
}
41032df8:	e037883a 	mov	sp,fp
41032dfc:	dfc00117 	ldw	ra,4(sp)
41032e00:	df000017 	ldw	fp,0(sp)
41032e04:	dec00204 	addi	sp,sp,8
41032e08:	f800283a 	ret

41032e0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41032e0c:	defffd04 	addi	sp,sp,-12
41032e10:	dfc00215 	stw	ra,8(sp)
41032e14:	df000115 	stw	fp,4(sp)
41032e18:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41032e1c:	00800034 	movhi	r2,0
41032e20:	108ae304 	addi	r2,r2,11148
41032e24:	10800017 	ldw	r2,0(r2)
41032e28:	1005003a 	cmpeq	r2,r2,zero
41032e2c:	1000061e 	bne	r2,zero,41032e48 <alt_get_errno+0x3c>
41032e30:	00800034 	movhi	r2,0
41032e34:	108ae304 	addi	r2,r2,11148
41032e38:	10800017 	ldw	r2,0(r2)
41032e3c:	103ee83a 	callr	r2
41032e40:	e0bfff15 	stw	r2,-4(fp)
41032e44:	00000306 	br	41032e54 <alt_get_errno+0x48>
41032e48:	00800034 	movhi	r2,0
41032e4c:	108aef04 	addi	r2,r2,11196
41032e50:	e0bfff15 	stw	r2,-4(fp)
41032e54:	e0bfff17 	ldw	r2,-4(fp)
}
41032e58:	e037883a 	mov	sp,fp
41032e5c:	dfc00117 	ldw	ra,4(sp)
41032e60:	df000017 	ldw	fp,0(sp)
41032e64:	dec00204 	addi	sp,sp,8
41032e68:	f800283a 	ret

41032e6c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
41032e6c:	defffd04 	addi	sp,sp,-12
41032e70:	dfc00215 	stw	ra,8(sp)
41032e74:	df000115 	stw	fp,4(sp)
41032e78:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
41032e7c:	00bfff04 	movi	r2,-4
41032e80:	00d040f4 	movhi	r3,16643
41032e84:	18cfa204 	addi	r3,r3,16008
41032e88:	1885883a 	add	r2,r3,r2
41032e8c:	e0bfff15 	stw	r2,-4(fp)
41032e90:	00000606 	br	41032eac <_do_ctors+0x40>
        (*ctor) (); 
41032e94:	e0bfff17 	ldw	r2,-4(fp)
41032e98:	10800017 	ldw	r2,0(r2)
41032e9c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
41032ea0:	e0bfff17 	ldw	r2,-4(fp)
41032ea4:	10bfff04 	addi	r2,r2,-4
41032ea8:	e0bfff15 	stw	r2,-4(fp)
41032eac:	e0ffff17 	ldw	r3,-4(fp)
41032eb0:	009040f4 	movhi	r2,16643
41032eb4:	108fa104 	addi	r2,r2,16004
41032eb8:	18bff62e 	bgeu	r3,r2,41032e94 <_do_ctors+0x28>
        (*ctor) (); 
}
41032ebc:	e037883a 	mov	sp,fp
41032ec0:	dfc00117 	ldw	ra,4(sp)
41032ec4:	df000017 	ldw	fp,0(sp)
41032ec8:	dec00204 	addi	sp,sp,8
41032ecc:	f800283a 	ret

41032ed0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
41032ed0:	defffd04 	addi	sp,sp,-12
41032ed4:	dfc00215 	stw	ra,8(sp)
41032ed8:	df000115 	stw	fp,4(sp)
41032edc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
41032ee0:	00bfff04 	movi	r2,-4
41032ee4:	00d040f4 	movhi	r3,16643
41032ee8:	18cfa204 	addi	r3,r3,16008
41032eec:	1885883a 	add	r2,r3,r2
41032ef0:	e0bfff15 	stw	r2,-4(fp)
41032ef4:	00000606 	br	41032f10 <_do_dtors+0x40>
        (*dtor) (); 
41032ef8:	e0bfff17 	ldw	r2,-4(fp)
41032efc:	10800017 	ldw	r2,0(r2)
41032f00:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
41032f04:	e0bfff17 	ldw	r2,-4(fp)
41032f08:	10bfff04 	addi	r2,r2,-4
41032f0c:	e0bfff15 	stw	r2,-4(fp)
41032f10:	e0ffff17 	ldw	r3,-4(fp)
41032f14:	009040f4 	movhi	r2,16643
41032f18:	108fa204 	addi	r2,r2,16008
41032f1c:	18bff62e 	bgeu	r3,r2,41032ef8 <_do_dtors+0x28>
        (*dtor) (); 
}
41032f20:	e037883a 	mov	sp,fp
41032f24:	dfc00117 	ldw	ra,4(sp)
41032f28:	df000017 	ldw	fp,0(sp)
41032f2c:	dec00204 	addi	sp,sp,8
41032f30:	f800283a 	ret

41032f34 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
41032f34:	defff904 	addi	sp,sp,-28
41032f38:	dfc00615 	stw	ra,24(sp)
41032f3c:	df000515 	stw	fp,20(sp)
41032f40:	df000504 	addi	fp,sp,20
41032f44:	e13ffd15 	stw	r4,-12(fp)
41032f48:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
41032f4c:	e0bffe17 	ldw	r2,-8(fp)
41032f50:	10800017 	ldw	r2,0(r2)
41032f54:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
41032f58:	e13ffd17 	ldw	r4,-12(fp)
41032f5c:	10230540 	call	41023054 <strlen>
41032f60:	10800044 	addi	r2,r2,1
41032f64:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
41032f68:	00000d06 	br	41032fa0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
41032f6c:	e0bffc17 	ldw	r2,-16(fp)
41032f70:	11000217 	ldw	r4,8(r2)
41032f74:	e1bffb17 	ldw	r6,-20(fp)
41032f78:	e17ffd17 	ldw	r5,-12(fp)
41032f7c:	1022c0c0 	call	41022c0c <memcmp>
41032f80:	1004c03a 	cmpne	r2,r2,zero
41032f84:	1000031e 	bne	r2,zero,41032f94 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
41032f88:	e0bffc17 	ldw	r2,-16(fp)
41032f8c:	e0bfff15 	stw	r2,-4(fp)
41032f90:	00000706 	br	41032fb0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
41032f94:	e0bffc17 	ldw	r2,-16(fp)
41032f98:	10800017 	ldw	r2,0(r2)
41032f9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
41032fa0:	e0fffe17 	ldw	r3,-8(fp)
41032fa4:	e0bffc17 	ldw	r2,-16(fp)
41032fa8:	10fff01e 	bne	r2,r3,41032f6c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
41032fac:	e03fff15 	stw	zero,-4(fp)
41032fb0:	e0bfff17 	ldw	r2,-4(fp)
}
41032fb4:	e037883a 	mov	sp,fp
41032fb8:	dfc00117 	ldw	ra,4(sp)
41032fbc:	df000017 	ldw	fp,0(sp)
41032fc0:	dec00204 	addi	sp,sp,8
41032fc4:	f800283a 	ret

41032fc8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
41032fc8:	defffe04 	addi	sp,sp,-8
41032fcc:	dfc00115 	stw	ra,4(sp)
41032fd0:	df000015 	stw	fp,0(sp)
41032fd4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
41032fd8:	0009883a 	mov	r4,zero
41032fdc:	01440004 	movi	r5,4096
41032fe0:	1033a600 	call	41033a60 <alt_icache_flush>
#endif
}
41032fe4:	e037883a 	mov	sp,fp
41032fe8:	dfc00117 	ldw	ra,4(sp)
41032fec:	df000017 	ldw	fp,0(sp)
41032ff0:	dec00204 	addi	sp,sp,8
41032ff4:	f800283a 	ret

41032ff8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
41032ff8:	defff904 	addi	sp,sp,-28
41032ffc:	dfc00615 	stw	ra,24(sp)
41033000:	df000515 	stw	fp,20(sp)
41033004:	df000504 	addi	fp,sp,20
41033008:	e13ffc15 	stw	r4,-16(fp)
4103300c:	e17ffd15 	stw	r5,-12(fp)
41033010:	e1bffe15 	stw	r6,-8(fp)
41033014:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
41033018:	e0800217 	ldw	r2,8(fp)
4103301c:	d8800015 	stw	r2,0(sp)
41033020:	e13ffc17 	ldw	r4,-16(fp)
41033024:	e17ffd17 	ldw	r5,-12(fp)
41033028:	e1bffe17 	ldw	r6,-8(fp)
4103302c:	e1ffff17 	ldw	r7,-4(fp)
41033030:	10331cc0 	call	410331cc <alt_iic_isr_register>
}  
41033034:	e037883a 	mov	sp,fp
41033038:	dfc00117 	ldw	ra,4(sp)
4103303c:	df000017 	ldw	fp,0(sp)
41033040:	dec00204 	addi	sp,sp,8
41033044:	f800283a 	ret

41033048 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
41033048:	defff904 	addi	sp,sp,-28
4103304c:	df000615 	stw	fp,24(sp)
41033050:	df000604 	addi	fp,sp,24
41033054:	e13ffe15 	stw	r4,-8(fp)
41033058:	e17fff15 	stw	r5,-4(fp)
4103305c:	e0bfff17 	ldw	r2,-4(fp)
41033060:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41033064:	0005303a 	rdctl	r2,status
41033068:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4103306c:	e0fffb17 	ldw	r3,-20(fp)
41033070:	00bfff84 	movi	r2,-2
41033074:	1884703a 	and	r2,r3,r2
41033078:	1001703a 	wrctl	status,r2
  
  return context;
4103307c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
41033080:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
41033084:	e0fffc17 	ldw	r3,-16(fp)
41033088:	00800044 	movi	r2,1
4103308c:	10c4983a 	sll	r2,r2,r3
41033090:	1007883a 	mov	r3,r2
41033094:	00800034 	movhi	r2,0
41033098:	108af604 	addi	r2,r2,11224
4103309c:	10800017 	ldw	r2,0(r2)
410330a0:	1886b03a 	or	r3,r3,r2
410330a4:	00800034 	movhi	r2,0
410330a8:	108af604 	addi	r2,r2,11224
410330ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
410330b0:	00800034 	movhi	r2,0
410330b4:	108af604 	addi	r2,r2,11224
410330b8:	10800017 	ldw	r2,0(r2)
410330bc:	100170fa 	wrctl	ienable,r2
410330c0:	e0bffd17 	ldw	r2,-12(fp)
410330c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
410330c8:	e0bffa17 	ldw	r2,-24(fp)
410330cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
410330d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
410330d4:	e037883a 	mov	sp,fp
410330d8:	df000017 	ldw	fp,0(sp)
410330dc:	dec00104 	addi	sp,sp,4
410330e0:	f800283a 	ret

410330e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
410330e4:	defff904 	addi	sp,sp,-28
410330e8:	df000615 	stw	fp,24(sp)
410330ec:	df000604 	addi	fp,sp,24
410330f0:	e13ffe15 	stw	r4,-8(fp)
410330f4:	e17fff15 	stw	r5,-4(fp)
410330f8:	e0bfff17 	ldw	r2,-4(fp)
410330fc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41033100:	0005303a 	rdctl	r2,status
41033104:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41033108:	e0fffb17 	ldw	r3,-20(fp)
4103310c:	00bfff84 	movi	r2,-2
41033110:	1884703a 	and	r2,r3,r2
41033114:	1001703a 	wrctl	status,r2
  
  return context;
41033118:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
4103311c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
41033120:	e0fffc17 	ldw	r3,-16(fp)
41033124:	00800044 	movi	r2,1
41033128:	10c4983a 	sll	r2,r2,r3
4103312c:	0084303a 	nor	r2,zero,r2
41033130:	1007883a 	mov	r3,r2
41033134:	00800034 	movhi	r2,0
41033138:	108af604 	addi	r2,r2,11224
4103313c:	10800017 	ldw	r2,0(r2)
41033140:	1886703a 	and	r3,r3,r2
41033144:	00800034 	movhi	r2,0
41033148:	108af604 	addi	r2,r2,11224
4103314c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
41033150:	00800034 	movhi	r2,0
41033154:	108af604 	addi	r2,r2,11224
41033158:	10800017 	ldw	r2,0(r2)
4103315c:	100170fa 	wrctl	ienable,r2
41033160:	e0bffd17 	ldw	r2,-12(fp)
41033164:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41033168:	e0bffa17 	ldw	r2,-24(fp)
4103316c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
41033170:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
41033174:	e037883a 	mov	sp,fp
41033178:	df000017 	ldw	fp,0(sp)
4103317c:	dec00104 	addi	sp,sp,4
41033180:	f800283a 	ret

41033184 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
41033184:	defffc04 	addi	sp,sp,-16
41033188:	df000315 	stw	fp,12(sp)
4103318c:	df000304 	addi	fp,sp,12
41033190:	e13ffe15 	stw	r4,-8(fp)
41033194:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
41033198:	000530fa 	rdctl	r2,ienable
4103319c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
410331a0:	e0ffff17 	ldw	r3,-4(fp)
410331a4:	00800044 	movi	r2,1
410331a8:	10c4983a 	sll	r2,r2,r3
410331ac:	1007883a 	mov	r3,r2
410331b0:	e0bffd17 	ldw	r2,-12(fp)
410331b4:	1884703a 	and	r2,r3,r2
410331b8:	1004c03a 	cmpne	r2,r2,zero
}
410331bc:	e037883a 	mov	sp,fp
410331c0:	df000017 	ldw	fp,0(sp)
410331c4:	dec00104 	addi	sp,sp,4
410331c8:	f800283a 	ret

410331cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
410331cc:	defff404 	addi	sp,sp,-48
410331d0:	dfc00b15 	stw	ra,44(sp)
410331d4:	df000a15 	stw	fp,40(sp)
410331d8:	df000a04 	addi	fp,sp,40
410331dc:	e13ffb15 	stw	r4,-20(fp)
410331e0:	e17ffc15 	stw	r5,-16(fp)
410331e4:	e1bffd15 	stw	r6,-12(fp)
410331e8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
410331ec:	00bffa84 	movi	r2,-22
410331f0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
410331f4:	e0bffc17 	ldw	r2,-16(fp)
410331f8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
410331fc:	e0bff917 	ldw	r2,-28(fp)
41033200:	10800808 	cmpgei	r2,r2,32
41033204:	1000291e 	bne	r2,zero,410332ac <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41033208:	0005303a 	rdctl	r2,status
4103320c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41033210:	e0fff717 	ldw	r3,-36(fp)
41033214:	00bfff84 	movi	r2,-2
41033218:	1884703a 	and	r2,r3,r2
4103321c:	1001703a 	wrctl	status,r2
  
  return context;
41033220:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
41033224:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
41033228:	e0bff917 	ldw	r2,-28(fp)
4103322c:	00c00034 	movhi	r3,0
41033230:	18cb4304 	addi	r3,r3,11532
41033234:	100490fa 	slli	r2,r2,3
41033238:	10c7883a 	add	r3,r2,r3
4103323c:	e0bffd17 	ldw	r2,-12(fp)
41033240:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
41033244:	e0bff917 	ldw	r2,-28(fp)
41033248:	00c00034 	movhi	r3,0
4103324c:	18cb4304 	addi	r3,r3,11532
41033250:	100490fa 	slli	r2,r2,3
41033254:	10c5883a 	add	r2,r2,r3
41033258:	10c00104 	addi	r3,r2,4
4103325c:	e0bffe17 	ldw	r2,-8(fp)
41033260:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
41033264:	e0bffd17 	ldw	r2,-12(fp)
41033268:	1005003a 	cmpeq	r2,r2,zero
4103326c:	1000051e 	bne	r2,zero,41033284 <alt_iic_isr_register+0xb8>
41033270:	e17ff917 	ldw	r5,-28(fp)
41033274:	e13ffb17 	ldw	r4,-20(fp)
41033278:	10330480 	call	41033048 <alt_ic_irq_enable>
4103327c:	e0bfff15 	stw	r2,-4(fp)
41033280:	00000406 	br	41033294 <alt_iic_isr_register+0xc8>
41033284:	e17ff917 	ldw	r5,-28(fp)
41033288:	e13ffb17 	ldw	r4,-20(fp)
4103328c:	10330e40 	call	410330e4 <alt_ic_irq_disable>
41033290:	e0bfff15 	stw	r2,-4(fp)
41033294:	e0bfff17 	ldw	r2,-4(fp)
41033298:	e0bffa15 	stw	r2,-24(fp)
4103329c:	e0bff817 	ldw	r2,-32(fp)
410332a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
410332a4:	e0bff617 	ldw	r2,-40(fp)
410332a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
410332ac:	e0bffa17 	ldw	r2,-24(fp)
}
410332b0:	e037883a 	mov	sp,fp
410332b4:	dfc00117 	ldw	ra,4(sp)
410332b8:	df000017 	ldw	fp,0(sp)
410332bc:	dec00204 	addi	sp,sp,8
410332c0:	f800283a 	ret

410332c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
410332c4:	defff904 	addi	sp,sp,-28
410332c8:	dfc00615 	stw	ra,24(sp)
410332cc:	df000515 	stw	fp,20(sp)
410332d0:	df000504 	addi	fp,sp,20
410332d4:	e13ffc15 	stw	r4,-16(fp)
410332d8:	e17ffd15 	stw	r5,-12(fp)
410332dc:	e1bffe15 	stw	r6,-8(fp)
410332e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
410332e4:	e13ffd17 	ldw	r4,-12(fp)
410332e8:	e17ffe17 	ldw	r5,-8(fp)
410332ec:	e1bfff17 	ldw	r6,-4(fp)
410332f0:	10334dc0 	call	410334dc <open>
410332f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
410332f8:	e0bffb17 	ldw	r2,-20(fp)
410332fc:	1004803a 	cmplt	r2,r2,zero
41033300:	10001c1e 	bne	r2,zero,41033374 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
41033304:	e0bffb17 	ldw	r2,-20(fp)
41033308:	00c00034 	movhi	r3,0
4103330c:	18c65f04 	addi	r3,r3,6524
41033310:	10800324 	muli	r2,r2,12
41033314:	10c5883a 	add	r2,r2,r3
41033318:	10c00017 	ldw	r3,0(r2)
4103331c:	e0bffc17 	ldw	r2,-16(fp)
41033320:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
41033324:	e0bffb17 	ldw	r2,-20(fp)
41033328:	00c00034 	movhi	r3,0
4103332c:	18c65f04 	addi	r3,r3,6524
41033330:	10800324 	muli	r2,r2,12
41033334:	10c5883a 	add	r2,r2,r3
41033338:	10800104 	addi	r2,r2,4
4103333c:	10c00017 	ldw	r3,0(r2)
41033340:	e0bffc17 	ldw	r2,-16(fp)
41033344:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
41033348:	e0bffb17 	ldw	r2,-20(fp)
4103334c:	00c00034 	movhi	r3,0
41033350:	18c65f04 	addi	r3,r3,6524
41033354:	10800324 	muli	r2,r2,12
41033358:	10c5883a 	add	r2,r2,r3
4103335c:	10800204 	addi	r2,r2,8
41033360:	10c00017 	ldw	r3,0(r2)
41033364:	e0bffc17 	ldw	r2,-16(fp)
41033368:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
4103336c:	e13ffb17 	ldw	r4,-20(fp)
41033370:	1031cb40 	call	41031cb4 <alt_release_fd>
  }
} 
41033374:	e037883a 	mov	sp,fp
41033378:	dfc00117 	ldw	ra,4(sp)
4103337c:	df000017 	ldw	fp,0(sp)
41033380:	dec00204 	addi	sp,sp,8
41033384:	f800283a 	ret

41033388 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
41033388:	defffb04 	addi	sp,sp,-20
4103338c:	dfc00415 	stw	ra,16(sp)
41033390:	df000315 	stw	fp,12(sp)
41033394:	df000304 	addi	fp,sp,12
41033398:	e13ffd15 	stw	r4,-12(fp)
4103339c:	e17ffe15 	stw	r5,-8(fp)
410333a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
410333a4:	01000034 	movhi	r4,0
410333a8:	21066204 	addi	r4,r4,6536
410333ac:	e17ffd17 	ldw	r5,-12(fp)
410333b0:	01800044 	movi	r6,1
410333b4:	01c07fc4 	movi	r7,511
410333b8:	10332c40 	call	410332c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
410333bc:	01000034 	movhi	r4,0
410333c0:	21065f04 	addi	r4,r4,6524
410333c4:	e17ffe17 	ldw	r5,-8(fp)
410333c8:	000d883a 	mov	r6,zero
410333cc:	01c07fc4 	movi	r7,511
410333d0:	10332c40 	call	410332c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
410333d4:	01000034 	movhi	r4,0
410333d8:	21066504 	addi	r4,r4,6548
410333dc:	e17fff17 	ldw	r5,-4(fp)
410333e0:	01800044 	movi	r6,1
410333e4:	01c07fc4 	movi	r7,511
410333e8:	10332c40 	call	410332c4 <alt_open_fd>
}  
410333ec:	e037883a 	mov	sp,fp
410333f0:	dfc00117 	ldw	ra,4(sp)
410333f4:	df000017 	ldw	fp,0(sp)
410333f8:	dec00204 	addi	sp,sp,8
410333fc:	f800283a 	ret

41033400 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
41033400:	defffc04 	addi	sp,sp,-16
41033404:	df000315 	stw	fp,12(sp)
41033408:	df000304 	addi	fp,sp,12
4103340c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
41033410:	e0bffe17 	ldw	r2,-8(fp)
41033414:	10800217 	ldw	r2,8(r2)
41033418:	10d00034 	orhi	r3,r2,16384
4103341c:	e0bffe17 	ldw	r2,-8(fp)
41033420:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
41033424:	e03ffd15 	stw	zero,-12(fp)
41033428:	00002006 	br	410334ac <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
4103342c:	e0bffd17 	ldw	r2,-12(fp)
41033430:	00c00034 	movhi	r3,0
41033434:	18c65f04 	addi	r3,r3,6524
41033438:	10800324 	muli	r2,r2,12
4103343c:	10c5883a 	add	r2,r2,r3
41033440:	10c00017 	ldw	r3,0(r2)
41033444:	e0bffe17 	ldw	r2,-8(fp)
41033448:	10800017 	ldw	r2,0(r2)
4103344c:	1880141e 	bne	r3,r2,410334a0 <alt_file_locked+0xa0>
41033450:	e0bffd17 	ldw	r2,-12(fp)
41033454:	00c00034 	movhi	r3,0
41033458:	18c65f04 	addi	r3,r3,6524
4103345c:	10800324 	muli	r2,r2,12
41033460:	10c5883a 	add	r2,r2,r3
41033464:	10800204 	addi	r2,r2,8
41033468:	10800017 	ldw	r2,0(r2)
4103346c:	1004403a 	cmpge	r2,r2,zero
41033470:	10000b1e 	bne	r2,zero,410334a0 <alt_file_locked+0xa0>
41033474:	e0bffd17 	ldw	r2,-12(fp)
41033478:	10800324 	muli	r2,r2,12
4103347c:	1007883a 	mov	r3,r2
41033480:	00800034 	movhi	r2,0
41033484:	10865f04 	addi	r2,r2,6524
41033488:	1887883a 	add	r3,r3,r2
4103348c:	e0bffe17 	ldw	r2,-8(fp)
41033490:	18800326 	beq	r3,r2,410334a0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
41033494:	00bffcc4 	movi	r2,-13
41033498:	e0bfff15 	stw	r2,-4(fp)
4103349c:	00000a06 	br	410334c8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
410334a0:	e0bffd17 	ldw	r2,-12(fp)
410334a4:	10800044 	addi	r2,r2,1
410334a8:	e0bffd15 	stw	r2,-12(fp)
410334ac:	00800034 	movhi	r2,0
410334b0:	108ae204 	addi	r2,r2,11144
410334b4:	10800017 	ldw	r2,0(r2)
410334b8:	1007883a 	mov	r3,r2
410334bc:	e0bffd17 	ldw	r2,-12(fp)
410334c0:	18bfda2e 	bgeu	r3,r2,4103342c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
410334c4:	e03fff15 	stw	zero,-4(fp)
410334c8:	e0bfff17 	ldw	r2,-4(fp)
}
410334cc:	e037883a 	mov	sp,fp
410334d0:	df000017 	ldw	fp,0(sp)
410334d4:	dec00104 	addi	sp,sp,4
410334d8:	f800283a 	ret

410334dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
410334dc:	defff404 	addi	sp,sp,-48
410334e0:	dfc00b15 	stw	ra,44(sp)
410334e4:	df000a15 	stw	fp,40(sp)
410334e8:	df000a04 	addi	fp,sp,40
410334ec:	e13ffb15 	stw	r4,-20(fp)
410334f0:	e17ffc15 	stw	r5,-16(fp)
410334f4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
410334f8:	00bfffc4 	movi	r2,-1
410334fc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
41033500:	00bffb44 	movi	r2,-19
41033504:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
41033508:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
4103350c:	e13ffb17 	ldw	r4,-20(fp)
41033510:	01400034 	movhi	r5,0
41033514:	294ae004 	addi	r5,r5,11136
41033518:	1032f340 	call	41032f34 <alt_find_dev>
4103351c:	e0bffa15 	stw	r2,-24(fp)
41033520:	e0bffa17 	ldw	r2,-24(fp)
41033524:	1004c03a 	cmpne	r2,r2,zero
41033528:	1000051e 	bne	r2,zero,41033540 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
4103352c:	e13ffb17 	ldw	r4,-20(fp)
41033530:	10338880 	call	41033888 <alt_find_file>
41033534:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
41033538:	00800044 	movi	r2,1
4103353c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
41033540:	e0bffa17 	ldw	r2,-24(fp)
41033544:	1005003a 	cmpeq	r2,r2,zero
41033548:	1000301e 	bne	r2,zero,4103360c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
4103354c:	e13ffa17 	ldw	r4,-24(fp)
41033550:	10339a80 	call	410339a8 <alt_get_fd>
41033554:	e0bff815 	stw	r2,-32(fp)
41033558:	e0bff817 	ldw	r2,-32(fp)
4103355c:	1004403a 	cmpge	r2,r2,zero
41033560:	1000031e 	bne	r2,zero,41033570 <open+0x94>
    {
      status = index;
41033564:	e0bff817 	ldw	r2,-32(fp)
41033568:	e0bff715 	stw	r2,-36(fp)
4103356c:	00002906 	br	41033614 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
41033570:	e0bff817 	ldw	r2,-32(fp)
41033574:	10800324 	muli	r2,r2,12
41033578:	1007883a 	mov	r3,r2
4103357c:	00800034 	movhi	r2,0
41033580:	10865f04 	addi	r2,r2,6524
41033584:	1885883a 	add	r2,r3,r2
41033588:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
4103358c:	e0fffc17 	ldw	r3,-16(fp)
41033590:	00900034 	movhi	r2,16384
41033594:	10bfffc4 	addi	r2,r2,-1
41033598:	1886703a 	and	r3,r3,r2
4103359c:	e0bff917 	ldw	r2,-28(fp)
410335a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
410335a4:	e0bff617 	ldw	r2,-40(fp)
410335a8:	1004c03a 	cmpne	r2,r2,zero
410335ac:	1000061e 	bne	r2,zero,410335c8 <open+0xec>
410335b0:	e13ff917 	ldw	r4,-28(fp)
410335b4:	10334000 	call	41033400 <alt_file_locked>
410335b8:	e0bff715 	stw	r2,-36(fp)
410335bc:	e0bff717 	ldw	r2,-36(fp)
410335c0:	1004803a 	cmplt	r2,r2,zero
410335c4:	1000131e 	bne	r2,zero,41033614 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
410335c8:	e0bffa17 	ldw	r2,-24(fp)
410335cc:	10800317 	ldw	r2,12(r2)
410335d0:	1005003a 	cmpeq	r2,r2,zero
410335d4:	1000091e 	bne	r2,zero,410335fc <open+0x120>
410335d8:	e0bffa17 	ldw	r2,-24(fp)
410335dc:	10800317 	ldw	r2,12(r2)
410335e0:	e13ff917 	ldw	r4,-28(fp)
410335e4:	e17ffb17 	ldw	r5,-20(fp)
410335e8:	e1bffc17 	ldw	r6,-16(fp)
410335ec:	e1fffd17 	ldw	r7,-12(fp)
410335f0:	103ee83a 	callr	r2
410335f4:	e0bfff15 	stw	r2,-4(fp)
410335f8:	00000106 	br	41033600 <open+0x124>
410335fc:	e03fff15 	stw	zero,-4(fp)
41033600:	e0bfff17 	ldw	r2,-4(fp)
41033604:	e0bff715 	stw	r2,-36(fp)
41033608:	00000206 	br	41033614 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
4103360c:	00bffb44 	movi	r2,-19
41033610:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
41033614:	e0bff717 	ldw	r2,-36(fp)
41033618:	1004403a 	cmpge	r2,r2,zero
4103361c:	1000091e 	bne	r2,zero,41033644 <open+0x168>
  {
    alt_release_fd (index);  
41033620:	e13ff817 	ldw	r4,-32(fp)
41033624:	1031cb40 	call	41031cb4 <alt_release_fd>
    ALT_ERRNO = -status;
41033628:	10336640 	call	41033664 <alt_get_errno>
4103362c:	e0fff717 	ldw	r3,-36(fp)
41033630:	00c7c83a 	sub	r3,zero,r3
41033634:	10c00015 	stw	r3,0(r2)
    return -1;
41033638:	00bfffc4 	movi	r2,-1
4103363c:	e0bffe15 	stw	r2,-8(fp)
41033640:	00000206 	br	4103364c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
41033644:	e0bff817 	ldw	r2,-32(fp)
41033648:	e0bffe15 	stw	r2,-8(fp)
4103364c:	e0bffe17 	ldw	r2,-8(fp)
}
41033650:	e037883a 	mov	sp,fp
41033654:	dfc00117 	ldw	ra,4(sp)
41033658:	df000017 	ldw	fp,0(sp)
4103365c:	dec00204 	addi	sp,sp,8
41033660:	f800283a 	ret

41033664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41033664:	defffd04 	addi	sp,sp,-12
41033668:	dfc00215 	stw	ra,8(sp)
4103366c:	df000115 	stw	fp,4(sp)
41033670:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41033674:	00800034 	movhi	r2,0
41033678:	108ae304 	addi	r2,r2,11148
4103367c:	10800017 	ldw	r2,0(r2)
41033680:	1005003a 	cmpeq	r2,r2,zero
41033684:	1000061e 	bne	r2,zero,410336a0 <alt_get_errno+0x3c>
41033688:	00800034 	movhi	r2,0
4103368c:	108ae304 	addi	r2,r2,11148
41033690:	10800017 	ldw	r2,0(r2)
41033694:	103ee83a 	callr	r2
41033698:	e0bfff15 	stw	r2,-4(fp)
4103369c:	00000306 	br	410336ac <alt_get_errno+0x48>
410336a0:	00800034 	movhi	r2,0
410336a4:	108aef04 	addi	r2,r2,11196
410336a8:	e0bfff15 	stw	r2,-4(fp)
410336ac:	e0bfff17 	ldw	r2,-4(fp)
}
410336b0:	e037883a 	mov	sp,fp
410336b4:	dfc00117 	ldw	ra,4(sp)
410336b8:	df000017 	ldw	fp,0(sp)
410336bc:	dec00204 	addi	sp,sp,8
410336c0:	f800283a 	ret

410336c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
410336c4:	defffa04 	addi	sp,sp,-24
410336c8:	df000515 	stw	fp,20(sp)
410336cc:	df000504 	addi	fp,sp,20
410336d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
410336d4:	0005303a 	rdctl	r2,status
410336d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
410336dc:	e0fffd17 	ldw	r3,-12(fp)
410336e0:	00bfff84 	movi	r2,-2
410336e4:	1884703a 	and	r2,r3,r2
410336e8:	1001703a 	wrctl	status,r2
  
  return context;
410336ec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
410336f0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
410336f4:	e0bfff17 	ldw	r2,-4(fp)
410336f8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
410336fc:	e0bffc17 	ldw	r2,-16(fp)
41033700:	10c00017 	ldw	r3,0(r2)
41033704:	e0bffc17 	ldw	r2,-16(fp)
41033708:	10800117 	ldw	r2,4(r2)
4103370c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
41033710:	e0bffc17 	ldw	r2,-16(fp)
41033714:	10c00117 	ldw	r3,4(r2)
41033718:	e0bffc17 	ldw	r2,-16(fp)
4103371c:	10800017 	ldw	r2,0(r2)
41033720:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
41033724:	e0fffc17 	ldw	r3,-16(fp)
41033728:	e0bffc17 	ldw	r2,-16(fp)
4103372c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
41033730:	e0fffc17 	ldw	r3,-16(fp)
41033734:	e0bffc17 	ldw	r2,-16(fp)
41033738:	18800015 	stw	r2,0(r3)
4103373c:	e0bffe17 	ldw	r2,-8(fp)
41033740:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41033744:	e0bffb17 	ldw	r2,-20(fp)
41033748:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
4103374c:	e037883a 	mov	sp,fp
41033750:	df000017 	ldw	fp,0(sp)
41033754:	dec00104 	addi	sp,sp,4
41033758:	f800283a 	ret

4103375c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
4103375c:	defffb04 	addi	sp,sp,-20
41033760:	dfc00415 	stw	ra,16(sp)
41033764:	df000315 	stw	fp,12(sp)
41033768:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
4103376c:	d0a01117 	ldw	r2,-32700(gp)
41033770:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
41033774:	d0a02117 	ldw	r2,-32636(gp)
41033778:	10800044 	addi	r2,r2,1
4103377c:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
41033780:	00003106 	br	41033848 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
41033784:	e0bffe17 	ldw	r2,-8(fp)
41033788:	10800017 	ldw	r2,0(r2)
4103378c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
41033790:	e0bffe17 	ldw	r2,-8(fp)
41033794:	10800403 	ldbu	r2,16(r2)
41033798:	10803fcc 	andi	r2,r2,255
4103379c:	1005003a 	cmpeq	r2,r2,zero
410337a0:	1000051e 	bne	r2,zero,410337b8 <alt_tick+0x5c>
410337a4:	d0a02117 	ldw	r2,-32636(gp)
410337a8:	1004c03a 	cmpne	r2,r2,zero
410337ac:	1000021e 	bne	r2,zero,410337b8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
410337b0:	e0bffe17 	ldw	r2,-8(fp)
410337b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
410337b8:	e0bffe17 	ldw	r2,-8(fp)
410337bc:	10c00217 	ldw	r3,8(r2)
410337c0:	d0a02117 	ldw	r2,-32636(gp)
410337c4:	10c01e36 	bltu	r2,r3,41033840 <alt_tick+0xe4>
410337c8:	e0bffe17 	ldw	r2,-8(fp)
410337cc:	10800403 	ldbu	r2,16(r2)
410337d0:	10803fcc 	andi	r2,r2,255
410337d4:	1004c03a 	cmpne	r2,r2,zero
410337d8:	1000191e 	bne	r2,zero,41033840 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
410337dc:	e0bffe17 	ldw	r2,-8(fp)
410337e0:	10c00317 	ldw	r3,12(r2)
410337e4:	e0bffe17 	ldw	r2,-8(fp)
410337e8:	11000517 	ldw	r4,20(r2)
410337ec:	183ee83a 	callr	r3
410337f0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
410337f4:	e0bffd17 	ldw	r2,-12(fp)
410337f8:	1004c03a 	cmpne	r2,r2,zero
410337fc:	1000031e 	bne	r2,zero,4103380c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
41033800:	e13ffe17 	ldw	r4,-8(fp)
41033804:	10336c40 	call	410336c4 <alt_alarm_stop>
41033808:	00000d06 	br	41033840 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
4103380c:	e0bffe17 	ldw	r2,-8(fp)
41033810:	10c00217 	ldw	r3,8(r2)
41033814:	e0bffd17 	ldw	r2,-12(fp)
41033818:	1887883a 	add	r3,r3,r2
4103381c:	e0bffe17 	ldw	r2,-8(fp)
41033820:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
41033824:	e0bffe17 	ldw	r2,-8(fp)
41033828:	10c00217 	ldw	r3,8(r2)
4103382c:	d0a02117 	ldw	r2,-32636(gp)
41033830:	1880032e 	bgeu	r3,r2,41033840 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
41033834:	e0fffe17 	ldw	r3,-8(fp)
41033838:	00800044 	movi	r2,1
4103383c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
41033840:	e0bfff17 	ldw	r2,-4(fp)
41033844:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
41033848:	d0e01104 	addi	r3,gp,-32700
4103384c:	e0bffe17 	ldw	r2,-8(fp)
41033850:	10ffcc1e 	bne	r2,r3,41033784 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
41033854:	e037883a 	mov	sp,fp
41033858:	dfc00117 	ldw	ra,4(sp)
4103385c:	df000017 	ldw	fp,0(sp)
41033860:	dec00204 	addi	sp,sp,8
41033864:	f800283a 	ret

41033868 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
41033868:	deffff04 	addi	sp,sp,-4
4103386c:	df000015 	stw	fp,0(sp)
41033870:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
41033874:	000170fa 	wrctl	ienable,zero
}
41033878:	e037883a 	mov	sp,fp
4103387c:	df000017 	ldw	fp,0(sp)
41033880:	dec00104 	addi	sp,sp,4
41033884:	f800283a 	ret

41033888 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
41033888:	defffa04 	addi	sp,sp,-24
4103388c:	dfc00515 	stw	ra,20(sp)
41033890:	df000415 	stw	fp,16(sp)
41033894:	df000404 	addi	fp,sp,16
41033898:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
4103389c:	00800034 	movhi	r2,0
410338a0:	108ade04 	addi	r2,r2,11128
410338a4:	10800017 	ldw	r2,0(r2)
410338a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
410338ac:	00003306 	br	4103397c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
410338b0:	e0bffd17 	ldw	r2,-12(fp)
410338b4:	11000217 	ldw	r4,8(r2)
410338b8:	10230540 	call	41023054 <strlen>
410338bc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
410338c0:	e0bffd17 	ldw	r2,-12(fp)
410338c4:	10c00217 	ldw	r3,8(r2)
410338c8:	e0bffc17 	ldw	r2,-16(fp)
410338cc:	1885883a 	add	r2,r3,r2
410338d0:	10bfffc4 	addi	r2,r2,-1
410338d4:	10800003 	ldbu	r2,0(r2)
410338d8:	10803fcc 	andi	r2,r2,255
410338dc:	1080201c 	xori	r2,r2,128
410338e0:	10bfe004 	addi	r2,r2,-128
410338e4:	10800bd8 	cmpnei	r2,r2,47
410338e8:	1000031e 	bne	r2,zero,410338f8 <alt_find_file+0x70>
    {
      len -= 1;
410338ec:	e0bffc17 	ldw	r2,-16(fp)
410338f0:	10bfffc4 	addi	r2,r2,-1
410338f4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
410338f8:	e0bffc17 	ldw	r2,-16(fp)
410338fc:	1007883a 	mov	r3,r2
41033900:	e0bffe17 	ldw	r2,-8(fp)
41033904:	1885883a 	add	r2,r3,r2
41033908:	10800003 	ldbu	r2,0(r2)
4103390c:	10803fcc 	andi	r2,r2,255
41033910:	1080201c 	xori	r2,r2,128
41033914:	10bfe004 	addi	r2,r2,-128
41033918:	10800be0 	cmpeqi	r2,r2,47
4103391c:	10000a1e 	bne	r2,zero,41033948 <alt_find_file+0xc0>
41033920:	e0bffc17 	ldw	r2,-16(fp)
41033924:	1007883a 	mov	r3,r2
41033928:	e0bffe17 	ldw	r2,-8(fp)
4103392c:	1885883a 	add	r2,r3,r2
41033930:	10800003 	ldbu	r2,0(r2)
41033934:	10803fcc 	andi	r2,r2,255
41033938:	1080201c 	xori	r2,r2,128
4103393c:	10bfe004 	addi	r2,r2,-128
41033940:	1004c03a 	cmpne	r2,r2,zero
41033944:	10000a1e 	bne	r2,zero,41033970 <alt_find_file+0xe8>
41033948:	e0bffd17 	ldw	r2,-12(fp)
4103394c:	11000217 	ldw	r4,8(r2)
41033950:	e1bffc17 	ldw	r6,-16(fp)
41033954:	e17ffe17 	ldw	r5,-8(fp)
41033958:	1022c0c0 	call	41022c0c <memcmp>
4103395c:	1004c03a 	cmpne	r2,r2,zero
41033960:	1000031e 	bne	r2,zero,41033970 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
41033964:	e0bffd17 	ldw	r2,-12(fp)
41033968:	e0bfff15 	stw	r2,-4(fp)
4103396c:	00000806 	br	41033990 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
41033970:	e0bffd17 	ldw	r2,-12(fp)
41033974:	10800017 	ldw	r2,0(r2)
41033978:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
4103397c:	00c00034 	movhi	r3,0
41033980:	18cade04 	addi	r3,r3,11128
41033984:	e0bffd17 	ldw	r2,-12(fp)
41033988:	10ffc91e 	bne	r2,r3,410338b0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
4103398c:	e03fff15 	stw	zero,-4(fp)
41033990:	e0bfff17 	ldw	r2,-4(fp)
}
41033994:	e037883a 	mov	sp,fp
41033998:	dfc00117 	ldw	ra,4(sp)
4103399c:	df000017 	ldw	fp,0(sp)
410339a0:	dec00204 	addi	sp,sp,8
410339a4:	f800283a 	ret

410339a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
410339a8:	defffc04 	addi	sp,sp,-16
410339ac:	df000315 	stw	fp,12(sp)
410339b0:	df000304 	addi	fp,sp,12
410339b4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
410339b8:	00bffa04 	movi	r2,-24
410339bc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
410339c0:	e03ffe15 	stw	zero,-8(fp)
410339c4:	00001e06 	br	41033a40 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
410339c8:	e0bffe17 	ldw	r2,-8(fp)
410339cc:	00c00034 	movhi	r3,0
410339d0:	18c65f04 	addi	r3,r3,6524
410339d4:	10800324 	muli	r2,r2,12
410339d8:	10c5883a 	add	r2,r2,r3
410339dc:	10800017 	ldw	r2,0(r2)
410339e0:	1004c03a 	cmpne	r2,r2,zero
410339e4:	1000131e 	bne	r2,zero,41033a34 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
410339e8:	e0bffe17 	ldw	r2,-8(fp)
410339ec:	00c00034 	movhi	r3,0
410339f0:	18c65f04 	addi	r3,r3,6524
410339f4:	10800324 	muli	r2,r2,12
410339f8:	10c7883a 	add	r3,r2,r3
410339fc:	e0bfff17 	ldw	r2,-4(fp)
41033a00:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
41033a04:	00800034 	movhi	r2,0
41033a08:	108ae204 	addi	r2,r2,11144
41033a0c:	10c00017 	ldw	r3,0(r2)
41033a10:	e0bffe17 	ldw	r2,-8(fp)
41033a14:	1880040e 	bge	r3,r2,41033a28 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
41033a18:	00c00034 	movhi	r3,0
41033a1c:	18cae204 	addi	r3,r3,11144
41033a20:	e0bffe17 	ldw	r2,-8(fp)
41033a24:	18800015 	stw	r2,0(r3)
      }
      rc = i;
41033a28:	e0bffe17 	ldw	r2,-8(fp)
41033a2c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
41033a30:	00000606 	br	41033a4c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
41033a34:	e0bffe17 	ldw	r2,-8(fp)
41033a38:	10800044 	addi	r2,r2,1
41033a3c:	e0bffe15 	stw	r2,-8(fp)
41033a40:	e0bffe17 	ldw	r2,-8(fp)
41033a44:	10800810 	cmplti	r2,r2,32
41033a48:	103fdf1e 	bne	r2,zero,410339c8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
41033a4c:	e0bffd17 	ldw	r2,-12(fp)
}
41033a50:	e037883a 	mov	sp,fp
41033a54:	df000017 	ldw	fp,0(sp)
41033a58:	dec00104 	addi	sp,sp,4
41033a5c:	f800283a 	ret

41033a60 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
41033a60:	defffb04 	addi	sp,sp,-20
41033a64:	df000415 	stw	fp,16(sp)
41033a68:	df000404 	addi	fp,sp,16
41033a6c:	e13ffe15 	stw	r4,-8(fp)
41033a70:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
41033a74:	e0bfff17 	ldw	r2,-4(fp)
41033a78:	10840070 	cmpltui	r2,r2,4097
41033a7c:	1000021e 	bne	r2,zero,41033a88 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
41033a80:	00840004 	movi	r2,4096
41033a84:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
41033a88:	e0fffe17 	ldw	r3,-8(fp)
41033a8c:	e0bfff17 	ldw	r2,-4(fp)
41033a90:	1885883a 	add	r2,r3,r2
41033a94:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
41033a98:	e0bffe17 	ldw	r2,-8(fp)
41033a9c:	e0bffd15 	stw	r2,-12(fp)
41033aa0:	00000506 	br	41033ab8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
41033aa4:	e0bffd17 	ldw	r2,-12(fp)
41033aa8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
41033aac:	e0bffd17 	ldw	r2,-12(fp)
41033ab0:	10800804 	addi	r2,r2,32
41033ab4:	e0bffd15 	stw	r2,-12(fp)
41033ab8:	e0fffd17 	ldw	r3,-12(fp)
41033abc:	e0bffc17 	ldw	r2,-16(fp)
41033ac0:	18bff836 	bltu	r3,r2,41033aa4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
41033ac4:	e0bffe17 	ldw	r2,-8(fp)
41033ac8:	108007cc 	andi	r2,r2,31
41033acc:	1005003a 	cmpeq	r2,r2,zero
41033ad0:	1000021e 	bne	r2,zero,41033adc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
41033ad4:	e0bffd17 	ldw	r2,-12(fp)
41033ad8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
41033adc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
41033ae0:	e037883a 	mov	sp,fp
41033ae4:	df000017 	ldw	fp,0(sp)
41033ae8:	dec00104 	addi	sp,sp,4
41033aec:	f800283a 	ret

41033af0 <atexit>:
41033af0:	200b883a 	mov	r5,r4
41033af4:	000d883a 	mov	r6,zero
41033af8:	0009883a 	mov	r4,zero
41033afc:	000f883a 	mov	r7,zero
41033b00:	1033b3c1 	jmpi	41033b3c <__register_exitproc>

41033b04 <exit>:
41033b04:	defffe04 	addi	sp,sp,-8
41033b08:	000b883a 	mov	r5,zero
41033b0c:	dc000015 	stw	r16,0(sp)
41033b10:	dfc00115 	stw	ra,4(sp)
41033b14:	2021883a 	mov	r16,r4
41033b18:	1033c740 	call	41033c74 <__call_exitprocs>
41033b1c:	00800034 	movhi	r2,0
41033b20:	108ad804 	addi	r2,r2,11104
41033b24:	11000017 	ldw	r4,0(r2)
41033b28:	20800f17 	ldw	r2,60(r4)
41033b2c:	10000126 	beq	r2,zero,41033b34 <exit+0x30>
41033b30:	103ee83a 	callr	r2
41033b34:	8009883a 	mov	r4,r16
41033b38:	1033e640 	call	41033e64 <_exit>

41033b3c <__register_exitproc>:
41033b3c:	defffa04 	addi	sp,sp,-24
41033b40:	00800034 	movhi	r2,0
41033b44:	108ad804 	addi	r2,r2,11104
41033b48:	dc000015 	stw	r16,0(sp)
41033b4c:	14000017 	ldw	r16,0(r2)
41033b50:	dd000415 	stw	r20,16(sp)
41033b54:	2829883a 	mov	r20,r5
41033b58:	81405217 	ldw	r5,328(r16)
41033b5c:	dcc00315 	stw	r19,12(sp)
41033b60:	dc800215 	stw	r18,8(sp)
41033b64:	dc400115 	stw	r17,4(sp)
41033b68:	dfc00515 	stw	ra,20(sp)
41033b6c:	2023883a 	mov	r17,r4
41033b70:	3027883a 	mov	r19,r6
41033b74:	3825883a 	mov	r18,r7
41033b78:	28002526 	beq	r5,zero,41033c10 <__register_exitproc+0xd4>
41033b7c:	29000117 	ldw	r4,4(r5)
41033b80:	008007c4 	movi	r2,31
41033b84:	11002716 	blt	r2,r4,41033c24 <__register_exitproc+0xe8>
41033b88:	8800101e 	bne	r17,zero,41033bcc <__register_exitproc+0x90>
41033b8c:	2105883a 	add	r2,r4,r4
41033b90:	1085883a 	add	r2,r2,r2
41033b94:	20c00044 	addi	r3,r4,1
41033b98:	1145883a 	add	r2,r2,r5
41033b9c:	0009883a 	mov	r4,zero
41033ba0:	15000215 	stw	r20,8(r2)
41033ba4:	28c00115 	stw	r3,4(r5)
41033ba8:	2005883a 	mov	r2,r4
41033bac:	dfc00517 	ldw	ra,20(sp)
41033bb0:	dd000417 	ldw	r20,16(sp)
41033bb4:	dcc00317 	ldw	r19,12(sp)
41033bb8:	dc800217 	ldw	r18,8(sp)
41033bbc:	dc400117 	ldw	r17,4(sp)
41033bc0:	dc000017 	ldw	r16,0(sp)
41033bc4:	dec00604 	addi	sp,sp,24
41033bc8:	f800283a 	ret
41033bcc:	29802204 	addi	r6,r5,136
41033bd0:	00800044 	movi	r2,1
41033bd4:	110e983a 	sll	r7,r2,r4
41033bd8:	30c04017 	ldw	r3,256(r6)
41033bdc:	2105883a 	add	r2,r4,r4
41033be0:	1085883a 	add	r2,r2,r2
41033be4:	1185883a 	add	r2,r2,r6
41033be8:	19c6b03a 	or	r3,r3,r7
41033bec:	14802015 	stw	r18,128(r2)
41033bf0:	14c00015 	stw	r19,0(r2)
41033bf4:	00800084 	movi	r2,2
41033bf8:	30c04015 	stw	r3,256(r6)
41033bfc:	88bfe31e 	bne	r17,r2,41033b8c <__register_exitproc+0x50>
41033c00:	30804117 	ldw	r2,260(r6)
41033c04:	11c4b03a 	or	r2,r2,r7
41033c08:	30804115 	stw	r2,260(r6)
41033c0c:	003fdf06 	br	41033b8c <__register_exitproc+0x50>
41033c10:	00800034 	movhi	r2,0
41033c14:	108b8304 	addi	r2,r2,11788
41033c18:	100b883a 	mov	r5,r2
41033c1c:	80805215 	stw	r2,328(r16)
41033c20:	003fd606 	br	41033b7c <__register_exitproc+0x40>
41033c24:	009040b4 	movhi	r2,16642
41033c28:	10892e04 	addi	r2,r2,9400
41033c2c:	1000021e 	bne	r2,zero,41033c38 <__register_exitproc+0xfc>
41033c30:	013fffc4 	movi	r4,-1
41033c34:	003fdc06 	br	41033ba8 <__register_exitproc+0x6c>
41033c38:	01006404 	movi	r4,400
41033c3c:	103ee83a 	callr	r2
41033c40:	1007883a 	mov	r3,r2
41033c44:	103ffa26 	beq	r2,zero,41033c30 <__register_exitproc+0xf4>
41033c48:	80805217 	ldw	r2,328(r16)
41033c4c:	180b883a 	mov	r5,r3
41033c50:	18000115 	stw	zero,4(r3)
41033c54:	18800015 	stw	r2,0(r3)
41033c58:	80c05215 	stw	r3,328(r16)
41033c5c:	18006215 	stw	zero,392(r3)
41033c60:	18006315 	stw	zero,396(r3)
41033c64:	0009883a 	mov	r4,zero
41033c68:	883fc826 	beq	r17,zero,41033b8c <__register_exitproc+0x50>
41033c6c:	003fd706 	br	41033bcc <__register_exitproc+0x90>

41033c70 <register_fini>:
41033c70:	f800283a 	ret

41033c74 <__call_exitprocs>:
41033c74:	00800034 	movhi	r2,0
41033c78:	108ad804 	addi	r2,r2,11104
41033c7c:	10800017 	ldw	r2,0(r2)
41033c80:	defff304 	addi	sp,sp,-52
41033c84:	df000b15 	stw	fp,44(sp)
41033c88:	d8800115 	stw	r2,4(sp)
41033c8c:	009040b4 	movhi	r2,16642
41033c90:	10892904 	addi	r2,r2,9380
41033c94:	1005003a 	cmpeq	r2,r2,zero
41033c98:	d8800215 	stw	r2,8(sp)
41033c9c:	d8800117 	ldw	r2,4(sp)
41033ca0:	dd400815 	stw	r21,32(sp)
41033ca4:	dd000715 	stw	r20,28(sp)
41033ca8:	10805204 	addi	r2,r2,328
41033cac:	dfc00c15 	stw	ra,48(sp)
41033cb0:	ddc00a15 	stw	r23,40(sp)
41033cb4:	dd800915 	stw	r22,36(sp)
41033cb8:	dcc00615 	stw	r19,24(sp)
41033cbc:	dc800515 	stw	r18,20(sp)
41033cc0:	dc400415 	stw	r17,16(sp)
41033cc4:	dc000315 	stw	r16,12(sp)
41033cc8:	282b883a 	mov	r21,r5
41033ccc:	2039883a 	mov	fp,r4
41033cd0:	d8800015 	stw	r2,0(sp)
41033cd4:	2829003a 	cmpeq	r20,r5,zero
41033cd8:	d8800117 	ldw	r2,4(sp)
41033cdc:	14405217 	ldw	r17,328(r2)
41033ce0:	88001026 	beq	r17,zero,41033d24 <__call_exitprocs+0xb0>
41033ce4:	ddc00017 	ldw	r23,0(sp)
41033ce8:	88800117 	ldw	r2,4(r17)
41033cec:	8c802204 	addi	r18,r17,136
41033cf0:	143fffc4 	addi	r16,r2,-1
41033cf4:	80000916 	blt	r16,zero,41033d1c <__call_exitprocs+0xa8>
41033cf8:	05bfffc4 	movi	r22,-1
41033cfc:	a000151e 	bne	r20,zero,41033d54 <__call_exitprocs+0xe0>
41033d00:	8409883a 	add	r4,r16,r16
41033d04:	2105883a 	add	r2,r4,r4
41033d08:	1485883a 	add	r2,r2,r18
41033d0c:	10c02017 	ldw	r3,128(r2)
41033d10:	a8c01126 	beq	r21,r3,41033d58 <__call_exitprocs+0xe4>
41033d14:	843fffc4 	addi	r16,r16,-1
41033d18:	85bff81e 	bne	r16,r22,41033cfc <__call_exitprocs+0x88>
41033d1c:	d8800217 	ldw	r2,8(sp)
41033d20:	10003126 	beq	r2,zero,41033de8 <__call_exitprocs+0x174>
41033d24:	dfc00c17 	ldw	ra,48(sp)
41033d28:	df000b17 	ldw	fp,44(sp)
41033d2c:	ddc00a17 	ldw	r23,40(sp)
41033d30:	dd800917 	ldw	r22,36(sp)
41033d34:	dd400817 	ldw	r21,32(sp)
41033d38:	dd000717 	ldw	r20,28(sp)
41033d3c:	dcc00617 	ldw	r19,24(sp)
41033d40:	dc800517 	ldw	r18,20(sp)
41033d44:	dc400417 	ldw	r17,16(sp)
41033d48:	dc000317 	ldw	r16,12(sp)
41033d4c:	dec00d04 	addi	sp,sp,52
41033d50:	f800283a 	ret
41033d54:	8409883a 	add	r4,r16,r16
41033d58:	88c00117 	ldw	r3,4(r17)
41033d5c:	2105883a 	add	r2,r4,r4
41033d60:	1445883a 	add	r2,r2,r17
41033d64:	18ffffc4 	addi	r3,r3,-1
41033d68:	11800217 	ldw	r6,8(r2)
41033d6c:	1c001526 	beq	r3,r16,41033dc4 <__call_exitprocs+0x150>
41033d70:	10000215 	stw	zero,8(r2)
41033d74:	303fe726 	beq	r6,zero,41033d14 <__call_exitprocs+0xa0>
41033d78:	00c00044 	movi	r3,1
41033d7c:	1c06983a 	sll	r3,r3,r16
41033d80:	90804017 	ldw	r2,256(r18)
41033d84:	8cc00117 	ldw	r19,4(r17)
41033d88:	1884703a 	and	r2,r3,r2
41033d8c:	10001426 	beq	r2,zero,41033de0 <__call_exitprocs+0x16c>
41033d90:	90804117 	ldw	r2,260(r18)
41033d94:	1884703a 	and	r2,r3,r2
41033d98:	10000c1e 	bne	r2,zero,41033dcc <__call_exitprocs+0x158>
41033d9c:	2105883a 	add	r2,r4,r4
41033da0:	1485883a 	add	r2,r2,r18
41033da4:	11400017 	ldw	r5,0(r2)
41033da8:	e009883a 	mov	r4,fp
41033dac:	303ee83a 	callr	r6
41033db0:	88800117 	ldw	r2,4(r17)
41033db4:	98bfc81e 	bne	r19,r2,41033cd8 <__call_exitprocs+0x64>
41033db8:	b8800017 	ldw	r2,0(r23)
41033dbc:	147fd526 	beq	r2,r17,41033d14 <__call_exitprocs+0xa0>
41033dc0:	003fc506 	br	41033cd8 <__call_exitprocs+0x64>
41033dc4:	8c000115 	stw	r16,4(r17)
41033dc8:	003fea06 	br	41033d74 <__call_exitprocs+0x100>
41033dcc:	2105883a 	add	r2,r4,r4
41033dd0:	1485883a 	add	r2,r2,r18
41033dd4:	11000017 	ldw	r4,0(r2)
41033dd8:	303ee83a 	callr	r6
41033ddc:	003ff406 	br	41033db0 <__call_exitprocs+0x13c>
41033de0:	303ee83a 	callr	r6
41033de4:	003ff206 	br	41033db0 <__call_exitprocs+0x13c>
41033de8:	88800117 	ldw	r2,4(r17)
41033dec:	1000081e 	bne	r2,zero,41033e10 <__call_exitprocs+0x19c>
41033df0:	89000017 	ldw	r4,0(r17)
41033df4:	20000726 	beq	r4,zero,41033e14 <__call_exitprocs+0x1a0>
41033df8:	b9000015 	stw	r4,0(r23)
41033dfc:	8809883a 	mov	r4,r17
41033e00:	10224a40 	call	410224a4 <free>
41033e04:	bc400017 	ldw	r17,0(r23)
41033e08:	883fb71e 	bne	r17,zero,41033ce8 <__call_exitprocs+0x74>
41033e0c:	003fc506 	br	41033d24 <__call_exitprocs+0xb0>
41033e10:	89000017 	ldw	r4,0(r17)
41033e14:	882f883a 	mov	r23,r17
41033e18:	2023883a 	mov	r17,r4
41033e1c:	883fb21e 	bne	r17,zero,41033ce8 <__call_exitprocs+0x74>
41033e20:	003fc006 	br	41033d24 <__call_exitprocs+0xb0>

41033e24 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
41033e24:	defffd04 	addi	sp,sp,-12
41033e28:	df000215 	stw	fp,8(sp)
41033e2c:	df000204 	addi	fp,sp,8
41033e30:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
41033e34:	e0bfff17 	ldw	r2,-4(fp)
41033e38:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
41033e3c:	e0bffe17 	ldw	r2,-8(fp)
41033e40:	1005003a 	cmpeq	r2,r2,zero
41033e44:	1000021e 	bne	r2,zero,41033e50 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
41033e48:	002af070 	cmpltui	zero,zero,43969
41033e4c:	00000106 	br	41033e54 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
41033e50:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
41033e54:	e037883a 	mov	sp,fp
41033e58:	df000017 	ldw	fp,0(sp)
41033e5c:	dec00104 	addi	sp,sp,4
41033e60:	f800283a 	ret

41033e64 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
41033e64:	defffd04 	addi	sp,sp,-12
41033e68:	dfc00215 	stw	ra,8(sp)
41033e6c:	df000115 	stw	fp,4(sp)
41033e70:	df000104 	addi	fp,sp,4
41033e74:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
41033e78:	e13fff17 	ldw	r4,-4(fp)
41033e7c:	1033e240 	call	41033e24 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
41033e80:	003fff06 	br	41033e80 <_exit+0x1c>
41033e84:	41033c70 	cmpltui	r4,r8,3313
