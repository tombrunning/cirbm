
helloworld_sim_test.elf:     file format elf32-littlenios2
helloworld_sim_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x410201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x41020000 paddr 0x41020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x41020020 paddr 0x41020020 align 2**12
         filesz 0x000063f4 memsz 0x000063f4 flags r-x
    LOAD off    0x00008000 vaddr 0x00000000 paddr 0x41026414 align 2**12
         filesz 0x00001b88 memsz 0x00001e68 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  41020000  41020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  41020020  41020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006260  410201b4  410201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  00000000  41026414  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b34  00000054  41026468  00008054  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00001b88  41027f9c  00009b88  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00009b88  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000958  00000000  00000000  00009bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000ea3  00000000  00000000  0000a508  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001b215  00000000  00000000  0000b3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000537c  00000000  00000000  000265c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d52f  00000000  00000000  0002b93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000121c  00000000  00000000  00038e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016de  00000000  00000000  0003a088  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000040e3  00000000  00000000  0003b766  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003f84c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003f880  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000423af  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  000423b2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000423bc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000423bd  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000423be  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000423c2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000423c6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000423ca  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000423d3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000423dc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  000423e5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  000423ed  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c6b  00000000  00000000  0004240e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000b5f0b  00000000  00000000  00047079  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
41020000 l    d  .entry	00000000 .entry
41020020 l    d  .exceptions	00000000 .exceptions
410201b4 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000054 l    d  .rwdata	00000000 .rwdata
00001b88 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
410201fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00000054 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
41021b6c l     F .text	00000058 std
41021c78 l     F .text	00000008 __fp_lock
41021c80 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
41022c40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
41022ca0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
41022da0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
41022ec0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
41022fa0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
410230fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
41023328 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001b68 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
410235c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000a04 l     O .rwdata	000000a4 dma_priv
00000aa8 l     O .rwdata	0000001c dma_tx
00000ac4 l     O .rwdata	0000001c dma_rx
00000ae0 l     O .rwdata	00001060 jtag_uart
410236d8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
41023830 l     F .text	000000a8 alt_avalon_dma_launch_txonly
410238d8 l     F .text	000000a8 alt_avalon_dma_launch_rxonly
41023980 l     F .text	000003a4 alt_avalon_dma_ioctl
410240d4 l     F .text	000001c8 alt_avalon_dma_irq
4102434c l     F .text	00000038 alt_dma_txchan_reg
41024384 l     F .text	00000038 alt_dma_rxchan_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
410245c4 l     F .text	00000228 altera_avalon_jtag_uart_irq
410247ec l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
41024e68 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
410251b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
4102526c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
41025324 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
410257dc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
41025918 l     F .text	000000dc alt_file_locked
41025b7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
410261fc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
410263b0 l     F .text	00000040 alt_sim_halt
410229e4 g     F .text	00000070 _isatty_r
4102315c g     F .text	0000006c alt_main
41020234 g     F .text	000000a0 _puts_r
00001bd8 g     O .bss	00000100 alt_irq
41022a54 g     F .text	00000078 _lseek_r
41026468 g       *ABS*	00000000 __flash_rwdata_start
00001e68 g       *ABS*	00000000 __alt_heap_start
41022620 g     F .text	00000068 __sseek
41021bd4 g     F .text	000000a4 __sinit
4102429c g     F .text	000000b0 alt_avalon_dma_init
41021cd4 g     F .text	00000068 __sfmoreglue
410231e8 g     F .text	00000020 __malloc_unlock
410210bc g     F .text	000000e0 memmove
41021cc4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
41020000 g     F .entry	0000001c __reset
41020020 g       *ABS*	00000000 __flash_exceptions_start
41022970 g     F .text	00000074 _fstat_r
00001b94 g     O .bss	00000004 errno
00001b9c g     O .bss	00000004 alt_argv
00009b40 g       *ABS*	00000000 _gp
410252cc g     F .text	00000058 alt_dma_txchan_open
00000884 g     O .rwdata	00000180 alt_fd_list
4102544c g     F .text	00000094 alt_find_dev
4102101c g     F .text	000000a0 memcpy
41021cb8 g     F .text	0000000c _cleanup_r
410258a0 g     F .text	00000078 alt_io_redirect
41026414 g       *ABS*	00000000 __DTOR_END__
410202d4 g     F .text	00000014 puts
41024a04 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
41022e00 g     F .text	000000c0 isatty
41025f78 g     F .text	00000090 alt_icache_flush
00001b88 g     O .bss	00000004 __malloc_top_pad
4102035c g     F .text	0000049c __sfvwrite_r
41021790 g     F .text	00000070 _sbrk_r
41022acc g     F .text	00000078 _read_r
00001b60 g     O .rwdata	00000004 alt_max_fd
4102284c g     F .text	00000110 _fclose_r
41021b38 g     F .text	00000034 fflush
00001b8c g     O .bss	00000004 __malloc_max_sbrked_mem
41023710 g     F .text	00000120 alt_avalon_dma_launch_bidir
41025214 g     F .text	00000058 alt_dma_rxchan_open
4102300c g     F .text	000000f0 lseek
00001b44 g     O .rwdata	00000004 _global_impure_ptr
4102119c g     F .text	000005f4 _realloc_r
00001e68 g       *ABS*	00000000 __bss_end
410256e4 g     F .text	000000f8 alt_iic_isr_register
41025c74 g     F .text	0000010c alt_tick
41021ca0 g     F .text	00000018 __fp_lock_all
4102569c g     F .text	00000048 alt_ic_irq_enabled
41025bdc g     F .text	00000098 alt_alarm_stop
00001ba4 g     O .bss	00000004 alt_irq_active
410200ec g     F .exceptions	000000c8 alt_irq_handler
0000085c g     O .rwdata	00000028 alt_dev_null
410250bc g     F .text	00000044 alt_dcache_flush_all
00001b88 g       *ABS*	00000000 __ram_rwdata_end
41020000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001b58 g     O .rwdata	00000008 alt_dev_list
41023f00 g     F .text	00000080 alt_avalon_dma_space
410234a4 g     F .text	00000120 write
00000054 g       *ABS*	00000000 __ram_rodata_end
41022ccc g     F .text	000000d4 fstat
00001e68 g       *ABS*	00000000 end
41024504 g     F .text	000000c0 altera_avalon_jtag_uart_init
41026410 g       *ABS*	00000000 __CTOR_LIST__
40000000 g       *ABS*	00000000 __alt_stack_pointer
41024ed8 g     F .text	00000090 alt_avalon_timer_sc_init
41024c28 g     F .text	00000240 altera_avalon_jtag_uart_write
41021bc4 g     F .text	00000004 __sfp_lock_acquire
41020f38 g     F .text	000000e4 memchr
41021f58 g     F .text	00000314 _free_r
41023f80 g     F .text	00000154 alt_avalon_dma_send
41026200 g     F .text	000001b0 __call_exitprocs
00001b74 g     O .rwdata	00000008 alt_dma_txchan_list
00001b4c g     O .rwdata	00000004 __malloc_sbrk_base
410201b4 g     F .text	0000004c _start
00001ba8 g     O .bss	00000004 _alt_tick_rate
00001bac g     O .bss	00000004 _alt_nticks
41023208 g     F .text	00000120 read
41023658 g     F .text	00000080 alt_sys_init
410260c8 g     F .text	00000134 __register_exitproc
4102489c g     F .text	00000074 altera_avalon_jtag_uart_close
00000054 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001bb0 g     O .bss	00000028 __malloc_current_mallinfo
410243bc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
41025ec0 g     F .text	000000b8 alt_get_fd
410227dc g     F .text	00000070 _close_r
41026054 g     F .text	00000074 memcmp
4102446c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00001e68 g       *ABS*	00000000 __alt_stack_base
410244b4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
41021800 g     F .text	0000013c __swsetup_r
41021d3c g     F .text	000000f0 __sfp
00000454 g     O .rwdata	00000408 __malloc_av_
41021bd0 g     F .text	00000004 __sinit_lock_release
41022704 g     F .text	00000060 __sread
41025da0 g     F .text	00000120 alt_find_file
41025100 g     F .text	000000b4 alt_dev_llist_insert
410231c8 g     F .text	00000020 __malloc_lock
410233e8 g     F .text	000000bc sbrk
4102193c g     F .text	000001fc _fflush_r
00001b88 g       *ABS*	00000000 __bss_start
41022580 g     F .text	00000098 memset
41020200 g     F .text	00000034 main
41023d68 g     F .text	00000044 alt_avalon_dma_rx_ioctl
00001ba0 g     O .bss	00000004 alt_envp
00001b90 g     O .bss	00000004 __malloc_max_total_mem
41024414 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
41022618 g     F .text	00000008 __sclose
40000000 g       *ABS*	00000000 __alt_heap_limit
4102295c g     F .text	00000014 fclose
00001cd8 g     O .bss	00000190 _atexit0
410207f8 g     F .text	00000740 _malloc_r
00001b64 g     O .rwdata	00000004 alt_errno
00000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr2_emif
41022334 g     F .text	000000b8 _fwalk
41021e2c g     F .text	0000012c _malloc_trim_r
41026414 g       *ABS*	00000000 __CTOR_END__
41026414 g       *ABS*	00000000 __flash_rodata_start
41026414 g       *ABS*	00000000 __DTOR_LIST__
41023624 g     F .text	00000034 alt_irq_init
41023388 g     F .text	00000060 alt_release_fd
41026008 g     F .text	00000014 atexit
41022764 g     F .text	00000078 _write_r
00001b40 g     O .rwdata	00000004 _impure_ptr
00001b98 g     O .bss	00000004 alt_argc
410253e8 g     F .text	00000064 _do_dtors
41020020 g       .exceptions	00000000 alt_irq_entry
41021c88 g     F .text	00000018 __fp_unlock_all
00001b50 g     O .rwdata	00000008 alt_fs_list
41020020 g       *ABS*	00000000 __ram_exceptions_start
41025510 g     F .text	00000050 alt_ic_isr_register
00001b88 g       *ABS*	00000000 _edata
00001e68 g       *ABS*	00000000 _end
410201b4 g       *ABS*	00000000 __ram_exceptions_end
41024910 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
410255fc g     F .text	000000a0 alt_ic_irq_disable
41022688 g     F .text	0000007c __swrite
00001b48 g     O .rwdata	00000004 __malloc_trim_threshold
41025d80 g     F .text	00000020 altera_nios2_qsys_irq_init
4102601c g     F .text	00000038 exit
4102226c g     F .text	000000c8 _fwalk_reent
40000000 g       *ABS*	00000000 __alt_data_end
41020020 g     F .exceptions	00000000 alt_exception
41021bc8 g     F .text	00000004 __sfp_lock_release
410263f0 g     F .text	00000020 _exit
41024f68 g     F .text	00000154 alt_alarm_start
410223ec g     F .text	00000194 __smakebuf_r
410202e8 g     F .text	00000074 strlen
410259f4 g     F .text	00000188 open
410254e0 g     F .text	00000030 alt_icache_flush_all
00001b7c g     O .rwdata	00000004 alt_priority_mask
41025560 g     F .text	0000009c alt_ic_irq_enable
41023dac g     F .text	00000154 alt_avalon_dma_prepare
00001b6c g     O .rwdata	00000008 alt_dma_rxchan_list
00001b80 g     O .rwdata	00000008 alt_alarm_list
41025384 g     F .text	00000064 _do_ctors
41022b44 g     F .text	000000fc close
41022f20 g     F .text	00000080 alt_load
41023d24 g     F .text	00000044 alt_avalon_dma_tx_ioctl
00000000  w      *UND*	00000000 free
41021bcc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

41020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
41020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
41020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
41020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
4102000c:	00bffd16 	blt	zero,r2,41020004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
41020010:	005040b4 	movhi	at,16642
    ori r1, r1, %lo(_start)
41020014:	08406d14 	ori	at,at,436
    jmp r1
41020018:	0800683a 	jmp	at
4102001c:	00000000 	call	40000000 <__alt_data_end>

Disassembly of section .exceptions:

41020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
41020020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
41020024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
41020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
4102002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
41020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
41020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
41020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
4102003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
41020040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
41020044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
41020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
4102004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
41020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
41020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
41020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
4102005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
41020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
41020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
41020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
4102006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
41020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
41020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
41020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
4102007c:	10000326 	beq	r2,zero,4102008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
41020080:	20000226 	beq	r4,zero,4102008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
41020084:	10200ec0 	call	410200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
41020088:	00000306 	br	41020098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
4102008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
41020090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
41020094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
41020098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
4102009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
410200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
410200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
410200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
410200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
410200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
410200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
410200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
410200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
410200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
410200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
410200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
410200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
410200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
410200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
410200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
410200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
410200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
410200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
410200e8:	ef80083a 	eret

410200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
410200ec:	defff904 	addi	sp,sp,-28
410200f0:	dfc00615 	stw	ra,24(sp)
410200f4:	df000515 	stw	fp,20(sp)
410200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
410200fc:	0005313a 	rdctl	r2,ipending
41020100:	e0bffc15 	stw	r2,-16(fp)

  return active;
41020104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
41020108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
4102010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
41020110:	00800044 	movi	r2,1
41020114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
41020118:	e0ffff17 	ldw	r3,-4(fp)
4102011c:	e0bffe17 	ldw	r2,-8(fp)
41020120:	1884703a 	and	r2,r3,r2
41020124:	1005003a 	cmpeq	r2,r2,zero
41020128:	1000161e 	bne	r2,zero,41020184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
4102012c:	e0bffd17 	ldw	r2,-12(fp)
41020130:	00c00034 	movhi	r3,0
41020134:	18c6f604 	addi	r3,r3,7128
41020138:	100490fa 	slli	r2,r2,3
4102013c:	10c5883a 	add	r2,r2,r3
41020140:	11400017 	ldw	r5,0(r2)
41020144:	e0bffd17 	ldw	r2,-12(fp)
41020148:	00c00034 	movhi	r3,0
4102014c:	18c6f604 	addi	r3,r3,7128
41020150:	100490fa 	slli	r2,r2,3
41020154:	10c5883a 	add	r2,r2,r3
41020158:	10800104 	addi	r2,r2,4
4102015c:	11000017 	ldw	r4,0(r2)
41020160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
41020164:	0005313a 	rdctl	r2,ipending
41020168:	e0bffb15 	stw	r2,-20(fp)

  return active;
4102016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
41020170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
41020174:	e0bfff17 	ldw	r2,-4(fp)
41020178:	1004c03a 	cmpne	r2,r2,zero
4102017c:	103fe31e 	bne	r2,zero,4102010c <alt_irq_handler+0x20>
41020180:	00000706 	br	410201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
41020184:	e0bffe17 	ldw	r2,-8(fp)
41020188:	1085883a 	add	r2,r2,r2
4102018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
41020190:	e0bffd17 	ldw	r2,-12(fp)
41020194:	10800044 	addi	r2,r2,1
41020198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
4102019c:	003fde06 	br	41020118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
410201a0:	e037883a 	mov	sp,fp
410201a4:	dfc00117 	ldw	ra,4(sp)
410201a8:	df000017 	ldw	fp,0(sp)
410201ac:	dec00204 	addi	sp,sp,8
410201b0:	f800283a 	ret

Disassembly of section .text:

410201b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
410201b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
410201b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
410201bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
410201c0:	00bffd16 	blt	zero,r2,410201b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
410201c4:	06d00034 	movhi	sp,16384
    ori sp, sp, %lo(__alt_stack_pointer)
410201c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
410201cc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
410201d0:	d6a6d014 	ori	gp,gp,39744
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
410201d4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
410201d8:	1086e214 	ori	r2,r2,7048

    movhi r3, %hi(__bss_end)
410201dc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
410201e0:	18c79a14 	ori	r3,r3,7784

    beq r2, r3, 1f
410201e4:	10c00326 	beq	r2,r3,410201f4 <_start+0x40>

0:
    stw zero, (r2)
410201e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
410201ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
410201f0:	10fffd36 	bltu	r2,r3,410201e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
410201f4:	1022f200 	call	41022f20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
410201f8:	102315c0 	call	4102315c <alt_main>

410201fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
410201fc:	003fff06 	br	410201fc <alt_after_alt_main>

41020200 <main>:
 */

#include <stdio.h>

int main()
{
41020200:	defffe04 	addi	sp,sp,-8
41020204:	dfc00115 	stw	ra,4(sp)
41020208:	df000015 	stw	fp,0(sp)
4102020c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
41020210:	01000034 	movhi	r4,0
41020214:	21000004 	addi	r4,r4,0
41020218:	10202d40 	call	410202d4 <puts>

  return 0;
4102021c:	0005883a 	mov	r2,zero
}
41020220:	e037883a 	mov	sp,fp
41020224:	dfc00117 	ldw	ra,4(sp)
41020228:	df000017 	ldw	fp,0(sp)
4102022c:	dec00204 	addi	sp,sp,8
41020230:	f800283a 	ret

41020234 <_puts_r>:
41020234:	defff604 	addi	sp,sp,-40
41020238:	dc400715 	stw	r17,28(sp)
4102023c:	2023883a 	mov	r17,r4
41020240:	2809883a 	mov	r4,r5
41020244:	dfc00915 	stw	ra,36(sp)
41020248:	dcc00815 	stw	r19,32(sp)
4102024c:	2827883a 	mov	r19,r5
41020250:	10202e80 	call	410202e8 <strlen>
41020254:	89400217 	ldw	r5,8(r17)
41020258:	00c00034 	movhi	r3,0
4102025c:	18c00504 	addi	r3,r3,20
41020260:	01c00044 	movi	r7,1
41020264:	12000044 	addi	r8,r2,1
41020268:	d8c00515 	stw	r3,20(sp)
4102026c:	d9c00615 	stw	r7,24(sp)
41020270:	d8c00304 	addi	r3,sp,12
41020274:	01c00084 	movi	r7,2
41020278:	8809883a 	mov	r4,r17
4102027c:	d80d883a 	mov	r6,sp
41020280:	d8c00015 	stw	r3,0(sp)
41020284:	dcc00315 	stw	r19,12(sp)
41020288:	da000215 	stw	r8,8(sp)
4102028c:	d9c00115 	stw	r7,4(sp)
41020290:	d8800415 	stw	r2,16(sp)
41020294:	102035c0 	call	4102035c <__sfvwrite_r>
41020298:	00ffffc4 	movi	r3,-1
4102029c:	10000626 	beq	r2,zero,410202b8 <_puts_r+0x84>
410202a0:	1805883a 	mov	r2,r3
410202a4:	dfc00917 	ldw	ra,36(sp)
410202a8:	dcc00817 	ldw	r19,32(sp)
410202ac:	dc400717 	ldw	r17,28(sp)
410202b0:	dec00a04 	addi	sp,sp,40
410202b4:	f800283a 	ret
410202b8:	00c00284 	movi	r3,10
410202bc:	1805883a 	mov	r2,r3
410202c0:	dfc00917 	ldw	ra,36(sp)
410202c4:	dcc00817 	ldw	r19,32(sp)
410202c8:	dc400717 	ldw	r17,28(sp)
410202cc:	dec00a04 	addi	sp,sp,40
410202d0:	f800283a 	ret

410202d4 <puts>:
410202d4:	00800034 	movhi	r2,0
410202d8:	1086d004 	addi	r2,r2,6976
410202dc:	200b883a 	mov	r5,r4
410202e0:	11000017 	ldw	r4,0(r2)
410202e4:	10202341 	jmpi	41020234 <_puts_r>

410202e8 <strlen>:
410202e8:	208000cc 	andi	r2,r4,3
410202ec:	2011883a 	mov	r8,r4
410202f0:	1000161e 	bne	r2,zero,4102034c <strlen+0x64>
410202f4:	20c00017 	ldw	r3,0(r4)
410202f8:	017fbff4 	movhi	r5,65279
410202fc:	297fbfc4 	addi	r5,r5,-257
41020300:	01e02074 	movhi	r7,32897
41020304:	39e02004 	addi	r7,r7,-32640
41020308:	1945883a 	add	r2,r3,r5
4102030c:	11c4703a 	and	r2,r2,r7
41020310:	00c6303a 	nor	r3,zero,r3
41020314:	1886703a 	and	r3,r3,r2
41020318:	18000c1e 	bne	r3,zero,4102034c <strlen+0x64>
4102031c:	280d883a 	mov	r6,r5
41020320:	380b883a 	mov	r5,r7
41020324:	21000104 	addi	r4,r4,4
41020328:	20800017 	ldw	r2,0(r4)
4102032c:	1187883a 	add	r3,r2,r6
41020330:	1946703a 	and	r3,r3,r5
41020334:	0084303a 	nor	r2,zero,r2
41020338:	10c4703a 	and	r2,r2,r3
4102033c:	103ff926 	beq	r2,zero,41020324 <strlen+0x3c>
41020340:	20800007 	ldb	r2,0(r4)
41020344:	10000326 	beq	r2,zero,41020354 <strlen+0x6c>
41020348:	21000044 	addi	r4,r4,1
4102034c:	20800007 	ldb	r2,0(r4)
41020350:	103ffd1e 	bne	r2,zero,41020348 <strlen+0x60>
41020354:	2205c83a 	sub	r2,r4,r8
41020358:	f800283a 	ret

4102035c <__sfvwrite_r>:
4102035c:	30800217 	ldw	r2,8(r6)
41020360:	defff504 	addi	sp,sp,-44
41020364:	df000915 	stw	fp,36(sp)
41020368:	dd800715 	stw	r22,28(sp)
4102036c:	dc800315 	stw	r18,12(sp)
41020370:	dfc00a15 	stw	ra,40(sp)
41020374:	ddc00815 	stw	r23,32(sp)
41020378:	dd400615 	stw	r21,24(sp)
4102037c:	dd000515 	stw	r20,20(sp)
41020380:	dcc00415 	stw	r19,16(sp)
41020384:	dc400215 	stw	r17,8(sp)
41020388:	dc000115 	stw	r16,4(sp)
4102038c:	302d883a 	mov	r22,r6
41020390:	2039883a 	mov	fp,r4
41020394:	2825883a 	mov	r18,r5
41020398:	10001c26 	beq	r2,zero,4102040c <__sfvwrite_r+0xb0>
4102039c:	29c0030b 	ldhu	r7,12(r5)
410203a0:	3880020c 	andi	r2,r7,8
410203a4:	10002726 	beq	r2,zero,41020444 <__sfvwrite_r+0xe8>
410203a8:	28800417 	ldw	r2,16(r5)
410203ac:	10002526 	beq	r2,zero,41020444 <__sfvwrite_r+0xe8>
410203b0:	3880008c 	andi	r2,r7,2
410203b4:	b5400017 	ldw	r21,0(r22)
410203b8:	10002826 	beq	r2,zero,4102045c <__sfvwrite_r+0x100>
410203bc:	0021883a 	mov	r16,zero
410203c0:	0023883a 	mov	r17,zero
410203c4:	880d883a 	mov	r6,r17
410203c8:	e009883a 	mov	r4,fp
410203cc:	00810004 	movi	r2,1024
410203d0:	80006e26 	beq	r16,zero,4102058c <__sfvwrite_r+0x230>
410203d4:	800f883a 	mov	r7,r16
410203d8:	91400717 	ldw	r5,28(r18)
410203dc:	1400012e 	bgeu	r2,r16,410203e4 <__sfvwrite_r+0x88>
410203e0:	100f883a 	mov	r7,r2
410203e4:	90c00917 	ldw	r3,36(r18)
410203e8:	183ee83a 	callr	r3
410203ec:	1007883a 	mov	r3,r2
410203f0:	80a1c83a 	sub	r16,r16,r2
410203f4:	88a3883a 	add	r17,r17,r2
410203f8:	00806d0e 	bge	zero,r2,410205b0 <__sfvwrite_r+0x254>
410203fc:	b0800217 	ldw	r2,8(r22)
41020400:	10c5c83a 	sub	r2,r2,r3
41020404:	b0800215 	stw	r2,8(r22)
41020408:	103fee1e 	bne	r2,zero,410203c4 <__sfvwrite_r+0x68>
4102040c:	0009883a 	mov	r4,zero
41020410:	2005883a 	mov	r2,r4
41020414:	dfc00a17 	ldw	ra,40(sp)
41020418:	df000917 	ldw	fp,36(sp)
4102041c:	ddc00817 	ldw	r23,32(sp)
41020420:	dd800717 	ldw	r22,28(sp)
41020424:	dd400617 	ldw	r21,24(sp)
41020428:	dd000517 	ldw	r20,20(sp)
4102042c:	dcc00417 	ldw	r19,16(sp)
41020430:	dc800317 	ldw	r18,12(sp)
41020434:	dc400217 	ldw	r17,8(sp)
41020438:	dc000117 	ldw	r16,4(sp)
4102043c:	dec00b04 	addi	sp,sp,44
41020440:	f800283a 	ret
41020444:	10218000 	call	41021800 <__swsetup_r>
41020448:	1000e41e 	bne	r2,zero,410207dc <__sfvwrite_r+0x480>
4102044c:	91c0030b 	ldhu	r7,12(r18)
41020450:	b5400017 	ldw	r21,0(r22)
41020454:	3880008c 	andi	r2,r7,2
41020458:	103fd81e 	bne	r2,zero,410203bc <__sfvwrite_r+0x60>
4102045c:	3880004c 	andi	r2,r7,1
41020460:	1005003a 	cmpeq	r2,r2,zero
41020464:	10005726 	beq	r2,zero,410205c4 <__sfvwrite_r+0x268>
41020468:	0029883a 	mov	r20,zero
4102046c:	002f883a 	mov	r23,zero
41020470:	a0004226 	beq	r20,zero,4102057c <__sfvwrite_r+0x220>
41020474:	3880800c 	andi	r2,r7,512
41020478:	94000217 	ldw	r16,8(r18)
4102047c:	10008b26 	beq	r2,zero,410206ac <__sfvwrite_r+0x350>
41020480:	800d883a 	mov	r6,r16
41020484:	a400a536 	bltu	r20,r16,4102071c <__sfvwrite_r+0x3c0>
41020488:	3881200c 	andi	r2,r7,1152
4102048c:	10002726 	beq	r2,zero,4102052c <__sfvwrite_r+0x1d0>
41020490:	90800517 	ldw	r2,20(r18)
41020494:	92000417 	ldw	r8,16(r18)
41020498:	91400017 	ldw	r5,0(r18)
4102049c:	1087883a 	add	r3,r2,r2
410204a0:	1887883a 	add	r3,r3,r2
410204a4:	1808d7fa 	srli	r4,r3,31
410204a8:	2a21c83a 	sub	r16,r5,r8
410204ac:	80800044 	addi	r2,r16,1
410204b0:	20c9883a 	add	r4,r4,r3
410204b4:	2027d07a 	srai	r19,r4,1
410204b8:	a085883a 	add	r2,r20,r2
410204bc:	980d883a 	mov	r6,r19
410204c0:	9880022e 	bgeu	r19,r2,410204cc <__sfvwrite_r+0x170>
410204c4:	1027883a 	mov	r19,r2
410204c8:	100d883a 	mov	r6,r2
410204cc:	3881000c 	andi	r2,r7,1024
410204d0:	1000b826 	beq	r2,zero,410207b4 <__sfvwrite_r+0x458>
410204d4:	300b883a 	mov	r5,r6
410204d8:	e009883a 	mov	r4,fp
410204dc:	10207f80 	call	410207f8 <_malloc_r>
410204e0:	10003126 	beq	r2,zero,410205a8 <__sfvwrite_r+0x24c>
410204e4:	91400417 	ldw	r5,16(r18)
410204e8:	1009883a 	mov	r4,r2
410204ec:	800d883a 	mov	r6,r16
410204f0:	1023883a 	mov	r17,r2
410204f4:	102101c0 	call	4102101c <memcpy>
410204f8:	90c0030b 	ldhu	r3,12(r18)
410204fc:	00beffc4 	movi	r2,-1025
41020500:	1886703a 	and	r3,r3,r2
41020504:	18c02014 	ori	r3,r3,128
41020508:	90c0030d 	sth	r3,12(r18)
4102050c:	9c07c83a 	sub	r3,r19,r16
41020510:	8c05883a 	add	r2,r17,r16
41020514:	a00d883a 	mov	r6,r20
41020518:	a021883a 	mov	r16,r20
4102051c:	90800015 	stw	r2,0(r18)
41020520:	90c00215 	stw	r3,8(r18)
41020524:	94400415 	stw	r17,16(r18)
41020528:	94c00515 	stw	r19,20(r18)
4102052c:	91000017 	ldw	r4,0(r18)
41020530:	b80b883a 	mov	r5,r23
41020534:	a023883a 	mov	r17,r20
41020538:	10210bc0 	call	410210bc <memmove>
4102053c:	90c00217 	ldw	r3,8(r18)
41020540:	90800017 	ldw	r2,0(r18)
41020544:	a027883a 	mov	r19,r20
41020548:	1c07c83a 	sub	r3,r3,r16
4102054c:	1405883a 	add	r2,r2,r16
41020550:	90c00215 	stw	r3,8(r18)
41020554:	a021883a 	mov	r16,r20
41020558:	90800015 	stw	r2,0(r18)
4102055c:	b0800217 	ldw	r2,8(r22)
41020560:	1405c83a 	sub	r2,r2,r16
41020564:	b0800215 	stw	r2,8(r22)
41020568:	103fa826 	beq	r2,zero,4102040c <__sfvwrite_r+0xb0>
4102056c:	a469c83a 	sub	r20,r20,r17
41020570:	91c0030b 	ldhu	r7,12(r18)
41020574:	bcef883a 	add	r23,r23,r19
41020578:	a03fbe1e 	bne	r20,zero,41020474 <__sfvwrite_r+0x118>
4102057c:	adc00017 	ldw	r23,0(r21)
41020580:	ad000117 	ldw	r20,4(r21)
41020584:	ad400204 	addi	r21,r21,8
41020588:	003fb906 	br	41020470 <__sfvwrite_r+0x114>
4102058c:	ac400017 	ldw	r17,0(r21)
41020590:	ac000117 	ldw	r16,4(r21)
41020594:	ad400204 	addi	r21,r21,8
41020598:	003f8a06 	br	410203c4 <__sfvwrite_r+0x68>
4102059c:	91400417 	ldw	r5,16(r18)
410205a0:	e009883a 	mov	r4,fp
410205a4:	1021f580 	call	41021f58 <_free_r>
410205a8:	00800304 	movi	r2,12
410205ac:	e0800015 	stw	r2,0(fp)
410205b0:	9080030b 	ldhu	r2,12(r18)
410205b4:	013fffc4 	movi	r4,-1
410205b8:	10801014 	ori	r2,r2,64
410205bc:	9080030d 	sth	r2,12(r18)
410205c0:	003f9306 	br	41020410 <__sfvwrite_r+0xb4>
410205c4:	0027883a 	mov	r19,zero
410205c8:	002f883a 	mov	r23,zero
410205cc:	d8000015 	stw	zero,0(sp)
410205d0:	0029883a 	mov	r20,zero
410205d4:	98001e26 	beq	r19,zero,41020650 <__sfvwrite_r+0x2f4>
410205d8:	d8c00017 	ldw	r3,0(sp)
410205dc:	1804c03a 	cmpne	r2,r3,zero
410205e0:	10005e26 	beq	r2,zero,4102075c <__sfvwrite_r+0x400>
410205e4:	9821883a 	mov	r16,r19
410205e8:	a4c0012e 	bgeu	r20,r19,410205f0 <__sfvwrite_r+0x294>
410205ec:	a021883a 	mov	r16,r20
410205f0:	91000017 	ldw	r4,0(r18)
410205f4:	90800417 	ldw	r2,16(r18)
410205f8:	91800217 	ldw	r6,8(r18)
410205fc:	91c00517 	ldw	r7,20(r18)
41020600:	1100022e 	bgeu	r2,r4,4102060c <__sfvwrite_r+0x2b0>
41020604:	31e3883a 	add	r17,r6,r7
41020608:	8c001616 	blt	r17,r16,41020664 <__sfvwrite_r+0x308>
4102060c:	81c03816 	blt	r16,r7,410206f0 <__sfvwrite_r+0x394>
41020610:	90c00917 	ldw	r3,36(r18)
41020614:	91400717 	ldw	r5,28(r18)
41020618:	e009883a 	mov	r4,fp
4102061c:	b80d883a 	mov	r6,r23
41020620:	183ee83a 	callr	r3
41020624:	1023883a 	mov	r17,r2
41020628:	00bfe10e 	bge	zero,r2,410205b0 <__sfvwrite_r+0x254>
4102062c:	a469c83a 	sub	r20,r20,r17
41020630:	a0001826 	beq	r20,zero,41020694 <__sfvwrite_r+0x338>
41020634:	b0800217 	ldw	r2,8(r22)
41020638:	1445c83a 	sub	r2,r2,r17
4102063c:	b0800215 	stw	r2,8(r22)
41020640:	103f7226 	beq	r2,zero,4102040c <__sfvwrite_r+0xb0>
41020644:	9c67c83a 	sub	r19,r19,r17
41020648:	bc6f883a 	add	r23,r23,r17
4102064c:	983fe21e 	bne	r19,zero,410205d8 <__sfvwrite_r+0x27c>
41020650:	adc00017 	ldw	r23,0(r21)
41020654:	acc00117 	ldw	r19,4(r21)
41020658:	ad400204 	addi	r21,r21,8
4102065c:	d8000015 	stw	zero,0(sp)
41020660:	003fdc06 	br	410205d4 <__sfvwrite_r+0x278>
41020664:	b80b883a 	mov	r5,r23
41020668:	880d883a 	mov	r6,r17
4102066c:	10210bc0 	call	410210bc <memmove>
41020670:	90c00017 	ldw	r3,0(r18)
41020674:	e009883a 	mov	r4,fp
41020678:	900b883a 	mov	r5,r18
4102067c:	1c47883a 	add	r3,r3,r17
41020680:	90c00015 	stw	r3,0(r18)
41020684:	102193c0 	call	4102193c <_fflush_r>
41020688:	103fc91e 	bne	r2,zero,410205b0 <__sfvwrite_r+0x254>
4102068c:	a469c83a 	sub	r20,r20,r17
41020690:	a03fe81e 	bne	r20,zero,41020634 <__sfvwrite_r+0x2d8>
41020694:	e009883a 	mov	r4,fp
41020698:	900b883a 	mov	r5,r18
4102069c:	102193c0 	call	4102193c <_fflush_r>
410206a0:	103fc31e 	bne	r2,zero,410205b0 <__sfvwrite_r+0x254>
410206a4:	d8000015 	stw	zero,0(sp)
410206a8:	003fe206 	br	41020634 <__sfvwrite_r+0x2d8>
410206ac:	91000017 	ldw	r4,0(r18)
410206b0:	90800417 	ldw	r2,16(r18)
410206b4:	1100022e 	bgeu	r2,r4,410206c0 <__sfvwrite_r+0x364>
410206b8:	8023883a 	mov	r17,r16
410206bc:	85003136 	bltu	r16,r20,41020784 <__sfvwrite_r+0x428>
410206c0:	91c00517 	ldw	r7,20(r18)
410206c4:	a1c01836 	bltu	r20,r7,41020728 <__sfvwrite_r+0x3cc>
410206c8:	90c00917 	ldw	r3,36(r18)
410206cc:	91400717 	ldw	r5,28(r18)
410206d0:	e009883a 	mov	r4,fp
410206d4:	b80d883a 	mov	r6,r23
410206d8:	183ee83a 	callr	r3
410206dc:	1021883a 	mov	r16,r2
410206e0:	00bfb30e 	bge	zero,r2,410205b0 <__sfvwrite_r+0x254>
410206e4:	1023883a 	mov	r17,r2
410206e8:	1027883a 	mov	r19,r2
410206ec:	003f9b06 	br	4102055c <__sfvwrite_r+0x200>
410206f0:	b80b883a 	mov	r5,r23
410206f4:	800d883a 	mov	r6,r16
410206f8:	10210bc0 	call	410210bc <memmove>
410206fc:	90c00217 	ldw	r3,8(r18)
41020700:	90800017 	ldw	r2,0(r18)
41020704:	8023883a 	mov	r17,r16
41020708:	1c07c83a 	sub	r3,r3,r16
4102070c:	1405883a 	add	r2,r2,r16
41020710:	90c00215 	stw	r3,8(r18)
41020714:	90800015 	stw	r2,0(r18)
41020718:	003fc406 	br	4102062c <__sfvwrite_r+0x2d0>
4102071c:	a00d883a 	mov	r6,r20
41020720:	a021883a 	mov	r16,r20
41020724:	003f8106 	br	4102052c <__sfvwrite_r+0x1d0>
41020728:	b80b883a 	mov	r5,r23
4102072c:	a00d883a 	mov	r6,r20
41020730:	10210bc0 	call	410210bc <memmove>
41020734:	90c00217 	ldw	r3,8(r18)
41020738:	90800017 	ldw	r2,0(r18)
4102073c:	a021883a 	mov	r16,r20
41020740:	1d07c83a 	sub	r3,r3,r20
41020744:	1505883a 	add	r2,r2,r20
41020748:	a023883a 	mov	r17,r20
4102074c:	a027883a 	mov	r19,r20
41020750:	90c00215 	stw	r3,8(r18)
41020754:	90800015 	stw	r2,0(r18)
41020758:	003f8006 	br	4102055c <__sfvwrite_r+0x200>
4102075c:	b809883a 	mov	r4,r23
41020760:	01400284 	movi	r5,10
41020764:	980d883a 	mov	r6,r19
41020768:	1020f380 	call	41020f38 <memchr>
4102076c:	10001726 	beq	r2,zero,410207cc <__sfvwrite_r+0x470>
41020770:	15c5c83a 	sub	r2,r2,r23
41020774:	15000044 	addi	r20,r2,1
41020778:	00800044 	movi	r2,1
4102077c:	d8800015 	stw	r2,0(sp)
41020780:	003f9806 	br	410205e4 <__sfvwrite_r+0x288>
41020784:	b80b883a 	mov	r5,r23
41020788:	800d883a 	mov	r6,r16
4102078c:	10210bc0 	call	410210bc <memmove>
41020790:	90c00017 	ldw	r3,0(r18)
41020794:	e009883a 	mov	r4,fp
41020798:	900b883a 	mov	r5,r18
4102079c:	1c07883a 	add	r3,r3,r16
410207a0:	90c00015 	stw	r3,0(r18)
410207a4:	8027883a 	mov	r19,r16
410207a8:	102193c0 	call	4102193c <_fflush_r>
410207ac:	103f6b26 	beq	r2,zero,4102055c <__sfvwrite_r+0x200>
410207b0:	003f7f06 	br	410205b0 <__sfvwrite_r+0x254>
410207b4:	400b883a 	mov	r5,r8
410207b8:	e009883a 	mov	r4,fp
410207bc:	102119c0 	call	4102119c <_realloc_r>
410207c0:	103f7626 	beq	r2,zero,4102059c <__sfvwrite_r+0x240>
410207c4:	1023883a 	mov	r17,r2
410207c8:	003f5006 	br	4102050c <__sfvwrite_r+0x1b0>
410207cc:	00c00044 	movi	r3,1
410207d0:	9d000044 	addi	r20,r19,1
410207d4:	d8c00015 	stw	r3,0(sp)
410207d8:	003f8206 	br	410205e4 <__sfvwrite_r+0x288>
410207dc:	9080030b 	ldhu	r2,12(r18)
410207e0:	00c00244 	movi	r3,9
410207e4:	013fffc4 	movi	r4,-1
410207e8:	10801014 	ori	r2,r2,64
410207ec:	9080030d 	sth	r2,12(r18)
410207f0:	e0c00015 	stw	r3,0(fp)
410207f4:	003f0606 	br	41020410 <__sfvwrite_r+0xb4>

410207f8 <_malloc_r>:
410207f8:	defff604 	addi	sp,sp,-40
410207fc:	28c002c4 	addi	r3,r5,11
41020800:	00800584 	movi	r2,22
41020804:	dc800215 	stw	r18,8(sp)
41020808:	dfc00915 	stw	ra,36(sp)
4102080c:	df000815 	stw	fp,32(sp)
41020810:	ddc00715 	stw	r23,28(sp)
41020814:	dd800615 	stw	r22,24(sp)
41020818:	dd400515 	stw	r21,20(sp)
4102081c:	dd000415 	stw	r20,16(sp)
41020820:	dcc00315 	stw	r19,12(sp)
41020824:	dc400115 	stw	r17,4(sp)
41020828:	dc000015 	stw	r16,0(sp)
4102082c:	2025883a 	mov	r18,r4
41020830:	10c01236 	bltu	r2,r3,4102087c <_malloc_r+0x84>
41020834:	04400404 	movi	r17,16
41020838:	8940142e 	bgeu	r17,r5,4102088c <_malloc_r+0x94>
4102083c:	00800304 	movi	r2,12
41020840:	0007883a 	mov	r3,zero
41020844:	90800015 	stw	r2,0(r18)
41020848:	1805883a 	mov	r2,r3
4102084c:	dfc00917 	ldw	ra,36(sp)
41020850:	df000817 	ldw	fp,32(sp)
41020854:	ddc00717 	ldw	r23,28(sp)
41020858:	dd800617 	ldw	r22,24(sp)
4102085c:	dd400517 	ldw	r21,20(sp)
41020860:	dd000417 	ldw	r20,16(sp)
41020864:	dcc00317 	ldw	r19,12(sp)
41020868:	dc800217 	ldw	r18,8(sp)
4102086c:	dc400117 	ldw	r17,4(sp)
41020870:	dc000017 	ldw	r16,0(sp)
41020874:	dec00a04 	addi	sp,sp,40
41020878:	f800283a 	ret
4102087c:	00bffe04 	movi	r2,-8
41020880:	18a2703a 	and	r17,r3,r2
41020884:	883fed16 	blt	r17,zero,4102083c <_malloc_r+0x44>
41020888:	897fec36 	bltu	r17,r5,4102083c <_malloc_r+0x44>
4102088c:	9009883a 	mov	r4,r18
41020890:	10231c80 	call	410231c8 <__malloc_lock>
41020894:	00807dc4 	movi	r2,503
41020898:	14402b2e 	bgeu	r2,r17,41020948 <_malloc_r+0x150>
4102089c:	8806d27a 	srli	r3,r17,9
410208a0:	18003f1e 	bne	r3,zero,410209a0 <_malloc_r+0x1a8>
410208a4:	880cd0fa 	srli	r6,r17,3
410208a8:	300490fa 	slli	r2,r6,3
410208ac:	02c00034 	movhi	r11,0
410208b0:	5ac11504 	addi	r11,r11,1108
410208b4:	12cb883a 	add	r5,r2,r11
410208b8:	2c000317 	ldw	r16,12(r5)
410208bc:	580f883a 	mov	r7,r11
410208c0:	2c00041e 	bne	r5,r16,410208d4 <_malloc_r+0xdc>
410208c4:	00000a06 	br	410208f0 <_malloc_r+0xf8>
410208c8:	1800860e 	bge	r3,zero,41020ae4 <_malloc_r+0x2ec>
410208cc:	84000317 	ldw	r16,12(r16)
410208d0:	2c000726 	beq	r5,r16,410208f0 <_malloc_r+0xf8>
410208d4:	80800117 	ldw	r2,4(r16)
410208d8:	00ffff04 	movi	r3,-4
410208dc:	10c8703a 	and	r4,r2,r3
410208e0:	2447c83a 	sub	r3,r4,r17
410208e4:	008003c4 	movi	r2,15
410208e8:	10fff70e 	bge	r2,r3,410208c8 <_malloc_r+0xd0>
410208ec:	31bfffc4 	addi	r6,r6,-1
410208f0:	32400044 	addi	r9,r6,1
410208f4:	02800034 	movhi	r10,0
410208f8:	52811704 	addi	r10,r10,1116
410208fc:	54000217 	ldw	r16,8(r10)
41020900:	8280a026 	beq	r16,r10,41020b84 <_malloc_r+0x38c>
41020904:	80800117 	ldw	r2,4(r16)
41020908:	00ffff04 	movi	r3,-4
4102090c:	10ca703a 	and	r5,r2,r3
41020910:	2c4dc83a 	sub	r6,r5,r17
41020914:	008003c4 	movi	r2,15
41020918:	11808316 	blt	r2,r6,41020b28 <_malloc_r+0x330>
4102091c:	52800315 	stw	r10,12(r10)
41020920:	52800215 	stw	r10,8(r10)
41020924:	30002916 	blt	r6,zero,410209cc <_malloc_r+0x1d4>
41020928:	8147883a 	add	r3,r16,r5
4102092c:	18800117 	ldw	r2,4(r3)
41020930:	9009883a 	mov	r4,r18
41020934:	10800054 	ori	r2,r2,1
41020938:	18800115 	stw	r2,4(r3)
4102093c:	10231e80 	call	410231e8 <__malloc_unlock>
41020940:	80c00204 	addi	r3,r16,8
41020944:	003fc006 	br	41020848 <_malloc_r+0x50>
41020948:	02c00034 	movhi	r11,0
4102094c:	5ac11504 	addi	r11,r11,1108
41020950:	8ac5883a 	add	r2,r17,r11
41020954:	14000317 	ldw	r16,12(r2)
41020958:	580f883a 	mov	r7,r11
4102095c:	8806d0fa 	srli	r3,r17,3
41020960:	14006c26 	beq	r2,r16,41020b14 <_malloc_r+0x31c>
41020964:	80c00117 	ldw	r3,4(r16)
41020968:	00bfff04 	movi	r2,-4
4102096c:	81800317 	ldw	r6,12(r16)
41020970:	1886703a 	and	r3,r3,r2
41020974:	80c7883a 	add	r3,r16,r3
41020978:	18800117 	ldw	r2,4(r3)
4102097c:	81400217 	ldw	r5,8(r16)
41020980:	9009883a 	mov	r4,r18
41020984:	10800054 	ori	r2,r2,1
41020988:	18800115 	stw	r2,4(r3)
4102098c:	31400215 	stw	r5,8(r6)
41020990:	29800315 	stw	r6,12(r5)
41020994:	10231e80 	call	410231e8 <__malloc_unlock>
41020998:	80c00204 	addi	r3,r16,8
4102099c:	003faa06 	br	41020848 <_malloc_r+0x50>
410209a0:	00800104 	movi	r2,4
410209a4:	10c0052e 	bgeu	r2,r3,410209bc <_malloc_r+0x1c4>
410209a8:	00800504 	movi	r2,20
410209ac:	10c07836 	bltu	r2,r3,41020b90 <_malloc_r+0x398>
410209b0:	198016c4 	addi	r6,r3,91
410209b4:	300490fa 	slli	r2,r6,3
410209b8:	003fbc06 	br	410208ac <_malloc_r+0xb4>
410209bc:	8804d1ba 	srli	r2,r17,6
410209c0:	11800e04 	addi	r6,r2,56
410209c4:	300490fa 	slli	r2,r6,3
410209c8:	003fb806 	br	410208ac <_malloc_r+0xb4>
410209cc:	00807fc4 	movi	r2,511
410209d0:	1140bb36 	bltu	r2,r5,41020cc0 <_malloc_r+0x4c8>
410209d4:	2806d0fa 	srli	r3,r5,3
410209d8:	573ffe04 	addi	fp,r10,-8
410209dc:	00800044 	movi	r2,1
410209e0:	180890fa 	slli	r4,r3,3
410209e4:	1807d0ba 	srai	r3,r3,2
410209e8:	e1c00117 	ldw	r7,4(fp)
410209ec:	5909883a 	add	r4,r11,r4
410209f0:	21400217 	ldw	r5,8(r4)
410209f4:	10c4983a 	sll	r2,r2,r3
410209f8:	81000315 	stw	r4,12(r16)
410209fc:	81400215 	stw	r5,8(r16)
41020a00:	388eb03a 	or	r7,r7,r2
41020a04:	2c000315 	stw	r16,12(r5)
41020a08:	24000215 	stw	r16,8(r4)
41020a0c:	e1c00115 	stw	r7,4(fp)
41020a10:	4807883a 	mov	r3,r9
41020a14:	4800cd16 	blt	r9,zero,41020d4c <_malloc_r+0x554>
41020a18:	1807d0ba 	srai	r3,r3,2
41020a1c:	00800044 	movi	r2,1
41020a20:	10c8983a 	sll	r4,r2,r3
41020a24:	39004436 	bltu	r7,r4,41020b38 <_malloc_r+0x340>
41020a28:	21c4703a 	and	r2,r4,r7
41020a2c:	10000a1e 	bne	r2,zero,41020a58 <_malloc_r+0x260>
41020a30:	2109883a 	add	r4,r4,r4
41020a34:	00bfff04 	movi	r2,-4
41020a38:	4884703a 	and	r2,r9,r2
41020a3c:	3906703a 	and	r3,r7,r4
41020a40:	12400104 	addi	r9,r2,4
41020a44:	1800041e 	bne	r3,zero,41020a58 <_malloc_r+0x260>
41020a48:	2109883a 	add	r4,r4,r4
41020a4c:	3904703a 	and	r2,r7,r4
41020a50:	4a400104 	addi	r9,r9,4
41020a54:	103ffc26 	beq	r2,zero,41020a48 <_malloc_r+0x250>
41020a58:	480490fa 	slli	r2,r9,3
41020a5c:	4819883a 	mov	r12,r9
41020a60:	023fff04 	movi	r8,-4
41020a64:	589b883a 	add	r13,r11,r2
41020a68:	6807883a 	mov	r3,r13
41020a6c:	014003c4 	movi	r5,15
41020a70:	1c000317 	ldw	r16,12(r3)
41020a74:	1c00041e 	bne	r3,r16,41020a88 <_malloc_r+0x290>
41020a78:	0000a706 	br	41020d18 <_malloc_r+0x520>
41020a7c:	3000ab0e 	bge	r6,zero,41020d2c <_malloc_r+0x534>
41020a80:	84000317 	ldw	r16,12(r16)
41020a84:	1c00a426 	beq	r3,r16,41020d18 <_malloc_r+0x520>
41020a88:	80800117 	ldw	r2,4(r16)
41020a8c:	1204703a 	and	r2,r2,r8
41020a90:	144dc83a 	sub	r6,r2,r17
41020a94:	29bff90e 	bge	r5,r6,41020a7c <_malloc_r+0x284>
41020a98:	81000317 	ldw	r4,12(r16)
41020a9c:	80c00217 	ldw	r3,8(r16)
41020aa0:	89400054 	ori	r5,r17,1
41020aa4:	8445883a 	add	r2,r16,r17
41020aa8:	20c00215 	stw	r3,8(r4)
41020aac:	19000315 	stw	r4,12(r3)
41020ab0:	81400115 	stw	r5,4(r16)
41020ab4:	1187883a 	add	r3,r2,r6
41020ab8:	31000054 	ori	r4,r6,1
41020abc:	50800315 	stw	r2,12(r10)
41020ac0:	50800215 	stw	r2,8(r10)
41020ac4:	19800015 	stw	r6,0(r3)
41020ac8:	11000115 	stw	r4,4(r2)
41020acc:	12800215 	stw	r10,8(r2)
41020ad0:	12800315 	stw	r10,12(r2)
41020ad4:	9009883a 	mov	r4,r18
41020ad8:	10231e80 	call	410231e8 <__malloc_unlock>
41020adc:	80c00204 	addi	r3,r16,8
41020ae0:	003f5906 	br	41020848 <_malloc_r+0x50>
41020ae4:	8109883a 	add	r4,r16,r4
41020ae8:	20800117 	ldw	r2,4(r4)
41020aec:	80c00217 	ldw	r3,8(r16)
41020af0:	81400317 	ldw	r5,12(r16)
41020af4:	10800054 	ori	r2,r2,1
41020af8:	20800115 	stw	r2,4(r4)
41020afc:	28c00215 	stw	r3,8(r5)
41020b00:	19400315 	stw	r5,12(r3)
41020b04:	9009883a 	mov	r4,r18
41020b08:	10231e80 	call	410231e8 <__malloc_unlock>
41020b0c:	80c00204 	addi	r3,r16,8
41020b10:	003f4d06 	br	41020848 <_malloc_r+0x50>
41020b14:	80800204 	addi	r2,r16,8
41020b18:	14000317 	ldw	r16,12(r2)
41020b1c:	143f911e 	bne	r2,r16,41020964 <_malloc_r+0x16c>
41020b20:	1a400084 	addi	r9,r3,2
41020b24:	003f7306 	br	410208f4 <_malloc_r+0xfc>
41020b28:	88c00054 	ori	r3,r17,1
41020b2c:	8445883a 	add	r2,r16,r17
41020b30:	80c00115 	stw	r3,4(r16)
41020b34:	003fdf06 	br	41020ab4 <_malloc_r+0x2bc>
41020b38:	e4000217 	ldw	r16,8(fp)
41020b3c:	00bfff04 	movi	r2,-4
41020b40:	80c00117 	ldw	r3,4(r16)
41020b44:	802d883a 	mov	r22,r16
41020b48:	18aa703a 	and	r21,r3,r2
41020b4c:	ac401636 	bltu	r21,r17,41020ba8 <_malloc_r+0x3b0>
41020b50:	ac49c83a 	sub	r4,r21,r17
41020b54:	008003c4 	movi	r2,15
41020b58:	1100130e 	bge	r2,r4,41020ba8 <_malloc_r+0x3b0>
41020b5c:	88800054 	ori	r2,r17,1
41020b60:	8447883a 	add	r3,r16,r17
41020b64:	80800115 	stw	r2,4(r16)
41020b68:	20800054 	ori	r2,r4,1
41020b6c:	18800115 	stw	r2,4(r3)
41020b70:	e0c00215 	stw	r3,8(fp)
41020b74:	9009883a 	mov	r4,r18
41020b78:	10231e80 	call	410231e8 <__malloc_unlock>
41020b7c:	80c00204 	addi	r3,r16,8
41020b80:	003f3106 	br	41020848 <_malloc_r+0x50>
41020b84:	39c00117 	ldw	r7,4(r7)
41020b88:	573ffe04 	addi	fp,r10,-8
41020b8c:	003fa006 	br	41020a10 <_malloc_r+0x218>
41020b90:	00801504 	movi	r2,84
41020b94:	10c06736 	bltu	r2,r3,41020d34 <_malloc_r+0x53c>
41020b98:	8804d33a 	srli	r2,r17,12
41020b9c:	11801b84 	addi	r6,r2,110
41020ba0:	300490fa 	slli	r2,r6,3
41020ba4:	003f4106 	br	410208ac <_malloc_r+0xb4>
41020ba8:	d0a01217 	ldw	r2,-32696(gp)
41020bac:	d0e00317 	ldw	r3,-32756(gp)
41020bb0:	053fffc4 	movi	r20,-1
41020bb4:	10800404 	addi	r2,r2,16
41020bb8:	88a7883a 	add	r19,r17,r2
41020bbc:	1d000326 	beq	r3,r20,41020bcc <_malloc_r+0x3d4>
41020bc0:	98c3ffc4 	addi	r3,r19,4095
41020bc4:	00bc0004 	movi	r2,-4096
41020bc8:	18a6703a 	and	r19,r3,r2
41020bcc:	9009883a 	mov	r4,r18
41020bd0:	980b883a 	mov	r5,r19
41020bd4:	10217900 	call	41021790 <_sbrk_r>
41020bd8:	1009883a 	mov	r4,r2
41020bdc:	15000426 	beq	r2,r20,41020bf0 <_malloc_r+0x3f8>
41020be0:	854b883a 	add	r5,r16,r21
41020be4:	1029883a 	mov	r20,r2
41020be8:	11405a2e 	bgeu	r2,r5,41020d54 <_malloc_r+0x55c>
41020bec:	87000c26 	beq	r16,fp,41020c20 <_malloc_r+0x428>
41020bf0:	e4000217 	ldw	r16,8(fp)
41020bf4:	80c00117 	ldw	r3,4(r16)
41020bf8:	00bfff04 	movi	r2,-4
41020bfc:	1884703a 	and	r2,r3,r2
41020c00:	14400336 	bltu	r2,r17,41020c10 <_malloc_r+0x418>
41020c04:	1449c83a 	sub	r4,r2,r17
41020c08:	008003c4 	movi	r2,15
41020c0c:	113fd316 	blt	r2,r4,41020b5c <_malloc_r+0x364>
41020c10:	9009883a 	mov	r4,r18
41020c14:	10231e80 	call	410231e8 <__malloc_unlock>
41020c18:	0007883a 	mov	r3,zero
41020c1c:	003f0a06 	br	41020848 <_malloc_r+0x50>
41020c20:	05c00034 	movhi	r23,0
41020c24:	bdc6ec04 	addi	r23,r23,7088
41020c28:	b8800017 	ldw	r2,0(r23)
41020c2c:	988d883a 	add	r6,r19,r2
41020c30:	b9800015 	stw	r6,0(r23)
41020c34:	d0e00317 	ldw	r3,-32756(gp)
41020c38:	00bfffc4 	movi	r2,-1
41020c3c:	18808e26 	beq	r3,r2,41020e78 <_malloc_r+0x680>
41020c40:	2145c83a 	sub	r2,r4,r5
41020c44:	3085883a 	add	r2,r6,r2
41020c48:	b8800015 	stw	r2,0(r23)
41020c4c:	20c001cc 	andi	r3,r4,7
41020c50:	18005f1e 	bne	r3,zero,41020dd0 <_malloc_r+0x5d8>
41020c54:	000b883a 	mov	r5,zero
41020c58:	a4c5883a 	add	r2,r20,r19
41020c5c:	1083ffcc 	andi	r2,r2,4095
41020c60:	00c40004 	movi	r3,4096
41020c64:	1887c83a 	sub	r3,r3,r2
41020c68:	28e7883a 	add	r19,r5,r3
41020c6c:	9009883a 	mov	r4,r18
41020c70:	980b883a 	mov	r5,r19
41020c74:	10217900 	call	41021790 <_sbrk_r>
41020c78:	1007883a 	mov	r3,r2
41020c7c:	00bfffc4 	movi	r2,-1
41020c80:	18807a26 	beq	r3,r2,41020e6c <_malloc_r+0x674>
41020c84:	1d05c83a 	sub	r2,r3,r20
41020c88:	9885883a 	add	r2,r19,r2
41020c8c:	10c00054 	ori	r3,r2,1
41020c90:	b8800017 	ldw	r2,0(r23)
41020c94:	a021883a 	mov	r16,r20
41020c98:	a0c00115 	stw	r3,4(r20)
41020c9c:	9885883a 	add	r2,r19,r2
41020ca0:	b8800015 	stw	r2,0(r23)
41020ca4:	e5000215 	stw	r20,8(fp)
41020ca8:	b7003626 	beq	r22,fp,41020d84 <_malloc_r+0x58c>
41020cac:	018003c4 	movi	r6,15
41020cb0:	35404b36 	bltu	r6,r21,41020de0 <_malloc_r+0x5e8>
41020cb4:	00800044 	movi	r2,1
41020cb8:	a0800115 	stw	r2,4(r20)
41020cbc:	003fcd06 	br	41020bf4 <_malloc_r+0x3fc>
41020cc0:	2808d27a 	srli	r4,r5,9
41020cc4:	2000371e 	bne	r4,zero,41020da4 <_malloc_r+0x5ac>
41020cc8:	2808d0fa 	srli	r4,r5,3
41020ccc:	200690fa 	slli	r3,r4,3
41020cd0:	1ad1883a 	add	r8,r3,r11
41020cd4:	41800217 	ldw	r6,8(r8)
41020cd8:	41805b26 	beq	r8,r6,41020e48 <_malloc_r+0x650>
41020cdc:	30800117 	ldw	r2,4(r6)
41020ce0:	00ffff04 	movi	r3,-4
41020ce4:	10c4703a 	and	r2,r2,r3
41020ce8:	2880022e 	bgeu	r5,r2,41020cf4 <_malloc_r+0x4fc>
41020cec:	31800217 	ldw	r6,8(r6)
41020cf0:	41bffa1e 	bne	r8,r6,41020cdc <_malloc_r+0x4e4>
41020cf4:	32000317 	ldw	r8,12(r6)
41020cf8:	39c00117 	ldw	r7,4(r7)
41020cfc:	82000315 	stw	r8,12(r16)
41020d00:	81800215 	stw	r6,8(r16)
41020d04:	07000034 	movhi	fp,0
41020d08:	e7011504 	addi	fp,fp,1108
41020d0c:	34000315 	stw	r16,12(r6)
41020d10:	44000215 	stw	r16,8(r8)
41020d14:	003f3e06 	br	41020a10 <_malloc_r+0x218>
41020d18:	63000044 	addi	r12,r12,1
41020d1c:	608000cc 	andi	r2,r12,3
41020d20:	10005d26 	beq	r2,zero,41020e98 <_malloc_r+0x6a0>
41020d24:	18c00204 	addi	r3,r3,8
41020d28:	003f5106 	br	41020a70 <_malloc_r+0x278>
41020d2c:	8089883a 	add	r4,r16,r2
41020d30:	003f6d06 	br	41020ae8 <_malloc_r+0x2f0>
41020d34:	00805504 	movi	r2,340
41020d38:	10c02036 	bltu	r2,r3,41020dbc <_malloc_r+0x5c4>
41020d3c:	8804d3fa 	srli	r2,r17,15
41020d40:	11801dc4 	addi	r6,r2,119
41020d44:	300490fa 	slli	r2,r6,3
41020d48:	003ed806 	br	410208ac <_malloc_r+0xb4>
41020d4c:	48c000c4 	addi	r3,r9,3
41020d50:	003f3106 	br	41020a18 <_malloc_r+0x220>
41020d54:	05c00034 	movhi	r23,0
41020d58:	bdc6ec04 	addi	r23,r23,7088
41020d5c:	b8800017 	ldw	r2,0(r23)
41020d60:	988d883a 	add	r6,r19,r2
41020d64:	b9800015 	stw	r6,0(r23)
41020d68:	293fb21e 	bne	r5,r4,41020c34 <_malloc_r+0x43c>
41020d6c:	2083ffcc 	andi	r2,r4,4095
41020d70:	103fb01e 	bne	r2,zero,41020c34 <_malloc_r+0x43c>
41020d74:	e4000217 	ldw	r16,8(fp)
41020d78:	9d45883a 	add	r2,r19,r21
41020d7c:	10800054 	ori	r2,r2,1
41020d80:	80800115 	stw	r2,4(r16)
41020d84:	b8c00017 	ldw	r3,0(r23)
41020d88:	d0a01317 	ldw	r2,-32692(gp)
41020d8c:	10c0012e 	bgeu	r2,r3,41020d94 <_malloc_r+0x59c>
41020d90:	d0e01315 	stw	r3,-32692(gp)
41020d94:	d0a01417 	ldw	r2,-32688(gp)
41020d98:	10ff962e 	bgeu	r2,r3,41020bf4 <_malloc_r+0x3fc>
41020d9c:	d0e01415 	stw	r3,-32688(gp)
41020da0:	003f9406 	br	41020bf4 <_malloc_r+0x3fc>
41020da4:	00800104 	movi	r2,4
41020da8:	11001e36 	bltu	r2,r4,41020e24 <_malloc_r+0x62c>
41020dac:	2804d1ba 	srli	r2,r5,6
41020db0:	11000e04 	addi	r4,r2,56
41020db4:	200690fa 	slli	r3,r4,3
41020db8:	003fc506 	br	41020cd0 <_malloc_r+0x4d8>
41020dbc:	00815504 	movi	r2,1364
41020dc0:	10c01d2e 	bgeu	r2,r3,41020e38 <_malloc_r+0x640>
41020dc4:	01801f84 	movi	r6,126
41020dc8:	0080fc04 	movi	r2,1008
41020dcc:	003eb706 	br	410208ac <_malloc_r+0xb4>
41020dd0:	00800204 	movi	r2,8
41020dd4:	10cbc83a 	sub	r5,r2,r3
41020dd8:	2169883a 	add	r20,r4,r5
41020ddc:	003f9e06 	br	41020c58 <_malloc_r+0x460>
41020de0:	00bffe04 	movi	r2,-8
41020de4:	a93ffd04 	addi	r4,r21,-12
41020de8:	2088703a 	and	r4,r4,r2
41020dec:	b10b883a 	add	r5,r22,r4
41020df0:	00c00144 	movi	r3,5
41020df4:	28c00215 	stw	r3,8(r5)
41020df8:	28c00115 	stw	r3,4(r5)
41020dfc:	b0800117 	ldw	r2,4(r22)
41020e00:	1080004c 	andi	r2,r2,1
41020e04:	2084b03a 	or	r2,r4,r2
41020e08:	b0800115 	stw	r2,4(r22)
41020e0c:	313fdd2e 	bgeu	r6,r4,41020d84 <_malloc_r+0x58c>
41020e10:	b1400204 	addi	r5,r22,8
41020e14:	9009883a 	mov	r4,r18
41020e18:	1021f580 	call	41021f58 <_free_r>
41020e1c:	e4000217 	ldw	r16,8(fp)
41020e20:	003fd806 	br	41020d84 <_malloc_r+0x58c>
41020e24:	00800504 	movi	r2,20
41020e28:	11001536 	bltu	r2,r4,41020e80 <_malloc_r+0x688>
41020e2c:	210016c4 	addi	r4,r4,91
41020e30:	200690fa 	slli	r3,r4,3
41020e34:	003fa606 	br	41020cd0 <_malloc_r+0x4d8>
41020e38:	8804d4ba 	srli	r2,r17,18
41020e3c:	11801f04 	addi	r6,r2,124
41020e40:	300490fa 	slli	r2,r6,3
41020e44:	003e9906 	br	410208ac <_malloc_r+0xb4>
41020e48:	2009d0ba 	srai	r4,r4,2
41020e4c:	01400034 	movhi	r5,0
41020e50:	29411504 	addi	r5,r5,1108
41020e54:	00c00044 	movi	r3,1
41020e58:	28800117 	ldw	r2,4(r5)
41020e5c:	1906983a 	sll	r3,r3,r4
41020e60:	10c4b03a 	or	r2,r2,r3
41020e64:	28800115 	stw	r2,4(r5)
41020e68:	003fa306 	br	41020cf8 <_malloc_r+0x500>
41020e6c:	0027883a 	mov	r19,zero
41020e70:	00c00044 	movi	r3,1
41020e74:	003f8606 	br	41020c90 <_malloc_r+0x498>
41020e78:	d1200315 	stw	r4,-32756(gp)
41020e7c:	003f7306 	br	41020c4c <_malloc_r+0x454>
41020e80:	00801504 	movi	r2,84
41020e84:	11001936 	bltu	r2,r4,41020eec <_malloc_r+0x6f4>
41020e88:	2804d33a 	srli	r2,r5,12
41020e8c:	11001b84 	addi	r4,r2,110
41020e90:	200690fa 	slli	r3,r4,3
41020e94:	003f8e06 	br	41020cd0 <_malloc_r+0x4d8>
41020e98:	480b883a 	mov	r5,r9
41020e9c:	6807883a 	mov	r3,r13
41020ea0:	288000cc 	andi	r2,r5,3
41020ea4:	18fffe04 	addi	r3,r3,-8
41020ea8:	297fffc4 	addi	r5,r5,-1
41020eac:	10001526 	beq	r2,zero,41020f04 <_malloc_r+0x70c>
41020eb0:	18800217 	ldw	r2,8(r3)
41020eb4:	10fffa26 	beq	r2,r3,41020ea0 <_malloc_r+0x6a8>
41020eb8:	2109883a 	add	r4,r4,r4
41020ebc:	393f1e36 	bltu	r7,r4,41020b38 <_malloc_r+0x340>
41020ec0:	203f1d26 	beq	r4,zero,41020b38 <_malloc_r+0x340>
41020ec4:	21c4703a 	and	r2,r4,r7
41020ec8:	10000226 	beq	r2,zero,41020ed4 <_malloc_r+0x6dc>
41020ecc:	6013883a 	mov	r9,r12
41020ed0:	003ee106 	br	41020a58 <_malloc_r+0x260>
41020ed4:	2109883a 	add	r4,r4,r4
41020ed8:	3904703a 	and	r2,r7,r4
41020edc:	63000104 	addi	r12,r12,4
41020ee0:	103ffc26 	beq	r2,zero,41020ed4 <_malloc_r+0x6dc>
41020ee4:	6013883a 	mov	r9,r12
41020ee8:	003edb06 	br	41020a58 <_malloc_r+0x260>
41020eec:	00805504 	movi	r2,340
41020ef0:	11000836 	bltu	r2,r4,41020f14 <_malloc_r+0x71c>
41020ef4:	2804d3fa 	srli	r2,r5,15
41020ef8:	11001dc4 	addi	r4,r2,119
41020efc:	200690fa 	slli	r3,r4,3
41020f00:	003f7306 	br	41020cd0 <_malloc_r+0x4d8>
41020f04:	0104303a 	nor	r2,zero,r4
41020f08:	388e703a 	and	r7,r7,r2
41020f0c:	e1c00115 	stw	r7,4(fp)
41020f10:	003fe906 	br	41020eb8 <_malloc_r+0x6c0>
41020f14:	00815504 	movi	r2,1364
41020f18:	1100032e 	bgeu	r2,r4,41020f28 <_malloc_r+0x730>
41020f1c:	01001f84 	movi	r4,126
41020f20:	00c0fc04 	movi	r3,1008
41020f24:	003f6a06 	br	41020cd0 <_malloc_r+0x4d8>
41020f28:	2804d4ba 	srli	r2,r5,18
41020f2c:	11001f04 	addi	r4,r2,124
41020f30:	200690fa 	slli	r3,r4,3
41020f34:	003f6606 	br	41020cd0 <_malloc_r+0x4d8>

41020f38 <memchr>:
41020f38:	008000c4 	movi	r2,3
41020f3c:	29403fcc 	andi	r5,r5,255
41020f40:	2007883a 	mov	r3,r4
41020f44:	1180022e 	bgeu	r2,r6,41020f50 <memchr+0x18>
41020f48:	2084703a 	and	r2,r4,r2
41020f4c:	10000b26 	beq	r2,zero,41020f7c <memchr+0x44>
41020f50:	313fffc4 	addi	r4,r6,-1
41020f54:	3000051e 	bne	r6,zero,41020f6c <memchr+0x34>
41020f58:	00002c06 	br	4102100c <memchr+0xd4>
41020f5c:	213fffc4 	addi	r4,r4,-1
41020f60:	00bfffc4 	movi	r2,-1
41020f64:	18c00044 	addi	r3,r3,1
41020f68:	20802826 	beq	r4,r2,4102100c <memchr+0xd4>
41020f6c:	18800003 	ldbu	r2,0(r3)
41020f70:	28bffa1e 	bne	r5,r2,41020f5c <memchr+0x24>
41020f74:	1805883a 	mov	r2,r3
41020f78:	f800283a 	ret
41020f7c:	0011883a 	mov	r8,zero
41020f80:	0007883a 	mov	r3,zero
41020f84:	01c00104 	movi	r7,4
41020f88:	4004923a 	slli	r2,r8,8
41020f8c:	18c00044 	addi	r3,r3,1
41020f90:	1151883a 	add	r8,r2,r5
41020f94:	19fffc1e 	bne	r3,r7,41020f88 <memchr+0x50>
41020f98:	02bfbff4 	movhi	r10,65279
41020f9c:	52bfbfc4 	addi	r10,r10,-257
41020fa0:	02602074 	movhi	r9,32897
41020fa4:	4a602004 	addi	r9,r9,-32640
41020fa8:	02c000c4 	movi	r11,3
41020fac:	20800017 	ldw	r2,0(r4)
41020fb0:	31bfff04 	addi	r6,r6,-4
41020fb4:	200f883a 	mov	r7,r4
41020fb8:	1204f03a 	xor	r2,r2,r8
41020fbc:	1287883a 	add	r3,r2,r10
41020fc0:	1a46703a 	and	r3,r3,r9
41020fc4:	0084303a 	nor	r2,zero,r2
41020fc8:	10c4703a 	and	r2,r2,r3
41020fcc:	10000b26 	beq	r2,zero,41020ffc <memchr+0xc4>
41020fd0:	20800003 	ldbu	r2,0(r4)
41020fd4:	28800f26 	beq	r5,r2,41021014 <memchr+0xdc>
41020fd8:	20800043 	ldbu	r2,1(r4)
41020fdc:	21c00044 	addi	r7,r4,1
41020fe0:	28800c26 	beq	r5,r2,41021014 <memchr+0xdc>
41020fe4:	20800083 	ldbu	r2,2(r4)
41020fe8:	21c00084 	addi	r7,r4,2
41020fec:	28800926 	beq	r5,r2,41021014 <memchr+0xdc>
41020ff0:	208000c3 	ldbu	r2,3(r4)
41020ff4:	21c000c4 	addi	r7,r4,3
41020ff8:	28800626 	beq	r5,r2,41021014 <memchr+0xdc>
41020ffc:	21000104 	addi	r4,r4,4
41021000:	59bfea36 	bltu	r11,r6,41020fac <memchr+0x74>
41021004:	2007883a 	mov	r3,r4
41021008:	003fd106 	br	41020f50 <memchr+0x18>
4102100c:	0005883a 	mov	r2,zero
41021010:	f800283a 	ret
41021014:	3805883a 	mov	r2,r7
41021018:	f800283a 	ret

4102101c <memcpy>:
4102101c:	01c003c4 	movi	r7,15
41021020:	2007883a 	mov	r3,r4
41021024:	3980032e 	bgeu	r7,r6,41021034 <memcpy+0x18>
41021028:	2904b03a 	or	r2,r5,r4
4102102c:	108000cc 	andi	r2,r2,3
41021030:	10000926 	beq	r2,zero,41021058 <memcpy+0x3c>
41021034:	30000626 	beq	r6,zero,41021050 <memcpy+0x34>
41021038:	30cd883a 	add	r6,r6,r3
4102103c:	28800003 	ldbu	r2,0(r5)
41021040:	29400044 	addi	r5,r5,1
41021044:	18800005 	stb	r2,0(r3)
41021048:	18c00044 	addi	r3,r3,1
4102104c:	30fffb1e 	bne	r6,r3,4102103c <memcpy+0x20>
41021050:	2005883a 	mov	r2,r4
41021054:	f800283a 	ret
41021058:	3811883a 	mov	r8,r7
4102105c:	200f883a 	mov	r7,r4
41021060:	28c00017 	ldw	r3,0(r5)
41021064:	31bffc04 	addi	r6,r6,-16
41021068:	38c00015 	stw	r3,0(r7)
4102106c:	28800117 	ldw	r2,4(r5)
41021070:	38800115 	stw	r2,4(r7)
41021074:	28c00217 	ldw	r3,8(r5)
41021078:	38c00215 	stw	r3,8(r7)
4102107c:	28800317 	ldw	r2,12(r5)
41021080:	29400404 	addi	r5,r5,16
41021084:	38800315 	stw	r2,12(r7)
41021088:	39c00404 	addi	r7,r7,16
4102108c:	41bff436 	bltu	r8,r6,41021060 <memcpy+0x44>
41021090:	008000c4 	movi	r2,3
41021094:	1180072e 	bgeu	r2,r6,410210b4 <memcpy+0x98>
41021098:	1007883a 	mov	r3,r2
4102109c:	28800017 	ldw	r2,0(r5)
410210a0:	31bfff04 	addi	r6,r6,-4
410210a4:	29400104 	addi	r5,r5,4
410210a8:	38800015 	stw	r2,0(r7)
410210ac:	39c00104 	addi	r7,r7,4
410210b0:	19bffa36 	bltu	r3,r6,4102109c <memcpy+0x80>
410210b4:	3807883a 	mov	r3,r7
410210b8:	003fde06 	br	41021034 <memcpy+0x18>

410210bc <memmove>:
410210bc:	2807883a 	mov	r3,r5
410210c0:	2011883a 	mov	r8,r4
410210c4:	29000c2e 	bgeu	r5,r4,410210f8 <memmove+0x3c>
410210c8:	298f883a 	add	r7,r5,r6
410210cc:	21c00a2e 	bgeu	r4,r7,410210f8 <memmove+0x3c>
410210d0:	30000726 	beq	r6,zero,410210f0 <memmove+0x34>
410210d4:	2187883a 	add	r3,r4,r6
410210d8:	198dc83a 	sub	r6,r3,r6
410210dc:	39ffffc4 	addi	r7,r7,-1
410210e0:	38800003 	ldbu	r2,0(r7)
410210e4:	18ffffc4 	addi	r3,r3,-1
410210e8:	18800005 	stb	r2,0(r3)
410210ec:	19bffb1e 	bne	r3,r6,410210dc <memmove+0x20>
410210f0:	2005883a 	mov	r2,r4
410210f4:	f800283a 	ret
410210f8:	01c003c4 	movi	r7,15
410210fc:	39800a36 	bltu	r7,r6,41021128 <memmove+0x6c>
41021100:	303ffb26 	beq	r6,zero,410210f0 <memmove+0x34>
41021104:	400f883a 	mov	r7,r8
41021108:	320d883a 	add	r6,r6,r8
4102110c:	28800003 	ldbu	r2,0(r5)
41021110:	29400044 	addi	r5,r5,1
41021114:	38800005 	stb	r2,0(r7)
41021118:	39c00044 	addi	r7,r7,1
4102111c:	39bffb1e 	bne	r7,r6,4102110c <memmove+0x50>
41021120:	2005883a 	mov	r2,r4
41021124:	f800283a 	ret
41021128:	1904b03a 	or	r2,r3,r4
4102112c:	108000cc 	andi	r2,r2,3
41021130:	103ff31e 	bne	r2,zero,41021100 <memmove+0x44>
41021134:	3811883a 	mov	r8,r7
41021138:	180b883a 	mov	r5,r3
4102113c:	200f883a 	mov	r7,r4
41021140:	28c00017 	ldw	r3,0(r5)
41021144:	31bffc04 	addi	r6,r6,-16
41021148:	38c00015 	stw	r3,0(r7)
4102114c:	28800117 	ldw	r2,4(r5)
41021150:	38800115 	stw	r2,4(r7)
41021154:	28c00217 	ldw	r3,8(r5)
41021158:	38c00215 	stw	r3,8(r7)
4102115c:	28800317 	ldw	r2,12(r5)
41021160:	29400404 	addi	r5,r5,16
41021164:	38800315 	stw	r2,12(r7)
41021168:	39c00404 	addi	r7,r7,16
4102116c:	41bff436 	bltu	r8,r6,41021140 <memmove+0x84>
41021170:	008000c4 	movi	r2,3
41021174:	1180072e 	bgeu	r2,r6,41021194 <memmove+0xd8>
41021178:	1007883a 	mov	r3,r2
4102117c:	28800017 	ldw	r2,0(r5)
41021180:	31bfff04 	addi	r6,r6,-4
41021184:	29400104 	addi	r5,r5,4
41021188:	38800015 	stw	r2,0(r7)
4102118c:	39c00104 	addi	r7,r7,4
41021190:	19bffa36 	bltu	r3,r6,4102117c <memmove+0xc0>
41021194:	3811883a 	mov	r8,r7
41021198:	003fd906 	br	41021100 <memmove+0x44>

4102119c <_realloc_r>:
4102119c:	defff404 	addi	sp,sp,-48
410211a0:	dd800815 	stw	r22,32(sp)
410211a4:	dc800415 	stw	r18,16(sp)
410211a8:	dc400315 	stw	r17,12(sp)
410211ac:	dfc00b15 	stw	ra,44(sp)
410211b0:	df000a15 	stw	fp,40(sp)
410211b4:	ddc00915 	stw	r23,36(sp)
410211b8:	dd400715 	stw	r21,28(sp)
410211bc:	dd000615 	stw	r20,24(sp)
410211c0:	dcc00515 	stw	r19,20(sp)
410211c4:	dc000215 	stw	r16,8(sp)
410211c8:	2825883a 	mov	r18,r5
410211cc:	3023883a 	mov	r17,r6
410211d0:	202d883a 	mov	r22,r4
410211d4:	2800c926 	beq	r5,zero,410214fc <_realloc_r+0x360>
410211d8:	10231c80 	call	410231c8 <__malloc_lock>
410211dc:	943ffe04 	addi	r16,r18,-8
410211e0:	88c002c4 	addi	r3,r17,11
410211e4:	00800584 	movi	r2,22
410211e8:	82000117 	ldw	r8,4(r16)
410211ec:	10c01b2e 	bgeu	r2,r3,4102125c <_realloc_r+0xc0>
410211f0:	00bffe04 	movi	r2,-8
410211f4:	188e703a 	and	r7,r3,r2
410211f8:	3839883a 	mov	fp,r7
410211fc:	38001a16 	blt	r7,zero,41021268 <_realloc_r+0xcc>
41021200:	e4401936 	bltu	fp,r17,41021268 <_realloc_r+0xcc>
41021204:	013fff04 	movi	r4,-4
41021208:	4126703a 	and	r19,r8,r4
4102120c:	99c02616 	blt	r19,r7,410212a8 <_realloc_r+0x10c>
41021210:	802b883a 	mov	r21,r16
41021214:	9829883a 	mov	r20,r19
41021218:	84000204 	addi	r16,r16,8
4102121c:	a80f883a 	mov	r7,r21
41021220:	a70dc83a 	sub	r6,r20,fp
41021224:	008003c4 	movi	r2,15
41021228:	1180c136 	bltu	r2,r6,41021530 <_realloc_r+0x394>
4102122c:	38800117 	ldw	r2,4(r7)
41021230:	a549883a 	add	r4,r20,r21
41021234:	1080004c 	andi	r2,r2,1
41021238:	a084b03a 	or	r2,r20,r2
4102123c:	38800115 	stw	r2,4(r7)
41021240:	20c00117 	ldw	r3,4(r4)
41021244:	18c00054 	ori	r3,r3,1
41021248:	20c00115 	stw	r3,4(r4)
4102124c:	b009883a 	mov	r4,r22
41021250:	10231e80 	call	410231e8 <__malloc_unlock>
41021254:	8023883a 	mov	r17,r16
41021258:	00000606 	br	41021274 <_realloc_r+0xd8>
4102125c:	01c00404 	movi	r7,16
41021260:	3839883a 	mov	fp,r7
41021264:	e47fe72e 	bgeu	fp,r17,41021204 <_realloc_r+0x68>
41021268:	00800304 	movi	r2,12
4102126c:	0023883a 	mov	r17,zero
41021270:	b0800015 	stw	r2,0(r22)
41021274:	8805883a 	mov	r2,r17
41021278:	dfc00b17 	ldw	ra,44(sp)
4102127c:	df000a17 	ldw	fp,40(sp)
41021280:	ddc00917 	ldw	r23,36(sp)
41021284:	dd800817 	ldw	r22,32(sp)
41021288:	dd400717 	ldw	r21,28(sp)
4102128c:	dd000617 	ldw	r20,24(sp)
41021290:	dcc00517 	ldw	r19,20(sp)
41021294:	dc800417 	ldw	r18,16(sp)
41021298:	dc400317 	ldw	r17,12(sp)
4102129c:	dc000217 	ldw	r16,8(sp)
410212a0:	dec00c04 	addi	sp,sp,48
410212a4:	f800283a 	ret
410212a8:	00800034 	movhi	r2,0
410212ac:	10811504 	addi	r2,r2,1108
410212b0:	12400217 	ldw	r9,8(r2)
410212b4:	84cd883a 	add	r6,r16,r19
410212b8:	802b883a 	mov	r21,r16
410212bc:	3240b926 	beq	r6,r9,410215a4 <_realloc_r+0x408>
410212c0:	31400117 	ldw	r5,4(r6)
410212c4:	00bfff84 	movi	r2,-2
410212c8:	2884703a 	and	r2,r5,r2
410212cc:	1185883a 	add	r2,r2,r6
410212d0:	10c00117 	ldw	r3,4(r2)
410212d4:	18c0004c 	andi	r3,r3,1
410212d8:	1807003a 	cmpeq	r3,r3,zero
410212dc:	1800a326 	beq	r3,zero,4102156c <_realloc_r+0x3d0>
410212e0:	2908703a 	and	r4,r5,r4
410212e4:	9929883a 	add	r20,r19,r4
410212e8:	a1c0a30e 	bge	r20,r7,41021578 <_realloc_r+0x3dc>
410212ec:	4080004c 	andi	r2,r8,1
410212f0:	1000551e 	bne	r2,zero,41021448 <_realloc_r+0x2ac>
410212f4:	80800017 	ldw	r2,0(r16)
410212f8:	80afc83a 	sub	r23,r16,r2
410212fc:	b8c00117 	ldw	r3,4(r23)
41021300:	00bfff04 	movi	r2,-4
41021304:	1884703a 	and	r2,r3,r2
41021308:	30002e26 	beq	r6,zero,410213c4 <_realloc_r+0x228>
4102130c:	3240b926 	beq	r6,r9,410215f4 <_realloc_r+0x458>
41021310:	98a9883a 	add	r20,r19,r2
41021314:	2509883a 	add	r4,r4,r20
41021318:	d9000015 	stw	r4,0(sp)
4102131c:	21c02a16 	blt	r4,r7,410213c8 <_realloc_r+0x22c>
41021320:	30800317 	ldw	r2,12(r6)
41021324:	30c00217 	ldw	r3,8(r6)
41021328:	01400904 	movi	r5,36
4102132c:	99bfff04 	addi	r6,r19,-4
41021330:	18800315 	stw	r2,12(r3)
41021334:	10c00215 	stw	r3,8(r2)
41021338:	b9000317 	ldw	r4,12(r23)
4102133c:	b8800217 	ldw	r2,8(r23)
41021340:	b82b883a 	mov	r21,r23
41021344:	bc000204 	addi	r16,r23,8
41021348:	20800215 	stw	r2,8(r4)
4102134c:	11000315 	stw	r4,12(r2)
41021350:	2980e436 	bltu	r5,r6,410216e4 <_realloc_r+0x548>
41021354:	008004c4 	movi	r2,19
41021358:	9009883a 	mov	r4,r18
4102135c:	8011883a 	mov	r8,r16
41021360:	11800f2e 	bgeu	r2,r6,410213a0 <_realloc_r+0x204>
41021364:	90800017 	ldw	r2,0(r18)
41021368:	ba000404 	addi	r8,r23,16
4102136c:	91000204 	addi	r4,r18,8
41021370:	b8800215 	stw	r2,8(r23)
41021374:	90c00117 	ldw	r3,4(r18)
41021378:	008006c4 	movi	r2,27
4102137c:	b8c00315 	stw	r3,12(r23)
41021380:	1180072e 	bgeu	r2,r6,410213a0 <_realloc_r+0x204>
41021384:	90c00217 	ldw	r3,8(r18)
41021388:	ba000604 	addi	r8,r23,24
4102138c:	91000404 	addi	r4,r18,16
41021390:	b8c00415 	stw	r3,16(r23)
41021394:	90800317 	ldw	r2,12(r18)
41021398:	b8800515 	stw	r2,20(r23)
4102139c:	3140e726 	beq	r6,r5,4102173c <_realloc_r+0x5a0>
410213a0:	20800017 	ldw	r2,0(r4)
410213a4:	dd000017 	ldw	r20,0(sp)
410213a8:	b80f883a 	mov	r7,r23
410213ac:	40800015 	stw	r2,0(r8)
410213b0:	20c00117 	ldw	r3,4(r4)
410213b4:	40c00115 	stw	r3,4(r8)
410213b8:	20800217 	ldw	r2,8(r4)
410213bc:	40800215 	stw	r2,8(r8)
410213c0:	003f9706 	br	41021220 <_realloc_r+0x84>
410213c4:	98a9883a 	add	r20,r19,r2
410213c8:	a1c01f16 	blt	r20,r7,41021448 <_realloc_r+0x2ac>
410213cc:	b8c00317 	ldw	r3,12(r23)
410213d0:	b8800217 	ldw	r2,8(r23)
410213d4:	99bfff04 	addi	r6,r19,-4
410213d8:	01400904 	movi	r5,36
410213dc:	b82b883a 	mov	r21,r23
410213e0:	18800215 	stw	r2,8(r3)
410213e4:	10c00315 	stw	r3,12(r2)
410213e8:	bc000204 	addi	r16,r23,8
410213ec:	2980c336 	bltu	r5,r6,410216fc <_realloc_r+0x560>
410213f0:	008004c4 	movi	r2,19
410213f4:	9009883a 	mov	r4,r18
410213f8:	8011883a 	mov	r8,r16
410213fc:	11800f2e 	bgeu	r2,r6,4102143c <_realloc_r+0x2a0>
41021400:	90800017 	ldw	r2,0(r18)
41021404:	ba000404 	addi	r8,r23,16
41021408:	91000204 	addi	r4,r18,8
4102140c:	b8800215 	stw	r2,8(r23)
41021410:	90c00117 	ldw	r3,4(r18)
41021414:	008006c4 	movi	r2,27
41021418:	b8c00315 	stw	r3,12(r23)
4102141c:	1180072e 	bgeu	r2,r6,4102143c <_realloc_r+0x2a0>
41021420:	90c00217 	ldw	r3,8(r18)
41021424:	ba000604 	addi	r8,r23,24
41021428:	91000404 	addi	r4,r18,16
4102142c:	b8c00415 	stw	r3,16(r23)
41021430:	90800317 	ldw	r2,12(r18)
41021434:	b8800515 	stw	r2,20(r23)
41021438:	3140c726 	beq	r6,r5,41021758 <_realloc_r+0x5bc>
4102143c:	20800017 	ldw	r2,0(r4)
41021440:	b80f883a 	mov	r7,r23
41021444:	003fd906 	br	410213ac <_realloc_r+0x210>
41021448:	880b883a 	mov	r5,r17
4102144c:	b009883a 	mov	r4,r22
41021450:	10207f80 	call	410207f8 <_malloc_r>
41021454:	1023883a 	mov	r17,r2
41021458:	10002526 	beq	r2,zero,410214f0 <_realloc_r+0x354>
4102145c:	80800117 	ldw	r2,4(r16)
41021460:	00ffff84 	movi	r3,-2
41021464:	893ffe04 	addi	r4,r17,-8
41021468:	10c4703a 	and	r2,r2,r3
4102146c:	8085883a 	add	r2,r16,r2
41021470:	20809526 	beq	r4,r2,410216c8 <_realloc_r+0x52c>
41021474:	99bfff04 	addi	r6,r19,-4
41021478:	01c00904 	movi	r7,36
4102147c:	39804536 	bltu	r7,r6,41021594 <_realloc_r+0x3f8>
41021480:	008004c4 	movi	r2,19
41021484:	9009883a 	mov	r4,r18
41021488:	880b883a 	mov	r5,r17
4102148c:	11800f2e 	bgeu	r2,r6,410214cc <_realloc_r+0x330>
41021490:	90800017 	ldw	r2,0(r18)
41021494:	89400204 	addi	r5,r17,8
41021498:	91000204 	addi	r4,r18,8
4102149c:	88800015 	stw	r2,0(r17)
410214a0:	90c00117 	ldw	r3,4(r18)
410214a4:	008006c4 	movi	r2,27
410214a8:	88c00115 	stw	r3,4(r17)
410214ac:	1180072e 	bgeu	r2,r6,410214cc <_realloc_r+0x330>
410214b0:	90c00217 	ldw	r3,8(r18)
410214b4:	89400404 	addi	r5,r17,16
410214b8:	91000404 	addi	r4,r18,16
410214bc:	88c00215 	stw	r3,8(r17)
410214c0:	90800317 	ldw	r2,12(r18)
410214c4:	88800315 	stw	r2,12(r17)
410214c8:	31c09126 	beq	r6,r7,41021710 <_realloc_r+0x574>
410214cc:	20800017 	ldw	r2,0(r4)
410214d0:	28800015 	stw	r2,0(r5)
410214d4:	20c00117 	ldw	r3,4(r4)
410214d8:	28c00115 	stw	r3,4(r5)
410214dc:	20800217 	ldw	r2,8(r4)
410214e0:	28800215 	stw	r2,8(r5)
410214e4:	900b883a 	mov	r5,r18
410214e8:	b009883a 	mov	r4,r22
410214ec:	1021f580 	call	41021f58 <_free_r>
410214f0:	b009883a 	mov	r4,r22
410214f4:	10231e80 	call	410231e8 <__malloc_unlock>
410214f8:	003f5e06 	br	41021274 <_realloc_r+0xd8>
410214fc:	300b883a 	mov	r5,r6
41021500:	dfc00b17 	ldw	ra,44(sp)
41021504:	df000a17 	ldw	fp,40(sp)
41021508:	ddc00917 	ldw	r23,36(sp)
4102150c:	dd800817 	ldw	r22,32(sp)
41021510:	dd400717 	ldw	r21,28(sp)
41021514:	dd000617 	ldw	r20,24(sp)
41021518:	dcc00517 	ldw	r19,20(sp)
4102151c:	dc800417 	ldw	r18,16(sp)
41021520:	dc400317 	ldw	r17,12(sp)
41021524:	dc000217 	ldw	r16,8(sp)
41021528:	dec00c04 	addi	sp,sp,48
4102152c:	10207f81 	jmpi	410207f8 <_malloc_r>
41021530:	38800117 	ldw	r2,4(r7)
41021534:	e54b883a 	add	r5,fp,r21
41021538:	31000054 	ori	r4,r6,1
4102153c:	1080004c 	andi	r2,r2,1
41021540:	1704b03a 	or	r2,r2,fp
41021544:	38800115 	stw	r2,4(r7)
41021548:	29000115 	stw	r4,4(r5)
4102154c:	2987883a 	add	r3,r5,r6
41021550:	18800117 	ldw	r2,4(r3)
41021554:	29400204 	addi	r5,r5,8
41021558:	b009883a 	mov	r4,r22
4102155c:	10800054 	ori	r2,r2,1
41021560:	18800115 	stw	r2,4(r3)
41021564:	1021f580 	call	41021f58 <_free_r>
41021568:	003f3806 	br	4102124c <_realloc_r+0xb0>
4102156c:	000d883a 	mov	r6,zero
41021570:	0009883a 	mov	r4,zero
41021574:	003f5d06 	br	410212ec <_realloc_r+0x150>
41021578:	30c00217 	ldw	r3,8(r6)
4102157c:	30800317 	ldw	r2,12(r6)
41021580:	800f883a 	mov	r7,r16
41021584:	84000204 	addi	r16,r16,8
41021588:	10c00215 	stw	r3,8(r2)
4102158c:	18800315 	stw	r2,12(r3)
41021590:	003f2306 	br	41021220 <_realloc_r+0x84>
41021594:	8809883a 	mov	r4,r17
41021598:	900b883a 	mov	r5,r18
4102159c:	10210bc0 	call	410210bc <memmove>
410215a0:	003fd006 	br	410214e4 <_realloc_r+0x348>
410215a4:	30800117 	ldw	r2,4(r6)
410215a8:	e0c00404 	addi	r3,fp,16
410215ac:	1108703a 	and	r4,r2,r4
410215b0:	9905883a 	add	r2,r19,r4
410215b4:	10ff4d16 	blt	r2,r3,410212ec <_realloc_r+0x150>
410215b8:	1705c83a 	sub	r2,r2,fp
410215bc:	870b883a 	add	r5,r16,fp
410215c0:	10800054 	ori	r2,r2,1
410215c4:	28800115 	stw	r2,4(r5)
410215c8:	80c00117 	ldw	r3,4(r16)
410215cc:	00800034 	movhi	r2,0
410215d0:	10811504 	addi	r2,r2,1108
410215d4:	b009883a 	mov	r4,r22
410215d8:	18c0004c 	andi	r3,r3,1
410215dc:	e0c6b03a 	or	r3,fp,r3
410215e0:	11400215 	stw	r5,8(r2)
410215e4:	80c00115 	stw	r3,4(r16)
410215e8:	10231e80 	call	410231e8 <__malloc_unlock>
410215ec:	84400204 	addi	r17,r16,8
410215f0:	003f2006 	br	41021274 <_realloc_r+0xd8>
410215f4:	98a9883a 	add	r20,r19,r2
410215f8:	2509883a 	add	r4,r4,r20
410215fc:	e0800404 	addi	r2,fp,16
41021600:	d9000115 	stw	r4,4(sp)
41021604:	20bf7016 	blt	r4,r2,410213c8 <_realloc_r+0x22c>
41021608:	b8c00317 	ldw	r3,12(r23)
4102160c:	b8800217 	ldw	r2,8(r23)
41021610:	99bfff04 	addi	r6,r19,-4
41021614:	01400904 	movi	r5,36
41021618:	18800215 	stw	r2,8(r3)
4102161c:	10c00315 	stw	r3,12(r2)
41021620:	bc400204 	addi	r17,r23,8
41021624:	29804136 	bltu	r5,r6,4102172c <_realloc_r+0x590>
41021628:	008004c4 	movi	r2,19
4102162c:	9009883a 	mov	r4,r18
41021630:	880f883a 	mov	r7,r17
41021634:	11800f2e 	bgeu	r2,r6,41021674 <_realloc_r+0x4d8>
41021638:	90800017 	ldw	r2,0(r18)
4102163c:	b9c00404 	addi	r7,r23,16
41021640:	91000204 	addi	r4,r18,8
41021644:	b8800215 	stw	r2,8(r23)
41021648:	90c00117 	ldw	r3,4(r18)
4102164c:	008006c4 	movi	r2,27
41021650:	b8c00315 	stw	r3,12(r23)
41021654:	1180072e 	bgeu	r2,r6,41021674 <_realloc_r+0x4d8>
41021658:	90c00217 	ldw	r3,8(r18)
4102165c:	b9c00604 	addi	r7,r23,24
41021660:	91000404 	addi	r4,r18,16
41021664:	b8c00415 	stw	r3,16(r23)
41021668:	90800317 	ldw	r2,12(r18)
4102166c:	b8800515 	stw	r2,20(r23)
41021670:	31404026 	beq	r6,r5,41021774 <_realloc_r+0x5d8>
41021674:	20800017 	ldw	r2,0(r4)
41021678:	38800015 	stw	r2,0(r7)
4102167c:	20c00117 	ldw	r3,4(r4)
41021680:	38c00115 	stw	r3,4(r7)
41021684:	20800217 	ldw	r2,8(r4)
41021688:	38800215 	stw	r2,8(r7)
4102168c:	d8c00117 	ldw	r3,4(sp)
41021690:	bf0b883a 	add	r5,r23,fp
41021694:	b009883a 	mov	r4,r22
41021698:	1f05c83a 	sub	r2,r3,fp
4102169c:	10800054 	ori	r2,r2,1
410216a0:	28800115 	stw	r2,4(r5)
410216a4:	b8c00117 	ldw	r3,4(r23)
410216a8:	00800034 	movhi	r2,0
410216ac:	10811504 	addi	r2,r2,1108
410216b0:	11400215 	stw	r5,8(r2)
410216b4:	18c0004c 	andi	r3,r3,1
410216b8:	e0c6b03a 	or	r3,fp,r3
410216bc:	b8c00115 	stw	r3,4(r23)
410216c0:	10231e80 	call	410231e8 <__malloc_unlock>
410216c4:	003eeb06 	br	41021274 <_realloc_r+0xd8>
410216c8:	20800117 	ldw	r2,4(r4)
410216cc:	00ffff04 	movi	r3,-4
410216d0:	800f883a 	mov	r7,r16
410216d4:	10c4703a 	and	r2,r2,r3
410216d8:	98a9883a 	add	r20,r19,r2
410216dc:	84000204 	addi	r16,r16,8
410216e0:	003ecf06 	br	41021220 <_realloc_r+0x84>
410216e4:	900b883a 	mov	r5,r18
410216e8:	8009883a 	mov	r4,r16
410216ec:	10210bc0 	call	410210bc <memmove>
410216f0:	dd000017 	ldw	r20,0(sp)
410216f4:	b80f883a 	mov	r7,r23
410216f8:	003ec906 	br	41021220 <_realloc_r+0x84>
410216fc:	900b883a 	mov	r5,r18
41021700:	8009883a 	mov	r4,r16
41021704:	10210bc0 	call	410210bc <memmove>
41021708:	b80f883a 	mov	r7,r23
4102170c:	003ec406 	br	41021220 <_realloc_r+0x84>
41021710:	90c00417 	ldw	r3,16(r18)
41021714:	89400604 	addi	r5,r17,24
41021718:	91000604 	addi	r4,r18,24
4102171c:	88c00415 	stw	r3,16(r17)
41021720:	90800517 	ldw	r2,20(r18)
41021724:	88800515 	stw	r2,20(r17)
41021728:	003f6806 	br	410214cc <_realloc_r+0x330>
4102172c:	900b883a 	mov	r5,r18
41021730:	8809883a 	mov	r4,r17
41021734:	10210bc0 	call	410210bc <memmove>
41021738:	003fd406 	br	4102168c <_realloc_r+0x4f0>
4102173c:	90c00417 	ldw	r3,16(r18)
41021740:	91000604 	addi	r4,r18,24
41021744:	ba000804 	addi	r8,r23,32
41021748:	b8c00615 	stw	r3,24(r23)
4102174c:	90800517 	ldw	r2,20(r18)
41021750:	b8800715 	stw	r2,28(r23)
41021754:	003f1206 	br	410213a0 <_realloc_r+0x204>
41021758:	90c00417 	ldw	r3,16(r18)
4102175c:	91000604 	addi	r4,r18,24
41021760:	ba000804 	addi	r8,r23,32
41021764:	b8c00615 	stw	r3,24(r23)
41021768:	90800517 	ldw	r2,20(r18)
4102176c:	b8800715 	stw	r2,28(r23)
41021770:	003f3206 	br	4102143c <_realloc_r+0x2a0>
41021774:	90c00417 	ldw	r3,16(r18)
41021778:	91000604 	addi	r4,r18,24
4102177c:	b9c00804 	addi	r7,r23,32
41021780:	b8c00615 	stw	r3,24(r23)
41021784:	90800517 	ldw	r2,20(r18)
41021788:	b8800715 	stw	r2,28(r23)
4102178c:	003fb906 	br	41021674 <_realloc_r+0x4d8>

41021790 <_sbrk_r>:
41021790:	defffd04 	addi	sp,sp,-12
41021794:	dc000015 	stw	r16,0(sp)
41021798:	04000034 	movhi	r16,0
4102179c:	8406e504 	addi	r16,r16,7060
410217a0:	dc400115 	stw	r17,4(sp)
410217a4:	80000015 	stw	zero,0(r16)
410217a8:	2023883a 	mov	r17,r4
410217ac:	2809883a 	mov	r4,r5
410217b0:	dfc00215 	stw	ra,8(sp)
410217b4:	10233e80 	call	410233e8 <sbrk>
410217b8:	1007883a 	mov	r3,r2
410217bc:	00bfffc4 	movi	r2,-1
410217c0:	18800626 	beq	r3,r2,410217dc <_sbrk_r+0x4c>
410217c4:	1805883a 	mov	r2,r3
410217c8:	dfc00217 	ldw	ra,8(sp)
410217cc:	dc400117 	ldw	r17,4(sp)
410217d0:	dc000017 	ldw	r16,0(sp)
410217d4:	dec00304 	addi	sp,sp,12
410217d8:	f800283a 	ret
410217dc:	80800017 	ldw	r2,0(r16)
410217e0:	103ff826 	beq	r2,zero,410217c4 <_sbrk_r+0x34>
410217e4:	88800015 	stw	r2,0(r17)
410217e8:	1805883a 	mov	r2,r3
410217ec:	dfc00217 	ldw	ra,8(sp)
410217f0:	dc400117 	ldw	r17,4(sp)
410217f4:	dc000017 	ldw	r16,0(sp)
410217f8:	dec00304 	addi	sp,sp,12
410217fc:	f800283a 	ret

41021800 <__swsetup_r>:
41021800:	00800034 	movhi	r2,0
41021804:	1086d004 	addi	r2,r2,6976
41021808:	10c00017 	ldw	r3,0(r2)
4102180c:	defffd04 	addi	sp,sp,-12
41021810:	dc400115 	stw	r17,4(sp)
41021814:	dc000015 	stw	r16,0(sp)
41021818:	dfc00215 	stw	ra,8(sp)
4102181c:	2023883a 	mov	r17,r4
41021820:	2821883a 	mov	r16,r5
41021824:	18000226 	beq	r3,zero,41021830 <__swsetup_r+0x30>
41021828:	18800e17 	ldw	r2,56(r3)
4102182c:	10001f26 	beq	r2,zero,410218ac <__swsetup_r+0xac>
41021830:	8100030b 	ldhu	r4,12(r16)
41021834:	2080020c 	andi	r2,r4,8
41021838:	10002826 	beq	r2,zero,410218dc <__swsetup_r+0xdc>
4102183c:	81400417 	ldw	r5,16(r16)
41021840:	28001d26 	beq	r5,zero,410218b8 <__swsetup_r+0xb8>
41021844:	2080004c 	andi	r2,r4,1
41021848:	1005003a 	cmpeq	r2,r2,zero
4102184c:	10000b26 	beq	r2,zero,4102187c <__swsetup_r+0x7c>
41021850:	2080008c 	andi	r2,r4,2
41021854:	10001226 	beq	r2,zero,410218a0 <__swsetup_r+0xa0>
41021858:	0005883a 	mov	r2,zero
4102185c:	80800215 	stw	r2,8(r16)
41021860:	28000b26 	beq	r5,zero,41021890 <__swsetup_r+0x90>
41021864:	0005883a 	mov	r2,zero
41021868:	dfc00217 	ldw	ra,8(sp)
4102186c:	dc400117 	ldw	r17,4(sp)
41021870:	dc000017 	ldw	r16,0(sp)
41021874:	dec00304 	addi	sp,sp,12
41021878:	f800283a 	ret
4102187c:	80800517 	ldw	r2,20(r16)
41021880:	80000215 	stw	zero,8(r16)
41021884:	0085c83a 	sub	r2,zero,r2
41021888:	80800615 	stw	r2,24(r16)
4102188c:	283ff51e 	bne	r5,zero,41021864 <__swsetup_r+0x64>
41021890:	2080200c 	andi	r2,r4,128
41021894:	103ff326 	beq	r2,zero,41021864 <__swsetup_r+0x64>
41021898:	00bfffc4 	movi	r2,-1
4102189c:	003ff206 	br	41021868 <__swsetup_r+0x68>
410218a0:	80800517 	ldw	r2,20(r16)
410218a4:	80800215 	stw	r2,8(r16)
410218a8:	003fed06 	br	41021860 <__swsetup_r+0x60>
410218ac:	1809883a 	mov	r4,r3
410218b0:	1021bd40 	call	41021bd4 <__sinit>
410218b4:	003fde06 	br	41021830 <__swsetup_r+0x30>
410218b8:	20c0a00c 	andi	r3,r4,640
410218bc:	00808004 	movi	r2,512
410218c0:	18bfe026 	beq	r3,r2,41021844 <__swsetup_r+0x44>
410218c4:	8809883a 	mov	r4,r17
410218c8:	800b883a 	mov	r5,r16
410218cc:	10223ec0 	call	410223ec <__smakebuf_r>
410218d0:	8100030b 	ldhu	r4,12(r16)
410218d4:	81400417 	ldw	r5,16(r16)
410218d8:	003fda06 	br	41021844 <__swsetup_r+0x44>
410218dc:	2080040c 	andi	r2,r4,16
410218e0:	103fed26 	beq	r2,zero,41021898 <__swsetup_r+0x98>
410218e4:	2080010c 	andi	r2,r4,4
410218e8:	10001226 	beq	r2,zero,41021934 <__swsetup_r+0x134>
410218ec:	81400c17 	ldw	r5,48(r16)
410218f0:	28000526 	beq	r5,zero,41021908 <__swsetup_r+0x108>
410218f4:	80801004 	addi	r2,r16,64
410218f8:	28800226 	beq	r5,r2,41021904 <__swsetup_r+0x104>
410218fc:	8809883a 	mov	r4,r17
41021900:	1021f580 	call	41021f58 <_free_r>
41021904:	80000c15 	stw	zero,48(r16)
41021908:	8080030b 	ldhu	r2,12(r16)
4102190c:	81400417 	ldw	r5,16(r16)
41021910:	80000115 	stw	zero,4(r16)
41021914:	10bff6cc 	andi	r2,r2,65499
41021918:	8080030d 	sth	r2,12(r16)
4102191c:	81400015 	stw	r5,0(r16)
41021920:	8080030b 	ldhu	r2,12(r16)
41021924:	10800214 	ori	r2,r2,8
41021928:	113fffcc 	andi	r4,r2,65535
4102192c:	8080030d 	sth	r2,12(r16)
41021930:	003fc306 	br	41021840 <__swsetup_r+0x40>
41021934:	81400417 	ldw	r5,16(r16)
41021938:	003ff906 	br	41021920 <__swsetup_r+0x120>

4102193c <_fflush_r>:
4102193c:	defffb04 	addi	sp,sp,-20
41021940:	dcc00315 	stw	r19,12(sp)
41021944:	dc800215 	stw	r18,8(sp)
41021948:	dfc00415 	stw	ra,16(sp)
4102194c:	dc400115 	stw	r17,4(sp)
41021950:	dc000015 	stw	r16,0(sp)
41021954:	2027883a 	mov	r19,r4
41021958:	2825883a 	mov	r18,r5
4102195c:	20000226 	beq	r4,zero,41021968 <_fflush_r+0x2c>
41021960:	20800e17 	ldw	r2,56(r4)
41021964:	10005626 	beq	r2,zero,41021ac0 <_fflush_r+0x184>
41021968:	9100030b 	ldhu	r4,12(r18)
4102196c:	20ffffcc 	andi	r3,r4,65535
41021970:	18e0001c 	xori	r3,r3,32768
41021974:	18e00004 	addi	r3,r3,-32768
41021978:	1880020c 	andi	r2,r3,8
4102197c:	1000261e 	bne	r2,zero,41021a18 <_fflush_r+0xdc>
41021980:	90c00117 	ldw	r3,4(r18)
41021984:	20820014 	ori	r2,r4,2048
41021988:	9080030d 	sth	r2,12(r18)
4102198c:	1009883a 	mov	r4,r2
41021990:	00c0400e 	bge	zero,r3,41021a94 <_fflush_r+0x158>
41021994:	92000a17 	ldw	r8,40(r18)
41021998:	40004026 	beq	r8,zero,41021a9c <_fflush_r+0x160>
4102199c:	2084000c 	andi	r2,r4,4096
410219a0:	10005326 	beq	r2,zero,41021af0 <_fflush_r+0x1b4>
410219a4:	94001417 	ldw	r16,80(r18)
410219a8:	9080030b 	ldhu	r2,12(r18)
410219ac:	1080010c 	andi	r2,r2,4
410219b0:	1000481e 	bne	r2,zero,41021ad4 <_fflush_r+0x198>
410219b4:	91400717 	ldw	r5,28(r18)
410219b8:	9809883a 	mov	r4,r19
410219bc:	800d883a 	mov	r6,r16
410219c0:	000f883a 	mov	r7,zero
410219c4:	403ee83a 	callr	r8
410219c8:	8080261e 	bne	r16,r2,41021a64 <_fflush_r+0x128>
410219cc:	9080030b 	ldhu	r2,12(r18)
410219d0:	91000417 	ldw	r4,16(r18)
410219d4:	90000115 	stw	zero,4(r18)
410219d8:	10bdffcc 	andi	r2,r2,63487
410219dc:	10ffffcc 	andi	r3,r2,65535
410219e0:	18c4000c 	andi	r3,r3,4096
410219e4:	9080030d 	sth	r2,12(r18)
410219e8:	91000015 	stw	r4,0(r18)
410219ec:	18002b26 	beq	r3,zero,41021a9c <_fflush_r+0x160>
410219f0:	0007883a 	mov	r3,zero
410219f4:	1805883a 	mov	r2,r3
410219f8:	94001415 	stw	r16,80(r18)
410219fc:	dfc00417 	ldw	ra,16(sp)
41021a00:	dcc00317 	ldw	r19,12(sp)
41021a04:	dc800217 	ldw	r18,8(sp)
41021a08:	dc400117 	ldw	r17,4(sp)
41021a0c:	dc000017 	ldw	r16,0(sp)
41021a10:	dec00504 	addi	sp,sp,20
41021a14:	f800283a 	ret
41021a18:	94400417 	ldw	r17,16(r18)
41021a1c:	88001f26 	beq	r17,zero,41021a9c <_fflush_r+0x160>
41021a20:	90800017 	ldw	r2,0(r18)
41021a24:	18c000cc 	andi	r3,r3,3
41021a28:	94400015 	stw	r17,0(r18)
41021a2c:	1461c83a 	sub	r16,r2,r17
41021a30:	18002526 	beq	r3,zero,41021ac8 <_fflush_r+0x18c>
41021a34:	0005883a 	mov	r2,zero
41021a38:	90800215 	stw	r2,8(r18)
41021a3c:	0400170e 	bge	zero,r16,41021a9c <_fflush_r+0x160>
41021a40:	90c00917 	ldw	r3,36(r18)
41021a44:	91400717 	ldw	r5,28(r18)
41021a48:	880d883a 	mov	r6,r17
41021a4c:	800f883a 	mov	r7,r16
41021a50:	9809883a 	mov	r4,r19
41021a54:	183ee83a 	callr	r3
41021a58:	88a3883a 	add	r17,r17,r2
41021a5c:	80a1c83a 	sub	r16,r16,r2
41021a60:	00bff616 	blt	zero,r2,41021a3c <_fflush_r+0x100>
41021a64:	9080030b 	ldhu	r2,12(r18)
41021a68:	00ffffc4 	movi	r3,-1
41021a6c:	10801014 	ori	r2,r2,64
41021a70:	9080030d 	sth	r2,12(r18)
41021a74:	1805883a 	mov	r2,r3
41021a78:	dfc00417 	ldw	ra,16(sp)
41021a7c:	dcc00317 	ldw	r19,12(sp)
41021a80:	dc800217 	ldw	r18,8(sp)
41021a84:	dc400117 	ldw	r17,4(sp)
41021a88:	dc000017 	ldw	r16,0(sp)
41021a8c:	dec00504 	addi	sp,sp,20
41021a90:	f800283a 	ret
41021a94:	90800f17 	ldw	r2,60(r18)
41021a98:	00bfbe16 	blt	zero,r2,41021994 <_fflush_r+0x58>
41021a9c:	0007883a 	mov	r3,zero
41021aa0:	1805883a 	mov	r2,r3
41021aa4:	dfc00417 	ldw	ra,16(sp)
41021aa8:	dcc00317 	ldw	r19,12(sp)
41021aac:	dc800217 	ldw	r18,8(sp)
41021ab0:	dc400117 	ldw	r17,4(sp)
41021ab4:	dc000017 	ldw	r16,0(sp)
41021ab8:	dec00504 	addi	sp,sp,20
41021abc:	f800283a 	ret
41021ac0:	1021bd40 	call	41021bd4 <__sinit>
41021ac4:	003fa806 	br	41021968 <_fflush_r+0x2c>
41021ac8:	90800517 	ldw	r2,20(r18)
41021acc:	90800215 	stw	r2,8(r18)
41021ad0:	003fda06 	br	41021a3c <_fflush_r+0x100>
41021ad4:	90800117 	ldw	r2,4(r18)
41021ad8:	90c00c17 	ldw	r3,48(r18)
41021adc:	80a1c83a 	sub	r16,r16,r2
41021ae0:	183fb426 	beq	r3,zero,410219b4 <_fflush_r+0x78>
41021ae4:	90800f17 	ldw	r2,60(r18)
41021ae8:	80a1c83a 	sub	r16,r16,r2
41021aec:	003fb106 	br	410219b4 <_fflush_r+0x78>
41021af0:	91400717 	ldw	r5,28(r18)
41021af4:	9809883a 	mov	r4,r19
41021af8:	000d883a 	mov	r6,zero
41021afc:	01c00044 	movi	r7,1
41021b00:	403ee83a 	callr	r8
41021b04:	1021883a 	mov	r16,r2
41021b08:	00bfffc4 	movi	r2,-1
41021b0c:	80800226 	beq	r16,r2,41021b18 <_fflush_r+0x1dc>
41021b10:	92000a17 	ldw	r8,40(r18)
41021b14:	003fa406 	br	410219a8 <_fflush_r+0x6c>
41021b18:	98c00017 	ldw	r3,0(r19)
41021b1c:	00800744 	movi	r2,29
41021b20:	18bfde26 	beq	r3,r2,41021a9c <_fflush_r+0x160>
41021b24:	9080030b 	ldhu	r2,12(r18)
41021b28:	8007883a 	mov	r3,r16
41021b2c:	10801014 	ori	r2,r2,64
41021b30:	9080030d 	sth	r2,12(r18)
41021b34:	003fcf06 	br	41021a74 <_fflush_r+0x138>

41021b38 <fflush>:
41021b38:	015040b4 	movhi	r5,16642
41021b3c:	29464f04 	addi	r5,r5,6460
41021b40:	2007883a 	mov	r3,r4
41021b44:	20000526 	beq	r4,zero,41021b5c <fflush+0x24>
41021b48:	00800034 	movhi	r2,0
41021b4c:	1086d004 	addi	r2,r2,6976
41021b50:	11000017 	ldw	r4,0(r2)
41021b54:	180b883a 	mov	r5,r3
41021b58:	102193c1 	jmpi	4102193c <_fflush_r>
41021b5c:	00800034 	movhi	r2,0
41021b60:	1086d104 	addi	r2,r2,6980
41021b64:	11000017 	ldw	r4,0(r2)
41021b68:	102226c1 	jmpi	4102226c <_fwalk_reent>

41021b6c <std>:
41021b6c:	009040b4 	movhi	r2,16642
41021b70:	10898604 	addi	r2,r2,9752
41021b74:	20800b15 	stw	r2,44(r4)
41021b78:	009040b4 	movhi	r2,16642
41021b7c:	1089c104 	addi	r2,r2,9988
41021b80:	20800815 	stw	r2,32(r4)
41021b84:	00d040b4 	movhi	r3,16642
41021b88:	18c9a204 	addi	r3,r3,9864
41021b8c:	009040b4 	movhi	r2,16642
41021b90:	10898804 	addi	r2,r2,9760
41021b94:	2140030d 	sth	r5,12(r4)
41021b98:	2180038d 	sth	r6,14(r4)
41021b9c:	20c00915 	stw	r3,36(r4)
41021ba0:	20800a15 	stw	r2,40(r4)
41021ba4:	20000015 	stw	zero,0(r4)
41021ba8:	20000115 	stw	zero,4(r4)
41021bac:	20000215 	stw	zero,8(r4)
41021bb0:	20000415 	stw	zero,16(r4)
41021bb4:	20000515 	stw	zero,20(r4)
41021bb8:	20000615 	stw	zero,24(r4)
41021bbc:	21000715 	stw	r4,28(r4)
41021bc0:	f800283a 	ret

41021bc4 <__sfp_lock_acquire>:
41021bc4:	f800283a 	ret

41021bc8 <__sfp_lock_release>:
41021bc8:	f800283a 	ret

41021bcc <__sinit_lock_acquire>:
41021bcc:	f800283a 	ret

41021bd0 <__sinit_lock_release>:
41021bd0:	f800283a 	ret

41021bd4 <__sinit>:
41021bd4:	20800e17 	ldw	r2,56(r4)
41021bd8:	defffd04 	addi	sp,sp,-12
41021bdc:	dc400115 	stw	r17,4(sp)
41021be0:	dc000015 	stw	r16,0(sp)
41021be4:	dfc00215 	stw	ra,8(sp)
41021be8:	04400044 	movi	r17,1
41021bec:	01400104 	movi	r5,4
41021bf0:	000d883a 	mov	r6,zero
41021bf4:	2021883a 	mov	r16,r4
41021bf8:	2200bb04 	addi	r8,r4,748
41021bfc:	200f883a 	mov	r7,r4
41021c00:	10000526 	beq	r2,zero,41021c18 <__sinit+0x44>
41021c04:	dfc00217 	ldw	ra,8(sp)
41021c08:	dc400117 	ldw	r17,4(sp)
41021c0c:	dc000017 	ldw	r16,0(sp)
41021c10:	dec00304 	addi	sp,sp,12
41021c14:	f800283a 	ret
41021c18:	21000117 	ldw	r4,4(r4)
41021c1c:	009040b4 	movhi	r2,16642
41021c20:	10872e04 	addi	r2,r2,7352
41021c24:	00c000c4 	movi	r3,3
41021c28:	80800f15 	stw	r2,60(r16)
41021c2c:	80c0b915 	stw	r3,740(r16)
41021c30:	8200ba15 	stw	r8,744(r16)
41021c34:	84400e15 	stw	r17,56(r16)
41021c38:	8000b815 	stw	zero,736(r16)
41021c3c:	1021b6c0 	call	41021b6c <std>
41021c40:	81000217 	ldw	r4,8(r16)
41021c44:	880d883a 	mov	r6,r17
41021c48:	800f883a 	mov	r7,r16
41021c4c:	01400284 	movi	r5,10
41021c50:	1021b6c0 	call	41021b6c <std>
41021c54:	81000317 	ldw	r4,12(r16)
41021c58:	800f883a 	mov	r7,r16
41021c5c:	01400484 	movi	r5,18
41021c60:	01800084 	movi	r6,2
41021c64:	dfc00217 	ldw	ra,8(sp)
41021c68:	dc400117 	ldw	r17,4(sp)
41021c6c:	dc000017 	ldw	r16,0(sp)
41021c70:	dec00304 	addi	sp,sp,12
41021c74:	1021b6c1 	jmpi	41021b6c <std>

41021c78 <__fp_lock>:
41021c78:	0005883a 	mov	r2,zero
41021c7c:	f800283a 	ret

41021c80 <__fp_unlock>:
41021c80:	0005883a 	mov	r2,zero
41021c84:	f800283a 	ret

41021c88 <__fp_unlock_all>:
41021c88:	00800034 	movhi	r2,0
41021c8c:	1086d004 	addi	r2,r2,6976
41021c90:	11000017 	ldw	r4,0(r2)
41021c94:	015040b4 	movhi	r5,16642
41021c98:	29472004 	addi	r5,r5,7296
41021c9c:	10223341 	jmpi	41022334 <_fwalk>

41021ca0 <__fp_lock_all>:
41021ca0:	00800034 	movhi	r2,0
41021ca4:	1086d004 	addi	r2,r2,6976
41021ca8:	11000017 	ldw	r4,0(r2)
41021cac:	015040b4 	movhi	r5,16642
41021cb0:	29471e04 	addi	r5,r5,7288
41021cb4:	10223341 	jmpi	41022334 <_fwalk>

41021cb8 <_cleanup_r>:
41021cb8:	015040b4 	movhi	r5,16642
41021cbc:	294a5704 	addi	r5,r5,10588
41021cc0:	10223341 	jmpi	41022334 <_fwalk>

41021cc4 <_cleanup>:
41021cc4:	00800034 	movhi	r2,0
41021cc8:	1086d104 	addi	r2,r2,6980
41021ccc:	11000017 	ldw	r4,0(r2)
41021cd0:	1021cb81 	jmpi	41021cb8 <_cleanup_r>

41021cd4 <__sfmoreglue>:
41021cd4:	defffc04 	addi	sp,sp,-16
41021cd8:	dc400115 	stw	r17,4(sp)
41021cdc:	2c401724 	muli	r17,r5,92
41021ce0:	dc800215 	stw	r18,8(sp)
41021ce4:	2825883a 	mov	r18,r5
41021ce8:	89400304 	addi	r5,r17,12
41021cec:	dc000015 	stw	r16,0(sp)
41021cf0:	dfc00315 	stw	ra,12(sp)
41021cf4:	10207f80 	call	410207f8 <_malloc_r>
41021cf8:	0021883a 	mov	r16,zero
41021cfc:	880d883a 	mov	r6,r17
41021d00:	000b883a 	mov	r5,zero
41021d04:	10000626 	beq	r2,zero,41021d20 <__sfmoreglue+0x4c>
41021d08:	11000304 	addi	r4,r2,12
41021d0c:	14800115 	stw	r18,4(r2)
41021d10:	10000015 	stw	zero,0(r2)
41021d14:	11000215 	stw	r4,8(r2)
41021d18:	1021883a 	mov	r16,r2
41021d1c:	10225800 	call	41022580 <memset>
41021d20:	8005883a 	mov	r2,r16
41021d24:	dfc00317 	ldw	ra,12(sp)
41021d28:	dc800217 	ldw	r18,8(sp)
41021d2c:	dc400117 	ldw	r17,4(sp)
41021d30:	dc000017 	ldw	r16,0(sp)
41021d34:	dec00404 	addi	sp,sp,16
41021d38:	f800283a 	ret

41021d3c <__sfp>:
41021d3c:	defffd04 	addi	sp,sp,-12
41021d40:	00800034 	movhi	r2,0
41021d44:	1086d104 	addi	r2,r2,6980
41021d48:	dc000015 	stw	r16,0(sp)
41021d4c:	14000017 	ldw	r16,0(r2)
41021d50:	dc400115 	stw	r17,4(sp)
41021d54:	dfc00215 	stw	ra,8(sp)
41021d58:	80800e17 	ldw	r2,56(r16)
41021d5c:	2023883a 	mov	r17,r4
41021d60:	10002626 	beq	r2,zero,41021dfc <__sfp+0xc0>
41021d64:	8400b804 	addi	r16,r16,736
41021d68:	80800117 	ldw	r2,4(r16)
41021d6c:	81000217 	ldw	r4,8(r16)
41021d70:	10ffffc4 	addi	r3,r2,-1
41021d74:	18000916 	blt	r3,zero,41021d9c <__sfp+0x60>
41021d78:	2080030f 	ldh	r2,12(r4)
41021d7c:	10000b26 	beq	r2,zero,41021dac <__sfp+0x70>
41021d80:	017fffc4 	movi	r5,-1
41021d84:	00000206 	br	41021d90 <__sfp+0x54>
41021d88:	2080030f 	ldh	r2,12(r4)
41021d8c:	10000726 	beq	r2,zero,41021dac <__sfp+0x70>
41021d90:	18ffffc4 	addi	r3,r3,-1
41021d94:	21001704 	addi	r4,r4,92
41021d98:	197ffb1e 	bne	r3,r5,41021d88 <__sfp+0x4c>
41021d9c:	80800017 	ldw	r2,0(r16)
41021da0:	10001926 	beq	r2,zero,41021e08 <__sfp+0xcc>
41021da4:	1021883a 	mov	r16,r2
41021da8:	003fef06 	br	41021d68 <__sfp+0x2c>
41021dac:	00bfffc4 	movi	r2,-1
41021db0:	00c00044 	movi	r3,1
41021db4:	2080038d 	sth	r2,14(r4)
41021db8:	20c0030d 	sth	r3,12(r4)
41021dbc:	20000015 	stw	zero,0(r4)
41021dc0:	20000215 	stw	zero,8(r4)
41021dc4:	20000115 	stw	zero,4(r4)
41021dc8:	20000415 	stw	zero,16(r4)
41021dcc:	20000515 	stw	zero,20(r4)
41021dd0:	20000615 	stw	zero,24(r4)
41021dd4:	20000c15 	stw	zero,48(r4)
41021dd8:	20000d15 	stw	zero,52(r4)
41021ddc:	20001115 	stw	zero,68(r4)
41021de0:	20001215 	stw	zero,72(r4)
41021de4:	2005883a 	mov	r2,r4
41021de8:	dfc00217 	ldw	ra,8(sp)
41021dec:	dc400117 	ldw	r17,4(sp)
41021df0:	dc000017 	ldw	r16,0(sp)
41021df4:	dec00304 	addi	sp,sp,12
41021df8:	f800283a 	ret
41021dfc:	8009883a 	mov	r4,r16
41021e00:	1021bd40 	call	41021bd4 <__sinit>
41021e04:	003fd706 	br	41021d64 <__sfp+0x28>
41021e08:	8809883a 	mov	r4,r17
41021e0c:	01400104 	movi	r5,4
41021e10:	1021cd40 	call	41021cd4 <__sfmoreglue>
41021e14:	80800015 	stw	r2,0(r16)
41021e18:	103fe21e 	bne	r2,zero,41021da4 <__sfp+0x68>
41021e1c:	00800304 	movi	r2,12
41021e20:	0009883a 	mov	r4,zero
41021e24:	88800015 	stw	r2,0(r17)
41021e28:	003fee06 	br	41021de4 <__sfp+0xa8>

41021e2c <_malloc_trim_r>:
41021e2c:	defffb04 	addi	sp,sp,-20
41021e30:	dcc00315 	stw	r19,12(sp)
41021e34:	04c00034 	movhi	r19,0
41021e38:	9cc11504 	addi	r19,r19,1108
41021e3c:	dc800215 	stw	r18,8(sp)
41021e40:	dc400115 	stw	r17,4(sp)
41021e44:	dc000015 	stw	r16,0(sp)
41021e48:	2823883a 	mov	r17,r5
41021e4c:	2025883a 	mov	r18,r4
41021e50:	dfc00415 	stw	ra,16(sp)
41021e54:	10231c80 	call	410231c8 <__malloc_lock>
41021e58:	98800217 	ldw	r2,8(r19)
41021e5c:	9009883a 	mov	r4,r18
41021e60:	000b883a 	mov	r5,zero
41021e64:	10c00117 	ldw	r3,4(r2)
41021e68:	00bfff04 	movi	r2,-4
41021e6c:	18a0703a 	and	r16,r3,r2
41021e70:	8463c83a 	sub	r17,r16,r17
41021e74:	8c43fbc4 	addi	r17,r17,4079
41021e78:	8822d33a 	srli	r17,r17,12
41021e7c:	0083ffc4 	movi	r2,4095
41021e80:	8c7fffc4 	addi	r17,r17,-1
41021e84:	8822933a 	slli	r17,r17,12
41021e88:	1440060e 	bge	r2,r17,41021ea4 <_malloc_trim_r+0x78>
41021e8c:	10217900 	call	41021790 <_sbrk_r>
41021e90:	98c00217 	ldw	r3,8(r19)
41021e94:	9009883a 	mov	r4,r18
41021e98:	044bc83a 	sub	r5,zero,r17
41021e9c:	80c7883a 	add	r3,r16,r3
41021ea0:	10c00926 	beq	r2,r3,41021ec8 <_malloc_trim_r+0x9c>
41021ea4:	10231e80 	call	410231e8 <__malloc_unlock>
41021ea8:	0005883a 	mov	r2,zero
41021eac:	dfc00417 	ldw	ra,16(sp)
41021eb0:	dcc00317 	ldw	r19,12(sp)
41021eb4:	dc800217 	ldw	r18,8(sp)
41021eb8:	dc400117 	ldw	r17,4(sp)
41021ebc:	dc000017 	ldw	r16,0(sp)
41021ec0:	dec00504 	addi	sp,sp,20
41021ec4:	f800283a 	ret
41021ec8:	9009883a 	mov	r4,r18
41021ecc:	10217900 	call	41021790 <_sbrk_r>
41021ed0:	844dc83a 	sub	r6,r16,r17
41021ed4:	00ffffc4 	movi	r3,-1
41021ed8:	9009883a 	mov	r4,r18
41021edc:	000b883a 	mov	r5,zero
41021ee0:	01c00034 	movhi	r7,0
41021ee4:	39c6ec04 	addi	r7,r7,7088
41021ee8:	31800054 	ori	r6,r6,1
41021eec:	10c00926 	beq	r2,r3,41021f14 <_malloc_trim_r+0xe8>
41021ef0:	38800017 	ldw	r2,0(r7)
41021ef4:	98c00217 	ldw	r3,8(r19)
41021ef8:	9009883a 	mov	r4,r18
41021efc:	1445c83a 	sub	r2,r2,r17
41021f00:	38800015 	stw	r2,0(r7)
41021f04:	19800115 	stw	r6,4(r3)
41021f08:	10231e80 	call	410231e8 <__malloc_unlock>
41021f0c:	00800044 	movi	r2,1
41021f10:	003fe606 	br	41021eac <_malloc_trim_r+0x80>
41021f14:	10217900 	call	41021790 <_sbrk_r>
41021f18:	99800217 	ldw	r6,8(r19)
41021f1c:	100f883a 	mov	r7,r2
41021f20:	9009883a 	mov	r4,r18
41021f24:	1187c83a 	sub	r3,r2,r6
41021f28:	008003c4 	movi	r2,15
41021f2c:	19400054 	ori	r5,r3,1
41021f30:	10ffdc0e 	bge	r2,r3,41021ea4 <_malloc_trim_r+0x78>
41021f34:	00800034 	movhi	r2,0
41021f38:	1086d304 	addi	r2,r2,6988
41021f3c:	10c00017 	ldw	r3,0(r2)
41021f40:	00800034 	movhi	r2,0
41021f44:	1086ec04 	addi	r2,r2,7088
41021f48:	31400115 	stw	r5,4(r6)
41021f4c:	38c7c83a 	sub	r3,r7,r3
41021f50:	10c00015 	stw	r3,0(r2)
41021f54:	003fd306 	br	41021ea4 <_malloc_trim_r+0x78>

41021f58 <_free_r>:
41021f58:	defffd04 	addi	sp,sp,-12
41021f5c:	dc400115 	stw	r17,4(sp)
41021f60:	dc000015 	stw	r16,0(sp)
41021f64:	dfc00215 	stw	ra,8(sp)
41021f68:	2821883a 	mov	r16,r5
41021f6c:	2023883a 	mov	r17,r4
41021f70:	28005a26 	beq	r5,zero,410220dc <_free_r+0x184>
41021f74:	10231c80 	call	410231c8 <__malloc_lock>
41021f78:	823ffe04 	addi	r8,r16,-8
41021f7c:	41400117 	ldw	r5,4(r8)
41021f80:	00bfff84 	movi	r2,-2
41021f84:	02800034 	movhi	r10,0
41021f88:	52811504 	addi	r10,r10,1108
41021f8c:	288e703a 	and	r7,r5,r2
41021f90:	41cd883a 	add	r6,r8,r7
41021f94:	30c00117 	ldw	r3,4(r6)
41021f98:	51000217 	ldw	r4,8(r10)
41021f9c:	00bfff04 	movi	r2,-4
41021fa0:	1892703a 	and	r9,r3,r2
41021fa4:	5017883a 	mov	r11,r10
41021fa8:	31006726 	beq	r6,r4,41022148 <_free_r+0x1f0>
41021fac:	2880004c 	andi	r2,r5,1
41021fb0:	1005003a 	cmpeq	r2,r2,zero
41021fb4:	32400115 	stw	r9,4(r6)
41021fb8:	10001a1e 	bne	r2,zero,41022024 <_free_r+0xcc>
41021fbc:	000b883a 	mov	r5,zero
41021fc0:	3247883a 	add	r3,r6,r9
41021fc4:	18800117 	ldw	r2,4(r3)
41021fc8:	1080004c 	andi	r2,r2,1
41021fcc:	1000231e 	bne	r2,zero,4102205c <_free_r+0x104>
41021fd0:	280ac03a 	cmpne	r5,r5,zero
41021fd4:	3a4f883a 	add	r7,r7,r9
41021fd8:	2800451e 	bne	r5,zero,410220f0 <_free_r+0x198>
41021fdc:	31000217 	ldw	r4,8(r6)
41021fe0:	00800034 	movhi	r2,0
41021fe4:	10811704 	addi	r2,r2,1116
41021fe8:	20807b26 	beq	r4,r2,410221d8 <_free_r+0x280>
41021fec:	30800317 	ldw	r2,12(r6)
41021ff0:	3a07883a 	add	r3,r7,r8
41021ff4:	19c00015 	stw	r7,0(r3)
41021ff8:	11000215 	stw	r4,8(r2)
41021ffc:	20800315 	stw	r2,12(r4)
41022000:	38800054 	ori	r2,r7,1
41022004:	40800115 	stw	r2,4(r8)
41022008:	28001a26 	beq	r5,zero,41022074 <_free_r+0x11c>
4102200c:	8809883a 	mov	r4,r17
41022010:	dfc00217 	ldw	ra,8(sp)
41022014:	dc400117 	ldw	r17,4(sp)
41022018:	dc000017 	ldw	r16,0(sp)
4102201c:	dec00304 	addi	sp,sp,12
41022020:	10231e81 	jmpi	410231e8 <__malloc_unlock>
41022024:	80bffe17 	ldw	r2,-8(r16)
41022028:	50c00204 	addi	r3,r10,8
4102202c:	4091c83a 	sub	r8,r8,r2
41022030:	41000217 	ldw	r4,8(r8)
41022034:	388f883a 	add	r7,r7,r2
41022038:	20c06126 	beq	r4,r3,410221c0 <_free_r+0x268>
4102203c:	40800317 	ldw	r2,12(r8)
41022040:	3247883a 	add	r3,r6,r9
41022044:	000b883a 	mov	r5,zero
41022048:	11000215 	stw	r4,8(r2)
4102204c:	20800315 	stw	r2,12(r4)
41022050:	18800117 	ldw	r2,4(r3)
41022054:	1080004c 	andi	r2,r2,1
41022058:	103fdd26 	beq	r2,zero,41021fd0 <_free_r+0x78>
4102205c:	38800054 	ori	r2,r7,1
41022060:	3a07883a 	add	r3,r7,r8
41022064:	280ac03a 	cmpne	r5,r5,zero
41022068:	40800115 	stw	r2,4(r8)
4102206c:	19c00015 	stw	r7,0(r3)
41022070:	283fe61e 	bne	r5,zero,4102200c <_free_r+0xb4>
41022074:	00807fc4 	movi	r2,511
41022078:	11c01f2e 	bgeu	r2,r7,410220f8 <_free_r+0x1a0>
4102207c:	3806d27a 	srli	r3,r7,9
41022080:	1800481e 	bne	r3,zero,410221a4 <_free_r+0x24c>
41022084:	3804d0fa 	srli	r2,r7,3
41022088:	100690fa 	slli	r3,r2,3
4102208c:	1acd883a 	add	r6,r3,r11
41022090:	31400217 	ldw	r5,8(r6)
41022094:	31405926 	beq	r6,r5,410221fc <_free_r+0x2a4>
41022098:	28800117 	ldw	r2,4(r5)
4102209c:	00ffff04 	movi	r3,-4
410220a0:	10c4703a 	and	r2,r2,r3
410220a4:	3880022e 	bgeu	r7,r2,410220b0 <_free_r+0x158>
410220a8:	29400217 	ldw	r5,8(r5)
410220ac:	317ffa1e 	bne	r6,r5,41022098 <_free_r+0x140>
410220b0:	29800317 	ldw	r6,12(r5)
410220b4:	41800315 	stw	r6,12(r8)
410220b8:	41400215 	stw	r5,8(r8)
410220bc:	8809883a 	mov	r4,r17
410220c0:	2a000315 	stw	r8,12(r5)
410220c4:	32000215 	stw	r8,8(r6)
410220c8:	dfc00217 	ldw	ra,8(sp)
410220cc:	dc400117 	ldw	r17,4(sp)
410220d0:	dc000017 	ldw	r16,0(sp)
410220d4:	dec00304 	addi	sp,sp,12
410220d8:	10231e81 	jmpi	410231e8 <__malloc_unlock>
410220dc:	dfc00217 	ldw	ra,8(sp)
410220e0:	dc400117 	ldw	r17,4(sp)
410220e4:	dc000017 	ldw	r16,0(sp)
410220e8:	dec00304 	addi	sp,sp,12
410220ec:	f800283a 	ret
410220f0:	31000217 	ldw	r4,8(r6)
410220f4:	003fbd06 	br	41021fec <_free_r+0x94>
410220f8:	3806d0fa 	srli	r3,r7,3
410220fc:	00800044 	movi	r2,1
41022100:	51400117 	ldw	r5,4(r10)
41022104:	180890fa 	slli	r4,r3,3
41022108:	1807d0ba 	srai	r3,r3,2
4102210c:	22c9883a 	add	r4,r4,r11
41022110:	21800217 	ldw	r6,8(r4)
41022114:	10c4983a 	sll	r2,r2,r3
41022118:	41000315 	stw	r4,12(r8)
4102211c:	41800215 	stw	r6,8(r8)
41022120:	288ab03a 	or	r5,r5,r2
41022124:	22000215 	stw	r8,8(r4)
41022128:	8809883a 	mov	r4,r17
4102212c:	51400115 	stw	r5,4(r10)
41022130:	32000315 	stw	r8,12(r6)
41022134:	dfc00217 	ldw	ra,8(sp)
41022138:	dc400117 	ldw	r17,4(sp)
4102213c:	dc000017 	ldw	r16,0(sp)
41022140:	dec00304 	addi	sp,sp,12
41022144:	10231e81 	jmpi	410231e8 <__malloc_unlock>
41022148:	2880004c 	andi	r2,r5,1
4102214c:	3a4d883a 	add	r6,r7,r9
41022150:	1000071e 	bne	r2,zero,41022170 <_free_r+0x218>
41022154:	80bffe17 	ldw	r2,-8(r16)
41022158:	4091c83a 	sub	r8,r8,r2
4102215c:	41000317 	ldw	r4,12(r8)
41022160:	40c00217 	ldw	r3,8(r8)
41022164:	308d883a 	add	r6,r6,r2
41022168:	20c00215 	stw	r3,8(r4)
4102216c:	19000315 	stw	r4,12(r3)
41022170:	00800034 	movhi	r2,0
41022174:	1086d204 	addi	r2,r2,6984
41022178:	11000017 	ldw	r4,0(r2)
4102217c:	30c00054 	ori	r3,r6,1
41022180:	52000215 	stw	r8,8(r10)
41022184:	40c00115 	stw	r3,4(r8)
41022188:	313fa036 	bltu	r6,r4,4102200c <_free_r+0xb4>
4102218c:	00800034 	movhi	r2,0
41022190:	1086e204 	addi	r2,r2,7048
41022194:	11400017 	ldw	r5,0(r2)
41022198:	8809883a 	mov	r4,r17
4102219c:	1021e2c0 	call	41021e2c <_malloc_trim_r>
410221a0:	003f9a06 	br	4102200c <_free_r+0xb4>
410221a4:	00800104 	movi	r2,4
410221a8:	10c0072e 	bgeu	r2,r3,410221c8 <_free_r+0x270>
410221ac:	00800504 	movi	r2,20
410221b0:	10c01936 	bltu	r2,r3,41022218 <_free_r+0x2c0>
410221b4:	188016c4 	addi	r2,r3,91
410221b8:	100690fa 	slli	r3,r2,3
410221bc:	003fb306 	br	4102208c <_free_r+0x134>
410221c0:	01400044 	movi	r5,1
410221c4:	003f7e06 	br	41021fc0 <_free_r+0x68>
410221c8:	3804d1ba 	srli	r2,r7,6
410221cc:	10800e04 	addi	r2,r2,56
410221d0:	100690fa 	slli	r3,r2,3
410221d4:	003fad06 	br	4102208c <_free_r+0x134>
410221d8:	22000315 	stw	r8,12(r4)
410221dc:	22000215 	stw	r8,8(r4)
410221e0:	3a05883a 	add	r2,r7,r8
410221e4:	38c00054 	ori	r3,r7,1
410221e8:	11c00015 	stw	r7,0(r2)
410221ec:	41000215 	stw	r4,8(r8)
410221f0:	40c00115 	stw	r3,4(r8)
410221f4:	41000315 	stw	r4,12(r8)
410221f8:	003f8406 	br	4102200c <_free_r+0xb4>
410221fc:	1005d0ba 	srai	r2,r2,2
41022200:	00c00044 	movi	r3,1
41022204:	51000117 	ldw	r4,4(r10)
41022208:	1886983a 	sll	r3,r3,r2
4102220c:	20c8b03a 	or	r4,r4,r3
41022210:	51000115 	stw	r4,4(r10)
41022214:	003fa706 	br	410220b4 <_free_r+0x15c>
41022218:	00801504 	movi	r2,84
4102221c:	10c00436 	bltu	r2,r3,41022230 <_free_r+0x2d8>
41022220:	3804d33a 	srli	r2,r7,12
41022224:	10801b84 	addi	r2,r2,110
41022228:	100690fa 	slli	r3,r2,3
4102222c:	003f9706 	br	4102208c <_free_r+0x134>
41022230:	00805504 	movi	r2,340
41022234:	10c00436 	bltu	r2,r3,41022248 <_free_r+0x2f0>
41022238:	3804d3fa 	srli	r2,r7,15
4102223c:	10801dc4 	addi	r2,r2,119
41022240:	100690fa 	slli	r3,r2,3
41022244:	003f9106 	br	4102208c <_free_r+0x134>
41022248:	00815504 	movi	r2,1364
4102224c:	10c0032e 	bgeu	r2,r3,4102225c <_free_r+0x304>
41022250:	00801f84 	movi	r2,126
41022254:	00c0fc04 	movi	r3,1008
41022258:	003f8c06 	br	4102208c <_free_r+0x134>
4102225c:	3804d4ba 	srli	r2,r7,18
41022260:	10801f04 	addi	r2,r2,124
41022264:	100690fa 	slli	r3,r2,3
41022268:	003f8806 	br	4102208c <_free_r+0x134>

4102226c <_fwalk_reent>:
4102226c:	defff704 	addi	sp,sp,-36
41022270:	dcc00315 	stw	r19,12(sp)
41022274:	24c0b804 	addi	r19,r4,736
41022278:	dd800615 	stw	r22,24(sp)
4102227c:	dd400515 	stw	r21,20(sp)
41022280:	dfc00815 	stw	ra,32(sp)
41022284:	ddc00715 	stw	r23,28(sp)
41022288:	dd000415 	stw	r20,16(sp)
4102228c:	dc800215 	stw	r18,8(sp)
41022290:	dc400115 	stw	r17,4(sp)
41022294:	dc000015 	stw	r16,0(sp)
41022298:	202b883a 	mov	r21,r4
4102229c:	282d883a 	mov	r22,r5
410222a0:	1021bc40 	call	41021bc4 <__sfp_lock_acquire>
410222a4:	98002126 	beq	r19,zero,4102232c <_fwalk_reent+0xc0>
410222a8:	002f883a 	mov	r23,zero
410222ac:	9c800117 	ldw	r18,4(r19)
410222b0:	9c000217 	ldw	r16,8(r19)
410222b4:	90bfffc4 	addi	r2,r18,-1
410222b8:	10000d16 	blt	r2,zero,410222f0 <_fwalk_reent+0x84>
410222bc:	0023883a 	mov	r17,zero
410222c0:	053fffc4 	movi	r20,-1
410222c4:	8080030f 	ldh	r2,12(r16)
410222c8:	8c400044 	addi	r17,r17,1
410222cc:	10000626 	beq	r2,zero,410222e8 <_fwalk_reent+0x7c>
410222d0:	8080038f 	ldh	r2,14(r16)
410222d4:	800b883a 	mov	r5,r16
410222d8:	a809883a 	mov	r4,r21
410222dc:	15000226 	beq	r2,r20,410222e8 <_fwalk_reent+0x7c>
410222e0:	b03ee83a 	callr	r22
410222e4:	b8aeb03a 	or	r23,r23,r2
410222e8:	84001704 	addi	r16,r16,92
410222ec:	947ff51e 	bne	r18,r17,410222c4 <_fwalk_reent+0x58>
410222f0:	9cc00017 	ldw	r19,0(r19)
410222f4:	983fed1e 	bne	r19,zero,410222ac <_fwalk_reent+0x40>
410222f8:	1021bc80 	call	41021bc8 <__sfp_lock_release>
410222fc:	b805883a 	mov	r2,r23
41022300:	dfc00817 	ldw	ra,32(sp)
41022304:	ddc00717 	ldw	r23,28(sp)
41022308:	dd800617 	ldw	r22,24(sp)
4102230c:	dd400517 	ldw	r21,20(sp)
41022310:	dd000417 	ldw	r20,16(sp)
41022314:	dcc00317 	ldw	r19,12(sp)
41022318:	dc800217 	ldw	r18,8(sp)
4102231c:	dc400117 	ldw	r17,4(sp)
41022320:	dc000017 	ldw	r16,0(sp)
41022324:	dec00904 	addi	sp,sp,36
41022328:	f800283a 	ret
4102232c:	002f883a 	mov	r23,zero
41022330:	003ff106 	br	410222f8 <_fwalk_reent+0x8c>

41022334 <_fwalk>:
41022334:	defff804 	addi	sp,sp,-32
41022338:	dcc00315 	stw	r19,12(sp)
4102233c:	24c0b804 	addi	r19,r4,736
41022340:	dd400515 	stw	r21,20(sp)
41022344:	dfc00715 	stw	ra,28(sp)
41022348:	dd800615 	stw	r22,24(sp)
4102234c:	dd000415 	stw	r20,16(sp)
41022350:	dc800215 	stw	r18,8(sp)
41022354:	dc400115 	stw	r17,4(sp)
41022358:	dc000015 	stw	r16,0(sp)
4102235c:	282b883a 	mov	r21,r5
41022360:	1021bc40 	call	41021bc4 <__sfp_lock_acquire>
41022364:	98001f26 	beq	r19,zero,410223e4 <_fwalk+0xb0>
41022368:	002d883a 	mov	r22,zero
4102236c:	9c800117 	ldw	r18,4(r19)
41022370:	9c000217 	ldw	r16,8(r19)
41022374:	90bfffc4 	addi	r2,r18,-1
41022378:	10000c16 	blt	r2,zero,410223ac <_fwalk+0x78>
4102237c:	0023883a 	mov	r17,zero
41022380:	053fffc4 	movi	r20,-1
41022384:	8080030f 	ldh	r2,12(r16)
41022388:	8c400044 	addi	r17,r17,1
4102238c:	10000526 	beq	r2,zero,410223a4 <_fwalk+0x70>
41022390:	8080038f 	ldh	r2,14(r16)
41022394:	8009883a 	mov	r4,r16
41022398:	15000226 	beq	r2,r20,410223a4 <_fwalk+0x70>
4102239c:	a83ee83a 	callr	r21
410223a0:	b0acb03a 	or	r22,r22,r2
410223a4:	84001704 	addi	r16,r16,92
410223a8:	947ff61e 	bne	r18,r17,41022384 <_fwalk+0x50>
410223ac:	9cc00017 	ldw	r19,0(r19)
410223b0:	983fee1e 	bne	r19,zero,4102236c <_fwalk+0x38>
410223b4:	1021bc80 	call	41021bc8 <__sfp_lock_release>
410223b8:	b005883a 	mov	r2,r22
410223bc:	dfc00717 	ldw	ra,28(sp)
410223c0:	dd800617 	ldw	r22,24(sp)
410223c4:	dd400517 	ldw	r21,20(sp)
410223c8:	dd000417 	ldw	r20,16(sp)
410223cc:	dcc00317 	ldw	r19,12(sp)
410223d0:	dc800217 	ldw	r18,8(sp)
410223d4:	dc400117 	ldw	r17,4(sp)
410223d8:	dc000017 	ldw	r16,0(sp)
410223dc:	dec00804 	addi	sp,sp,32
410223e0:	f800283a 	ret
410223e4:	002d883a 	mov	r22,zero
410223e8:	003ff206 	br	410223b4 <_fwalk+0x80>

410223ec <__smakebuf_r>:
410223ec:	2880030b 	ldhu	r2,12(r5)
410223f0:	deffed04 	addi	sp,sp,-76
410223f4:	dc401015 	stw	r17,64(sp)
410223f8:	1080008c 	andi	r2,r2,2
410223fc:	dc000f15 	stw	r16,60(sp)
41022400:	dfc01215 	stw	ra,72(sp)
41022404:	dc801115 	stw	r18,68(sp)
41022408:	2821883a 	mov	r16,r5
4102240c:	2023883a 	mov	r17,r4
41022410:	10000b26 	beq	r2,zero,41022440 <__smakebuf_r+0x54>
41022414:	28c010c4 	addi	r3,r5,67
41022418:	00800044 	movi	r2,1
4102241c:	28800515 	stw	r2,20(r5)
41022420:	28c00415 	stw	r3,16(r5)
41022424:	28c00015 	stw	r3,0(r5)
41022428:	dfc01217 	ldw	ra,72(sp)
4102242c:	dc801117 	ldw	r18,68(sp)
41022430:	dc401017 	ldw	r17,64(sp)
41022434:	dc000f17 	ldw	r16,60(sp)
41022438:	dec01304 	addi	sp,sp,76
4102243c:	f800283a 	ret
41022440:	2940038f 	ldh	r5,14(r5)
41022444:	28002116 	blt	r5,zero,410224cc <__smakebuf_r+0xe0>
41022448:	d80d883a 	mov	r6,sp
4102244c:	10229700 	call	41022970 <_fstat_r>
41022450:	10001e16 	blt	r2,zero,410224cc <__smakebuf_r+0xe0>
41022454:	d8800117 	ldw	r2,4(sp)
41022458:	00e00014 	movui	r3,32768
4102245c:	113c000c 	andi	r4,r2,61440
41022460:	20c03126 	beq	r4,r3,41022528 <__smakebuf_r+0x13c>
41022464:	8080030b 	ldhu	r2,12(r16)
41022468:	00c80004 	movi	r3,8192
4102246c:	10820014 	ori	r2,r2,2048
41022470:	8080030d 	sth	r2,12(r16)
41022474:	20c01e26 	beq	r4,r3,410224f0 <__smakebuf_r+0x104>
41022478:	04810004 	movi	r18,1024
4102247c:	8809883a 	mov	r4,r17
41022480:	900b883a 	mov	r5,r18
41022484:	10207f80 	call	410207f8 <_malloc_r>
41022488:	1009883a 	mov	r4,r2
4102248c:	10003126 	beq	r2,zero,41022554 <__smakebuf_r+0x168>
41022490:	80c0030b 	ldhu	r3,12(r16)
41022494:	009040b4 	movhi	r2,16642
41022498:	10872e04 	addi	r2,r2,7352
4102249c:	88800f15 	stw	r2,60(r17)
410224a0:	18c02014 	ori	r3,r3,128
410224a4:	84800515 	stw	r18,20(r16)
410224a8:	80c0030d 	sth	r3,12(r16)
410224ac:	81000415 	stw	r4,16(r16)
410224b0:	81000015 	stw	r4,0(r16)
410224b4:	dfc01217 	ldw	ra,72(sp)
410224b8:	dc801117 	ldw	r18,68(sp)
410224bc:	dc401017 	ldw	r17,64(sp)
410224c0:	dc000f17 	ldw	r16,60(sp)
410224c4:	dec01304 	addi	sp,sp,76
410224c8:	f800283a 	ret
410224cc:	80c0030b 	ldhu	r3,12(r16)
410224d0:	1880200c 	andi	r2,r3,128
410224d4:	10000426 	beq	r2,zero,410224e8 <__smakebuf_r+0xfc>
410224d8:	04801004 	movi	r18,64
410224dc:	18820014 	ori	r2,r3,2048
410224e0:	8080030d 	sth	r2,12(r16)
410224e4:	003fe506 	br	4102247c <__smakebuf_r+0x90>
410224e8:	04810004 	movi	r18,1024
410224ec:	003ffb06 	br	410224dc <__smakebuf_r+0xf0>
410224f0:	8140038f 	ldh	r5,14(r16)
410224f4:	8809883a 	mov	r4,r17
410224f8:	10229e40 	call	410229e4 <_isatty_r>
410224fc:	103fde26 	beq	r2,zero,41022478 <__smakebuf_r+0x8c>
41022500:	8080030b 	ldhu	r2,12(r16)
41022504:	80c010c4 	addi	r3,r16,67
41022508:	04810004 	movi	r18,1024
4102250c:	10800054 	ori	r2,r2,1
41022510:	8080030d 	sth	r2,12(r16)
41022514:	00800044 	movi	r2,1
41022518:	80c00415 	stw	r3,16(r16)
4102251c:	80800515 	stw	r2,20(r16)
41022520:	80c00015 	stw	r3,0(r16)
41022524:	003fd506 	br	4102247c <__smakebuf_r+0x90>
41022528:	80c00a17 	ldw	r3,40(r16)
4102252c:	009040b4 	movhi	r2,16642
41022530:	10898804 	addi	r2,r2,9760
41022534:	18bfcb1e 	bne	r3,r2,41022464 <__smakebuf_r+0x78>
41022538:	8080030b 	ldhu	r2,12(r16)
4102253c:	00c10004 	movi	r3,1024
41022540:	1825883a 	mov	r18,r3
41022544:	10c4b03a 	or	r2,r2,r3
41022548:	8080030d 	sth	r2,12(r16)
4102254c:	80c01315 	stw	r3,76(r16)
41022550:	003fca06 	br	4102247c <__smakebuf_r+0x90>
41022554:	8100030b 	ldhu	r4,12(r16)
41022558:	2080800c 	andi	r2,r4,512
4102255c:	103fb21e 	bne	r2,zero,41022428 <__smakebuf_r+0x3c>
41022560:	80c010c4 	addi	r3,r16,67
41022564:	21000094 	ori	r4,r4,2
41022568:	00800044 	movi	r2,1
4102256c:	80800515 	stw	r2,20(r16)
41022570:	8100030d 	sth	r4,12(r16)
41022574:	80c00415 	stw	r3,16(r16)
41022578:	80c00015 	stw	r3,0(r16)
4102257c:	003faa06 	br	41022428 <__smakebuf_r+0x3c>

41022580 <memset>:
41022580:	008000c4 	movi	r2,3
41022584:	29403fcc 	andi	r5,r5,255
41022588:	2007883a 	mov	r3,r4
4102258c:	1180022e 	bgeu	r2,r6,41022598 <memset+0x18>
41022590:	2084703a 	and	r2,r4,r2
41022594:	10000826 	beq	r2,zero,410225b8 <memset+0x38>
41022598:	30000526 	beq	r6,zero,410225b0 <memset+0x30>
4102259c:	2805883a 	mov	r2,r5
410225a0:	30cd883a 	add	r6,r6,r3
410225a4:	18800005 	stb	r2,0(r3)
410225a8:	18c00044 	addi	r3,r3,1
410225ac:	19bffd1e 	bne	r3,r6,410225a4 <memset+0x24>
410225b0:	2005883a 	mov	r2,r4
410225b4:	f800283a 	ret
410225b8:	2804923a 	slli	r2,r5,8
410225bc:	020003c4 	movi	r8,15
410225c0:	200f883a 	mov	r7,r4
410225c4:	2884b03a 	or	r2,r5,r2
410225c8:	1006943a 	slli	r3,r2,16
410225cc:	10c6b03a 	or	r3,r2,r3
410225d0:	41800a2e 	bgeu	r8,r6,410225fc <memset+0x7c>
410225d4:	4005883a 	mov	r2,r8
410225d8:	31bffc04 	addi	r6,r6,-16
410225dc:	38c00015 	stw	r3,0(r7)
410225e0:	38c00115 	stw	r3,4(r7)
410225e4:	38c00215 	stw	r3,8(r7)
410225e8:	38c00315 	stw	r3,12(r7)
410225ec:	39c00404 	addi	r7,r7,16
410225f0:	11bff936 	bltu	r2,r6,410225d8 <memset+0x58>
410225f4:	008000c4 	movi	r2,3
410225f8:	1180052e 	bgeu	r2,r6,41022610 <memset+0x90>
410225fc:	31bfff04 	addi	r6,r6,-4
41022600:	008000c4 	movi	r2,3
41022604:	38c00015 	stw	r3,0(r7)
41022608:	39c00104 	addi	r7,r7,4
4102260c:	11bffb36 	bltu	r2,r6,410225fc <memset+0x7c>
41022610:	3807883a 	mov	r3,r7
41022614:	003fe006 	br	41022598 <memset+0x18>

41022618 <__sclose>:
41022618:	2940038f 	ldh	r5,14(r5)
4102261c:	10227dc1 	jmpi	410227dc <_close_r>

41022620 <__sseek>:
41022620:	defffe04 	addi	sp,sp,-8
41022624:	dc000015 	stw	r16,0(sp)
41022628:	2821883a 	mov	r16,r5
4102262c:	2940038f 	ldh	r5,14(r5)
41022630:	dfc00115 	stw	ra,4(sp)
41022634:	1022a540 	call	41022a54 <_lseek_r>
41022638:	1007883a 	mov	r3,r2
4102263c:	00bfffc4 	movi	r2,-1
41022640:	18800926 	beq	r3,r2,41022668 <__sseek+0x48>
41022644:	8080030b 	ldhu	r2,12(r16)
41022648:	80c01415 	stw	r3,80(r16)
4102264c:	10840014 	ori	r2,r2,4096
41022650:	8080030d 	sth	r2,12(r16)
41022654:	1805883a 	mov	r2,r3
41022658:	dfc00117 	ldw	ra,4(sp)
4102265c:	dc000017 	ldw	r16,0(sp)
41022660:	dec00204 	addi	sp,sp,8
41022664:	f800283a 	ret
41022668:	8080030b 	ldhu	r2,12(r16)
4102266c:	10bbffcc 	andi	r2,r2,61439
41022670:	8080030d 	sth	r2,12(r16)
41022674:	1805883a 	mov	r2,r3
41022678:	dfc00117 	ldw	ra,4(sp)
4102267c:	dc000017 	ldw	r16,0(sp)
41022680:	dec00204 	addi	sp,sp,8
41022684:	f800283a 	ret

41022688 <__swrite>:
41022688:	2880030b 	ldhu	r2,12(r5)
4102268c:	defffb04 	addi	sp,sp,-20
41022690:	dcc00315 	stw	r19,12(sp)
41022694:	1080400c 	andi	r2,r2,256
41022698:	dc800215 	stw	r18,8(sp)
4102269c:	dc400115 	stw	r17,4(sp)
410226a0:	dc000015 	stw	r16,0(sp)
410226a4:	3027883a 	mov	r19,r6
410226a8:	3825883a 	mov	r18,r7
410226ac:	dfc00415 	stw	ra,16(sp)
410226b0:	2821883a 	mov	r16,r5
410226b4:	000d883a 	mov	r6,zero
410226b8:	01c00084 	movi	r7,2
410226bc:	2023883a 	mov	r17,r4
410226c0:	10000226 	beq	r2,zero,410226cc <__swrite+0x44>
410226c4:	2940038f 	ldh	r5,14(r5)
410226c8:	1022a540 	call	41022a54 <_lseek_r>
410226cc:	8080030b 	ldhu	r2,12(r16)
410226d0:	8140038f 	ldh	r5,14(r16)
410226d4:	8809883a 	mov	r4,r17
410226d8:	10bbffcc 	andi	r2,r2,61439
410226dc:	980d883a 	mov	r6,r19
410226e0:	900f883a 	mov	r7,r18
410226e4:	8080030d 	sth	r2,12(r16)
410226e8:	dfc00417 	ldw	ra,16(sp)
410226ec:	dcc00317 	ldw	r19,12(sp)
410226f0:	dc800217 	ldw	r18,8(sp)
410226f4:	dc400117 	ldw	r17,4(sp)
410226f8:	dc000017 	ldw	r16,0(sp)
410226fc:	dec00504 	addi	sp,sp,20
41022700:	10227641 	jmpi	41022764 <_write_r>

41022704 <__sread>:
41022704:	defffe04 	addi	sp,sp,-8
41022708:	dc000015 	stw	r16,0(sp)
4102270c:	2821883a 	mov	r16,r5
41022710:	2940038f 	ldh	r5,14(r5)
41022714:	dfc00115 	stw	ra,4(sp)
41022718:	1022acc0 	call	41022acc <_read_r>
4102271c:	1007883a 	mov	r3,r2
41022720:	10000816 	blt	r2,zero,41022744 <__sread+0x40>
41022724:	80801417 	ldw	r2,80(r16)
41022728:	10c5883a 	add	r2,r2,r3
4102272c:	80801415 	stw	r2,80(r16)
41022730:	1805883a 	mov	r2,r3
41022734:	dfc00117 	ldw	ra,4(sp)
41022738:	dc000017 	ldw	r16,0(sp)
4102273c:	dec00204 	addi	sp,sp,8
41022740:	f800283a 	ret
41022744:	8080030b 	ldhu	r2,12(r16)
41022748:	10bbffcc 	andi	r2,r2,61439
4102274c:	8080030d 	sth	r2,12(r16)
41022750:	1805883a 	mov	r2,r3
41022754:	dfc00117 	ldw	ra,4(sp)
41022758:	dc000017 	ldw	r16,0(sp)
4102275c:	dec00204 	addi	sp,sp,8
41022760:	f800283a 	ret

41022764 <_write_r>:
41022764:	defffd04 	addi	sp,sp,-12
41022768:	dc000015 	stw	r16,0(sp)
4102276c:	04000034 	movhi	r16,0
41022770:	8406e504 	addi	r16,r16,7060
41022774:	dc400115 	stw	r17,4(sp)
41022778:	80000015 	stw	zero,0(r16)
4102277c:	2023883a 	mov	r17,r4
41022780:	2809883a 	mov	r4,r5
41022784:	300b883a 	mov	r5,r6
41022788:	380d883a 	mov	r6,r7
4102278c:	dfc00215 	stw	ra,8(sp)
41022790:	10234a40 	call	410234a4 <write>
41022794:	1007883a 	mov	r3,r2
41022798:	00bfffc4 	movi	r2,-1
4102279c:	18800626 	beq	r3,r2,410227b8 <_write_r+0x54>
410227a0:	1805883a 	mov	r2,r3
410227a4:	dfc00217 	ldw	ra,8(sp)
410227a8:	dc400117 	ldw	r17,4(sp)
410227ac:	dc000017 	ldw	r16,0(sp)
410227b0:	dec00304 	addi	sp,sp,12
410227b4:	f800283a 	ret
410227b8:	80800017 	ldw	r2,0(r16)
410227bc:	103ff826 	beq	r2,zero,410227a0 <_write_r+0x3c>
410227c0:	88800015 	stw	r2,0(r17)
410227c4:	1805883a 	mov	r2,r3
410227c8:	dfc00217 	ldw	ra,8(sp)
410227cc:	dc400117 	ldw	r17,4(sp)
410227d0:	dc000017 	ldw	r16,0(sp)
410227d4:	dec00304 	addi	sp,sp,12
410227d8:	f800283a 	ret

410227dc <_close_r>:
410227dc:	defffd04 	addi	sp,sp,-12
410227e0:	dc000015 	stw	r16,0(sp)
410227e4:	04000034 	movhi	r16,0
410227e8:	8406e504 	addi	r16,r16,7060
410227ec:	dc400115 	stw	r17,4(sp)
410227f0:	80000015 	stw	zero,0(r16)
410227f4:	2023883a 	mov	r17,r4
410227f8:	2809883a 	mov	r4,r5
410227fc:	dfc00215 	stw	ra,8(sp)
41022800:	1022b440 	call	41022b44 <close>
41022804:	1007883a 	mov	r3,r2
41022808:	00bfffc4 	movi	r2,-1
4102280c:	18800626 	beq	r3,r2,41022828 <_close_r+0x4c>
41022810:	1805883a 	mov	r2,r3
41022814:	dfc00217 	ldw	ra,8(sp)
41022818:	dc400117 	ldw	r17,4(sp)
4102281c:	dc000017 	ldw	r16,0(sp)
41022820:	dec00304 	addi	sp,sp,12
41022824:	f800283a 	ret
41022828:	80800017 	ldw	r2,0(r16)
4102282c:	103ff826 	beq	r2,zero,41022810 <_close_r+0x34>
41022830:	88800015 	stw	r2,0(r17)
41022834:	1805883a 	mov	r2,r3
41022838:	dfc00217 	ldw	ra,8(sp)
4102283c:	dc400117 	ldw	r17,4(sp)
41022840:	dc000017 	ldw	r16,0(sp)
41022844:	dec00304 	addi	sp,sp,12
41022848:	f800283a 	ret

4102284c <_fclose_r>:
4102284c:	defffc04 	addi	sp,sp,-16
41022850:	dc400115 	stw	r17,4(sp)
41022854:	dc000015 	stw	r16,0(sp)
41022858:	dfc00315 	stw	ra,12(sp)
4102285c:	dc800215 	stw	r18,8(sp)
41022860:	2821883a 	mov	r16,r5
41022864:	2023883a 	mov	r17,r4
41022868:	28002926 	beq	r5,zero,41022910 <_fclose_r+0xc4>
4102286c:	1021bc40 	call	41021bc4 <__sfp_lock_acquire>
41022870:	88000226 	beq	r17,zero,4102287c <_fclose_r+0x30>
41022874:	88800e17 	ldw	r2,56(r17)
41022878:	10002d26 	beq	r2,zero,41022930 <_fclose_r+0xe4>
4102287c:	8080030f 	ldh	r2,12(r16)
41022880:	10002226 	beq	r2,zero,4102290c <_fclose_r+0xc0>
41022884:	8809883a 	mov	r4,r17
41022888:	800b883a 	mov	r5,r16
4102288c:	102193c0 	call	4102193c <_fflush_r>
41022890:	1025883a 	mov	r18,r2
41022894:	80800b17 	ldw	r2,44(r16)
41022898:	10000426 	beq	r2,zero,410228ac <_fclose_r+0x60>
4102289c:	81400717 	ldw	r5,28(r16)
410228a0:	8809883a 	mov	r4,r17
410228a4:	103ee83a 	callr	r2
410228a8:	10002a16 	blt	r2,zero,41022954 <_fclose_r+0x108>
410228ac:	8080030b 	ldhu	r2,12(r16)
410228b0:	1080200c 	andi	r2,r2,128
410228b4:	1000231e 	bne	r2,zero,41022944 <_fclose_r+0xf8>
410228b8:	81400c17 	ldw	r5,48(r16)
410228bc:	28000526 	beq	r5,zero,410228d4 <_fclose_r+0x88>
410228c0:	80801004 	addi	r2,r16,64
410228c4:	28800226 	beq	r5,r2,410228d0 <_fclose_r+0x84>
410228c8:	8809883a 	mov	r4,r17
410228cc:	1021f580 	call	41021f58 <_free_r>
410228d0:	80000c15 	stw	zero,48(r16)
410228d4:	81401117 	ldw	r5,68(r16)
410228d8:	28000326 	beq	r5,zero,410228e8 <_fclose_r+0x9c>
410228dc:	8809883a 	mov	r4,r17
410228e0:	1021f580 	call	41021f58 <_free_r>
410228e4:	80001115 	stw	zero,68(r16)
410228e8:	8000030d 	sth	zero,12(r16)
410228ec:	1021bc80 	call	41021bc8 <__sfp_lock_release>
410228f0:	9005883a 	mov	r2,r18
410228f4:	dfc00317 	ldw	ra,12(sp)
410228f8:	dc800217 	ldw	r18,8(sp)
410228fc:	dc400117 	ldw	r17,4(sp)
41022900:	dc000017 	ldw	r16,0(sp)
41022904:	dec00404 	addi	sp,sp,16
41022908:	f800283a 	ret
4102290c:	1021bc80 	call	41021bc8 <__sfp_lock_release>
41022910:	0025883a 	mov	r18,zero
41022914:	9005883a 	mov	r2,r18
41022918:	dfc00317 	ldw	ra,12(sp)
4102291c:	dc800217 	ldw	r18,8(sp)
41022920:	dc400117 	ldw	r17,4(sp)
41022924:	dc000017 	ldw	r16,0(sp)
41022928:	dec00404 	addi	sp,sp,16
4102292c:	f800283a 	ret
41022930:	8809883a 	mov	r4,r17
41022934:	1021bd40 	call	41021bd4 <__sinit>
41022938:	8080030f 	ldh	r2,12(r16)
4102293c:	103fd11e 	bne	r2,zero,41022884 <_fclose_r+0x38>
41022940:	003ff206 	br	4102290c <_fclose_r+0xc0>
41022944:	81400417 	ldw	r5,16(r16)
41022948:	8809883a 	mov	r4,r17
4102294c:	1021f580 	call	41021f58 <_free_r>
41022950:	003fd906 	br	410228b8 <_fclose_r+0x6c>
41022954:	04bfffc4 	movi	r18,-1
41022958:	003fd406 	br	410228ac <_fclose_r+0x60>

4102295c <fclose>:
4102295c:	00800034 	movhi	r2,0
41022960:	1086d004 	addi	r2,r2,6976
41022964:	200b883a 	mov	r5,r4
41022968:	11000017 	ldw	r4,0(r2)
4102296c:	102284c1 	jmpi	4102284c <_fclose_r>

41022970 <_fstat_r>:
41022970:	defffd04 	addi	sp,sp,-12
41022974:	dc000015 	stw	r16,0(sp)
41022978:	04000034 	movhi	r16,0
4102297c:	8406e504 	addi	r16,r16,7060
41022980:	dc400115 	stw	r17,4(sp)
41022984:	80000015 	stw	zero,0(r16)
41022988:	2023883a 	mov	r17,r4
4102298c:	2809883a 	mov	r4,r5
41022990:	300b883a 	mov	r5,r6
41022994:	dfc00215 	stw	ra,8(sp)
41022998:	1022ccc0 	call	41022ccc <fstat>
4102299c:	1007883a 	mov	r3,r2
410229a0:	00bfffc4 	movi	r2,-1
410229a4:	18800626 	beq	r3,r2,410229c0 <_fstat_r+0x50>
410229a8:	1805883a 	mov	r2,r3
410229ac:	dfc00217 	ldw	ra,8(sp)
410229b0:	dc400117 	ldw	r17,4(sp)
410229b4:	dc000017 	ldw	r16,0(sp)
410229b8:	dec00304 	addi	sp,sp,12
410229bc:	f800283a 	ret
410229c0:	80800017 	ldw	r2,0(r16)
410229c4:	103ff826 	beq	r2,zero,410229a8 <_fstat_r+0x38>
410229c8:	88800015 	stw	r2,0(r17)
410229cc:	1805883a 	mov	r2,r3
410229d0:	dfc00217 	ldw	ra,8(sp)
410229d4:	dc400117 	ldw	r17,4(sp)
410229d8:	dc000017 	ldw	r16,0(sp)
410229dc:	dec00304 	addi	sp,sp,12
410229e0:	f800283a 	ret

410229e4 <_isatty_r>:
410229e4:	defffd04 	addi	sp,sp,-12
410229e8:	dc000015 	stw	r16,0(sp)
410229ec:	04000034 	movhi	r16,0
410229f0:	8406e504 	addi	r16,r16,7060
410229f4:	dc400115 	stw	r17,4(sp)
410229f8:	80000015 	stw	zero,0(r16)
410229fc:	2023883a 	mov	r17,r4
41022a00:	2809883a 	mov	r4,r5
41022a04:	dfc00215 	stw	ra,8(sp)
41022a08:	1022e000 	call	41022e00 <isatty>
41022a0c:	1007883a 	mov	r3,r2
41022a10:	00bfffc4 	movi	r2,-1
41022a14:	18800626 	beq	r3,r2,41022a30 <_isatty_r+0x4c>
41022a18:	1805883a 	mov	r2,r3
41022a1c:	dfc00217 	ldw	ra,8(sp)
41022a20:	dc400117 	ldw	r17,4(sp)
41022a24:	dc000017 	ldw	r16,0(sp)
41022a28:	dec00304 	addi	sp,sp,12
41022a2c:	f800283a 	ret
41022a30:	80800017 	ldw	r2,0(r16)
41022a34:	103ff826 	beq	r2,zero,41022a18 <_isatty_r+0x34>
41022a38:	88800015 	stw	r2,0(r17)
41022a3c:	1805883a 	mov	r2,r3
41022a40:	dfc00217 	ldw	ra,8(sp)
41022a44:	dc400117 	ldw	r17,4(sp)
41022a48:	dc000017 	ldw	r16,0(sp)
41022a4c:	dec00304 	addi	sp,sp,12
41022a50:	f800283a 	ret

41022a54 <_lseek_r>:
41022a54:	defffd04 	addi	sp,sp,-12
41022a58:	dc000015 	stw	r16,0(sp)
41022a5c:	04000034 	movhi	r16,0
41022a60:	8406e504 	addi	r16,r16,7060
41022a64:	dc400115 	stw	r17,4(sp)
41022a68:	80000015 	stw	zero,0(r16)
41022a6c:	2023883a 	mov	r17,r4
41022a70:	2809883a 	mov	r4,r5
41022a74:	300b883a 	mov	r5,r6
41022a78:	380d883a 	mov	r6,r7
41022a7c:	dfc00215 	stw	ra,8(sp)
41022a80:	102300c0 	call	4102300c <lseek>
41022a84:	1007883a 	mov	r3,r2
41022a88:	00bfffc4 	movi	r2,-1
41022a8c:	18800626 	beq	r3,r2,41022aa8 <_lseek_r+0x54>
41022a90:	1805883a 	mov	r2,r3
41022a94:	dfc00217 	ldw	ra,8(sp)
41022a98:	dc400117 	ldw	r17,4(sp)
41022a9c:	dc000017 	ldw	r16,0(sp)
41022aa0:	dec00304 	addi	sp,sp,12
41022aa4:	f800283a 	ret
41022aa8:	80800017 	ldw	r2,0(r16)
41022aac:	103ff826 	beq	r2,zero,41022a90 <_lseek_r+0x3c>
41022ab0:	88800015 	stw	r2,0(r17)
41022ab4:	1805883a 	mov	r2,r3
41022ab8:	dfc00217 	ldw	ra,8(sp)
41022abc:	dc400117 	ldw	r17,4(sp)
41022ac0:	dc000017 	ldw	r16,0(sp)
41022ac4:	dec00304 	addi	sp,sp,12
41022ac8:	f800283a 	ret

41022acc <_read_r>:
41022acc:	defffd04 	addi	sp,sp,-12
41022ad0:	dc000015 	stw	r16,0(sp)
41022ad4:	04000034 	movhi	r16,0
41022ad8:	8406e504 	addi	r16,r16,7060
41022adc:	dc400115 	stw	r17,4(sp)
41022ae0:	80000015 	stw	zero,0(r16)
41022ae4:	2023883a 	mov	r17,r4
41022ae8:	2809883a 	mov	r4,r5
41022aec:	300b883a 	mov	r5,r6
41022af0:	380d883a 	mov	r6,r7
41022af4:	dfc00215 	stw	ra,8(sp)
41022af8:	10232080 	call	41023208 <read>
41022afc:	1007883a 	mov	r3,r2
41022b00:	00bfffc4 	movi	r2,-1
41022b04:	18800626 	beq	r3,r2,41022b20 <_read_r+0x54>
41022b08:	1805883a 	mov	r2,r3
41022b0c:	dfc00217 	ldw	ra,8(sp)
41022b10:	dc400117 	ldw	r17,4(sp)
41022b14:	dc000017 	ldw	r16,0(sp)
41022b18:	dec00304 	addi	sp,sp,12
41022b1c:	f800283a 	ret
41022b20:	80800017 	ldw	r2,0(r16)
41022b24:	103ff826 	beq	r2,zero,41022b08 <_read_r+0x3c>
41022b28:	88800015 	stw	r2,0(r17)
41022b2c:	1805883a 	mov	r2,r3
41022b30:	dfc00217 	ldw	ra,8(sp)
41022b34:	dc400117 	ldw	r17,4(sp)
41022b38:	dc000017 	ldw	r16,0(sp)
41022b3c:	dec00304 	addi	sp,sp,12
41022b40:	f800283a 	ret

41022b44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
41022b44:	defff804 	addi	sp,sp,-32
41022b48:	dfc00715 	stw	ra,28(sp)
41022b4c:	df000615 	stw	fp,24(sp)
41022b50:	df000604 	addi	fp,sp,24
41022b54:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
41022b58:	e0bffc17 	ldw	r2,-16(fp)
41022b5c:	1004803a 	cmplt	r2,r2,zero
41022b60:	1000081e 	bne	r2,zero,41022b84 <close+0x40>
41022b64:	e0bffc17 	ldw	r2,-16(fp)
41022b68:	10800324 	muli	r2,r2,12
41022b6c:	1007883a 	mov	r3,r2
41022b70:	00800034 	movhi	r2,0
41022b74:	10822104 	addi	r2,r2,2180
41022b78:	1887883a 	add	r3,r3,r2
41022b7c:	e0ffff15 	stw	r3,-4(fp)
41022b80:	00000106 	br	41022b88 <close+0x44>
41022b84:	e03fff15 	stw	zero,-4(fp)
41022b88:	e0bfff17 	ldw	r2,-4(fp)
41022b8c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
41022b90:	e0bffb17 	ldw	r2,-20(fp)
41022b94:	1005003a 	cmpeq	r2,r2,zero
41022b98:	10001d1e 	bne	r2,zero,41022c10 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
41022b9c:	e0bffb17 	ldw	r2,-20(fp)
41022ba0:	10800017 	ldw	r2,0(r2)
41022ba4:	10800417 	ldw	r2,16(r2)
41022ba8:	1005003a 	cmpeq	r2,r2,zero
41022bac:	1000071e 	bne	r2,zero,41022bcc <close+0x88>
41022bb0:	e0bffb17 	ldw	r2,-20(fp)
41022bb4:	10800017 	ldw	r2,0(r2)
41022bb8:	10800417 	ldw	r2,16(r2)
41022bbc:	e13ffb17 	ldw	r4,-20(fp)
41022bc0:	103ee83a 	callr	r2
41022bc4:	e0bffe15 	stw	r2,-8(fp)
41022bc8:	00000106 	br	41022bd0 <close+0x8c>
41022bcc:	e03ffe15 	stw	zero,-8(fp)
41022bd0:	e0bffe17 	ldw	r2,-8(fp)
41022bd4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
41022bd8:	e13ffc17 	ldw	r4,-16(fp)
41022bdc:	10233880 	call	41023388 <alt_release_fd>
    if (rval < 0)
41022be0:	e0bffa17 	ldw	r2,-24(fp)
41022be4:	1004403a 	cmpge	r2,r2,zero
41022be8:	1000071e 	bne	r2,zero,41022c08 <close+0xc4>
    {
      ALT_ERRNO = -rval;
41022bec:	1022c400 	call	41022c40 <alt_get_errno>
41022bf0:	e0fffa17 	ldw	r3,-24(fp)
41022bf4:	00c7c83a 	sub	r3,zero,r3
41022bf8:	10c00015 	stw	r3,0(r2)
      return -1;
41022bfc:	00bfffc4 	movi	r2,-1
41022c00:	e0bffd15 	stw	r2,-12(fp)
41022c04:	00000806 	br	41022c28 <close+0xe4>
    }
    return 0;
41022c08:	e03ffd15 	stw	zero,-12(fp)
41022c0c:	00000606 	br	41022c28 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
41022c10:	1022c400 	call	41022c40 <alt_get_errno>
41022c14:	1007883a 	mov	r3,r2
41022c18:	00801444 	movi	r2,81
41022c1c:	18800015 	stw	r2,0(r3)
    return -1;
41022c20:	00bfffc4 	movi	r2,-1
41022c24:	e0bffd15 	stw	r2,-12(fp)
41022c28:	e0bffd17 	ldw	r2,-12(fp)
  }
}
41022c2c:	e037883a 	mov	sp,fp
41022c30:	dfc00117 	ldw	ra,4(sp)
41022c34:	df000017 	ldw	fp,0(sp)
41022c38:	dec00204 	addi	sp,sp,8
41022c3c:	f800283a 	ret

41022c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41022c40:	defffd04 	addi	sp,sp,-12
41022c44:	dfc00215 	stw	ra,8(sp)
41022c48:	df000115 	stw	fp,4(sp)
41022c4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41022c50:	00800034 	movhi	r2,0
41022c54:	1086d904 	addi	r2,r2,7012
41022c58:	10800017 	ldw	r2,0(r2)
41022c5c:	1005003a 	cmpeq	r2,r2,zero
41022c60:	1000061e 	bne	r2,zero,41022c7c <alt_get_errno+0x3c>
41022c64:	00800034 	movhi	r2,0
41022c68:	1086d904 	addi	r2,r2,7012
41022c6c:	10800017 	ldw	r2,0(r2)
41022c70:	103ee83a 	callr	r2
41022c74:	e0bfff15 	stw	r2,-4(fp)
41022c78:	00000306 	br	41022c88 <alt_get_errno+0x48>
41022c7c:	00800034 	movhi	r2,0
41022c80:	1086e504 	addi	r2,r2,7060
41022c84:	e0bfff15 	stw	r2,-4(fp)
41022c88:	e0bfff17 	ldw	r2,-4(fp)
}
41022c8c:	e037883a 	mov	sp,fp
41022c90:	dfc00117 	ldw	ra,4(sp)
41022c94:	df000017 	ldw	fp,0(sp)
41022c98:	dec00204 	addi	sp,sp,8
41022c9c:	f800283a 	ret

41022ca0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
41022ca0:	defffc04 	addi	sp,sp,-16
41022ca4:	df000315 	stw	fp,12(sp)
41022ca8:	df000304 	addi	fp,sp,12
41022cac:	e13ffd15 	stw	r4,-12(fp)
41022cb0:	e17ffe15 	stw	r5,-8(fp)
41022cb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
41022cb8:	e0bfff17 	ldw	r2,-4(fp)
}
41022cbc:	e037883a 	mov	sp,fp
41022cc0:	df000017 	ldw	fp,0(sp)
41022cc4:	dec00104 	addi	sp,sp,4
41022cc8:	f800283a 	ret

41022ccc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
41022ccc:	defff904 	addi	sp,sp,-28
41022cd0:	dfc00615 	stw	ra,24(sp)
41022cd4:	df000515 	stw	fp,20(sp)
41022cd8:	df000504 	addi	fp,sp,20
41022cdc:	e13ffc15 	stw	r4,-16(fp)
41022ce0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41022ce4:	e0bffc17 	ldw	r2,-16(fp)
41022ce8:	1004803a 	cmplt	r2,r2,zero
41022cec:	1000081e 	bne	r2,zero,41022d10 <fstat+0x44>
41022cf0:	e0bffc17 	ldw	r2,-16(fp)
41022cf4:	10800324 	muli	r2,r2,12
41022cf8:	1007883a 	mov	r3,r2
41022cfc:	00800034 	movhi	r2,0
41022d00:	10822104 	addi	r2,r2,2180
41022d04:	1887883a 	add	r3,r3,r2
41022d08:	e0ffff15 	stw	r3,-4(fp)
41022d0c:	00000106 	br	41022d14 <fstat+0x48>
41022d10:	e03fff15 	stw	zero,-4(fp)
41022d14:	e0bfff17 	ldw	r2,-4(fp)
41022d18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
41022d1c:	e0bffb17 	ldw	r2,-20(fp)
41022d20:	1005003a 	cmpeq	r2,r2,zero
41022d24:	1000121e 	bne	r2,zero,41022d70 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
41022d28:	e0bffb17 	ldw	r2,-20(fp)
41022d2c:	10800017 	ldw	r2,0(r2)
41022d30:	10800817 	ldw	r2,32(r2)
41022d34:	1005003a 	cmpeq	r2,r2,zero
41022d38:	1000081e 	bne	r2,zero,41022d5c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
41022d3c:	e0bffb17 	ldw	r2,-20(fp)
41022d40:	10800017 	ldw	r2,0(r2)
41022d44:	10800817 	ldw	r2,32(r2)
41022d48:	e13ffb17 	ldw	r4,-20(fp)
41022d4c:	e17ffd17 	ldw	r5,-12(fp)
41022d50:	103ee83a 	callr	r2
41022d54:	e0bffe15 	stw	r2,-8(fp)
41022d58:	00000b06 	br	41022d88 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
41022d5c:	e0fffd17 	ldw	r3,-12(fp)
41022d60:	00880004 	movi	r2,8192
41022d64:	18800115 	stw	r2,4(r3)
      return 0;
41022d68:	e03ffe15 	stw	zero,-8(fp)
41022d6c:	00000606 	br	41022d88 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
41022d70:	1022da00 	call	41022da0 <alt_get_errno>
41022d74:	1007883a 	mov	r3,r2
41022d78:	00801444 	movi	r2,81
41022d7c:	18800015 	stw	r2,0(r3)
    return -1;
41022d80:	00bfffc4 	movi	r2,-1
41022d84:	e0bffe15 	stw	r2,-8(fp)
41022d88:	e0bffe17 	ldw	r2,-8(fp)
  }
}
41022d8c:	e037883a 	mov	sp,fp
41022d90:	dfc00117 	ldw	ra,4(sp)
41022d94:	df000017 	ldw	fp,0(sp)
41022d98:	dec00204 	addi	sp,sp,8
41022d9c:	f800283a 	ret

41022da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41022da0:	defffd04 	addi	sp,sp,-12
41022da4:	dfc00215 	stw	ra,8(sp)
41022da8:	df000115 	stw	fp,4(sp)
41022dac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41022db0:	00800034 	movhi	r2,0
41022db4:	1086d904 	addi	r2,r2,7012
41022db8:	10800017 	ldw	r2,0(r2)
41022dbc:	1005003a 	cmpeq	r2,r2,zero
41022dc0:	1000061e 	bne	r2,zero,41022ddc <alt_get_errno+0x3c>
41022dc4:	00800034 	movhi	r2,0
41022dc8:	1086d904 	addi	r2,r2,7012
41022dcc:	10800017 	ldw	r2,0(r2)
41022dd0:	103ee83a 	callr	r2
41022dd4:	e0bfff15 	stw	r2,-4(fp)
41022dd8:	00000306 	br	41022de8 <alt_get_errno+0x48>
41022ddc:	00800034 	movhi	r2,0
41022de0:	1086e504 	addi	r2,r2,7060
41022de4:	e0bfff15 	stw	r2,-4(fp)
41022de8:	e0bfff17 	ldw	r2,-4(fp)
}
41022dec:	e037883a 	mov	sp,fp
41022df0:	dfc00117 	ldw	ra,4(sp)
41022df4:	df000017 	ldw	fp,0(sp)
41022df8:	dec00204 	addi	sp,sp,8
41022dfc:	f800283a 	ret

41022e00 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
41022e00:	deffeb04 	addi	sp,sp,-84
41022e04:	dfc01415 	stw	ra,80(sp)
41022e08:	df001315 	stw	fp,76(sp)
41022e0c:	df001304 	addi	fp,sp,76
41022e10:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41022e14:	e0bffd17 	ldw	r2,-12(fp)
41022e18:	1004803a 	cmplt	r2,r2,zero
41022e1c:	1000081e 	bne	r2,zero,41022e40 <isatty+0x40>
41022e20:	e0bffd17 	ldw	r2,-12(fp)
41022e24:	10800324 	muli	r2,r2,12
41022e28:	1007883a 	mov	r3,r2
41022e2c:	00800034 	movhi	r2,0
41022e30:	10822104 	addi	r2,r2,2180
41022e34:	1887883a 	add	r3,r3,r2
41022e38:	e0ffff15 	stw	r3,-4(fp)
41022e3c:	00000106 	br	41022e44 <isatty+0x44>
41022e40:	e03fff15 	stw	zero,-4(fp)
41022e44:	e0bfff17 	ldw	r2,-4(fp)
41022e48:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
41022e4c:	e0bfed17 	ldw	r2,-76(fp)
41022e50:	1005003a 	cmpeq	r2,r2,zero
41022e54:	10000f1e 	bne	r2,zero,41022e94 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
41022e58:	e0bfed17 	ldw	r2,-76(fp)
41022e5c:	10800017 	ldw	r2,0(r2)
41022e60:	10800817 	ldw	r2,32(r2)
41022e64:	1004c03a 	cmpne	r2,r2,zero
41022e68:	1000031e 	bne	r2,zero,41022e78 <isatty+0x78>
    {
      return 1;
41022e6c:	00800044 	movi	r2,1
41022e70:	e0bffe15 	stw	r2,-8(fp)
41022e74:	00000c06 	br	41022ea8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
41022e78:	e17fee04 	addi	r5,fp,-72
41022e7c:	e13ffd17 	ldw	r4,-12(fp)
41022e80:	1022ccc0 	call	41022ccc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
41022e84:	e0bfef17 	ldw	r2,-68(fp)
41022e88:	10880020 	cmpeqi	r2,r2,8192
41022e8c:	e0bffe15 	stw	r2,-8(fp)
41022e90:	00000506 	br	41022ea8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
41022e94:	1022ec00 	call	41022ec0 <alt_get_errno>
41022e98:	1007883a 	mov	r3,r2
41022e9c:	00801444 	movi	r2,81
41022ea0:	18800015 	stw	r2,0(r3)
    return 0;
41022ea4:	e03ffe15 	stw	zero,-8(fp)
41022ea8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
41022eac:	e037883a 	mov	sp,fp
41022eb0:	dfc00117 	ldw	ra,4(sp)
41022eb4:	df000017 	ldw	fp,0(sp)
41022eb8:	dec00204 	addi	sp,sp,8
41022ebc:	f800283a 	ret

41022ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41022ec0:	defffd04 	addi	sp,sp,-12
41022ec4:	dfc00215 	stw	ra,8(sp)
41022ec8:	df000115 	stw	fp,4(sp)
41022ecc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41022ed0:	00800034 	movhi	r2,0
41022ed4:	1086d904 	addi	r2,r2,7012
41022ed8:	10800017 	ldw	r2,0(r2)
41022edc:	1005003a 	cmpeq	r2,r2,zero
41022ee0:	1000061e 	bne	r2,zero,41022efc <alt_get_errno+0x3c>
41022ee4:	00800034 	movhi	r2,0
41022ee8:	1086d904 	addi	r2,r2,7012
41022eec:	10800017 	ldw	r2,0(r2)
41022ef0:	103ee83a 	callr	r2
41022ef4:	e0bfff15 	stw	r2,-4(fp)
41022ef8:	00000306 	br	41022f08 <alt_get_errno+0x48>
41022efc:	00800034 	movhi	r2,0
41022f00:	1086e504 	addi	r2,r2,7060
41022f04:	e0bfff15 	stw	r2,-4(fp)
41022f08:	e0bfff17 	ldw	r2,-4(fp)
}
41022f0c:	e037883a 	mov	sp,fp
41022f10:	dfc00117 	ldw	ra,4(sp)
41022f14:	df000017 	ldw	fp,0(sp)
41022f18:	dec00204 	addi	sp,sp,8
41022f1c:	f800283a 	ret

41022f20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
41022f20:	defffe04 	addi	sp,sp,-8
41022f24:	dfc00115 	stw	ra,4(sp)
41022f28:	df000015 	stw	fp,0(sp)
41022f2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
41022f30:	011040b4 	movhi	r4,16642
41022f34:	21191a04 	addi	r4,r4,25704
41022f38:	01400034 	movhi	r5,0
41022f3c:	29401504 	addi	r5,r5,84
41022f40:	01800034 	movhi	r6,0
41022f44:	3186e204 	addi	r6,r6,7048
41022f48:	1022fa00 	call	41022fa0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
41022f4c:	011040b4 	movhi	r4,16642
41022f50:	21000804 	addi	r4,r4,32
41022f54:	015040b4 	movhi	r5,16642
41022f58:	29400804 	addi	r5,r5,32
41022f5c:	019040b4 	movhi	r6,16642
41022f60:	31806d04 	addi	r6,r6,436
41022f64:	1022fa00 	call	41022fa0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
41022f68:	011040b4 	movhi	r4,16642
41022f6c:	21190504 	addi	r4,r4,25620
41022f70:	01400034 	movhi	r5,0
41022f74:	29400004 	addi	r5,r5,0
41022f78:	01800034 	movhi	r6,0
41022f7c:	31801504 	addi	r6,r6,84
41022f80:	1022fa00 	call	41022fa0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
41022f84:	10250bc0 	call	410250bc <alt_dcache_flush_all>
  alt_icache_flush_all();
41022f88:	10254e00 	call	410254e0 <alt_icache_flush_all>
}
41022f8c:	e037883a 	mov	sp,fp
41022f90:	dfc00117 	ldw	ra,4(sp)
41022f94:	df000017 	ldw	fp,0(sp)
41022f98:	dec00204 	addi	sp,sp,8
41022f9c:	f800283a 	ret

41022fa0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
41022fa0:	defffc04 	addi	sp,sp,-16
41022fa4:	df000315 	stw	fp,12(sp)
41022fa8:	df000304 	addi	fp,sp,12
41022fac:	e13ffd15 	stw	r4,-12(fp)
41022fb0:	e17ffe15 	stw	r5,-8(fp)
41022fb4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
41022fb8:	e0fffe17 	ldw	r3,-8(fp)
41022fbc:	e0bffd17 	ldw	r2,-12(fp)
41022fc0:	18800e26 	beq	r3,r2,41022ffc <alt_load_section+0x5c>
  {
    while( to != end )
41022fc4:	00000a06 	br	41022ff0 <alt_load_section+0x50>
    {
      *to++ = *from++;
41022fc8:	e0bffd17 	ldw	r2,-12(fp)
41022fcc:	10c00017 	ldw	r3,0(r2)
41022fd0:	e0bffe17 	ldw	r2,-8(fp)
41022fd4:	10c00015 	stw	r3,0(r2)
41022fd8:	e0bffe17 	ldw	r2,-8(fp)
41022fdc:	10800104 	addi	r2,r2,4
41022fe0:	e0bffe15 	stw	r2,-8(fp)
41022fe4:	e0bffd17 	ldw	r2,-12(fp)
41022fe8:	10800104 	addi	r2,r2,4
41022fec:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
41022ff0:	e0fffe17 	ldw	r3,-8(fp)
41022ff4:	e0bfff17 	ldw	r2,-4(fp)
41022ff8:	18bff31e 	bne	r3,r2,41022fc8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
41022ffc:	e037883a 	mov	sp,fp
41023000:	df000017 	ldw	fp,0(sp)
41023004:	dec00104 	addi	sp,sp,4
41023008:	f800283a 	ret

4102300c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
4102300c:	defff804 	addi	sp,sp,-32
41023010:	dfc00715 	stw	ra,28(sp)
41023014:	df000615 	stw	fp,24(sp)
41023018:	df000604 	addi	fp,sp,24
4102301c:	e13ffc15 	stw	r4,-16(fp)
41023020:	e17ffd15 	stw	r5,-12(fp)
41023024:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
41023028:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4102302c:	e0bffc17 	ldw	r2,-16(fp)
41023030:	1004803a 	cmplt	r2,r2,zero
41023034:	1000081e 	bne	r2,zero,41023058 <lseek+0x4c>
41023038:	e0bffc17 	ldw	r2,-16(fp)
4102303c:	10800324 	muli	r2,r2,12
41023040:	1007883a 	mov	r3,r2
41023044:	00800034 	movhi	r2,0
41023048:	10822104 	addi	r2,r2,2180
4102304c:	1887883a 	add	r3,r3,r2
41023050:	e0ffff15 	stw	r3,-4(fp)
41023054:	00000106 	br	4102305c <lseek+0x50>
41023058:	e03fff15 	stw	zero,-4(fp)
4102305c:	e0bfff17 	ldw	r2,-4(fp)
41023060:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
41023064:	e0bffb17 	ldw	r2,-20(fp)
41023068:	1005003a 	cmpeq	r2,r2,zero
4102306c:	1000111e 	bne	r2,zero,410230b4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
41023070:	e0bffb17 	ldw	r2,-20(fp)
41023074:	10800017 	ldw	r2,0(r2)
41023078:	10800717 	ldw	r2,28(r2)
4102307c:	1005003a 	cmpeq	r2,r2,zero
41023080:	1000091e 	bne	r2,zero,410230a8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
41023084:	e0bffb17 	ldw	r2,-20(fp)
41023088:	10800017 	ldw	r2,0(r2)
4102308c:	10800717 	ldw	r2,28(r2)
41023090:	e13ffb17 	ldw	r4,-20(fp)
41023094:	e17ffd17 	ldw	r5,-12(fp)
41023098:	e1bffe17 	ldw	r6,-8(fp)
4102309c:	103ee83a 	callr	r2
410230a0:	e0bffa15 	stw	r2,-24(fp)
410230a4:	00000506 	br	410230bc <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
410230a8:	00bfde84 	movi	r2,-134
410230ac:	e0bffa15 	stw	r2,-24(fp)
410230b0:	00000206 	br	410230bc <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
410230b4:	00bfebc4 	movi	r2,-81
410230b8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
410230bc:	e0bffa17 	ldw	r2,-24(fp)
410230c0:	1004403a 	cmpge	r2,r2,zero
410230c4:	1000071e 	bne	r2,zero,410230e4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
410230c8:	10230fc0 	call	410230fc <alt_get_errno>
410230cc:	1007883a 	mov	r3,r2
410230d0:	e0bffa17 	ldw	r2,-24(fp)
410230d4:	0085c83a 	sub	r2,zero,r2
410230d8:	18800015 	stw	r2,0(r3)
    rc = -1;
410230dc:	00bfffc4 	movi	r2,-1
410230e0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
410230e4:	e0bffa17 	ldw	r2,-24(fp)
}
410230e8:	e037883a 	mov	sp,fp
410230ec:	dfc00117 	ldw	ra,4(sp)
410230f0:	df000017 	ldw	fp,0(sp)
410230f4:	dec00204 	addi	sp,sp,8
410230f8:	f800283a 	ret

410230fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
410230fc:	defffd04 	addi	sp,sp,-12
41023100:	dfc00215 	stw	ra,8(sp)
41023104:	df000115 	stw	fp,4(sp)
41023108:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
4102310c:	00800034 	movhi	r2,0
41023110:	1086d904 	addi	r2,r2,7012
41023114:	10800017 	ldw	r2,0(r2)
41023118:	1005003a 	cmpeq	r2,r2,zero
4102311c:	1000061e 	bne	r2,zero,41023138 <alt_get_errno+0x3c>
41023120:	00800034 	movhi	r2,0
41023124:	1086d904 	addi	r2,r2,7012
41023128:	10800017 	ldw	r2,0(r2)
4102312c:	103ee83a 	callr	r2
41023130:	e0bfff15 	stw	r2,-4(fp)
41023134:	00000306 	br	41023144 <alt_get_errno+0x48>
41023138:	00800034 	movhi	r2,0
4102313c:	1086e504 	addi	r2,r2,7060
41023140:	e0bfff15 	stw	r2,-4(fp)
41023144:	e0bfff17 	ldw	r2,-4(fp)
}
41023148:	e037883a 	mov	sp,fp
4102314c:	dfc00117 	ldw	ra,4(sp)
41023150:	df000017 	ldw	fp,0(sp)
41023154:	dec00204 	addi	sp,sp,8
41023158:	f800283a 	ret

4102315c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
4102315c:	defffd04 	addi	sp,sp,-12
41023160:	dfc00215 	stw	ra,8(sp)
41023164:	df000115 	stw	fp,4(sp)
41023168:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
4102316c:	0009883a 	mov	r4,zero
41023170:	10236240 	call	41023624 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
41023174:	10236580 	call	41023658 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
41023178:	01000034 	movhi	r4,0
4102317c:	21000a04 	addi	r4,r4,40
41023180:	01400034 	movhi	r5,0
41023184:	29400a04 	addi	r5,r5,40
41023188:	01800034 	movhi	r6,0
4102318c:	31800a04 	addi	r6,r6,40
41023190:	10258a00 	call	410258a0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
41023194:	10253840 	call	41025384 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
41023198:	011040b4 	movhi	r4,16642
4102319c:	2114fa04 	addi	r4,r4,21480
410231a0:	10260080 	call	41026008 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
410231a4:	d1201617 	ldw	r4,-32680(gp)
410231a8:	d1601717 	ldw	r5,-32676(gp)
410231ac:	d1a01817 	ldw	r6,-32672(gp)
410231b0:	10202000 	call	41020200 <main>
410231b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
410231b8:	01000044 	movi	r4,1
410231bc:	1022b440 	call	41022b44 <close>
  exit (result);
410231c0:	e13fff17 	ldw	r4,-4(fp)
410231c4:	102601c0 	call	4102601c <exit>

410231c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
410231c8:	defffe04 	addi	sp,sp,-8
410231cc:	df000115 	stw	fp,4(sp)
410231d0:	df000104 	addi	fp,sp,4
410231d4:	e13fff15 	stw	r4,-4(fp)
}
410231d8:	e037883a 	mov	sp,fp
410231dc:	df000017 	ldw	fp,0(sp)
410231e0:	dec00104 	addi	sp,sp,4
410231e4:	f800283a 	ret

410231e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
410231e8:	defffe04 	addi	sp,sp,-8
410231ec:	df000115 	stw	fp,4(sp)
410231f0:	df000104 	addi	fp,sp,4
410231f4:	e13fff15 	stw	r4,-4(fp)
}
410231f8:	e037883a 	mov	sp,fp
410231fc:	df000017 	ldw	fp,0(sp)
41023200:	dec00104 	addi	sp,sp,4
41023204:	f800283a 	ret

41023208 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
41023208:	defff704 	addi	sp,sp,-36
4102320c:	dfc00815 	stw	ra,32(sp)
41023210:	df000715 	stw	fp,28(sp)
41023214:	df000704 	addi	fp,sp,28
41023218:	e13ffb15 	stw	r4,-20(fp)
4102321c:	e17ffc15 	stw	r5,-16(fp)
41023220:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
41023224:	e0bffb17 	ldw	r2,-20(fp)
41023228:	1004803a 	cmplt	r2,r2,zero
4102322c:	1000081e 	bne	r2,zero,41023250 <read+0x48>
41023230:	e0bffb17 	ldw	r2,-20(fp)
41023234:	10800324 	muli	r2,r2,12
41023238:	1007883a 	mov	r3,r2
4102323c:	00800034 	movhi	r2,0
41023240:	10822104 	addi	r2,r2,2180
41023244:	1887883a 	add	r3,r3,r2
41023248:	e0ffff15 	stw	r3,-4(fp)
4102324c:	00000106 	br	41023254 <read+0x4c>
41023250:	e03fff15 	stw	zero,-4(fp)
41023254:	e0bfff17 	ldw	r2,-4(fp)
41023258:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
4102325c:	e0bffa17 	ldw	r2,-24(fp)
41023260:	1005003a 	cmpeq	r2,r2,zero
41023264:	1000241e 	bne	r2,zero,410232f8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
41023268:	e0bffa17 	ldw	r2,-24(fp)
4102326c:	10800217 	ldw	r2,8(r2)
41023270:	108000cc 	andi	r2,r2,3
41023274:	10800060 	cmpeqi	r2,r2,1
41023278:	10001a1e 	bne	r2,zero,410232e4 <read+0xdc>
4102327c:	e0bffa17 	ldw	r2,-24(fp)
41023280:	10800017 	ldw	r2,0(r2)
41023284:	10800517 	ldw	r2,20(r2)
41023288:	1005003a 	cmpeq	r2,r2,zero
4102328c:	1000151e 	bne	r2,zero,410232e4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
41023290:	e0bffa17 	ldw	r2,-24(fp)
41023294:	10800017 	ldw	r2,0(r2)
41023298:	10800517 	ldw	r2,20(r2)
4102329c:	e17ffc17 	ldw	r5,-16(fp)
410232a0:	e1bffd17 	ldw	r6,-12(fp)
410232a4:	e13ffa17 	ldw	r4,-24(fp)
410232a8:	103ee83a 	callr	r2
410232ac:	e0bff915 	stw	r2,-28(fp)
410232b0:	e0bff917 	ldw	r2,-28(fp)
410232b4:	1004403a 	cmpge	r2,r2,zero
410232b8:	1000071e 	bne	r2,zero,410232d8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
410232bc:	10233280 	call	41023328 <alt_get_errno>
410232c0:	e0fff917 	ldw	r3,-28(fp)
410232c4:	00c7c83a 	sub	r3,zero,r3
410232c8:	10c00015 	stw	r3,0(r2)
          return -1;
410232cc:	00bfffc4 	movi	r2,-1
410232d0:	e0bffe15 	stw	r2,-8(fp)
410232d4:	00000e06 	br	41023310 <read+0x108>
        }
        return rval;
410232d8:	e0bff917 	ldw	r2,-28(fp)
410232dc:	e0bffe15 	stw	r2,-8(fp)
410232e0:	00000b06 	br	41023310 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
410232e4:	10233280 	call	41023328 <alt_get_errno>
410232e8:	1007883a 	mov	r3,r2
410232ec:	00800344 	movi	r2,13
410232f0:	18800015 	stw	r2,0(r3)
410232f4:	00000406 	br	41023308 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
410232f8:	10233280 	call	41023328 <alt_get_errno>
410232fc:	1007883a 	mov	r3,r2
41023300:	00801444 	movi	r2,81
41023304:	18800015 	stw	r2,0(r3)
  }
  return -1;
41023308:	00bfffc4 	movi	r2,-1
4102330c:	e0bffe15 	stw	r2,-8(fp)
41023310:	e0bffe17 	ldw	r2,-8(fp)
}
41023314:	e037883a 	mov	sp,fp
41023318:	dfc00117 	ldw	ra,4(sp)
4102331c:	df000017 	ldw	fp,0(sp)
41023320:	dec00204 	addi	sp,sp,8
41023324:	f800283a 	ret

41023328 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41023328:	defffd04 	addi	sp,sp,-12
4102332c:	dfc00215 	stw	ra,8(sp)
41023330:	df000115 	stw	fp,4(sp)
41023334:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41023338:	00800034 	movhi	r2,0
4102333c:	1086d904 	addi	r2,r2,7012
41023340:	10800017 	ldw	r2,0(r2)
41023344:	1005003a 	cmpeq	r2,r2,zero
41023348:	1000061e 	bne	r2,zero,41023364 <alt_get_errno+0x3c>
4102334c:	00800034 	movhi	r2,0
41023350:	1086d904 	addi	r2,r2,7012
41023354:	10800017 	ldw	r2,0(r2)
41023358:	103ee83a 	callr	r2
4102335c:	e0bfff15 	stw	r2,-4(fp)
41023360:	00000306 	br	41023370 <alt_get_errno+0x48>
41023364:	00800034 	movhi	r2,0
41023368:	1086e504 	addi	r2,r2,7060
4102336c:	e0bfff15 	stw	r2,-4(fp)
41023370:	e0bfff17 	ldw	r2,-4(fp)
}
41023374:	e037883a 	mov	sp,fp
41023378:	dfc00117 	ldw	ra,4(sp)
4102337c:	df000017 	ldw	fp,0(sp)
41023380:	dec00204 	addi	sp,sp,8
41023384:	f800283a 	ret

41023388 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
41023388:	defffe04 	addi	sp,sp,-8
4102338c:	df000115 	stw	fp,4(sp)
41023390:	df000104 	addi	fp,sp,4
41023394:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
41023398:	e0bfff17 	ldw	r2,-4(fp)
4102339c:	108000d0 	cmplti	r2,r2,3
410233a0:	10000d1e 	bne	r2,zero,410233d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
410233a4:	e0bfff17 	ldw	r2,-4(fp)
410233a8:	00c00034 	movhi	r3,0
410233ac:	18c22104 	addi	r3,r3,2180
410233b0:	10800324 	muli	r2,r2,12
410233b4:	10c5883a 	add	r2,r2,r3
410233b8:	10800204 	addi	r2,r2,8
410233bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
410233c0:	e0bfff17 	ldw	r2,-4(fp)
410233c4:	00c00034 	movhi	r3,0
410233c8:	18c22104 	addi	r3,r3,2180
410233cc:	10800324 	muli	r2,r2,12
410233d0:	10c5883a 	add	r2,r2,r3
410233d4:	10000015 	stw	zero,0(r2)
  }
}
410233d8:	e037883a 	mov	sp,fp
410233dc:	df000017 	ldw	fp,0(sp)
410233e0:	dec00104 	addi	sp,sp,4
410233e4:	f800283a 	ret

410233e8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
410233e8:	defff804 	addi	sp,sp,-32
410233ec:	df000715 	stw	fp,28(sp)
410233f0:	df000704 	addi	fp,sp,28
410233f4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
410233f8:	0005303a 	rdctl	r2,status
410233fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41023400:	e0fffb17 	ldw	r3,-20(fp)
41023404:	00bfff84 	movi	r2,-2
41023408:	1884703a 	and	r2,r3,r2
4102340c:	1001703a 	wrctl	status,r2
  
  return context;
41023410:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
41023414:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
41023418:	d0a00a17 	ldw	r2,-32728(gp)
4102341c:	10c000c4 	addi	r3,r2,3
41023420:	00bfff04 	movi	r2,-4
41023424:	1884703a 	and	r2,r3,r2
41023428:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
4102342c:	d0e00a17 	ldw	r3,-32728(gp)
41023430:	e0bffe17 	ldw	r2,-8(fp)
41023434:	1887883a 	add	r3,r3,r2
41023438:	00900034 	movhi	r2,16384
4102343c:	10800004 	addi	r2,r2,0
41023440:	10c0072e 	bgeu	r2,r3,41023460 <sbrk+0x78>
41023444:	e0bffd17 	ldw	r2,-12(fp)
41023448:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4102344c:	e0bffa17 	ldw	r2,-24(fp)
41023450:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
41023454:	00bfffc4 	movi	r2,-1
41023458:	e0bfff15 	stw	r2,-4(fp)
4102345c:	00000c06 	br	41023490 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
41023460:	d0a00a17 	ldw	r2,-32728(gp)
41023464:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
41023468:	d0e00a17 	ldw	r3,-32728(gp)
4102346c:	e0bffe17 	ldw	r2,-8(fp)
41023470:	1885883a 	add	r2,r3,r2
41023474:	d0a00a15 	stw	r2,-32728(gp)
41023478:	e0bffd17 	ldw	r2,-12(fp)
4102347c:	e0bff915 	stw	r2,-28(fp)
41023480:	e0bff917 	ldw	r2,-28(fp)
41023484:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
41023488:	e0bffc17 	ldw	r2,-16(fp)
4102348c:	e0bfff15 	stw	r2,-4(fp)
41023490:	e0bfff17 	ldw	r2,-4(fp)
} 
41023494:	e037883a 	mov	sp,fp
41023498:	df000017 	ldw	fp,0(sp)
4102349c:	dec00104 	addi	sp,sp,4
410234a0:	f800283a 	ret

410234a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
410234a4:	defff704 	addi	sp,sp,-36
410234a8:	dfc00815 	stw	ra,32(sp)
410234ac:	df000715 	stw	fp,28(sp)
410234b0:	df000704 	addi	fp,sp,28
410234b4:	e13ffb15 	stw	r4,-20(fp)
410234b8:	e17ffc15 	stw	r5,-16(fp)
410234bc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
410234c0:	e0bffb17 	ldw	r2,-20(fp)
410234c4:	1004803a 	cmplt	r2,r2,zero
410234c8:	1000081e 	bne	r2,zero,410234ec <write+0x48>
410234cc:	e0bffb17 	ldw	r2,-20(fp)
410234d0:	10800324 	muli	r2,r2,12
410234d4:	1007883a 	mov	r3,r2
410234d8:	00800034 	movhi	r2,0
410234dc:	10822104 	addi	r2,r2,2180
410234e0:	1887883a 	add	r3,r3,r2
410234e4:	e0ffff15 	stw	r3,-4(fp)
410234e8:	00000106 	br	410234f0 <write+0x4c>
410234ec:	e03fff15 	stw	zero,-4(fp)
410234f0:	e0bfff17 	ldw	r2,-4(fp)
410234f4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
410234f8:	e0bffa17 	ldw	r2,-24(fp)
410234fc:	1005003a 	cmpeq	r2,r2,zero
41023500:	1000241e 	bne	r2,zero,41023594 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
41023504:	e0bffa17 	ldw	r2,-24(fp)
41023508:	10800217 	ldw	r2,8(r2)
4102350c:	108000cc 	andi	r2,r2,3
41023510:	1005003a 	cmpeq	r2,r2,zero
41023514:	10001a1e 	bne	r2,zero,41023580 <write+0xdc>
41023518:	e0bffa17 	ldw	r2,-24(fp)
4102351c:	10800017 	ldw	r2,0(r2)
41023520:	10800617 	ldw	r2,24(r2)
41023524:	1005003a 	cmpeq	r2,r2,zero
41023528:	1000151e 	bne	r2,zero,41023580 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
4102352c:	e0bffa17 	ldw	r2,-24(fp)
41023530:	10800017 	ldw	r2,0(r2)
41023534:	10800617 	ldw	r2,24(r2)
41023538:	e17ffc17 	ldw	r5,-16(fp)
4102353c:	e1bffd17 	ldw	r6,-12(fp)
41023540:	e13ffa17 	ldw	r4,-24(fp)
41023544:	103ee83a 	callr	r2
41023548:	e0bff915 	stw	r2,-28(fp)
4102354c:	e0bff917 	ldw	r2,-28(fp)
41023550:	1004403a 	cmpge	r2,r2,zero
41023554:	1000071e 	bne	r2,zero,41023574 <write+0xd0>
      {
        ALT_ERRNO = -rval;
41023558:	10235c40 	call	410235c4 <alt_get_errno>
4102355c:	e0fff917 	ldw	r3,-28(fp)
41023560:	00c7c83a 	sub	r3,zero,r3
41023564:	10c00015 	stw	r3,0(r2)
        return -1;
41023568:	00bfffc4 	movi	r2,-1
4102356c:	e0bffe15 	stw	r2,-8(fp)
41023570:	00000e06 	br	410235ac <write+0x108>
      }
      return rval;
41023574:	e0bff917 	ldw	r2,-28(fp)
41023578:	e0bffe15 	stw	r2,-8(fp)
4102357c:	00000b06 	br	410235ac <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
41023580:	10235c40 	call	410235c4 <alt_get_errno>
41023584:	1007883a 	mov	r3,r2
41023588:	00800344 	movi	r2,13
4102358c:	18800015 	stw	r2,0(r3)
41023590:	00000406 	br	410235a4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
41023594:	10235c40 	call	410235c4 <alt_get_errno>
41023598:	1007883a 	mov	r3,r2
4102359c:	00801444 	movi	r2,81
410235a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
410235a4:	00bfffc4 	movi	r2,-1
410235a8:	e0bffe15 	stw	r2,-8(fp)
410235ac:	e0bffe17 	ldw	r2,-8(fp)
}
410235b0:	e037883a 	mov	sp,fp
410235b4:	dfc00117 	ldw	ra,4(sp)
410235b8:	df000017 	ldw	fp,0(sp)
410235bc:	dec00204 	addi	sp,sp,8
410235c0:	f800283a 	ret

410235c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
410235c4:	defffd04 	addi	sp,sp,-12
410235c8:	dfc00215 	stw	ra,8(sp)
410235cc:	df000115 	stw	fp,4(sp)
410235d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
410235d4:	00800034 	movhi	r2,0
410235d8:	1086d904 	addi	r2,r2,7012
410235dc:	10800017 	ldw	r2,0(r2)
410235e0:	1005003a 	cmpeq	r2,r2,zero
410235e4:	1000061e 	bne	r2,zero,41023600 <alt_get_errno+0x3c>
410235e8:	00800034 	movhi	r2,0
410235ec:	1086d904 	addi	r2,r2,7012
410235f0:	10800017 	ldw	r2,0(r2)
410235f4:	103ee83a 	callr	r2
410235f8:	e0bfff15 	stw	r2,-4(fp)
410235fc:	00000306 	br	4102360c <alt_get_errno+0x48>
41023600:	00800034 	movhi	r2,0
41023604:	1086e504 	addi	r2,r2,7060
41023608:	e0bfff15 	stw	r2,-4(fp)
4102360c:	e0bfff17 	ldw	r2,-4(fp)
}
41023610:	e037883a 	mov	sp,fp
41023614:	dfc00117 	ldw	ra,4(sp)
41023618:	df000017 	ldw	fp,0(sp)
4102361c:	dec00204 	addi	sp,sp,8
41023620:	f800283a 	ret

41023624 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
41023624:	defffd04 	addi	sp,sp,-12
41023628:	dfc00215 	stw	ra,8(sp)
4102362c:	df000115 	stw	fp,4(sp)
41023630:	df000104 	addi	fp,sp,4
41023634:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
41023638:	1025d800 	call	41025d80 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
4102363c:	00800044 	movi	r2,1
41023640:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
41023644:	e037883a 	mov	sp,fp
41023648:	dfc00117 	ldw	ra,4(sp)
4102364c:	df000017 	ldw	fp,0(sp)
41023650:	dec00204 	addi	sp,sp,8
41023654:	f800283a 	ret

41023658 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
41023658:	defffd04 	addi	sp,sp,-12
4102365c:	dfc00215 	stw	ra,8(sp)
41023660:	df000115 	stw	fp,4(sp)
41023664:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
41023668:	01100034 	movhi	r4,16384
4102366c:	000b883a 	mov	r5,zero
41023670:	01800044 	movi	r6,1
41023674:	01c0fa04 	movi	r7,1000
41023678:	1024ed80 	call	41024ed8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_DMA_INIT ( DMA, dma);
4102367c:	00800084 	movi	r2,2
41023680:	d8800015 	stw	r2,0(sp)
41023684:	01000034 	movhi	r4,0
41023688:	2102aa04 	addi	r4,r4,2728
4102368c:	01400034 	movhi	r5,0
41023690:	2942b104 	addi	r5,r5,2756
41023694:	01904134 	movhi	r6,16644
41023698:	31840004 	addi	r6,r6,4096
4102369c:	000f883a 	mov	r7,zero
410236a0:	102429c0 	call	4102429c <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
410236a4:	01000034 	movhi	r4,0
410236a8:	2102c204 	addi	r4,r4,2824
410236ac:	000b883a 	mov	r5,zero
410236b0:	000d883a 	mov	r6,zero
410236b4:	10245040 	call	41024504 <altera_avalon_jtag_uart_init>
410236b8:	01000034 	movhi	r4,0
410236bc:	2102b804 	addi	r4,r4,2784
410236c0:	10236d80 	call	410236d8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
410236c4:	e037883a 	mov	sp,fp
410236c8:	dfc00117 	ldw	ra,4(sp)
410236cc:	df000017 	ldw	fp,0(sp)
410236d0:	dec00204 	addi	sp,sp,8
410236d4:	f800283a 	ret

410236d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
410236d8:	defffd04 	addi	sp,sp,-12
410236dc:	dfc00215 	stw	ra,8(sp)
410236e0:	df000115 	stw	fp,4(sp)
410236e4:	df000104 	addi	fp,sp,4
410236e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
410236ec:	e13fff17 	ldw	r4,-4(fp)
410236f0:	01400034 	movhi	r5,0
410236f4:	2946d604 	addi	r5,r5,7000
410236f8:	10251000 	call	41025100 <alt_dev_llist_insert>
}
410236fc:	e037883a 	mov	sp,fp
41023700:	dfc00117 	ldw	ra,4(sp)
41023704:	df000017 	ldw	fp,0(sp)
41023708:	dec00204 	addi	sp,sp,8
4102370c:	f800283a 	ret

41023710 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
41023710:	defff904 	addi	sp,sp,-28
41023714:	df000615 	stw	fp,24(sp)
41023718:	df000604 	addi	fp,sp,24
4102371c:	e13ffc15 	stw	r4,-16(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
41023720:	e0bffc17 	ldw	r2,-16(fp)
41023724:	10c00117 	ldw	r3,4(r2)
41023728:	e0bffc17 	ldw	r2,-16(fp)
4102372c:	10800217 	ldw	r2,8(r2)
41023730:	18803926 	beq	r3,r2,41023818 <alt_avalon_dma_launch_bidir+0x108>
41023734:	e0bffc17 	ldw	r2,-16(fp)
41023738:	10c00317 	ldw	r3,12(r2)
4102373c:	e0bffc17 	ldw	r2,-16(fp)
41023740:	10800417 	ldw	r2,16(r2)
41023744:	18803426 	beq	r3,r2,41023818 <alt_avalon_dma_launch_bidir+0x108>
  {
    priv->active = 1;
41023748:	e0fffc17 	ldw	r3,-16(fp)
4102374c:	00800044 	movi	r2,1
41023750:	18800815 	stw	r2,32(r3)

    tx_slot = &priv->tx_buf[priv->tx_start];
41023754:	e0bffc17 	ldw	r2,-16(fp)
41023758:	10c00904 	addi	r3,r2,36
4102375c:	e0bffc17 	ldw	r2,-16(fp)
41023760:	10800117 	ldw	r2,4(r2)
41023764:	1004913a 	slli	r2,r2,4
41023768:	1885883a 	add	r2,r3,r2
4102376c:	e0bffb15 	stw	r2,-20(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
41023770:	e0bffc17 	ldw	r2,-16(fp)
41023774:	10c01904 	addi	r3,r2,100
41023778:	e0bffc17 	ldw	r2,-16(fp)
4102377c:	10800317 	ldw	r2,12(r2)
41023780:	1004913a 	slli	r2,r2,4
41023784:	1885883a 	add	r2,r3,r2
41023788:	e0bffa15 	stw	r2,-24(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
4102378c:	e0bffc17 	ldw	r2,-16(fp)
41023790:	10800017 	ldw	r2,0(r2)
41023794:	11000104 	addi	r4,r2,4
41023798:	e0bffb17 	ldw	r2,-20(fp)
4102379c:	10800017 	ldw	r2,0(r2)
410237a0:	1007883a 	mov	r3,r2
410237a4:	2005883a 	mov	r2,r4
410237a8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
410237ac:	e0bffc17 	ldw	r2,-16(fp)
410237b0:	10800017 	ldw	r2,0(r2)
410237b4:	11000204 	addi	r4,r2,8
410237b8:	e0bffa17 	ldw	r2,-24(fp)
410237bc:	10800017 	ldw	r2,0(r2)
410237c0:	1007883a 	mov	r3,r2
410237c4:	2005883a 	mov	r2,r4
410237c8:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
410237cc:	e0bffc17 	ldw	r2,-16(fp)
410237d0:	10800017 	ldw	r2,0(r2)
410237d4:	10800304 	addi	r2,r2,12
410237d8:	e0bfff15 	stw	r2,-4(fp)
410237dc:	e0bffb17 	ldw	r2,-20(fp)
410237e0:	10c00117 	ldw	r3,4(r2)
410237e4:	e0bffa17 	ldw	r2,-24(fp)
410237e8:	10800117 	ldw	r2,4(r2)
410237ec:	e0bffe15 	stw	r2,-8(fp)
410237f0:	e0fffd15 	stw	r3,-12(fp)
410237f4:	e0bffe17 	ldw	r2,-8(fp)
410237f8:	e0fffd17 	ldw	r3,-12(fp)
410237fc:	10c0022e 	bgeu	r2,r3,41023808 <alt_avalon_dma_launch_bidir+0xf8>
41023800:	e0bffe17 	ldw	r2,-8(fp)
41023804:	e0bffd15 	stw	r2,-12(fp)
41023808:	e0fffd17 	ldw	r3,-12(fp)
4102380c:	e0bfff17 	ldw	r2,-4(fp)
41023810:	10c00035 	stwio	r3,0(r2)
void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
41023814:	00000206 	br	41023820 <alt_avalon_dma_launch_bidir+0x110>
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
41023818:	e0bffc17 	ldw	r2,-16(fp)
4102381c:	10000815 	stw	zero,32(r2)
  }
}
41023820:	e037883a 	mov	sp,fp
41023824:	df000017 	ldw	fp,0(sp)
41023828:	dec00104 	addi	sp,sp,4
4102382c:	f800283a 	ret

41023830 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
41023830:	defffd04 	addi	sp,sp,-12
41023834:	df000215 	stw	fp,8(sp)
41023838:	df000204 	addi	fp,sp,8
4102383c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
41023840:	e0bfff17 	ldw	r2,-4(fp)
41023844:	10c00117 	ldw	r3,4(r2)
41023848:	e0bfff17 	ldw	r2,-4(fp)
4102384c:	10800217 	ldw	r2,8(r2)
41023850:	18801b26 	beq	r3,r2,410238c0 <alt_avalon_dma_launch_txonly+0x90>
  {
    priv->active = 1;
41023854:	e0ffff17 	ldw	r3,-4(fp)
41023858:	00800044 	movi	r2,1
4102385c:	18800815 	stw	r2,32(r3)
    tx_slot      = &priv->tx_buf[priv->tx_start];
41023860:	e0bfff17 	ldw	r2,-4(fp)
41023864:	10c00904 	addi	r3,r2,36
41023868:	e0bfff17 	ldw	r2,-4(fp)
4102386c:	10800117 	ldw	r2,4(r2)
41023870:	1004913a 	slli	r2,r2,4
41023874:	1885883a 	add	r2,r3,r2
41023878:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
4102387c:	e0bfff17 	ldw	r2,-4(fp)
41023880:	10800017 	ldw	r2,0(r2)
41023884:	11000104 	addi	r4,r2,4
41023888:	e0bffe17 	ldw	r2,-8(fp)
4102388c:	10800017 	ldw	r2,0(r2)
41023890:	1007883a 	mov	r3,r2
41023894:	2005883a 	mov	r2,r4
41023898:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
4102389c:	e0bfff17 	ldw	r2,-4(fp)
410238a0:	10800017 	ldw	r2,0(r2)
410238a4:	11000304 	addi	r4,r2,12
410238a8:	e0bffe17 	ldw	r2,-8(fp)
410238ac:	10800117 	ldw	r2,4(r2)
410238b0:	1007883a 	mov	r3,r2
410238b4:	2005883a 	mov	r2,r4
410238b8:	10c00035 	stwio	r3,0(r2)
410238bc:	00000206 	br	410238c8 <alt_avalon_dma_launch_txonly+0x98>
  }
  else
  {
    priv->active = 0;
410238c0:	e0bfff17 	ldw	r2,-4(fp)
410238c4:	10000815 	stw	zero,32(r2)
  }
}
410238c8:	e037883a 	mov	sp,fp
410238cc:	df000017 	ldw	fp,0(sp)
410238d0:	dec00104 	addi	sp,sp,4
410238d4:	f800283a 	ret

410238d8 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
410238d8:	defffd04 	addi	sp,sp,-12
410238dc:	df000215 	stw	fp,8(sp)
410238e0:	df000204 	addi	fp,sp,8
410238e4:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
410238e8:	e0bfff17 	ldw	r2,-4(fp)
410238ec:	10c00317 	ldw	r3,12(r2)
410238f0:	e0bfff17 	ldw	r2,-4(fp)
410238f4:	10800417 	ldw	r2,16(r2)
410238f8:	18801b26 	beq	r3,r2,41023968 <alt_avalon_dma_launch_rxonly+0x90>
  {
    priv->active = 1;
410238fc:	e0ffff17 	ldw	r3,-4(fp)
41023900:	00800044 	movi	r2,1
41023904:	18800815 	stw	r2,32(r3)
    rx_slot      = &priv->rx_buf[priv->rx_start];
41023908:	e0bfff17 	ldw	r2,-4(fp)
4102390c:	10c01904 	addi	r3,r2,100
41023910:	e0bfff17 	ldw	r2,-4(fp)
41023914:	10800317 	ldw	r2,12(r2)
41023918:	1004913a 	slli	r2,r2,4
4102391c:	1885883a 	add	r2,r3,r2
41023920:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
41023924:	e0bfff17 	ldw	r2,-4(fp)
41023928:	10800017 	ldw	r2,0(r2)
4102392c:	11000204 	addi	r4,r2,8
41023930:	e0bffe17 	ldw	r2,-8(fp)
41023934:	10800017 	ldw	r2,0(r2)
41023938:	1007883a 	mov	r3,r2
4102393c:	2005883a 	mov	r2,r4
41023940:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
41023944:	e0bfff17 	ldw	r2,-4(fp)
41023948:	10800017 	ldw	r2,0(r2)
4102394c:	11000304 	addi	r4,r2,12
41023950:	e0bffe17 	ldw	r2,-8(fp)
41023954:	10800117 	ldw	r2,4(r2)
41023958:	1007883a 	mov	r3,r2
4102395c:	2005883a 	mov	r2,r4
41023960:	10c00035 	stwio	r3,0(r2)
41023964:	00000206 	br	41023970 <alt_avalon_dma_launch_rxonly+0x98>
  }
  else
  {
    priv->active = 0;
41023968:	e0bfff17 	ldw	r2,-4(fp)
4102396c:	10000815 	stw	zero,32(r2)
  }
}
41023970:	e037883a 	mov	sp,fp
41023974:	df000017 	ldw	fp,0(sp)
41023978:	dec00104 	addi	sp,sp,4
4102397c:	f800283a 	ret

41023980 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
41023980:	defff804 	addi	sp,sp,-32
41023984:	df000715 	stw	fp,28(sp)
41023988:	df000704 	addi	fp,sp,28
4102398c:	e13ffb15 	stw	r4,-20(fp)
41023990:	e17ffc15 	stw	r5,-16(fp)
41023994:	e1bffd15 	stw	r6,-12(fp)
  int     status = 0;
41023998:	e03ffa15 	stw	zero,-24(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
4102399c:	e0bffb17 	ldw	r2,-20(fp)
410239a0:	10c00117 	ldw	r3,4(r2)
410239a4:	e0bffb17 	ldw	r2,-20(fp)
410239a8:	10800217 	ldw	r2,8(r2)
410239ac:	18800b1e 	bne	r3,r2,410239dc <alt_avalon_dma_ioctl+0x5c>
410239b0:	e0bffb17 	ldw	r2,-20(fp)
410239b4:	10c00317 	ldw	r3,12(r2)
410239b8:	e0bffb17 	ldw	r2,-20(fp)
410239bc:	10800417 	ldw	r2,16(r2)
410239c0:	1880061e 	bne	r3,r2,410239dc <alt_avalon_dma_ioctl+0x5c>
410239c4:	e0bffb17 	ldw	r2,-20(fp)
410239c8:	10800017 	ldw	r2,0(r2)
410239cc:	10800304 	addi	r2,r2,12
410239d0:	10800037 	ldwio	r2,0(r2)
410239d4:	1005003a 	cmpeq	r2,r2,zero
410239d8:	1000031e 	bne	r2,zero,410239e8 <alt_avalon_dma_ioctl+0x68>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
410239dc:	00bffec4 	movi	r2,-5
410239e0:	e0bfff15 	stw	r2,-4(fp)
410239e4:	0000ca06 	br	41023d10 <alt_avalon_dma_ioctl+0x390>
  }

  /* Now process the ioctl. */

  switch (req)
410239e8:	e0bffc17 	ldw	r2,-16(fp)
410239ec:	108002a8 	cmpgeui	r2,r2,10
410239f0:	10007d1e 	bne	r2,zero,41023be8 <alt_avalon_dma_ioctl+0x268>
410239f4:	e0bffc17 	ldw	r2,-16(fp)
410239f8:	1085883a 	add	r2,r2,r2
410239fc:	1087883a 	add	r3,r2,r2
41023a00:	009040b4 	movhi	r2,16642
41023a04:	108e8504 	addi	r2,r2,14868
41023a08:	1885883a 	add	r2,r3,r2
41023a0c:	10800017 	ldw	r2,0(r2)
41023a10:	1000683a 	jmp	r2
41023a14:	41023be8 	cmpgeui	r4,r8,2287
41023a18:	41023a3c 	xorhi	r4,r8,2280
41023a1c:	41023a98 	cmpnei	r4,r8,2282
41023a20:	41023ac4 	addi	r4,r8,2283
41023a24:	41023b20 	cmpeqi	r4,r8,2284
41023a28:	41023b4c 	andi	r4,r8,2285
41023a2c:	41023b68 	cmpgeui	r4,r8,2285
41023a30:	41023b88 	cmpgei	r4,r8,2286
41023a34:	41023ba8 	cmpgeui	r4,r8,2286
41023a38:	41023bc8 	cmpgei	r4,r8,2287
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
41023a3c:	e0bffb17 	ldw	r2,-20(fp)
41023a40:	10800517 	ldw	r2,20(r2)
41023a44:	1080100c 	andi	r2,r2,64
41023a48:	1004c03a 	cmpne	r2,r2,zero
41023a4c:	10000f1e 	bne	r2,zero,41023a8c <alt_avalon_dma_ioctl+0x10c>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
41023a50:	e0bffb17 	ldw	r2,-20(fp)
41023a54:	10800017 	ldw	r2,0(r2)
41023a58:	10800104 	addi	r2,r2,4
41023a5c:	e0fffd17 	ldw	r3,-12(fp)
41023a60:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
41023a64:	e0bffb17 	ldw	r2,-20(fp)
41023a68:	10800517 	ldw	r2,20(r2)
41023a6c:	10c00814 	ori	r3,r2,32
41023a70:	e0bffb17 	ldw	r2,-20(fp)
41023a74:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
41023a78:	e0fffb17 	ldw	r3,-20(fp)
41023a7c:	009040b4 	movhi	r2,16642
41023a80:	108e3604 	addi	r2,r2,14552
41023a84:	18800715 	stw	r2,28(r3)
41023a88:	00005906 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
41023a8c:	00bffec4 	movi	r2,-5
41023a90:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
41023a94:	00005606 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
41023a98:	e0bffb17 	ldw	r2,-20(fp)
41023a9c:	10c00517 	ldw	r3,20(r2)
41023aa0:	00bff7c4 	movi	r2,-33
41023aa4:	1886703a 	and	r3,r3,r2
41023aa8:	e0bffb17 	ldw	r2,-20(fp)
41023aac:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
41023ab0:	e0fffb17 	ldw	r3,-20(fp)
41023ab4:	009040b4 	movhi	r2,16642
41023ab8:	108dc404 	addi	r2,r2,14096
41023abc:	18800715 	stw	r2,28(r3)
    break;
41023ac0:	00004b06 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
41023ac4:	e0bffb17 	ldw	r2,-20(fp)
41023ac8:	10800517 	ldw	r2,20(r2)
41023acc:	1080080c 	andi	r2,r2,32
41023ad0:	1004c03a 	cmpne	r2,r2,zero
41023ad4:	10000f1e 	bne	r2,zero,41023b14 <alt_avalon_dma_ioctl+0x194>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
41023ad8:	e0bffb17 	ldw	r2,-20(fp)
41023adc:	10800017 	ldw	r2,0(r2)
41023ae0:	10800204 	addi	r2,r2,8
41023ae4:	e0fffd17 	ldw	r3,-12(fp)
41023ae8:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
41023aec:	e0bffb17 	ldw	r2,-20(fp)
41023af0:	10800517 	ldw	r2,20(r2)
41023af4:	10c01014 	ori	r3,r2,64
41023af8:	e0bffb17 	ldw	r2,-20(fp)
41023afc:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
41023b00:	e0fffb17 	ldw	r3,-20(fp)
41023b04:	009040b4 	movhi	r2,16642
41023b08:	108e0c04 	addi	r2,r2,14384
41023b0c:	18800715 	stw	r2,28(r3)
41023b10:	00003706 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
41023b14:	00bffec4 	movi	r2,-5
41023b18:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
41023b1c:	00003406 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
41023b20:	e0bffb17 	ldw	r2,-20(fp)
41023b24:	10c00517 	ldw	r3,20(r2)
41023b28:	00bfefc4 	movi	r2,-65
41023b2c:	1886703a 	and	r3,r3,r2
41023b30:	e0bffb17 	ldw	r2,-20(fp)
41023b34:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
41023b38:	e0fffb17 	ldw	r3,-20(fp)
41023b3c:	009040b4 	movhi	r2,16642
41023b40:	108dc404 	addi	r2,r2,14096
41023b44:	18800715 	stw	r2,28(r3)
    break;
41023b48:	00002906 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
41023b4c:	e0bffb17 	ldw	r2,-20(fp)
41023b50:	10c00517 	ldw	r3,20(r2)
41023b54:	00bffc04 	movi	r2,-16
41023b58:	1886703a 	and	r3,r3,r2
41023b5c:	e0bffb17 	ldw	r2,-20(fp)
41023b60:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
41023b64:	00002206 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
41023b68:	e0bffb17 	ldw	r2,-20(fp)
41023b6c:	10c00517 	ldw	r3,20(r2)
41023b70:	00bffc04 	movi	r2,-16
41023b74:	1884703a 	and	r2,r3,r2
41023b78:	10c00054 	ori	r3,r2,1
41023b7c:	e0bffb17 	ldw	r2,-20(fp)
41023b80:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
41023b84:	00001a06 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
41023b88:	e0bffb17 	ldw	r2,-20(fp)
41023b8c:	10c00517 	ldw	r3,20(r2)
41023b90:	00bffc04 	movi	r2,-16
41023b94:	1884703a 	and	r2,r3,r2
41023b98:	10c000d4 	ori	r3,r2,3
41023b9c:	e0bffb17 	ldw	r2,-20(fp)
41023ba0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
41023ba4:	00001206 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
41023ba8:	e0bffb17 	ldw	r2,-20(fp)
41023bac:	10c00517 	ldw	r3,20(r2)
41023bb0:	00bffc04 	movi	r2,-16
41023bb4:	1884703a 	and	r2,r3,r2
41023bb8:	10c001d4 	ori	r3,r2,7
41023bbc:	e0bffb17 	ldw	r2,-20(fp)
41023bc0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
41023bc4:	00000a06 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
41023bc8:	e0bffb17 	ldw	r2,-20(fp)
41023bcc:	10c00517 	ldw	r3,20(r2)
41023bd0:	00bffc04 	movi	r2,-16
41023bd4:	1884703a 	and	r2,r3,r2
41023bd8:	10c003d4 	ori	r3,r2,15
41023bdc:	e0bffb17 	ldw	r2,-20(fp)
41023be0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
41023be4:	00000206 	br	41023bf0 <alt_avalon_dma_ioctl+0x270>
  default:
    status = -ENOTTY;
41023be8:	00bff9c4 	movi	r2,-25
41023bec:	e0bffa15 	stw	r2,-24(fp)
  }

  if (!status)
41023bf0:	e0bffa17 	ldw	r2,-24(fp)
41023bf4:	1004c03a 	cmpne	r2,r2,zero
41023bf8:	1000431e 	bne	r2,zero,41023d08 <alt_avalon_dma_ioctl+0x388>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
41023bfc:	e0bffb17 	ldw	r2,-20(fp)
41023c00:	10800517 	ldw	r2,20(r2)
41023c04:	108003cc 	andi	r2,r2,15
41023c08:	e0bffe15 	stw	r2,-8(fp)
41023c0c:	e0fffe17 	ldw	r3,-8(fp)
41023c10:	18800060 	cmpeqi	r2,r3,1
41023c14:	10000d1e 	bne	r2,zero,41023c4c <alt_avalon_dma_ioctl+0x2cc>
41023c18:	e0fffe17 	ldw	r3,-8(fp)
41023c1c:	18800070 	cmpltui	r2,r3,1
41023c20:	1000071e 	bne	r2,zero,41023c40 <alt_avalon_dma_ioctl+0x2c0>
41023c24:	e0fffe17 	ldw	r3,-8(fp)
41023c28:	188000e0 	cmpeqi	r2,r3,3
41023c2c:	10000a1e 	bne	r2,zero,41023c58 <alt_avalon_dma_ioctl+0x2d8>
41023c30:	e0fffe17 	ldw	r3,-8(fp)
41023c34:	188001e0 	cmpeqi	r2,r3,7
41023c38:	10000a1e 	bne	r2,zero,41023c64 <alt_avalon_dma_ioctl+0x2e4>
41023c3c:	00000c06 	br	41023c70 <alt_avalon_dma_ioctl+0x2f0>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
41023c40:	00800044 	movi	r2,1
41023c44:	e0bff915 	stw	r2,-28(fp)
       break;
41023c48:	00000b06 	br	41023c78 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
41023c4c:	00800084 	movi	r2,2
41023c50:	e0bff915 	stw	r2,-28(fp)
       break;
41023c54:	00000806 	br	41023c78 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
41023c58:	00800104 	movi	r2,4
41023c5c:	e0bff915 	stw	r2,-28(fp)
       break;
41023c60:	00000506 	br	41023c78 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
41023c64:	00810004 	movi	r2,1024
41023c68:	e0bff915 	stw	r2,-28(fp)
       break;
41023c6c:	00000206 	br	41023c78 <alt_avalon_dma_ioctl+0x2f8>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
41023c70:	00820004 	movi	r2,2048
41023c74:	e0bff915 	stw	r2,-28(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
41023c78:	e0bffb17 	ldw	r2,-20(fp)
41023c7c:	10800517 	ldw	r2,20(r2)
41023c80:	1080080c 	andi	r2,r2,32
41023c84:	1005003a 	cmpeq	r2,r2,zero
41023c88:	1000091e 	bne	r2,zero,41023cb0 <alt_avalon_dma_ioctl+0x330>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
41023c8c:	e0bffb17 	ldw	r2,-20(fp)
41023c90:	10800017 	ldw	r2,0(r2)
41023c94:	11000604 	addi	r4,r2,24
41023c98:	e0bff917 	ldw	r2,-28(fp)
41023c9c:	10807e14 	ori	r2,r2,504
41023ca0:	1007883a 	mov	r3,r2
41023ca4:	2005883a 	mov	r2,r4
41023ca8:	10c00035 	stwio	r3,0(r2)
41023cac:	00001606 	br	41023d08 <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
41023cb0:	e0bffb17 	ldw	r2,-20(fp)
41023cb4:	10800517 	ldw	r2,20(r2)
41023cb8:	1080100c 	andi	r2,r2,64
41023cbc:	1005003a 	cmpeq	r2,r2,zero
41023cc0:	1000091e 	bne	r2,zero,41023ce8 <alt_avalon_dma_ioctl+0x368>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
41023cc4:	e0bffb17 	ldw	r2,-20(fp)
41023cc8:	10800017 	ldw	r2,0(r2)
41023ccc:	11000604 	addi	r4,r2,24
41023cd0:	e0bff917 	ldw	r2,-28(fp)
41023cd4:	1080be14 	ori	r2,r2,760
41023cd8:	1007883a 	mov	r3,r2
41023cdc:	2005883a 	mov	r2,r4
41023ce0:	10c00035 	stwio	r3,0(r2)
41023ce4:	00000806 	br	41023d08 <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
41023ce8:	e0bffb17 	ldw	r2,-20(fp)
41023cec:	10800017 	ldw	r2,0(r2)
41023cf0:	11000604 	addi	r4,r2,24
41023cf4:	e0bff917 	ldw	r2,-28(fp)
41023cf8:	10803e14 	ori	r2,r2,248
41023cfc:	1007883a 	mov	r3,r2
41023d00:	2005883a 	mov	r2,r4
41023d04:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
41023d08:	e0bffa17 	ldw	r2,-24(fp)
41023d0c:	e0bfff15 	stw	r2,-4(fp)
41023d10:	e0bfff17 	ldw	r2,-4(fp)
}
41023d14:	e037883a 	mov	sp,fp
41023d18:	df000017 	ldw	fp,0(sp)
41023d1c:	dec00104 	addi	sp,sp,4
41023d20:	f800283a 	ret

41023d24 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
41023d24:	defffb04 	addi	sp,sp,-20
41023d28:	dfc00415 	stw	ra,16(sp)
41023d2c:	df000315 	stw	fp,12(sp)
41023d30:	df000304 	addi	fp,sp,12
41023d34:	e13ffd15 	stw	r4,-12(fp)
41023d38:	e17ffe15 	stw	r5,-8(fp)
41023d3c:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
41023d40:	e0bffd17 	ldw	r2,-12(fp)
41023d44:	11000617 	ldw	r4,24(r2)
41023d48:	e17ffe17 	ldw	r5,-8(fp)
41023d4c:	e1bfff17 	ldw	r6,-4(fp)
41023d50:	10239800 	call	41023980 <alt_avalon_dma_ioctl>
             req,
             arg);
}
41023d54:	e037883a 	mov	sp,fp
41023d58:	dfc00117 	ldw	ra,4(sp)
41023d5c:	df000017 	ldw	fp,0(sp)
41023d60:	dec00204 	addi	sp,sp,8
41023d64:	f800283a 	ret

41023d68 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
41023d68:	defffb04 	addi	sp,sp,-20
41023d6c:	dfc00415 	stw	ra,16(sp)
41023d70:	df000315 	stw	fp,12(sp)
41023d74:	df000304 	addi	fp,sp,12
41023d78:	e13ffd15 	stw	r4,-12(fp)
41023d7c:	e17ffe15 	stw	r5,-8(fp)
41023d80:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
41023d84:	e0bffd17 	ldw	r2,-12(fp)
41023d88:	11000617 	ldw	r4,24(r2)
41023d8c:	e17ffe17 	ldw	r5,-8(fp)
41023d90:	e1bfff17 	ldw	r6,-4(fp)
41023d94:	10239800 	call	41023980 <alt_avalon_dma_ioctl>
             req,
             arg);
}
41023d98:	e037883a 	mov	sp,fp
41023d9c:	dfc00117 	ldw	ra,4(sp)
41023da0:	df000017 	ldw	fp,0(sp)
41023da4:	dec00204 	addi	sp,sp,8
41023da8:	f800283a 	ret

41023dac <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
41023dac:	defff304 	addi	sp,sp,-52
41023db0:	dfc00c15 	stw	ra,48(sp)
41023db4:	df000b15 	stw	fp,44(sp)
41023db8:	df000b04 	addi	fp,sp,44
41023dbc:	e13ffb15 	stw	r4,-20(fp)
41023dc0:	e17ffc15 	stw	r5,-16(fp)
41023dc4:	e1bffd15 	stw	r6,-12(fp)
41023dc8:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
41023dcc:	e0bffb17 	ldw	r2,-20(fp)
41023dd0:	10800617 	ldw	r2,24(r2)
41023dd4:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
41023dd8:	e0bff517 	ldw	r2,-44(fp)
41023ddc:	10800517 	ldw	r2,20(r2)
41023de0:	108003cc 	andi	r2,r2,15
41023de4:	e0bff615 	stw	r2,-40(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
41023de8:	e0bffc17 	ldw	r2,-16(fp)
41023dec:	1007883a 	mov	r3,r2
41023df0:	e0bff617 	ldw	r2,-40(fp)
41023df4:	1884703a 	and	r2,r3,r2
41023df8:	1004c03a 	cmpne	r2,r2,zero
41023dfc:	1000091e 	bne	r2,zero,41023e24 <alt_avalon_dma_prepare+0x78>
41023e00:	e0fffd17 	ldw	r3,-12(fp)
41023e04:	e0bff617 	ldw	r2,-40(fp)
41023e08:	1884703a 	and	r2,r3,r2
41023e0c:	1004c03a 	cmpne	r2,r2,zero
41023e10:	1000041e 	bne	r2,zero,41023e24 <alt_avalon_dma_prepare+0x78>
41023e14:	e0bff517 	ldw	r2,-44(fp)
41023e18:	10c00617 	ldw	r3,24(r2)
41023e1c:	e0bffd17 	ldw	r2,-12(fp)
41023e20:	1880032e 	bgeu	r3,r2,41023e30 <alt_avalon_dma_prepare+0x84>
     (len > priv->max_length))
  {
    return -EINVAL;
41023e24:	00bffa84 	movi	r2,-22
41023e28:	e0bfff15 	stw	r2,-4(fp)
41023e2c:	00002e06 	br	41023ee8 <alt_avalon_dma_prepare+0x13c>
  }

  start = priv->rx_start;
41023e30:	e0bff517 	ldw	r2,-44(fp)
41023e34:	10800317 	ldw	r2,12(r2)
41023e38:	e0bff915 	stw	r2,-28(fp)
  end   = priv->rx_end;
41023e3c:	e0bff517 	ldw	r2,-44(fp)
41023e40:	10800417 	ldw	r2,16(r2)
41023e44:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->rx_buf[end];
41023e48:	e0bff517 	ldw	r2,-44(fp)
41023e4c:	10c01904 	addi	r3,r2,100
41023e50:	e0bff817 	ldw	r2,-32(fp)
41023e54:	1004913a 	slli	r2,r2,4
41023e58:	1885883a 	add	r2,r3,r2
41023e5c:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
41023e60:	e0bff817 	ldw	r2,-32(fp)
41023e64:	10800044 	addi	r2,r2,1
41023e68:	108000cc 	andi	r2,r2,3
41023e6c:	e0bff715 	stw	r2,-36(fp)

  if (next == start)
41023e70:	e0fff717 	ldw	r3,-36(fp)
41023e74:	e0bff917 	ldw	r2,-28(fp)
41023e78:	1880031e 	bne	r3,r2,41023e88 <alt_avalon_dma_prepare+0xdc>
  {
    return -ENOSPC;
41023e7c:	00bff904 	movi	r2,-28
41023e80:	e0bfff15 	stw	r2,-4(fp)
41023e84:	00001806 	br	41023ee8 <alt_avalon_dma_prepare+0x13c>
  }

  slot->data   = data;
41023e88:	e0fffa17 	ldw	r3,-24(fp)
41023e8c:	e0bffc17 	ldw	r2,-16(fp)
41023e90:	18800015 	stw	r2,0(r3)
  slot->len    = len;
41023e94:	e0fffa17 	ldw	r3,-24(fp)
41023e98:	e0bffd17 	ldw	r2,-12(fp)
41023e9c:	18800115 	stw	r2,4(r3)
  slot->done   = done;
41023ea0:	e0fffa17 	ldw	r3,-24(fp)
41023ea4:	e0bffe17 	ldw	r2,-8(fp)
41023ea8:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
41023eac:	e0fffa17 	ldw	r3,-24(fp)
41023eb0:	e0800217 	ldw	r2,8(fp)
41023eb4:	18800315 	stw	r2,12(r3)

  priv->rx_end = next;
41023eb8:	e0fff517 	ldw	r3,-44(fp)
41023ebc:	e0bff717 	ldw	r2,-36(fp)
41023ec0:	18800415 	stw	r2,16(r3)

  if (!priv->active)
41023ec4:	e0bff517 	ldw	r2,-44(fp)
41023ec8:	10800817 	ldw	r2,32(r2)
41023ecc:	1004c03a 	cmpne	r2,r2,zero
41023ed0:	1000041e 	bne	r2,zero,41023ee4 <alt_avalon_dma_prepare+0x138>
  {
    priv->launch (priv);
41023ed4:	e0bff517 	ldw	r2,-44(fp)
41023ed8:	10800717 	ldw	r2,28(r2)
41023edc:	e13ff517 	ldw	r4,-44(fp)
41023ee0:	103ee83a 	callr	r2
  }

  return 0;
41023ee4:	e03fff15 	stw	zero,-4(fp)
41023ee8:	e0bfff17 	ldw	r2,-4(fp)
}
41023eec:	e037883a 	mov	sp,fp
41023ef0:	dfc00117 	ldw	ra,4(sp)
41023ef4:	df000017 	ldw	fp,0(sp)
41023ef8:	dec00204 	addi	sp,sp,8
41023efc:	f800283a 	ret

41023f00 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
41023f00:	defffa04 	addi	sp,sp,-24
41023f04:	df000515 	stw	fp,20(sp)
41023f08:	df000504 	addi	fp,sp,20
41023f0c:	e13ffe15 	stw	r4,-8(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
41023f10:	e0bffe17 	ldw	r2,-8(fp)
41023f14:	10800617 	ldw	r2,24(r2)
41023f18:	e0bffd15 	stw	r2,-12(fp)

  start = priv->tx_start;
41023f1c:	e0bffd17 	ldw	r2,-12(fp)
41023f20:	10800117 	ldw	r2,4(r2)
41023f24:	e0bffc15 	stw	r2,-16(fp)
  end   = priv->tx_end;
41023f28:	e0bffd17 	ldw	r2,-12(fp)
41023f2c:	10800217 	ldw	r2,8(r2)
41023f30:	e0bffb15 	stw	r2,-20(fp)

  return (start > end) ? start - end - 1 :
41023f34:	e0fffc17 	ldw	r3,-16(fp)
41023f38:	e0bffb17 	ldw	r2,-20(fp)
41023f3c:	10c0062e 	bgeu	r2,r3,41023f58 <alt_avalon_dma_space+0x58>
41023f40:	e0fffc17 	ldw	r3,-16(fp)
41023f44:	e0bffb17 	ldw	r2,-20(fp)
41023f48:	1885c83a 	sub	r2,r3,r2
41023f4c:	10bfffc4 	addi	r2,r2,-1
41023f50:	e0bfff15 	stw	r2,-4(fp)
41023f54:	00000506 	br	41023f6c <alt_avalon_dma_space+0x6c>
41023f58:	e0fffc17 	ldw	r3,-16(fp)
41023f5c:	e0bffb17 	ldw	r2,-20(fp)
41023f60:	1885c83a 	sub	r2,r3,r2
41023f64:	108000c4 	addi	r2,r2,3
41023f68:	e0bfff15 	stw	r2,-4(fp)
41023f6c:	e0bfff17 	ldw	r2,-4(fp)
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
}
41023f70:	e037883a 	mov	sp,fp
41023f74:	df000017 	ldw	fp,0(sp)
41023f78:	dec00104 	addi	sp,sp,4
41023f7c:	f800283a 	ret

41023f80 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
41023f80:	defff304 	addi	sp,sp,-52
41023f84:	dfc00c15 	stw	ra,48(sp)
41023f88:	df000b15 	stw	fp,44(sp)
41023f8c:	df000b04 	addi	fp,sp,44
41023f90:	e13ffb15 	stw	r4,-20(fp)
41023f94:	e17ffc15 	stw	r5,-16(fp)
41023f98:	e1bffd15 	stw	r6,-12(fp)
41023f9c:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
41023fa0:	e0bffb17 	ldw	r2,-20(fp)
41023fa4:	10800617 	ldw	r2,24(r2)
41023fa8:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
41023fac:	e0bff517 	ldw	r2,-44(fp)
41023fb0:	10800517 	ldw	r2,20(r2)
41023fb4:	108003cc 	andi	r2,r2,15
41023fb8:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
41023fbc:	e0bffc17 	ldw	r2,-16(fp)
41023fc0:	1007883a 	mov	r3,r2
41023fc4:	e0bff717 	ldw	r2,-36(fp)
41023fc8:	1884703a 	and	r2,r3,r2
41023fcc:	1004c03a 	cmpne	r2,r2,zero
41023fd0:	1000091e 	bne	r2,zero,41023ff8 <alt_avalon_dma_send+0x78>
41023fd4:	e0fffd17 	ldw	r3,-12(fp)
41023fd8:	e0bff717 	ldw	r2,-36(fp)
41023fdc:	1884703a 	and	r2,r3,r2
41023fe0:	1004c03a 	cmpne	r2,r2,zero
41023fe4:	1000041e 	bne	r2,zero,41023ff8 <alt_avalon_dma_send+0x78>
41023fe8:	e0bff517 	ldw	r2,-44(fp)
41023fec:	10c00617 	ldw	r3,24(r2)
41023ff0:	e0bffd17 	ldw	r2,-12(fp)
41023ff4:	1880032e 	bgeu	r3,r2,41024004 <alt_avalon_dma_send+0x84>
        (len & align_mask)            ||
        (len > priv->max_length))
  {
    return -EINVAL;
41023ff8:	00bffa84 	movi	r2,-22
41023ffc:	e0bfff15 	stw	r2,-4(fp)
41024000:	00002e06 	br	410240bc <alt_avalon_dma_send+0x13c>
  }

  start = priv->tx_start;
41024004:	e0bff517 	ldw	r2,-44(fp)
41024008:	10800117 	ldw	r2,4(r2)
4102400c:	e0bff915 	stw	r2,-28(fp)
  end   = priv->tx_end;
41024010:	e0bff517 	ldw	r2,-44(fp)
41024014:	10800217 	ldw	r2,8(r2)
41024018:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->tx_buf[end];
4102401c:	e0bff517 	ldw	r2,-44(fp)
41024020:	10c00904 	addi	r3,r2,36
41024024:	e0bff817 	ldw	r2,-32(fp)
41024028:	1004913a 	slli	r2,r2,4
4102402c:	1885883a 	add	r2,r3,r2
41024030:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
41024034:	e0bff817 	ldw	r2,-32(fp)
41024038:	10800044 	addi	r2,r2,1
4102403c:	108000cc 	andi	r2,r2,3
41024040:	e0bff615 	stw	r2,-40(fp)

  if (next == start)
41024044:	e0fff617 	ldw	r3,-40(fp)
41024048:	e0bff917 	ldw	r2,-28(fp)
4102404c:	1880031e 	bne	r3,r2,4102405c <alt_avalon_dma_send+0xdc>
  {
    return -ENOSPC;
41024050:	00bff904 	movi	r2,-28
41024054:	e0bfff15 	stw	r2,-4(fp)
41024058:	00001806 	br	410240bc <alt_avalon_dma_send+0x13c>
  }

  /* Fill in the descriptor */

  slot->from   = from;
4102405c:	e0fffa17 	ldw	r3,-24(fp)
41024060:	e0bffc17 	ldw	r2,-16(fp)
41024064:	18800015 	stw	r2,0(r3)
  slot->len    = len;
41024068:	e0fffa17 	ldw	r3,-24(fp)
4102406c:	e0bffd17 	ldw	r2,-12(fp)
41024070:	18800115 	stw	r2,4(r3)
  slot->done   = done;
41024074:	e0fffa17 	ldw	r3,-24(fp)
41024078:	e0bffe17 	ldw	r2,-8(fp)
4102407c:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
41024080:	e0fffa17 	ldw	r3,-24(fp)
41024084:	e0800217 	ldw	r2,8(fp)
41024088:	18800315 	stw	r2,12(r3)

  priv->tx_end = next;
4102408c:	e0fff517 	ldw	r3,-44(fp)
41024090:	e0bff617 	ldw	r2,-40(fp)
41024094:	18800215 	stw	r2,8(r3)

  if (!priv->active)
41024098:	e0bff517 	ldw	r2,-44(fp)
4102409c:	10800817 	ldw	r2,32(r2)
410240a0:	1004c03a 	cmpne	r2,r2,zero
410240a4:	1000041e 	bne	r2,zero,410240b8 <alt_avalon_dma_send+0x138>
  {
    priv->launch (priv);
410240a8:	e0bff517 	ldw	r2,-44(fp)
410240ac:	10800717 	ldw	r2,28(r2)
410240b0:	e13ff517 	ldw	r4,-44(fp)
410240b4:	103ee83a 	callr	r2
  }

  return 0;
410240b8:	e03fff15 	stw	zero,-4(fp)
410240bc:	e0bfff17 	ldw	r2,-4(fp)
}
410240c0:	e037883a 	mov	sp,fp
410240c4:	dfc00117 	ldw	ra,4(sp)
410240c8:	df000017 	ldw	fp,0(sp)
410240cc:	dec00204 	addi	sp,sp,8
410240d0:	f800283a 	ret

410240d4 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
410240d4:	defff104 	addi	sp,sp,-60
410240d8:	dfc00e15 	stw	ra,56(sp)
410240dc:	df000d15 	stw	fp,52(sp)
410240e0:	df000d04 	addi	fp,sp,52
410240e4:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
410240e8:	e0bfff17 	ldw	r2,-4(fp)
410240ec:	e0bffe15 	stw	r2,-8(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
410240f0:	e0bffe17 	ldw	r2,-8(fp)
410240f4:	10800517 	ldw	r2,20(r2)
410240f8:	1080080c 	andi	r2,r2,32
410240fc:	e0bff915 	stw	r2,-28(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
41024100:	e0bffe17 	ldw	r2,-8(fp)
41024104:	10800517 	ldw	r2,20(r2)
41024108:	1080100c 	andi	r2,r2,64
4102410c:	e0bff815 	stw	r2,-32(fp)

  tx_start = priv->tx_start;
41024110:	e0bffe17 	ldw	r2,-8(fp)
41024114:	10800117 	ldw	r2,4(r2)
41024118:	e0bffb15 	stw	r2,-20(fp)
  rx_start = priv->rx_start;
4102411c:	e0bffe17 	ldw	r2,-8(fp)
41024120:	10800317 	ldw	r2,12(r2)
41024124:	e0bffa15 	stw	r2,-24(fp)

  tx_slot = &priv->tx_buf[tx_start];
41024128:	e0bffe17 	ldw	r2,-8(fp)
4102412c:	10c00904 	addi	r3,r2,36
41024130:	e0bffb17 	ldw	r2,-20(fp)
41024134:	1004913a 	slli	r2,r2,4
41024138:	1885883a 	add	r2,r3,r2
4102413c:	e0bffd15 	stw	r2,-12(fp)
  rx_slot = &priv->rx_buf[rx_start];
41024140:	e0bffe17 	ldw	r2,-8(fp)
41024144:	10c01904 	addi	r3,r2,100
41024148:	e0bffa17 	ldw	r2,-24(fp)
4102414c:	1004913a 	slli	r2,r2,4
41024150:	1885883a 	add	r2,r3,r2
41024154:	e0bffc15 	stw	r2,-16(fp)

  /* Increment the descriptors */

  if (!stream_tx)
41024158:	e0bff917 	ldw	r2,-28(fp)
4102415c:	1004c03a 	cmpne	r2,r2,zero
41024160:	1000051e 	bne	r2,zero,41024178 <alt_avalon_dma_irq+0xa4>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
41024164:	e0bffb17 	ldw	r2,-20(fp)
41024168:	10800044 	addi	r2,r2,1
4102416c:	10c000cc 	andi	r3,r2,3
41024170:	e0bffe17 	ldw	r2,-8(fp)
41024174:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
41024178:	e0bff817 	ldw	r2,-32(fp)
4102417c:	1004c03a 	cmpne	r2,r2,zero
41024180:	1000051e 	bne	r2,zero,41024198 <alt_avalon_dma_irq+0xc4>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
41024184:	e0bffa17 	ldw	r2,-24(fp)
41024188:	10800044 	addi	r2,r2,1
4102418c:	10c000cc 	andi	r3,r2,3
41024190:	e0bffe17 	ldw	r2,-8(fp)
41024194:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
41024198:	e0bffe17 	ldw	r2,-8(fp)
4102419c:	10800017 	ldw	r2,0(r2)
410241a0:	10000035 	stwio	zero,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
410241a4:	e0bffe17 	ldw	r2,-8(fp)
410241a8:	10800017 	ldw	r2,0(r2)
410241ac:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
410241b0:	e0bffe17 	ldw	r2,-8(fp)
410241b4:	10800717 	ldw	r2,28(r2)
410241b8:	e13ffe17 	ldw	r4,-8(fp)
410241bc:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
410241c0:	e0bff917 	ldw	r2,-28(fp)
410241c4:	1004c03a 	cmpne	r2,r2,zero
410241c8:	1000151e 	bne	r2,zero,41024220 <alt_avalon_dma_irq+0x14c>
410241cc:	e0bffd17 	ldw	r2,-12(fp)
410241d0:	10800217 	ldw	r2,8(r2)
410241d4:	1005003a 	cmpeq	r2,r2,zero
410241d8:	1000111e 	bne	r2,zero,41024220 <alt_avalon_dma_irq+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
410241dc:	0005303a 	rdctl	r2,status
410241e0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
410241e4:	e0fff617 	ldw	r3,-40(fp)
410241e8:	00bfff84 	movi	r2,-2
410241ec:	1884703a 	and	r2,r3,r2
410241f0:	1001703a 	wrctl	status,r2
  
  return context;
410241f4:	e0bff617 	ldw	r2,-40(fp)
  {
    cpu_sr = alt_irq_disable_all();
410241f8:	e0bff715 	stw	r2,-36(fp)
    tx_slot->done (tx_slot->handle);
410241fc:	e0bffd17 	ldw	r2,-12(fp)
41024200:	10c00217 	ldw	r3,8(r2)
41024204:	e0bffd17 	ldw	r2,-12(fp)
41024208:	11000317 	ldw	r4,12(r2)
4102420c:	183ee83a 	callr	r3
41024210:	e0bff717 	ldw	r2,-36(fp)
41024214:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41024218:	e0bff517 	ldw	r2,-44(fp)
4102421c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
41024220:	e0bff817 	ldw	r2,-32(fp)
41024224:	1004c03a 	cmpne	r2,r2,zero
41024228:	1000171e 	bne	r2,zero,41024288 <alt_avalon_dma_irq+0x1b4>
4102422c:	e0bffc17 	ldw	r2,-16(fp)
41024230:	10800217 	ldw	r2,8(r2)
41024234:	1005003a 	cmpeq	r2,r2,zero
41024238:	1000131e 	bne	r2,zero,41024288 <alt_avalon_dma_irq+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102423c:	0005303a 	rdctl	r2,status
41024240:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41024244:	e0fff417 	ldw	r3,-48(fp)
41024248:	00bfff84 	movi	r2,-2
4102424c:	1884703a 	and	r2,r3,r2
41024250:	1001703a 	wrctl	status,r2
  
  return context;
41024254:	e0bff417 	ldw	r2,-48(fp)
  {
    cpu_sr = alt_irq_disable_all();
41024258:	e0bff715 	stw	r2,-36(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
4102425c:	e0bffc17 	ldw	r2,-16(fp)
41024260:	10c00217 	ldw	r3,8(r2)
41024264:	e0bffc17 	ldw	r2,-16(fp)
41024268:	11000317 	ldw	r4,12(r2)
4102426c:	e0bffc17 	ldw	r2,-16(fp)
41024270:	11400017 	ldw	r5,0(r2)
41024274:	183ee83a 	callr	r3
41024278:	e0bff717 	ldw	r2,-36(fp)
4102427c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41024280:	e0bff317 	ldw	r2,-52(fp)
41024284:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
41024288:	e037883a 	mov	sp,fp
4102428c:	dfc00117 	ldw	ra,4(sp)
41024290:	df000017 	ldw	fp,0(sp)
41024294:	dec00204 	addi	sp,sp,8
41024298:	f800283a 	ret

4102429c <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
4102429c:	defff904 	addi	sp,sp,-28
410242a0:	dfc00615 	stw	ra,24(sp)
410242a4:	df000515 	stw	fp,20(sp)
410242a8:	df000504 	addi	fp,sp,20
410242ac:	e13ffc15 	stw	r4,-16(fp)
410242b0:	e17ffd15 	stw	r5,-12(fp)
410242b4:	e1bffe15 	stw	r6,-8(fp)
410242b8:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
410242bc:	e0bffe17 	ldw	r2,-8(fp)
410242c0:	10800604 	addi	r2,r2,24
410242c4:	1007883a 	mov	r3,r2
410242c8:	00840004 	movi	r2,4096
410242cc:	18800035 	stwio	r2,0(r3)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
410242d0:	e0bffe17 	ldw	r2,-8(fp)
410242d4:	10800604 	addi	r2,r2,24
410242d8:	1007883a 	mov	r3,r2
410242dc:	00840004 	movi	r2,4096
410242e0:	18800035 	stwio	r2,0(r3)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
410242e4:	e0bffe17 	ldw	r2,-8(fp)
410242e8:	10800604 	addi	r2,r2,24
410242ec:	1007883a 	mov	r3,r2
410242f0:	00803f04 	movi	r2,252
410242f4:	18800035 	stwio	r2,0(r3)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
410242f8:	e0bffe17 	ldw	r2,-8(fp)
410242fc:	10000035 	stwio	zero,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
41024300:	e0bffc17 	ldw	r2,-16(fp)
41024304:	11c00617 	ldw	r7,24(r2)
41024308:	d8000015 	stw	zero,0(sp)
4102430c:	e13fff17 	ldw	r4,-4(fp)
41024310:	e1400217 	ldw	r5,8(fp)
41024314:	019040b4 	movhi	r6,16642
41024318:	31903504 	addi	r6,r6,16596
4102431c:	10255100 	call	41025510 <alt_ic_isr_register>
41024320:	1004803a 	cmplt	r2,r2,zero
41024324:	1000041e 	bne	r2,zero,41024338 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
41024328:	e13ffc17 	ldw	r4,-16(fp)
4102432c:	102434c0 	call	4102434c <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
41024330:	e13ffd17 	ldw	r4,-12(fp)
41024334:	10243840 	call	41024384 <alt_dma_rxchan_reg>
  }
}
41024338:	e037883a 	mov	sp,fp
4102433c:	dfc00117 	ldw	ra,4(sp)
41024340:	df000017 	ldw	fp,0(sp)
41024344:	dec00204 	addi	sp,sp,8
41024348:	f800283a 	ret

4102434c <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
4102434c:	defffd04 	addi	sp,sp,-12
41024350:	dfc00215 	stw	ra,8(sp)
41024354:	df000115 	stw	fp,4(sp)
41024358:	df000104 	addi	fp,sp,4
4102435c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
41024360:	e13fff17 	ldw	r4,-4(fp)
41024364:	01400034 	movhi	r5,0
41024368:	2946dd04 	addi	r5,r5,7028
4102436c:	10251000 	call	41025100 <alt_dev_llist_insert>
}
41024370:	e037883a 	mov	sp,fp
41024374:	dfc00117 	ldw	ra,4(sp)
41024378:	df000017 	ldw	fp,0(sp)
4102437c:	dec00204 	addi	sp,sp,8
41024380:	f800283a 	ret

41024384 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
41024384:	defffd04 	addi	sp,sp,-12
41024388:	dfc00215 	stw	ra,8(sp)
4102438c:	df000115 	stw	fp,4(sp)
41024390:	df000104 	addi	fp,sp,4
41024394:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
41024398:	e13fff17 	ldw	r4,-4(fp)
4102439c:	01400034 	movhi	r5,0
410243a0:	2946db04 	addi	r5,r5,7020
410243a4:	10251000 	call	41025100 <alt_dev_llist_insert>
}
410243a8:	e037883a 	mov	sp,fp
410243ac:	dfc00117 	ldw	ra,4(sp)
410243b0:	df000017 	ldw	fp,0(sp)
410243b4:	dec00204 	addi	sp,sp,8
410243b8:	f800283a 	ret

410243bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
410243bc:	defffa04 	addi	sp,sp,-24
410243c0:	dfc00515 	stw	ra,20(sp)
410243c4:	df000415 	stw	fp,16(sp)
410243c8:	df000404 	addi	fp,sp,16
410243cc:	e13ffd15 	stw	r4,-12(fp)
410243d0:	e17ffe15 	stw	r5,-8(fp)
410243d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
410243d8:	e0bffd17 	ldw	r2,-12(fp)
410243dc:	10800017 	ldw	r2,0(r2)
410243e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
410243e4:	e0bffc17 	ldw	r2,-16(fp)
410243e8:	11000a04 	addi	r4,r2,40
410243ec:	e0bffd17 	ldw	r2,-12(fp)
410243f0:	11c00217 	ldw	r7,8(r2)
410243f4:	e17ffe17 	ldw	r5,-8(fp)
410243f8:	e1bfff17 	ldw	r6,-4(fp)
410243fc:	1024a040 	call	41024a04 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
41024400:	e037883a 	mov	sp,fp
41024404:	dfc00117 	ldw	ra,4(sp)
41024408:	df000017 	ldw	fp,0(sp)
4102440c:	dec00204 	addi	sp,sp,8
41024410:	f800283a 	ret

41024414 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
41024414:	defffa04 	addi	sp,sp,-24
41024418:	dfc00515 	stw	ra,20(sp)
4102441c:	df000415 	stw	fp,16(sp)
41024420:	df000404 	addi	fp,sp,16
41024424:	e13ffd15 	stw	r4,-12(fp)
41024428:	e17ffe15 	stw	r5,-8(fp)
4102442c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
41024430:	e0bffd17 	ldw	r2,-12(fp)
41024434:	10800017 	ldw	r2,0(r2)
41024438:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
4102443c:	e0bffc17 	ldw	r2,-16(fp)
41024440:	11000a04 	addi	r4,r2,40
41024444:	e0bffd17 	ldw	r2,-12(fp)
41024448:	11c00217 	ldw	r7,8(r2)
4102444c:	e17ffe17 	ldw	r5,-8(fp)
41024450:	e1bfff17 	ldw	r6,-4(fp)
41024454:	1024c280 	call	41024c28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
41024458:	e037883a 	mov	sp,fp
4102445c:	dfc00117 	ldw	ra,4(sp)
41024460:	df000017 	ldw	fp,0(sp)
41024464:	dec00204 	addi	sp,sp,8
41024468:	f800283a 	ret

4102446c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
4102446c:	defffc04 	addi	sp,sp,-16
41024470:	dfc00315 	stw	ra,12(sp)
41024474:	df000215 	stw	fp,8(sp)
41024478:	df000204 	addi	fp,sp,8
4102447c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
41024480:	e0bfff17 	ldw	r2,-4(fp)
41024484:	10800017 	ldw	r2,0(r2)
41024488:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
4102448c:	e0bffe17 	ldw	r2,-8(fp)
41024490:	11000a04 	addi	r4,r2,40
41024494:	e0bfff17 	ldw	r2,-4(fp)
41024498:	11400217 	ldw	r5,8(r2)
4102449c:	102489c0 	call	4102489c <altera_avalon_jtag_uart_close>
}
410244a0:	e037883a 	mov	sp,fp
410244a4:	dfc00117 	ldw	ra,4(sp)
410244a8:	df000017 	ldw	fp,0(sp)
410244ac:	dec00204 	addi	sp,sp,8
410244b0:	f800283a 	ret

410244b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
410244b4:	defffa04 	addi	sp,sp,-24
410244b8:	dfc00515 	stw	ra,20(sp)
410244bc:	df000415 	stw	fp,16(sp)
410244c0:	df000404 	addi	fp,sp,16
410244c4:	e13ffd15 	stw	r4,-12(fp)
410244c8:	e17ffe15 	stw	r5,-8(fp)
410244cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
410244d0:	e0bffd17 	ldw	r2,-12(fp)
410244d4:	10800017 	ldw	r2,0(r2)
410244d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
410244dc:	e0bffc17 	ldw	r2,-16(fp)
410244e0:	11000a04 	addi	r4,r2,40
410244e4:	e17ffe17 	ldw	r5,-8(fp)
410244e8:	e1bfff17 	ldw	r6,-4(fp)
410244ec:	10249100 	call	41024910 <altera_avalon_jtag_uart_ioctl>
}
410244f0:	e037883a 	mov	sp,fp
410244f4:	dfc00117 	ldw	ra,4(sp)
410244f8:	df000017 	ldw	fp,0(sp)
410244fc:	dec00204 	addi	sp,sp,8
41024500:	f800283a 	ret

41024504 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
41024504:	defffa04 	addi	sp,sp,-24
41024508:	dfc00515 	stw	ra,20(sp)
4102450c:	df000415 	stw	fp,16(sp)
41024510:	df000404 	addi	fp,sp,16
41024514:	e13ffd15 	stw	r4,-12(fp)
41024518:	e17ffe15 	stw	r5,-8(fp)
4102451c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
41024520:	e0fffd17 	ldw	r3,-12(fp)
41024524:	00800044 	movi	r2,1
41024528:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
4102452c:	e0bffd17 	ldw	r2,-12(fp)
41024530:	10800017 	ldw	r2,0(r2)
41024534:	11000104 	addi	r4,r2,4
41024538:	e0bffd17 	ldw	r2,-12(fp)
4102453c:	10800817 	ldw	r2,32(r2)
41024540:	1007883a 	mov	r3,r2
41024544:	2005883a 	mov	r2,r4
41024548:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
4102454c:	e13ffe17 	ldw	r4,-8(fp)
41024550:	e17fff17 	ldw	r5,-4(fp)
41024554:	d8000015 	stw	zero,0(sp)
41024558:	019040b4 	movhi	r6,16642
4102455c:	31917104 	addi	r6,r6,17860
41024560:	e1fffd17 	ldw	r7,-12(fp)
41024564:	10255100 	call	41025510 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
41024568:	e0bffd17 	ldw	r2,-12(fp)
4102456c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
41024570:	e0bffd17 	ldw	r2,-12(fp)
41024574:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
41024578:	00800034 	movhi	r2,0
4102457c:	1086ea04 	addi	r2,r2,7080
41024580:	10800017 	ldw	r2,0(r2)
41024584:	100b883a 	mov	r5,r2
41024588:	019040b4 	movhi	r6,16642
4102458c:	3191fb04 	addi	r6,r6,18412
41024590:	e1fffd17 	ldw	r7,-12(fp)
41024594:	1024f680 	call	41024f68 <alt_alarm_start>
41024598:	1004403a 	cmpge	r2,r2,zero
4102459c:	1000041e 	bne	r2,zero,410245b0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
410245a0:	e0fffd17 	ldw	r3,-12(fp)
410245a4:	00a00034 	movhi	r2,32768
410245a8:	10bfffc4 	addi	r2,r2,-1
410245ac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
410245b0:	e037883a 	mov	sp,fp
410245b4:	dfc00117 	ldw	ra,4(sp)
410245b8:	df000017 	ldw	fp,0(sp)
410245bc:	dec00204 	addi	sp,sp,8
410245c0:	f800283a 	ret

410245c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
410245c4:	defff804 	addi	sp,sp,-32
410245c8:	df000715 	stw	fp,28(sp)
410245cc:	df000704 	addi	fp,sp,28
410245d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
410245d4:	e0bfff17 	ldw	r2,-4(fp)
410245d8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
410245dc:	e0bffe17 	ldw	r2,-8(fp)
410245e0:	10800017 	ldw	r2,0(r2)
410245e4:	e0bffd15 	stw	r2,-12(fp)
410245e8:	00000006 	br	410245ec <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
410245ec:	e0bffd17 	ldw	r2,-12(fp)
410245f0:	10800104 	addi	r2,r2,4
410245f4:	10800037 	ldwio	r2,0(r2)
410245f8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
410245fc:	e0bffc17 	ldw	r2,-16(fp)
41024600:	1080c00c 	andi	r2,r2,768
41024604:	1005003a 	cmpeq	r2,r2,zero
41024608:	1000741e 	bne	r2,zero,410247dc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
4102460c:	e0bffc17 	ldw	r2,-16(fp)
41024610:	1080400c 	andi	r2,r2,256
41024614:	1005003a 	cmpeq	r2,r2,zero
41024618:	1000351e 	bne	r2,zero,410246f0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
4102461c:	00800074 	movhi	r2,1
41024620:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
41024624:	e0bffe17 	ldw	r2,-8(fp)
41024628:	10800a17 	ldw	r2,40(r2)
4102462c:	10800044 	addi	r2,r2,1
41024630:	1081ffcc 	andi	r2,r2,2047
41024634:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
41024638:	e0bffe17 	ldw	r2,-8(fp)
4102463c:	10c00b17 	ldw	r3,44(r2)
41024640:	e0bffa17 	ldw	r2,-24(fp)
41024644:	18801626 	beq	r3,r2,410246a0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
41024648:	e0bffd17 	ldw	r2,-12(fp)
4102464c:	10800037 	ldwio	r2,0(r2)
41024650:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
41024654:	e0bffb17 	ldw	r2,-20(fp)
41024658:	10a0000c 	andi	r2,r2,32768
4102465c:	1005003a 	cmpeq	r2,r2,zero
41024660:	10000f1e 	bne	r2,zero,410246a0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
41024664:	e0bffe17 	ldw	r2,-8(fp)
41024668:	10c00a17 	ldw	r3,40(r2)
4102466c:	e0bffb17 	ldw	r2,-20(fp)
41024670:	1009883a 	mov	r4,r2
41024674:	e0bffe17 	ldw	r2,-8(fp)
41024678:	1885883a 	add	r2,r3,r2
4102467c:	10800e04 	addi	r2,r2,56
41024680:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
41024684:	e0bffe17 	ldw	r2,-8(fp)
41024688:	10800a17 	ldw	r2,40(r2)
4102468c:	10800044 	addi	r2,r2,1
41024690:	10c1ffcc 	andi	r3,r2,2047
41024694:	e0bffe17 	ldw	r2,-8(fp)
41024698:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
4102469c:	003fe106 	br	41024624 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
410246a0:	e0bffb17 	ldw	r2,-20(fp)
410246a4:	10bfffec 	andhi	r2,r2,65535
410246a8:	1005003a 	cmpeq	r2,r2,zero
410246ac:	1000101e 	bne	r2,zero,410246f0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
410246b0:	e0bffe17 	ldw	r2,-8(fp)
410246b4:	10c00817 	ldw	r3,32(r2)
410246b8:	00bfff84 	movi	r2,-2
410246bc:	1886703a 	and	r3,r3,r2
410246c0:	e0bffe17 	ldw	r2,-8(fp)
410246c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
410246c8:	e0bffd17 	ldw	r2,-12(fp)
410246cc:	11000104 	addi	r4,r2,4
410246d0:	e0bffe17 	ldw	r2,-8(fp)
410246d4:	10800817 	ldw	r2,32(r2)
410246d8:	1007883a 	mov	r3,r2
410246dc:	2005883a 	mov	r2,r4
410246e0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
410246e4:	e0bffd17 	ldw	r2,-12(fp)
410246e8:	10800104 	addi	r2,r2,4
410246ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
410246f0:	e0bffc17 	ldw	r2,-16(fp)
410246f4:	1080800c 	andi	r2,r2,512
410246f8:	1005003a 	cmpeq	r2,r2,zero
410246fc:	103fbb1e 	bne	r2,zero,410245ec <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
41024700:	e0bffc17 	ldw	r2,-16(fp)
41024704:	10bfffec 	andhi	r2,r2,65535
41024708:	1004d43a 	srli	r2,r2,16
4102470c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
41024710:	00001506 	br	41024768 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
41024714:	e13ffd17 	ldw	r4,-12(fp)
41024718:	e0bffe17 	ldw	r2,-8(fp)
4102471c:	10c00d17 	ldw	r3,52(r2)
41024720:	e0bffe17 	ldw	r2,-8(fp)
41024724:	1885883a 	add	r2,r3,r2
41024728:	10820e04 	addi	r2,r2,2104
4102472c:	10800003 	ldbu	r2,0(r2)
41024730:	10c03fcc 	andi	r3,r2,255
41024734:	18c0201c 	xori	r3,r3,128
41024738:	18ffe004 	addi	r3,r3,-128
4102473c:	2005883a 	mov	r2,r4
41024740:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
41024744:	e0bffe17 	ldw	r2,-8(fp)
41024748:	10800d17 	ldw	r2,52(r2)
4102474c:	10800044 	addi	r2,r2,1
41024750:	10c1ffcc 	andi	r3,r2,2047
41024754:	e0bffe17 	ldw	r2,-8(fp)
41024758:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
4102475c:	e0bff917 	ldw	r2,-28(fp)
41024760:	10bfffc4 	addi	r2,r2,-1
41024764:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
41024768:	e0bff917 	ldw	r2,-28(fp)
4102476c:	1005003a 	cmpeq	r2,r2,zero
41024770:	1000051e 	bne	r2,zero,41024788 <altera_avalon_jtag_uart_irq+0x1c4>
41024774:	e0bffe17 	ldw	r2,-8(fp)
41024778:	10c00d17 	ldw	r3,52(r2)
4102477c:	e0bffe17 	ldw	r2,-8(fp)
41024780:	10800c17 	ldw	r2,48(r2)
41024784:	18bfe31e 	bne	r3,r2,41024714 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
41024788:	e0bff917 	ldw	r2,-28(fp)
4102478c:	1005003a 	cmpeq	r2,r2,zero
41024790:	103f961e 	bne	r2,zero,410245ec <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
41024794:	e0bffe17 	ldw	r2,-8(fp)
41024798:	10c00817 	ldw	r3,32(r2)
4102479c:	00bfff44 	movi	r2,-3
410247a0:	1886703a 	and	r3,r3,r2
410247a4:	e0bffe17 	ldw	r2,-8(fp)
410247a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
410247ac:	e0bffe17 	ldw	r2,-8(fp)
410247b0:	10800017 	ldw	r2,0(r2)
410247b4:	11000104 	addi	r4,r2,4
410247b8:	e0bffe17 	ldw	r2,-8(fp)
410247bc:	10800817 	ldw	r2,32(r2)
410247c0:	1007883a 	mov	r3,r2
410247c4:	2005883a 	mov	r2,r4
410247c8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
410247cc:	e0bffd17 	ldw	r2,-12(fp)
410247d0:	10800104 	addi	r2,r2,4
410247d4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
410247d8:	003f8406 	br	410245ec <altera_avalon_jtag_uart_irq+0x28>
}
410247dc:	e037883a 	mov	sp,fp
410247e0:	df000017 	ldw	fp,0(sp)
410247e4:	dec00104 	addi	sp,sp,4
410247e8:	f800283a 	ret

410247ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
410247ec:	defffc04 	addi	sp,sp,-16
410247f0:	df000315 	stw	fp,12(sp)
410247f4:	df000304 	addi	fp,sp,12
410247f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
410247fc:	e0bfff17 	ldw	r2,-4(fp)
41024800:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
41024804:	e0bffe17 	ldw	r2,-8(fp)
41024808:	10800017 	ldw	r2,0(r2)
4102480c:	10800104 	addi	r2,r2,4
41024810:	10800037 	ldwio	r2,0(r2)
41024814:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
41024818:	e0bffd17 	ldw	r2,-12(fp)
4102481c:	1081000c 	andi	r2,r2,1024
41024820:	1005003a 	cmpeq	r2,r2,zero
41024824:	10000c1e 	bne	r2,zero,41024858 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
41024828:	e0bffe17 	ldw	r2,-8(fp)
4102482c:	10800017 	ldw	r2,0(r2)
41024830:	11000104 	addi	r4,r2,4
41024834:	e0bffe17 	ldw	r2,-8(fp)
41024838:	10800817 	ldw	r2,32(r2)
4102483c:	10810014 	ori	r2,r2,1024
41024840:	1007883a 	mov	r3,r2
41024844:	2005883a 	mov	r2,r4
41024848:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
4102484c:	e0bffe17 	ldw	r2,-8(fp)
41024850:	10000915 	stw	zero,36(r2)
41024854:	00000a06 	br	41024880 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
41024858:	e0bffe17 	ldw	r2,-8(fp)
4102485c:	10c00917 	ldw	r3,36(r2)
41024860:	00a00034 	movhi	r2,32768
41024864:	10bfff04 	addi	r2,r2,-4
41024868:	10c00536 	bltu	r2,r3,41024880 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
4102486c:	e0bffe17 	ldw	r2,-8(fp)
41024870:	10800917 	ldw	r2,36(r2)
41024874:	10c00044 	addi	r3,r2,1
41024878:	e0bffe17 	ldw	r2,-8(fp)
4102487c:	10c00915 	stw	r3,36(r2)
41024880:	00800034 	movhi	r2,0
41024884:	1086ea04 	addi	r2,r2,7080
41024888:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
4102488c:	e037883a 	mov	sp,fp
41024890:	df000017 	ldw	fp,0(sp)
41024894:	dec00104 	addi	sp,sp,4
41024898:	f800283a 	ret

4102489c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
4102489c:	defffc04 	addi	sp,sp,-16
410248a0:	df000315 	stw	fp,12(sp)
410248a4:	df000304 	addi	fp,sp,12
410248a8:	e13ffd15 	stw	r4,-12(fp)
410248ac:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
410248b0:	00000706 	br	410248d0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
410248b4:	e0bffe17 	ldw	r2,-8(fp)
410248b8:	1090000c 	andi	r2,r2,16384
410248bc:	1005003a 	cmpeq	r2,r2,zero
410248c0:	1000031e 	bne	r2,zero,410248d0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
410248c4:	00bffd44 	movi	r2,-11
410248c8:	e0bfff15 	stw	r2,-4(fp)
410248cc:	00000b06 	br	410248fc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
410248d0:	e0bffd17 	ldw	r2,-12(fp)
410248d4:	10c00d17 	ldw	r3,52(r2)
410248d8:	e0bffd17 	ldw	r2,-12(fp)
410248dc:	10800c17 	ldw	r2,48(r2)
410248e0:	18800526 	beq	r3,r2,410248f8 <altera_avalon_jtag_uart_close+0x5c>
410248e4:	e0bffd17 	ldw	r2,-12(fp)
410248e8:	10c00917 	ldw	r3,36(r2)
410248ec:	e0bffd17 	ldw	r2,-12(fp)
410248f0:	10800117 	ldw	r2,4(r2)
410248f4:	18bfef36 	bltu	r3,r2,410248b4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
410248f8:	e03fff15 	stw	zero,-4(fp)
410248fc:	e0bfff17 	ldw	r2,-4(fp)
}
41024900:	e037883a 	mov	sp,fp
41024904:	df000017 	ldw	fp,0(sp)
41024908:	dec00104 	addi	sp,sp,4
4102490c:	f800283a 	ret

41024910 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
41024910:	defff804 	addi	sp,sp,-32
41024914:	df000715 	stw	fp,28(sp)
41024918:	df000704 	addi	fp,sp,28
4102491c:	e13ffb15 	stw	r4,-20(fp)
41024920:	e17ffc15 	stw	r5,-16(fp)
41024924:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
41024928:	00bff9c4 	movi	r2,-25
4102492c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
41024930:	e0bffc17 	ldw	r2,-16(fp)
41024934:	e0bfff15 	stw	r2,-4(fp)
41024938:	e0ffff17 	ldw	r3,-4(fp)
4102493c:	189a8060 	cmpeqi	r2,r3,27137
41024940:	1000041e 	bne	r2,zero,41024954 <altera_avalon_jtag_uart_ioctl+0x44>
41024944:	e0ffff17 	ldw	r3,-4(fp)
41024948:	189a80a0 	cmpeqi	r2,r3,27138
4102494c:	10001b1e 	bne	r2,zero,410249bc <altera_avalon_jtag_uart_ioctl+0xac>
41024950:	00002706 	br	410249f0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
41024954:	e0bffb17 	ldw	r2,-20(fp)
41024958:	10c00117 	ldw	r3,4(r2)
4102495c:	00a00034 	movhi	r2,32768
41024960:	10bfffc4 	addi	r2,r2,-1
41024964:	18802226 	beq	r3,r2,410249f0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
41024968:	e0bffd17 	ldw	r2,-12(fp)
4102496c:	10800017 	ldw	r2,0(r2)
41024970:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
41024974:	e0bff917 	ldw	r2,-28(fp)
41024978:	10800090 	cmplti	r2,r2,2
4102497c:	1000071e 	bne	r2,zero,4102499c <altera_avalon_jtag_uart_ioctl+0x8c>
41024980:	e0fff917 	ldw	r3,-28(fp)
41024984:	00a00034 	movhi	r2,32768
41024988:	10bfffc4 	addi	r2,r2,-1
4102498c:	18800326 	beq	r3,r2,4102499c <altera_avalon_jtag_uart_ioctl+0x8c>
41024990:	e0bff917 	ldw	r2,-28(fp)
41024994:	e0bffe15 	stw	r2,-8(fp)
41024998:	00000306 	br	410249a8 <altera_avalon_jtag_uart_ioctl+0x98>
4102499c:	00e00034 	movhi	r3,32768
410249a0:	18ffff84 	addi	r3,r3,-2
410249a4:	e0fffe15 	stw	r3,-8(fp)
410249a8:	e0bffb17 	ldw	r2,-20(fp)
410249ac:	e0fffe17 	ldw	r3,-8(fp)
410249b0:	10c00115 	stw	r3,4(r2)
      rc = 0;
410249b4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
410249b8:	00000d06 	br	410249f0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
410249bc:	e0bffb17 	ldw	r2,-20(fp)
410249c0:	10c00117 	ldw	r3,4(r2)
410249c4:	00a00034 	movhi	r2,32768
410249c8:	10bfffc4 	addi	r2,r2,-1
410249cc:	18800826 	beq	r3,r2,410249f0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
410249d0:	e13ffd17 	ldw	r4,-12(fp)
410249d4:	e0bffb17 	ldw	r2,-20(fp)
410249d8:	10c00917 	ldw	r3,36(r2)
410249dc:	e0bffb17 	ldw	r2,-20(fp)
410249e0:	10800117 	ldw	r2,4(r2)
410249e4:	1885803a 	cmpltu	r2,r3,r2
410249e8:	20800015 	stw	r2,0(r4)
      rc = 0;
410249ec:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
410249f0:	e0bffa17 	ldw	r2,-24(fp)
}
410249f4:	e037883a 	mov	sp,fp
410249f8:	df000017 	ldw	fp,0(sp)
410249fc:	dec00104 	addi	sp,sp,4
41024a00:	f800283a 	ret

41024a04 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
41024a04:	defff204 	addi	sp,sp,-56
41024a08:	dfc00d15 	stw	ra,52(sp)
41024a0c:	df000c15 	stw	fp,48(sp)
41024a10:	df000c04 	addi	fp,sp,48
41024a14:	e13ffb15 	stw	r4,-20(fp)
41024a18:	e17ffc15 	stw	r5,-16(fp)
41024a1c:	e1bffd15 	stw	r6,-12(fp)
41024a20:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
41024a24:	e0bffc17 	ldw	r2,-16(fp)
41024a28:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
41024a2c:	00004806 	br	41024b50 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
41024a30:	e0bffb17 	ldw	r2,-20(fp)
41024a34:	10800a17 	ldw	r2,40(r2)
41024a38:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
41024a3c:	e0bffb17 	ldw	r2,-20(fp)
41024a40:	10800b17 	ldw	r2,44(r2)
41024a44:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
41024a48:	e0fff717 	ldw	r3,-36(fp)
41024a4c:	e0bff617 	ldw	r2,-40(fp)
41024a50:	18800536 	bltu	r3,r2,41024a68 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
41024a54:	e0bff717 	ldw	r2,-36(fp)
41024a58:	e0fff617 	ldw	r3,-40(fp)
41024a5c:	10c5c83a 	sub	r2,r2,r3
41024a60:	e0bff815 	stw	r2,-32(fp)
41024a64:	00000406 	br	41024a78 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
41024a68:	00820004 	movi	r2,2048
41024a6c:	e0fff617 	ldw	r3,-40(fp)
41024a70:	10c5c83a 	sub	r2,r2,r3
41024a74:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
41024a78:	e0bff817 	ldw	r2,-32(fp)
41024a7c:	1005003a 	cmpeq	r2,r2,zero
41024a80:	10001f1e 	bne	r2,zero,41024b00 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
41024a84:	e0fffd17 	ldw	r3,-12(fp)
41024a88:	e0bff817 	ldw	r2,-32(fp)
41024a8c:	1880022e 	bgeu	r3,r2,41024a98 <altera_avalon_jtag_uart_read+0x94>
        n = space;
41024a90:	e0bffd17 	ldw	r2,-12(fp)
41024a94:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
41024a98:	e0bffb17 	ldw	r2,-20(fp)
41024a9c:	10c00e04 	addi	r3,r2,56
41024aa0:	e0bff617 	ldw	r2,-40(fp)
41024aa4:	1887883a 	add	r3,r3,r2
41024aa8:	e0bffa17 	ldw	r2,-24(fp)
41024aac:	1009883a 	mov	r4,r2
41024ab0:	180b883a 	mov	r5,r3
41024ab4:	e1bff817 	ldw	r6,-32(fp)
41024ab8:	102101c0 	call	4102101c <memcpy>
      ptr   += n;
41024abc:	e0fff817 	ldw	r3,-32(fp)
41024ac0:	e0bffa17 	ldw	r2,-24(fp)
41024ac4:	10c5883a 	add	r2,r2,r3
41024ac8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
41024acc:	e0fffd17 	ldw	r3,-12(fp)
41024ad0:	e0bff817 	ldw	r2,-32(fp)
41024ad4:	1885c83a 	sub	r2,r3,r2
41024ad8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
41024adc:	e0fff617 	ldw	r3,-40(fp)
41024ae0:	e0bff817 	ldw	r2,-32(fp)
41024ae4:	1885883a 	add	r2,r3,r2
41024ae8:	10c1ffcc 	andi	r3,r2,2047
41024aec:	e0bffb17 	ldw	r2,-20(fp)
41024af0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
41024af4:	e0bffd17 	ldw	r2,-12(fp)
41024af8:	10800048 	cmpgei	r2,r2,1
41024afc:	103fcc1e 	bne	r2,zero,41024a30 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
41024b00:	e0fffa17 	ldw	r3,-24(fp)
41024b04:	e0bffc17 	ldw	r2,-16(fp)
41024b08:	1880141e 	bne	r3,r2,41024b5c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
41024b0c:	e0bffe17 	ldw	r2,-8(fp)
41024b10:	1090000c 	andi	r2,r2,16384
41024b14:	1004c03a 	cmpne	r2,r2,zero
41024b18:	1000101e 	bne	r2,zero,41024b5c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
41024b1c:	e0bffb17 	ldw	r2,-20(fp)
41024b20:	10c00a17 	ldw	r3,40(r2)
41024b24:	e0bff717 	ldw	r2,-36(fp)
41024b28:	1880051e 	bne	r3,r2,41024b40 <altera_avalon_jtag_uart_read+0x13c>
41024b2c:	e0bffb17 	ldw	r2,-20(fp)
41024b30:	10c00917 	ldw	r3,36(r2)
41024b34:	e0bffb17 	ldw	r2,-20(fp)
41024b38:	10800117 	ldw	r2,4(r2)
41024b3c:	18bff736 	bltu	r3,r2,41024b1c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
41024b40:	e0bffb17 	ldw	r2,-20(fp)
41024b44:	10c00a17 	ldw	r3,40(r2)
41024b48:	e0bff717 	ldw	r2,-36(fp)
41024b4c:	18800326 	beq	r3,r2,41024b5c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
41024b50:	e0bffd17 	ldw	r2,-12(fp)
41024b54:	10800048 	cmpgei	r2,r2,1
41024b58:	103fb51e 	bne	r2,zero,41024a30 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
41024b5c:	e0fffa17 	ldw	r3,-24(fp)
41024b60:	e0bffc17 	ldw	r2,-16(fp)
41024b64:	18801926 	beq	r3,r2,41024bcc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41024b68:	0005303a 	rdctl	r2,status
41024b6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41024b70:	e0fff517 	ldw	r3,-44(fp)
41024b74:	00bfff84 	movi	r2,-2
41024b78:	1884703a 	and	r2,r3,r2
41024b7c:	1001703a 	wrctl	status,r2
  
  return context;
41024b80:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
41024b84:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
41024b88:	e0bffb17 	ldw	r2,-20(fp)
41024b8c:	10800817 	ldw	r2,32(r2)
41024b90:	10c00054 	ori	r3,r2,1
41024b94:	e0bffb17 	ldw	r2,-20(fp)
41024b98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
41024b9c:	e0bffb17 	ldw	r2,-20(fp)
41024ba0:	10800017 	ldw	r2,0(r2)
41024ba4:	11000104 	addi	r4,r2,4
41024ba8:	e0bffb17 	ldw	r2,-20(fp)
41024bac:	10800817 	ldw	r2,32(r2)
41024bb0:	1007883a 	mov	r3,r2
41024bb4:	2005883a 	mov	r2,r4
41024bb8:	10c00035 	stwio	r3,0(r2)
41024bbc:	e0bff917 	ldw	r2,-28(fp)
41024bc0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41024bc4:	e0bff417 	ldw	r2,-48(fp)
41024bc8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
41024bcc:	e0fffa17 	ldw	r3,-24(fp)
41024bd0:	e0bffc17 	ldw	r2,-16(fp)
41024bd4:	18800526 	beq	r3,r2,41024bec <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
41024bd8:	e0fffa17 	ldw	r3,-24(fp)
41024bdc:	e0bffc17 	ldw	r2,-16(fp)
41024be0:	1887c83a 	sub	r3,r3,r2
41024be4:	e0ffff15 	stw	r3,-4(fp)
41024be8:	00000906 	br	41024c10 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
41024bec:	e0bffe17 	ldw	r2,-8(fp)
41024bf0:	1090000c 	andi	r2,r2,16384
41024bf4:	1005003a 	cmpeq	r2,r2,zero
41024bf8:	1000031e 	bne	r2,zero,41024c08 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
41024bfc:	00bffd44 	movi	r2,-11
41024c00:	e0bfff15 	stw	r2,-4(fp)
41024c04:	00000206 	br	41024c10 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
41024c08:	00bffec4 	movi	r2,-5
41024c0c:	e0bfff15 	stw	r2,-4(fp)
41024c10:	e0bfff17 	ldw	r2,-4(fp)
}
41024c14:	e037883a 	mov	sp,fp
41024c18:	dfc00117 	ldw	ra,4(sp)
41024c1c:	df000017 	ldw	fp,0(sp)
41024c20:	dec00204 	addi	sp,sp,8
41024c24:	f800283a 	ret

41024c28 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
41024c28:	defff204 	addi	sp,sp,-56
41024c2c:	dfc00d15 	stw	ra,52(sp)
41024c30:	df000c15 	stw	fp,48(sp)
41024c34:	df000c04 	addi	fp,sp,48
41024c38:	e13ffb15 	stw	r4,-20(fp)
41024c3c:	e17ffc15 	stw	r5,-16(fp)
41024c40:	e1bffd15 	stw	r6,-12(fp)
41024c44:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
41024c48:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
41024c4c:	e0bffc17 	ldw	r2,-16(fp)
41024c50:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
41024c54:	00003a06 	br	41024d40 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
41024c58:	e0bffb17 	ldw	r2,-20(fp)
41024c5c:	10800c17 	ldw	r2,48(r2)
41024c60:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
41024c64:	e0bffb17 	ldw	r2,-20(fp)
41024c68:	10800d17 	ldw	r2,52(r2)
41024c6c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
41024c70:	e0fffa17 	ldw	r3,-24(fp)
41024c74:	e0bff917 	ldw	r2,-28(fp)
41024c78:	1880062e 	bgeu	r3,r2,41024c94 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
41024c7c:	e0fff917 	ldw	r3,-28(fp)
41024c80:	e0bffa17 	ldw	r2,-24(fp)
41024c84:	1885c83a 	sub	r2,r3,r2
41024c88:	10bfffc4 	addi	r2,r2,-1
41024c8c:	e0bff815 	stw	r2,-32(fp)
41024c90:	00000c06 	br	41024cc4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
41024c94:	e0bff917 	ldw	r2,-28(fp)
41024c98:	1005003a 	cmpeq	r2,r2,zero
41024c9c:	1000051e 	bne	r2,zero,41024cb4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
41024ca0:	00820004 	movi	r2,2048
41024ca4:	e0fffa17 	ldw	r3,-24(fp)
41024ca8:	10c5c83a 	sub	r2,r2,r3
41024cac:	e0bff815 	stw	r2,-32(fp)
41024cb0:	00000406 	br	41024cc4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
41024cb4:	0081ffc4 	movi	r2,2047
41024cb8:	e0fffa17 	ldw	r3,-24(fp)
41024cbc:	10c5c83a 	sub	r2,r2,r3
41024cc0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
41024cc4:	e0bff817 	ldw	r2,-32(fp)
41024cc8:	1005003a 	cmpeq	r2,r2,zero
41024ccc:	10001f1e 	bne	r2,zero,41024d4c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
41024cd0:	e0fffd17 	ldw	r3,-12(fp)
41024cd4:	e0bff817 	ldw	r2,-32(fp)
41024cd8:	1880022e 	bgeu	r3,r2,41024ce4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
41024cdc:	e0bffd17 	ldw	r2,-12(fp)
41024ce0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
41024ce4:	e0bffb17 	ldw	r2,-20(fp)
41024ce8:	10c20e04 	addi	r3,r2,2104
41024cec:	e0bffa17 	ldw	r2,-24(fp)
41024cf0:	1885883a 	add	r2,r3,r2
41024cf4:	e0fffc17 	ldw	r3,-16(fp)
41024cf8:	1009883a 	mov	r4,r2
41024cfc:	180b883a 	mov	r5,r3
41024d00:	e1bff817 	ldw	r6,-32(fp)
41024d04:	102101c0 	call	4102101c <memcpy>
      ptr   += n;
41024d08:	e0fff817 	ldw	r3,-32(fp)
41024d0c:	e0bffc17 	ldw	r2,-16(fp)
41024d10:	10c5883a 	add	r2,r2,r3
41024d14:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
41024d18:	e0fffd17 	ldw	r3,-12(fp)
41024d1c:	e0bff817 	ldw	r2,-32(fp)
41024d20:	1885c83a 	sub	r2,r3,r2
41024d24:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
41024d28:	e0fffa17 	ldw	r3,-24(fp)
41024d2c:	e0bff817 	ldw	r2,-32(fp)
41024d30:	1885883a 	add	r2,r3,r2
41024d34:	10c1ffcc 	andi	r3,r2,2047
41024d38:	e0bffb17 	ldw	r2,-20(fp)
41024d3c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
41024d40:	e0bffd17 	ldw	r2,-12(fp)
41024d44:	10800048 	cmpgei	r2,r2,1
41024d48:	103fc31e 	bne	r2,zero,41024c58 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41024d4c:	0005303a 	rdctl	r2,status
41024d50:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41024d54:	e0fff517 	ldw	r3,-44(fp)
41024d58:	00bfff84 	movi	r2,-2
41024d5c:	1884703a 	and	r2,r3,r2
41024d60:	1001703a 	wrctl	status,r2
  
  return context;
41024d64:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
41024d68:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
41024d6c:	e0bffb17 	ldw	r2,-20(fp)
41024d70:	10800817 	ldw	r2,32(r2)
41024d74:	10c00094 	ori	r3,r2,2
41024d78:	e0bffb17 	ldw	r2,-20(fp)
41024d7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
41024d80:	e0bffb17 	ldw	r2,-20(fp)
41024d84:	10800017 	ldw	r2,0(r2)
41024d88:	11000104 	addi	r4,r2,4
41024d8c:	e0bffb17 	ldw	r2,-20(fp)
41024d90:	10800817 	ldw	r2,32(r2)
41024d94:	1007883a 	mov	r3,r2
41024d98:	2005883a 	mov	r2,r4
41024d9c:	10c00035 	stwio	r3,0(r2)
41024da0:	e0bff717 	ldw	r2,-36(fp)
41024da4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41024da8:	e0bff417 	ldw	r2,-48(fp)
41024dac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
41024db0:	e0bffd17 	ldw	r2,-12(fp)
41024db4:	10800050 	cmplti	r2,r2,1
41024db8:	1000111e 	bne	r2,zero,41024e00 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
41024dbc:	e0bffe17 	ldw	r2,-8(fp)
41024dc0:	1090000c 	andi	r2,r2,16384
41024dc4:	1004c03a 	cmpne	r2,r2,zero
41024dc8:	1000101e 	bne	r2,zero,41024e0c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
41024dcc:	e0bffb17 	ldw	r2,-20(fp)
41024dd0:	10c00d17 	ldw	r3,52(r2)
41024dd4:	e0bff917 	ldw	r2,-28(fp)
41024dd8:	1880051e 	bne	r3,r2,41024df0 <altera_avalon_jtag_uart_write+0x1c8>
41024ddc:	e0bffb17 	ldw	r2,-20(fp)
41024de0:	10c00917 	ldw	r3,36(r2)
41024de4:	e0bffb17 	ldw	r2,-20(fp)
41024de8:	10800117 	ldw	r2,4(r2)
41024dec:	18bff736 	bltu	r3,r2,41024dcc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
41024df0:	e0bffb17 	ldw	r2,-20(fp)
41024df4:	10c00d17 	ldw	r3,52(r2)
41024df8:	e0bff917 	ldw	r2,-28(fp)
41024dfc:	18800326 	beq	r3,r2,41024e0c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
41024e00:	e0bffd17 	ldw	r2,-12(fp)
41024e04:	10800048 	cmpgei	r2,r2,1
41024e08:	103fcd1e 	bne	r2,zero,41024d40 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
41024e0c:	e0fffc17 	ldw	r3,-16(fp)
41024e10:	e0bff617 	ldw	r2,-40(fp)
41024e14:	18800526 	beq	r3,r2,41024e2c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
41024e18:	e0fffc17 	ldw	r3,-16(fp)
41024e1c:	e0bff617 	ldw	r2,-40(fp)
41024e20:	1887c83a 	sub	r3,r3,r2
41024e24:	e0ffff15 	stw	r3,-4(fp)
41024e28:	00000906 	br	41024e50 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
41024e2c:	e0bffe17 	ldw	r2,-8(fp)
41024e30:	1090000c 	andi	r2,r2,16384
41024e34:	1005003a 	cmpeq	r2,r2,zero
41024e38:	1000031e 	bne	r2,zero,41024e48 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
41024e3c:	00bffd44 	movi	r2,-11
41024e40:	e0bfff15 	stw	r2,-4(fp)
41024e44:	00000206 	br	41024e50 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
41024e48:	00bffec4 	movi	r2,-5
41024e4c:	e0bfff15 	stw	r2,-4(fp)
41024e50:	e0bfff17 	ldw	r2,-4(fp)
}
41024e54:	e037883a 	mov	sp,fp
41024e58:	dfc00117 	ldw	ra,4(sp)
41024e5c:	df000017 	ldw	fp,0(sp)
41024e60:	dec00204 	addi	sp,sp,8
41024e64:	f800283a 	ret

41024e68 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
41024e68:	defffa04 	addi	sp,sp,-24
41024e6c:	dfc00515 	stw	ra,20(sp)
41024e70:	df000415 	stw	fp,16(sp)
41024e74:	df000404 	addi	fp,sp,16
41024e78:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
41024e7c:	e0bfff17 	ldw	r2,-4(fp)
41024e80:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
41024e84:	e0bfff17 	ldw	r2,-4(fp)
41024e88:	10800104 	addi	r2,r2,4
41024e8c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41024e90:	0005303a 	rdctl	r2,status
41024e94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41024e98:	e0fffd17 	ldw	r3,-12(fp)
41024e9c:	00bfff84 	movi	r2,-2
41024ea0:	1884703a 	and	r2,r3,r2
41024ea4:	1001703a 	wrctl	status,r2
  
  return context;
41024ea8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
41024eac:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
41024eb0:	1025c740 	call	41025c74 <alt_tick>
41024eb4:	e0bffe17 	ldw	r2,-8(fp)
41024eb8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41024ebc:	e0bffc17 	ldw	r2,-16(fp)
41024ec0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
41024ec4:	e037883a 	mov	sp,fp
41024ec8:	dfc00117 	ldw	ra,4(sp)
41024ecc:	df000017 	ldw	fp,0(sp)
41024ed0:	dec00204 	addi	sp,sp,8
41024ed4:	f800283a 	ret

41024ed8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
41024ed8:	defff804 	addi	sp,sp,-32
41024edc:	dfc00715 	stw	ra,28(sp)
41024ee0:	df000615 	stw	fp,24(sp)
41024ee4:	df000604 	addi	fp,sp,24
41024ee8:	e13ffc15 	stw	r4,-16(fp)
41024eec:	e17ffd15 	stw	r5,-12(fp)
41024ef0:	e1bffe15 	stw	r6,-8(fp)
41024ef4:	e1ffff15 	stw	r7,-4(fp)
41024ef8:	e0bfff17 	ldw	r2,-4(fp)
41024efc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
41024f00:	00800034 	movhi	r2,0
41024f04:	1086ea04 	addi	r2,r2,7080
41024f08:	10800017 	ldw	r2,0(r2)
41024f0c:	1004c03a 	cmpne	r2,r2,zero
41024f10:	1000041e 	bne	r2,zero,41024f24 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
41024f14:	00c00034 	movhi	r3,0
41024f18:	18c6ea04 	addi	r3,r3,7080
41024f1c:	e0bffb17 	ldw	r2,-20(fp)
41024f20:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
41024f24:	e0bffc17 	ldw	r2,-16(fp)
41024f28:	10800104 	addi	r2,r2,4
41024f2c:	1007883a 	mov	r3,r2
41024f30:	008001c4 	movi	r2,7
41024f34:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
41024f38:	d8000015 	stw	zero,0(sp)
41024f3c:	e13ffd17 	ldw	r4,-12(fp)
41024f40:	e17ffe17 	ldw	r5,-8(fp)
41024f44:	019040b4 	movhi	r6,16642
41024f48:	31939a04 	addi	r6,r6,20072
41024f4c:	e1fffc17 	ldw	r7,-16(fp)
41024f50:	10255100 	call	41025510 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
41024f54:	e037883a 	mov	sp,fp
41024f58:	dfc00117 	ldw	ra,4(sp)
41024f5c:	df000017 	ldw	fp,0(sp)
41024f60:	dec00204 	addi	sp,sp,8
41024f64:	f800283a 	ret

41024f68 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
41024f68:	defff404 	addi	sp,sp,-48
41024f6c:	df000b15 	stw	fp,44(sp)
41024f70:	df000b04 	addi	fp,sp,44
41024f74:	e13ffb15 	stw	r4,-20(fp)
41024f78:	e17ffc15 	stw	r5,-16(fp)
41024f7c:	e1bffd15 	stw	r6,-12(fp)
41024f80:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
41024f84:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
41024f88:	00800034 	movhi	r2,0
41024f8c:	1086ea04 	addi	r2,r2,7080
41024f90:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
41024f94:	1005003a 	cmpeq	r2,r2,zero
41024f98:	1000411e 	bne	r2,zero,410250a0 <alt_alarm_start+0x138>
  {
    if (alarm)
41024f9c:	e0bffb17 	ldw	r2,-20(fp)
41024fa0:	1005003a 	cmpeq	r2,r2,zero
41024fa4:	10003b1e 	bne	r2,zero,41025094 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
41024fa8:	e0fffb17 	ldw	r3,-20(fp)
41024fac:	e0bffd17 	ldw	r2,-12(fp)
41024fb0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
41024fb4:	e0fffb17 	ldw	r3,-20(fp)
41024fb8:	e0bffe17 	ldw	r2,-8(fp)
41024fbc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41024fc0:	0005303a 	rdctl	r2,status
41024fc4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41024fc8:	e0fff817 	ldw	r3,-32(fp)
41024fcc:	00bfff84 	movi	r2,-2
41024fd0:	1884703a 	and	r2,r3,r2
41024fd4:	1001703a 	wrctl	status,r2
  
  return context;
41024fd8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
41024fdc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
41024fe0:	00800034 	movhi	r2,0
41024fe4:	1086eb04 	addi	r2,r2,7084
41024fe8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
41024fec:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
41024ff0:	e0fffc17 	ldw	r3,-16(fp)
41024ff4:	e0bff917 	ldw	r2,-28(fp)
41024ff8:	1885883a 	add	r2,r3,r2
41024ffc:	10c00044 	addi	r3,r2,1
41025000:	e0bffb17 	ldw	r2,-20(fp)
41025004:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
41025008:	e0bffb17 	ldw	r2,-20(fp)
4102500c:	10c00217 	ldw	r3,8(r2)
41025010:	e0bff917 	ldw	r2,-28(fp)
41025014:	1880042e 	bgeu	r3,r2,41025028 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
41025018:	e0fffb17 	ldw	r3,-20(fp)
4102501c:	00800044 	movi	r2,1
41025020:	18800405 	stb	r2,16(r3)
41025024:	00000206 	br	41025030 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
41025028:	e0bffb17 	ldw	r2,-20(fp)
4102502c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
41025030:	e0fffb17 	ldw	r3,-20(fp)
41025034:	00800034 	movhi	r2,0
41025038:	1086e004 	addi	r2,r2,7040
4102503c:	e0bff615 	stw	r2,-40(fp)
41025040:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
41025044:	e0fff717 	ldw	r3,-36(fp)
41025048:	e0bff617 	ldw	r2,-40(fp)
4102504c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
41025050:	e0bff617 	ldw	r2,-40(fp)
41025054:	10c00017 	ldw	r3,0(r2)
41025058:	e0bff717 	ldw	r2,-36(fp)
4102505c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
41025060:	e0bff617 	ldw	r2,-40(fp)
41025064:	10c00017 	ldw	r3,0(r2)
41025068:	e0bff717 	ldw	r2,-36(fp)
4102506c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
41025070:	e0fff617 	ldw	r3,-40(fp)
41025074:	e0bff717 	ldw	r2,-36(fp)
41025078:	18800015 	stw	r2,0(r3)
4102507c:	e0bffa17 	ldw	r2,-24(fp)
41025080:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41025084:	e0bff517 	ldw	r2,-44(fp)
41025088:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
4102508c:	e03fff15 	stw	zero,-4(fp)
41025090:	00000506 	br	410250a8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
41025094:	00bffa84 	movi	r2,-22
41025098:	e0bfff15 	stw	r2,-4(fp)
4102509c:	00000206 	br	410250a8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
410250a0:	00bfde84 	movi	r2,-134
410250a4:	e0bfff15 	stw	r2,-4(fp)
410250a8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
410250ac:	e037883a 	mov	sp,fp
410250b0:	df000017 	ldw	fp,0(sp)
410250b4:	dec00104 	addi	sp,sp,4
410250b8:	f800283a 	ret

410250bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
410250bc:	defffe04 	addi	sp,sp,-8
410250c0:	df000115 	stw	fp,4(sp)
410250c4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
410250c8:	e03fff15 	stw	zero,-4(fp)
410250cc:	00000506 	br	410250e4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
410250d0:	e0bfff17 	ldw	r2,-4(fp)
410250d4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
410250d8:	e0bfff17 	ldw	r2,-4(fp)
410250dc:	10800804 	addi	r2,r2,32
410250e0:	e0bfff15 	stw	r2,-4(fp)
410250e4:	e0bfff17 	ldw	r2,-4(fp)
410250e8:	10820030 	cmpltui	r2,r2,2048
410250ec:	103ff81e 	bne	r2,zero,410250d0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
410250f0:	e037883a 	mov	sp,fp
410250f4:	df000017 	ldw	fp,0(sp)
410250f8:	dec00104 	addi	sp,sp,4
410250fc:	f800283a 	ret

41025100 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
41025100:	defff904 	addi	sp,sp,-28
41025104:	dfc00615 	stw	ra,24(sp)
41025108:	df000515 	stw	fp,20(sp)
4102510c:	df000504 	addi	fp,sp,20
41025110:	e13ffd15 	stw	r4,-12(fp)
41025114:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
41025118:	e0bffd17 	ldw	r2,-12(fp)
4102511c:	1005003a 	cmpeq	r2,r2,zero
41025120:	1000041e 	bne	r2,zero,41025134 <alt_dev_llist_insert+0x34>
41025124:	e0bffd17 	ldw	r2,-12(fp)
41025128:	10800217 	ldw	r2,8(r2)
4102512c:	1004c03a 	cmpne	r2,r2,zero
41025130:	1000071e 	bne	r2,zero,41025150 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
41025134:	10251b40 	call	410251b4 <alt_get_errno>
41025138:	1007883a 	mov	r3,r2
4102513c:	00800584 	movi	r2,22
41025140:	18800015 	stw	r2,0(r3)
    return -EINVAL;
41025144:	00bffa84 	movi	r2,-22
41025148:	e0bfff15 	stw	r2,-4(fp)
4102514c:	00001306 	br	4102519c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
41025150:	e0fffd17 	ldw	r3,-12(fp)
41025154:	e0bffe17 	ldw	r2,-8(fp)
41025158:	e0bffb15 	stw	r2,-20(fp)
4102515c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
41025160:	e0fffc17 	ldw	r3,-16(fp)
41025164:	e0bffb17 	ldw	r2,-20(fp)
41025168:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
4102516c:	e0bffb17 	ldw	r2,-20(fp)
41025170:	10c00017 	ldw	r3,0(r2)
41025174:	e0bffc17 	ldw	r2,-16(fp)
41025178:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
4102517c:	e0bffb17 	ldw	r2,-20(fp)
41025180:	10c00017 	ldw	r3,0(r2)
41025184:	e0bffc17 	ldw	r2,-16(fp)
41025188:	18800115 	stw	r2,4(r3)
  list->next           = entry;
4102518c:	e0fffb17 	ldw	r3,-20(fp)
41025190:	e0bffc17 	ldw	r2,-16(fp)
41025194:	18800015 	stw	r2,0(r3)

  return 0;  
41025198:	e03fff15 	stw	zero,-4(fp)
4102519c:	e0bfff17 	ldw	r2,-4(fp)
}
410251a0:	e037883a 	mov	sp,fp
410251a4:	dfc00117 	ldw	ra,4(sp)
410251a8:	df000017 	ldw	fp,0(sp)
410251ac:	dec00204 	addi	sp,sp,8
410251b0:	f800283a 	ret

410251b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
410251b4:	defffd04 	addi	sp,sp,-12
410251b8:	dfc00215 	stw	ra,8(sp)
410251bc:	df000115 	stw	fp,4(sp)
410251c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
410251c4:	00800034 	movhi	r2,0
410251c8:	1086d904 	addi	r2,r2,7012
410251cc:	10800017 	ldw	r2,0(r2)
410251d0:	1005003a 	cmpeq	r2,r2,zero
410251d4:	1000061e 	bne	r2,zero,410251f0 <alt_get_errno+0x3c>
410251d8:	00800034 	movhi	r2,0
410251dc:	1086d904 	addi	r2,r2,7012
410251e0:	10800017 	ldw	r2,0(r2)
410251e4:	103ee83a 	callr	r2
410251e8:	e0bfff15 	stw	r2,-4(fp)
410251ec:	00000306 	br	410251fc <alt_get_errno+0x48>
410251f0:	00800034 	movhi	r2,0
410251f4:	1086e504 	addi	r2,r2,7060
410251f8:	e0bfff15 	stw	r2,-4(fp)
410251fc:	e0bfff17 	ldw	r2,-4(fp)
}
41025200:	e037883a 	mov	sp,fp
41025204:	dfc00117 	ldw	ra,4(sp)
41025208:	df000017 	ldw	fp,0(sp)
4102520c:	dec00204 	addi	sp,sp,8
41025210:	f800283a 	ret

41025214 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
41025214:	defffc04 	addi	sp,sp,-16
41025218:	dfc00315 	stw	ra,12(sp)
4102521c:	df000215 	stw	fp,8(sp)
41025220:	df000204 	addi	fp,sp,8
41025224:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
41025228:	e13fff17 	ldw	r4,-4(fp)
4102522c:	d1600b04 	addi	r5,gp,-32724
41025230:	102544c0 	call	4102544c <alt_find_dev>
41025234:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
41025238:	e0bffe17 	ldw	r2,-8(fp)
4102523c:	1004c03a 	cmpne	r2,r2,zero
41025240:	1000041e 	bne	r2,zero,41025254 <alt_dma_rxchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
41025244:	102526c0 	call	4102526c <alt_get_errno>
41025248:	1007883a 	mov	r3,r2
4102524c:	008004c4 	movi	r2,19
41025250:	18800015 	stw	r2,0(r3)
  }

  return dev;
41025254:	e0bffe17 	ldw	r2,-8(fp)
}
41025258:	e037883a 	mov	sp,fp
4102525c:	dfc00117 	ldw	ra,4(sp)
41025260:	df000017 	ldw	fp,0(sp)
41025264:	dec00204 	addi	sp,sp,8
41025268:	f800283a 	ret

4102526c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4102526c:	defffd04 	addi	sp,sp,-12
41025270:	dfc00215 	stw	ra,8(sp)
41025274:	df000115 	stw	fp,4(sp)
41025278:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
4102527c:	00800034 	movhi	r2,0
41025280:	1086d904 	addi	r2,r2,7012
41025284:	10800017 	ldw	r2,0(r2)
41025288:	1005003a 	cmpeq	r2,r2,zero
4102528c:	1000061e 	bne	r2,zero,410252a8 <alt_get_errno+0x3c>
41025290:	00800034 	movhi	r2,0
41025294:	1086d904 	addi	r2,r2,7012
41025298:	10800017 	ldw	r2,0(r2)
4102529c:	103ee83a 	callr	r2
410252a0:	e0bfff15 	stw	r2,-4(fp)
410252a4:	00000306 	br	410252b4 <alt_get_errno+0x48>
410252a8:	00800034 	movhi	r2,0
410252ac:	1086e504 	addi	r2,r2,7060
410252b0:	e0bfff15 	stw	r2,-4(fp)
410252b4:	e0bfff17 	ldw	r2,-4(fp)
}
410252b8:	e037883a 	mov	sp,fp
410252bc:	dfc00117 	ldw	ra,4(sp)
410252c0:	df000017 	ldw	fp,0(sp)
410252c4:	dec00204 	addi	sp,sp,8
410252c8:	f800283a 	ret

410252cc <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
410252cc:	defffc04 	addi	sp,sp,-16
410252d0:	dfc00315 	stw	ra,12(sp)
410252d4:	df000215 	stw	fp,8(sp)
410252d8:	df000204 	addi	fp,sp,8
410252dc:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
410252e0:	e13fff17 	ldw	r4,-4(fp)
410252e4:	d1600d04 	addi	r5,gp,-32716
410252e8:	102544c0 	call	4102544c <alt_find_dev>
410252ec:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
410252f0:	e0bffe17 	ldw	r2,-8(fp)
410252f4:	1004c03a 	cmpne	r2,r2,zero
410252f8:	1000041e 	bne	r2,zero,4102530c <alt_dma_txchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
410252fc:	10253240 	call	41025324 <alt_get_errno>
41025300:	1007883a 	mov	r3,r2
41025304:	008004c4 	movi	r2,19
41025308:	18800015 	stw	r2,0(r3)
  }

  return dev;
4102530c:	e0bffe17 	ldw	r2,-8(fp)
}
41025310:	e037883a 	mov	sp,fp
41025314:	dfc00117 	ldw	ra,4(sp)
41025318:	df000017 	ldw	fp,0(sp)
4102531c:	dec00204 	addi	sp,sp,8
41025320:	f800283a 	ret

41025324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41025324:	defffd04 	addi	sp,sp,-12
41025328:	dfc00215 	stw	ra,8(sp)
4102532c:	df000115 	stw	fp,4(sp)
41025330:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41025334:	00800034 	movhi	r2,0
41025338:	1086d904 	addi	r2,r2,7012
4102533c:	10800017 	ldw	r2,0(r2)
41025340:	1005003a 	cmpeq	r2,r2,zero
41025344:	1000061e 	bne	r2,zero,41025360 <alt_get_errno+0x3c>
41025348:	00800034 	movhi	r2,0
4102534c:	1086d904 	addi	r2,r2,7012
41025350:	10800017 	ldw	r2,0(r2)
41025354:	103ee83a 	callr	r2
41025358:	e0bfff15 	stw	r2,-4(fp)
4102535c:	00000306 	br	4102536c <alt_get_errno+0x48>
41025360:	00800034 	movhi	r2,0
41025364:	1086e504 	addi	r2,r2,7060
41025368:	e0bfff15 	stw	r2,-4(fp)
4102536c:	e0bfff17 	ldw	r2,-4(fp)
}
41025370:	e037883a 	mov	sp,fp
41025374:	dfc00117 	ldw	ra,4(sp)
41025378:	df000017 	ldw	fp,0(sp)
4102537c:	dec00204 	addi	sp,sp,8
41025380:	f800283a 	ret

41025384 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
41025384:	defffd04 	addi	sp,sp,-12
41025388:	dfc00215 	stw	ra,8(sp)
4102538c:	df000115 	stw	fp,4(sp)
41025390:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
41025394:	00bfff04 	movi	r2,-4
41025398:	00d040b4 	movhi	r3,16642
4102539c:	18d90504 	addi	r3,r3,25620
410253a0:	1885883a 	add	r2,r3,r2
410253a4:	e0bfff15 	stw	r2,-4(fp)
410253a8:	00000606 	br	410253c4 <_do_ctors+0x40>
        (*ctor) (); 
410253ac:	e0bfff17 	ldw	r2,-4(fp)
410253b0:	10800017 	ldw	r2,0(r2)
410253b4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
410253b8:	e0bfff17 	ldw	r2,-4(fp)
410253bc:	10bfff04 	addi	r2,r2,-4
410253c0:	e0bfff15 	stw	r2,-4(fp)
410253c4:	e0ffff17 	ldw	r3,-4(fp)
410253c8:	009040b4 	movhi	r2,16642
410253cc:	10990404 	addi	r2,r2,25616
410253d0:	18bff62e 	bgeu	r3,r2,410253ac <_do_ctors+0x28>
        (*ctor) (); 
}
410253d4:	e037883a 	mov	sp,fp
410253d8:	dfc00117 	ldw	ra,4(sp)
410253dc:	df000017 	ldw	fp,0(sp)
410253e0:	dec00204 	addi	sp,sp,8
410253e4:	f800283a 	ret

410253e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
410253e8:	defffd04 	addi	sp,sp,-12
410253ec:	dfc00215 	stw	ra,8(sp)
410253f0:	df000115 	stw	fp,4(sp)
410253f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
410253f8:	00bfff04 	movi	r2,-4
410253fc:	00d040b4 	movhi	r3,16642
41025400:	18d90504 	addi	r3,r3,25620
41025404:	1885883a 	add	r2,r3,r2
41025408:	e0bfff15 	stw	r2,-4(fp)
4102540c:	00000606 	br	41025428 <_do_dtors+0x40>
        (*dtor) (); 
41025410:	e0bfff17 	ldw	r2,-4(fp)
41025414:	10800017 	ldw	r2,0(r2)
41025418:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
4102541c:	e0bfff17 	ldw	r2,-4(fp)
41025420:	10bfff04 	addi	r2,r2,-4
41025424:	e0bfff15 	stw	r2,-4(fp)
41025428:	e0ffff17 	ldw	r3,-4(fp)
4102542c:	009040b4 	movhi	r2,16642
41025430:	10990504 	addi	r2,r2,25620
41025434:	18bff62e 	bgeu	r3,r2,41025410 <_do_dtors+0x28>
        (*dtor) (); 
}
41025438:	e037883a 	mov	sp,fp
4102543c:	dfc00117 	ldw	ra,4(sp)
41025440:	df000017 	ldw	fp,0(sp)
41025444:	dec00204 	addi	sp,sp,8
41025448:	f800283a 	ret

4102544c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
4102544c:	defff904 	addi	sp,sp,-28
41025450:	dfc00615 	stw	ra,24(sp)
41025454:	df000515 	stw	fp,20(sp)
41025458:	df000504 	addi	fp,sp,20
4102545c:	e13ffd15 	stw	r4,-12(fp)
41025460:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
41025464:	e0bffe17 	ldw	r2,-8(fp)
41025468:	10800017 	ldw	r2,0(r2)
4102546c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
41025470:	e13ffd17 	ldw	r4,-12(fp)
41025474:	10202e80 	call	410202e8 <strlen>
41025478:	10800044 	addi	r2,r2,1
4102547c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
41025480:	00000d06 	br	410254b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
41025484:	e0bffc17 	ldw	r2,-16(fp)
41025488:	11000217 	ldw	r4,8(r2)
4102548c:	e1bffb17 	ldw	r6,-20(fp)
41025490:	e17ffd17 	ldw	r5,-12(fp)
41025494:	10260540 	call	41026054 <memcmp>
41025498:	1004c03a 	cmpne	r2,r2,zero
4102549c:	1000031e 	bne	r2,zero,410254ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
410254a0:	e0bffc17 	ldw	r2,-16(fp)
410254a4:	e0bfff15 	stw	r2,-4(fp)
410254a8:	00000706 	br	410254c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
410254ac:	e0bffc17 	ldw	r2,-16(fp)
410254b0:	10800017 	ldw	r2,0(r2)
410254b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
410254b8:	e0fffe17 	ldw	r3,-8(fp)
410254bc:	e0bffc17 	ldw	r2,-16(fp)
410254c0:	10fff01e 	bne	r2,r3,41025484 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
410254c4:	e03fff15 	stw	zero,-4(fp)
410254c8:	e0bfff17 	ldw	r2,-4(fp)
}
410254cc:	e037883a 	mov	sp,fp
410254d0:	dfc00117 	ldw	ra,4(sp)
410254d4:	df000017 	ldw	fp,0(sp)
410254d8:	dec00204 	addi	sp,sp,8
410254dc:	f800283a 	ret

410254e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
410254e0:	defffe04 	addi	sp,sp,-8
410254e4:	dfc00115 	stw	ra,4(sp)
410254e8:	df000015 	stw	fp,0(sp)
410254ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
410254f0:	0009883a 	mov	r4,zero
410254f4:	01440004 	movi	r5,4096
410254f8:	1025f780 	call	41025f78 <alt_icache_flush>
#endif
}
410254fc:	e037883a 	mov	sp,fp
41025500:	dfc00117 	ldw	ra,4(sp)
41025504:	df000017 	ldw	fp,0(sp)
41025508:	dec00204 	addi	sp,sp,8
4102550c:	f800283a 	ret

41025510 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
41025510:	defff904 	addi	sp,sp,-28
41025514:	dfc00615 	stw	ra,24(sp)
41025518:	df000515 	stw	fp,20(sp)
4102551c:	df000504 	addi	fp,sp,20
41025520:	e13ffc15 	stw	r4,-16(fp)
41025524:	e17ffd15 	stw	r5,-12(fp)
41025528:	e1bffe15 	stw	r6,-8(fp)
4102552c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
41025530:	e0800217 	ldw	r2,8(fp)
41025534:	d8800015 	stw	r2,0(sp)
41025538:	e13ffc17 	ldw	r4,-16(fp)
4102553c:	e17ffd17 	ldw	r5,-12(fp)
41025540:	e1bffe17 	ldw	r6,-8(fp)
41025544:	e1ffff17 	ldw	r7,-4(fp)
41025548:	10256e40 	call	410256e4 <alt_iic_isr_register>
}  
4102554c:	e037883a 	mov	sp,fp
41025550:	dfc00117 	ldw	ra,4(sp)
41025554:	df000017 	ldw	fp,0(sp)
41025558:	dec00204 	addi	sp,sp,8
4102555c:	f800283a 	ret

41025560 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
41025560:	defff904 	addi	sp,sp,-28
41025564:	df000615 	stw	fp,24(sp)
41025568:	df000604 	addi	fp,sp,24
4102556c:	e13ffe15 	stw	r4,-8(fp)
41025570:	e17fff15 	stw	r5,-4(fp)
41025574:	e0bfff17 	ldw	r2,-4(fp)
41025578:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4102557c:	0005303a 	rdctl	r2,status
41025580:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41025584:	e0fffb17 	ldw	r3,-20(fp)
41025588:	00bfff84 	movi	r2,-2
4102558c:	1884703a 	and	r2,r3,r2
41025590:	1001703a 	wrctl	status,r2
  
  return context;
41025594:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
41025598:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
4102559c:	e0fffc17 	ldw	r3,-16(fp)
410255a0:	00800044 	movi	r2,1
410255a4:	10c4983a 	sll	r2,r2,r3
410255a8:	1007883a 	mov	r3,r2
410255ac:	00800034 	movhi	r2,0
410255b0:	1086e904 	addi	r2,r2,7076
410255b4:	10800017 	ldw	r2,0(r2)
410255b8:	1886b03a 	or	r3,r3,r2
410255bc:	00800034 	movhi	r2,0
410255c0:	1086e904 	addi	r2,r2,7076
410255c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
410255c8:	00800034 	movhi	r2,0
410255cc:	1086e904 	addi	r2,r2,7076
410255d0:	10800017 	ldw	r2,0(r2)
410255d4:	100170fa 	wrctl	ienable,r2
410255d8:	e0bffd17 	ldw	r2,-12(fp)
410255dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
410255e0:	e0bffa17 	ldw	r2,-24(fp)
410255e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
410255e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
410255ec:	e037883a 	mov	sp,fp
410255f0:	df000017 	ldw	fp,0(sp)
410255f4:	dec00104 	addi	sp,sp,4
410255f8:	f800283a 	ret

410255fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
410255fc:	defff904 	addi	sp,sp,-28
41025600:	df000615 	stw	fp,24(sp)
41025604:	df000604 	addi	fp,sp,24
41025608:	e13ffe15 	stw	r4,-8(fp)
4102560c:	e17fff15 	stw	r5,-4(fp)
41025610:	e0bfff17 	ldw	r2,-4(fp)
41025614:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41025618:	0005303a 	rdctl	r2,status
4102561c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41025620:	e0fffb17 	ldw	r3,-20(fp)
41025624:	00bfff84 	movi	r2,-2
41025628:	1884703a 	and	r2,r3,r2
4102562c:	1001703a 	wrctl	status,r2
  
  return context;
41025630:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
41025634:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
41025638:	e0fffc17 	ldw	r3,-16(fp)
4102563c:	00800044 	movi	r2,1
41025640:	10c4983a 	sll	r2,r2,r3
41025644:	0084303a 	nor	r2,zero,r2
41025648:	1007883a 	mov	r3,r2
4102564c:	00800034 	movhi	r2,0
41025650:	1086e904 	addi	r2,r2,7076
41025654:	10800017 	ldw	r2,0(r2)
41025658:	1886703a 	and	r3,r3,r2
4102565c:	00800034 	movhi	r2,0
41025660:	1086e904 	addi	r2,r2,7076
41025664:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
41025668:	00800034 	movhi	r2,0
4102566c:	1086e904 	addi	r2,r2,7076
41025670:	10800017 	ldw	r2,0(r2)
41025674:	100170fa 	wrctl	ienable,r2
41025678:	e0bffd17 	ldw	r2,-12(fp)
4102567c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41025680:	e0bffa17 	ldw	r2,-24(fp)
41025684:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
41025688:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
4102568c:	e037883a 	mov	sp,fp
41025690:	df000017 	ldw	fp,0(sp)
41025694:	dec00104 	addi	sp,sp,4
41025698:	f800283a 	ret

4102569c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
4102569c:	defffc04 	addi	sp,sp,-16
410256a0:	df000315 	stw	fp,12(sp)
410256a4:	df000304 	addi	fp,sp,12
410256a8:	e13ffe15 	stw	r4,-8(fp)
410256ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
410256b0:	000530fa 	rdctl	r2,ienable
410256b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
410256b8:	e0ffff17 	ldw	r3,-4(fp)
410256bc:	00800044 	movi	r2,1
410256c0:	10c4983a 	sll	r2,r2,r3
410256c4:	1007883a 	mov	r3,r2
410256c8:	e0bffd17 	ldw	r2,-12(fp)
410256cc:	1884703a 	and	r2,r3,r2
410256d0:	1004c03a 	cmpne	r2,r2,zero
}
410256d4:	e037883a 	mov	sp,fp
410256d8:	df000017 	ldw	fp,0(sp)
410256dc:	dec00104 	addi	sp,sp,4
410256e0:	f800283a 	ret

410256e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
410256e4:	defff404 	addi	sp,sp,-48
410256e8:	dfc00b15 	stw	ra,44(sp)
410256ec:	df000a15 	stw	fp,40(sp)
410256f0:	df000a04 	addi	fp,sp,40
410256f4:	e13ffb15 	stw	r4,-20(fp)
410256f8:	e17ffc15 	stw	r5,-16(fp)
410256fc:	e1bffd15 	stw	r6,-12(fp)
41025700:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
41025704:	00bffa84 	movi	r2,-22
41025708:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
4102570c:	e0bffc17 	ldw	r2,-16(fp)
41025710:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
41025714:	e0bff917 	ldw	r2,-28(fp)
41025718:	10800808 	cmpgei	r2,r2,32
4102571c:	1000291e 	bne	r2,zero,410257c4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41025720:	0005303a 	rdctl	r2,status
41025724:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41025728:	e0fff717 	ldw	r3,-36(fp)
4102572c:	00bfff84 	movi	r2,-2
41025730:	1884703a 	and	r2,r3,r2
41025734:	1001703a 	wrctl	status,r2
  
  return context;
41025738:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
4102573c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
41025740:	e0bff917 	ldw	r2,-28(fp)
41025744:	00c00034 	movhi	r3,0
41025748:	18c6f604 	addi	r3,r3,7128
4102574c:	100490fa 	slli	r2,r2,3
41025750:	10c7883a 	add	r3,r2,r3
41025754:	e0bffd17 	ldw	r2,-12(fp)
41025758:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
4102575c:	e0bff917 	ldw	r2,-28(fp)
41025760:	00c00034 	movhi	r3,0
41025764:	18c6f604 	addi	r3,r3,7128
41025768:	100490fa 	slli	r2,r2,3
4102576c:	10c5883a 	add	r2,r2,r3
41025770:	10c00104 	addi	r3,r2,4
41025774:	e0bffe17 	ldw	r2,-8(fp)
41025778:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
4102577c:	e0bffd17 	ldw	r2,-12(fp)
41025780:	1005003a 	cmpeq	r2,r2,zero
41025784:	1000051e 	bne	r2,zero,4102579c <alt_iic_isr_register+0xb8>
41025788:	e17ff917 	ldw	r5,-28(fp)
4102578c:	e13ffb17 	ldw	r4,-20(fp)
41025790:	10255600 	call	41025560 <alt_ic_irq_enable>
41025794:	e0bfff15 	stw	r2,-4(fp)
41025798:	00000406 	br	410257ac <alt_iic_isr_register+0xc8>
4102579c:	e17ff917 	ldw	r5,-28(fp)
410257a0:	e13ffb17 	ldw	r4,-20(fp)
410257a4:	10255fc0 	call	410255fc <alt_ic_irq_disable>
410257a8:	e0bfff15 	stw	r2,-4(fp)
410257ac:	e0bfff17 	ldw	r2,-4(fp)
410257b0:	e0bffa15 	stw	r2,-24(fp)
410257b4:	e0bff817 	ldw	r2,-32(fp)
410257b8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
410257bc:	e0bff617 	ldw	r2,-40(fp)
410257c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
410257c4:	e0bffa17 	ldw	r2,-24(fp)
}
410257c8:	e037883a 	mov	sp,fp
410257cc:	dfc00117 	ldw	ra,4(sp)
410257d0:	df000017 	ldw	fp,0(sp)
410257d4:	dec00204 	addi	sp,sp,8
410257d8:	f800283a 	ret

410257dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
410257dc:	defff904 	addi	sp,sp,-28
410257e0:	dfc00615 	stw	ra,24(sp)
410257e4:	df000515 	stw	fp,20(sp)
410257e8:	df000504 	addi	fp,sp,20
410257ec:	e13ffc15 	stw	r4,-16(fp)
410257f0:	e17ffd15 	stw	r5,-12(fp)
410257f4:	e1bffe15 	stw	r6,-8(fp)
410257f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
410257fc:	e13ffd17 	ldw	r4,-12(fp)
41025800:	e17ffe17 	ldw	r5,-8(fp)
41025804:	e1bfff17 	ldw	r6,-4(fp)
41025808:	10259f40 	call	410259f4 <open>
4102580c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
41025810:	e0bffb17 	ldw	r2,-20(fp)
41025814:	1004803a 	cmplt	r2,r2,zero
41025818:	10001c1e 	bne	r2,zero,4102588c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
4102581c:	e0bffb17 	ldw	r2,-20(fp)
41025820:	00c00034 	movhi	r3,0
41025824:	18c22104 	addi	r3,r3,2180
41025828:	10800324 	muli	r2,r2,12
4102582c:	10c5883a 	add	r2,r2,r3
41025830:	10c00017 	ldw	r3,0(r2)
41025834:	e0bffc17 	ldw	r2,-16(fp)
41025838:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
4102583c:	e0bffb17 	ldw	r2,-20(fp)
41025840:	00c00034 	movhi	r3,0
41025844:	18c22104 	addi	r3,r3,2180
41025848:	10800324 	muli	r2,r2,12
4102584c:	10c5883a 	add	r2,r2,r3
41025850:	10800104 	addi	r2,r2,4
41025854:	10c00017 	ldw	r3,0(r2)
41025858:	e0bffc17 	ldw	r2,-16(fp)
4102585c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
41025860:	e0bffb17 	ldw	r2,-20(fp)
41025864:	00c00034 	movhi	r3,0
41025868:	18c22104 	addi	r3,r3,2180
4102586c:	10800324 	muli	r2,r2,12
41025870:	10c5883a 	add	r2,r2,r3
41025874:	10800204 	addi	r2,r2,8
41025878:	10c00017 	ldw	r3,0(r2)
4102587c:	e0bffc17 	ldw	r2,-16(fp)
41025880:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
41025884:	e13ffb17 	ldw	r4,-20(fp)
41025888:	10233880 	call	41023388 <alt_release_fd>
  }
} 
4102588c:	e037883a 	mov	sp,fp
41025890:	dfc00117 	ldw	ra,4(sp)
41025894:	df000017 	ldw	fp,0(sp)
41025898:	dec00204 	addi	sp,sp,8
4102589c:	f800283a 	ret

410258a0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
410258a0:	defffb04 	addi	sp,sp,-20
410258a4:	dfc00415 	stw	ra,16(sp)
410258a8:	df000315 	stw	fp,12(sp)
410258ac:	df000304 	addi	fp,sp,12
410258b0:	e13ffd15 	stw	r4,-12(fp)
410258b4:	e17ffe15 	stw	r5,-8(fp)
410258b8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
410258bc:	01000034 	movhi	r4,0
410258c0:	21022404 	addi	r4,r4,2192
410258c4:	e17ffd17 	ldw	r5,-12(fp)
410258c8:	01800044 	movi	r6,1
410258cc:	01c07fc4 	movi	r7,511
410258d0:	10257dc0 	call	410257dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
410258d4:	01000034 	movhi	r4,0
410258d8:	21022104 	addi	r4,r4,2180
410258dc:	e17ffe17 	ldw	r5,-8(fp)
410258e0:	000d883a 	mov	r6,zero
410258e4:	01c07fc4 	movi	r7,511
410258e8:	10257dc0 	call	410257dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
410258ec:	01000034 	movhi	r4,0
410258f0:	21022704 	addi	r4,r4,2204
410258f4:	e17fff17 	ldw	r5,-4(fp)
410258f8:	01800044 	movi	r6,1
410258fc:	01c07fc4 	movi	r7,511
41025900:	10257dc0 	call	410257dc <alt_open_fd>
}  
41025904:	e037883a 	mov	sp,fp
41025908:	dfc00117 	ldw	ra,4(sp)
4102590c:	df000017 	ldw	fp,0(sp)
41025910:	dec00204 	addi	sp,sp,8
41025914:	f800283a 	ret

41025918 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
41025918:	defffc04 	addi	sp,sp,-16
4102591c:	df000315 	stw	fp,12(sp)
41025920:	df000304 	addi	fp,sp,12
41025924:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
41025928:	e0bffe17 	ldw	r2,-8(fp)
4102592c:	10800217 	ldw	r2,8(r2)
41025930:	10d00034 	orhi	r3,r2,16384
41025934:	e0bffe17 	ldw	r2,-8(fp)
41025938:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
4102593c:	e03ffd15 	stw	zero,-12(fp)
41025940:	00002006 	br	410259c4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
41025944:	e0bffd17 	ldw	r2,-12(fp)
41025948:	00c00034 	movhi	r3,0
4102594c:	18c22104 	addi	r3,r3,2180
41025950:	10800324 	muli	r2,r2,12
41025954:	10c5883a 	add	r2,r2,r3
41025958:	10c00017 	ldw	r3,0(r2)
4102595c:	e0bffe17 	ldw	r2,-8(fp)
41025960:	10800017 	ldw	r2,0(r2)
41025964:	1880141e 	bne	r3,r2,410259b8 <alt_file_locked+0xa0>
41025968:	e0bffd17 	ldw	r2,-12(fp)
4102596c:	00c00034 	movhi	r3,0
41025970:	18c22104 	addi	r3,r3,2180
41025974:	10800324 	muli	r2,r2,12
41025978:	10c5883a 	add	r2,r2,r3
4102597c:	10800204 	addi	r2,r2,8
41025980:	10800017 	ldw	r2,0(r2)
41025984:	1004403a 	cmpge	r2,r2,zero
41025988:	10000b1e 	bne	r2,zero,410259b8 <alt_file_locked+0xa0>
4102598c:	e0bffd17 	ldw	r2,-12(fp)
41025990:	10800324 	muli	r2,r2,12
41025994:	1007883a 	mov	r3,r2
41025998:	00800034 	movhi	r2,0
4102599c:	10822104 	addi	r2,r2,2180
410259a0:	1887883a 	add	r3,r3,r2
410259a4:	e0bffe17 	ldw	r2,-8(fp)
410259a8:	18800326 	beq	r3,r2,410259b8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
410259ac:	00bffcc4 	movi	r2,-13
410259b0:	e0bfff15 	stw	r2,-4(fp)
410259b4:	00000a06 	br	410259e0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
410259b8:	e0bffd17 	ldw	r2,-12(fp)
410259bc:	10800044 	addi	r2,r2,1
410259c0:	e0bffd15 	stw	r2,-12(fp)
410259c4:	00800034 	movhi	r2,0
410259c8:	1086d804 	addi	r2,r2,7008
410259cc:	10800017 	ldw	r2,0(r2)
410259d0:	1007883a 	mov	r3,r2
410259d4:	e0bffd17 	ldw	r2,-12(fp)
410259d8:	18bfda2e 	bgeu	r3,r2,41025944 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
410259dc:	e03fff15 	stw	zero,-4(fp)
410259e0:	e0bfff17 	ldw	r2,-4(fp)
}
410259e4:	e037883a 	mov	sp,fp
410259e8:	df000017 	ldw	fp,0(sp)
410259ec:	dec00104 	addi	sp,sp,4
410259f0:	f800283a 	ret

410259f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
410259f4:	defff404 	addi	sp,sp,-48
410259f8:	dfc00b15 	stw	ra,44(sp)
410259fc:	df000a15 	stw	fp,40(sp)
41025a00:	df000a04 	addi	fp,sp,40
41025a04:	e13ffb15 	stw	r4,-20(fp)
41025a08:	e17ffc15 	stw	r5,-16(fp)
41025a0c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
41025a10:	00bfffc4 	movi	r2,-1
41025a14:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
41025a18:	00bffb44 	movi	r2,-19
41025a1c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
41025a20:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
41025a24:	e13ffb17 	ldw	r4,-20(fp)
41025a28:	01400034 	movhi	r5,0
41025a2c:	2946d604 	addi	r5,r5,7000
41025a30:	102544c0 	call	4102544c <alt_find_dev>
41025a34:	e0bffa15 	stw	r2,-24(fp)
41025a38:	e0bffa17 	ldw	r2,-24(fp)
41025a3c:	1004c03a 	cmpne	r2,r2,zero
41025a40:	1000051e 	bne	r2,zero,41025a58 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
41025a44:	e13ffb17 	ldw	r4,-20(fp)
41025a48:	1025da00 	call	41025da0 <alt_find_file>
41025a4c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
41025a50:	00800044 	movi	r2,1
41025a54:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
41025a58:	e0bffa17 	ldw	r2,-24(fp)
41025a5c:	1005003a 	cmpeq	r2,r2,zero
41025a60:	1000301e 	bne	r2,zero,41025b24 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
41025a64:	e13ffa17 	ldw	r4,-24(fp)
41025a68:	1025ec00 	call	41025ec0 <alt_get_fd>
41025a6c:	e0bff815 	stw	r2,-32(fp)
41025a70:	e0bff817 	ldw	r2,-32(fp)
41025a74:	1004403a 	cmpge	r2,r2,zero
41025a78:	1000031e 	bne	r2,zero,41025a88 <open+0x94>
    {
      status = index;
41025a7c:	e0bff817 	ldw	r2,-32(fp)
41025a80:	e0bff715 	stw	r2,-36(fp)
41025a84:	00002906 	br	41025b2c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
41025a88:	e0bff817 	ldw	r2,-32(fp)
41025a8c:	10800324 	muli	r2,r2,12
41025a90:	1007883a 	mov	r3,r2
41025a94:	00800034 	movhi	r2,0
41025a98:	10822104 	addi	r2,r2,2180
41025a9c:	1885883a 	add	r2,r3,r2
41025aa0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
41025aa4:	e0fffc17 	ldw	r3,-16(fp)
41025aa8:	00900034 	movhi	r2,16384
41025aac:	10bfffc4 	addi	r2,r2,-1
41025ab0:	1886703a 	and	r3,r3,r2
41025ab4:	e0bff917 	ldw	r2,-28(fp)
41025ab8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
41025abc:	e0bff617 	ldw	r2,-40(fp)
41025ac0:	1004c03a 	cmpne	r2,r2,zero
41025ac4:	1000061e 	bne	r2,zero,41025ae0 <open+0xec>
41025ac8:	e13ff917 	ldw	r4,-28(fp)
41025acc:	10259180 	call	41025918 <alt_file_locked>
41025ad0:	e0bff715 	stw	r2,-36(fp)
41025ad4:	e0bff717 	ldw	r2,-36(fp)
41025ad8:	1004803a 	cmplt	r2,r2,zero
41025adc:	1000131e 	bne	r2,zero,41025b2c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
41025ae0:	e0bffa17 	ldw	r2,-24(fp)
41025ae4:	10800317 	ldw	r2,12(r2)
41025ae8:	1005003a 	cmpeq	r2,r2,zero
41025aec:	1000091e 	bne	r2,zero,41025b14 <open+0x120>
41025af0:	e0bffa17 	ldw	r2,-24(fp)
41025af4:	10800317 	ldw	r2,12(r2)
41025af8:	e13ff917 	ldw	r4,-28(fp)
41025afc:	e17ffb17 	ldw	r5,-20(fp)
41025b00:	e1bffc17 	ldw	r6,-16(fp)
41025b04:	e1fffd17 	ldw	r7,-12(fp)
41025b08:	103ee83a 	callr	r2
41025b0c:	e0bfff15 	stw	r2,-4(fp)
41025b10:	00000106 	br	41025b18 <open+0x124>
41025b14:	e03fff15 	stw	zero,-4(fp)
41025b18:	e0bfff17 	ldw	r2,-4(fp)
41025b1c:	e0bff715 	stw	r2,-36(fp)
41025b20:	00000206 	br	41025b2c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
41025b24:	00bffb44 	movi	r2,-19
41025b28:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
41025b2c:	e0bff717 	ldw	r2,-36(fp)
41025b30:	1004403a 	cmpge	r2,r2,zero
41025b34:	1000091e 	bne	r2,zero,41025b5c <open+0x168>
  {
    alt_release_fd (index);  
41025b38:	e13ff817 	ldw	r4,-32(fp)
41025b3c:	10233880 	call	41023388 <alt_release_fd>
    ALT_ERRNO = -status;
41025b40:	1025b7c0 	call	41025b7c <alt_get_errno>
41025b44:	e0fff717 	ldw	r3,-36(fp)
41025b48:	00c7c83a 	sub	r3,zero,r3
41025b4c:	10c00015 	stw	r3,0(r2)
    return -1;
41025b50:	00bfffc4 	movi	r2,-1
41025b54:	e0bffe15 	stw	r2,-8(fp)
41025b58:	00000206 	br	41025b64 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
41025b5c:	e0bff817 	ldw	r2,-32(fp)
41025b60:	e0bffe15 	stw	r2,-8(fp)
41025b64:	e0bffe17 	ldw	r2,-8(fp)
}
41025b68:	e037883a 	mov	sp,fp
41025b6c:	dfc00117 	ldw	ra,4(sp)
41025b70:	df000017 	ldw	fp,0(sp)
41025b74:	dec00204 	addi	sp,sp,8
41025b78:	f800283a 	ret

41025b7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
41025b7c:	defffd04 	addi	sp,sp,-12
41025b80:	dfc00215 	stw	ra,8(sp)
41025b84:	df000115 	stw	fp,4(sp)
41025b88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
41025b8c:	00800034 	movhi	r2,0
41025b90:	1086d904 	addi	r2,r2,7012
41025b94:	10800017 	ldw	r2,0(r2)
41025b98:	1005003a 	cmpeq	r2,r2,zero
41025b9c:	1000061e 	bne	r2,zero,41025bb8 <alt_get_errno+0x3c>
41025ba0:	00800034 	movhi	r2,0
41025ba4:	1086d904 	addi	r2,r2,7012
41025ba8:	10800017 	ldw	r2,0(r2)
41025bac:	103ee83a 	callr	r2
41025bb0:	e0bfff15 	stw	r2,-4(fp)
41025bb4:	00000306 	br	41025bc4 <alt_get_errno+0x48>
41025bb8:	00800034 	movhi	r2,0
41025bbc:	1086e504 	addi	r2,r2,7060
41025bc0:	e0bfff15 	stw	r2,-4(fp)
41025bc4:	e0bfff17 	ldw	r2,-4(fp)
}
41025bc8:	e037883a 	mov	sp,fp
41025bcc:	dfc00117 	ldw	ra,4(sp)
41025bd0:	df000017 	ldw	fp,0(sp)
41025bd4:	dec00204 	addi	sp,sp,8
41025bd8:	f800283a 	ret

41025bdc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
41025bdc:	defffa04 	addi	sp,sp,-24
41025be0:	df000515 	stw	fp,20(sp)
41025be4:	df000504 	addi	fp,sp,20
41025be8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
41025bec:	0005303a 	rdctl	r2,status
41025bf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
41025bf4:	e0fffd17 	ldw	r3,-12(fp)
41025bf8:	00bfff84 	movi	r2,-2
41025bfc:	1884703a 	and	r2,r3,r2
41025c00:	1001703a 	wrctl	status,r2
  
  return context;
41025c04:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
41025c08:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
41025c0c:	e0bfff17 	ldw	r2,-4(fp)
41025c10:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
41025c14:	e0bffc17 	ldw	r2,-16(fp)
41025c18:	10c00017 	ldw	r3,0(r2)
41025c1c:	e0bffc17 	ldw	r2,-16(fp)
41025c20:	10800117 	ldw	r2,4(r2)
41025c24:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
41025c28:	e0bffc17 	ldw	r2,-16(fp)
41025c2c:	10c00117 	ldw	r3,4(r2)
41025c30:	e0bffc17 	ldw	r2,-16(fp)
41025c34:	10800017 	ldw	r2,0(r2)
41025c38:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
41025c3c:	e0fffc17 	ldw	r3,-16(fp)
41025c40:	e0bffc17 	ldw	r2,-16(fp)
41025c44:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
41025c48:	e0fffc17 	ldw	r3,-16(fp)
41025c4c:	e0bffc17 	ldw	r2,-16(fp)
41025c50:	18800015 	stw	r2,0(r3)
41025c54:	e0bffe17 	ldw	r2,-8(fp)
41025c58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
41025c5c:	e0bffb17 	ldw	r2,-20(fp)
41025c60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
41025c64:	e037883a 	mov	sp,fp
41025c68:	df000017 	ldw	fp,0(sp)
41025c6c:	dec00104 	addi	sp,sp,4
41025c70:	f800283a 	ret

41025c74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
41025c74:	defffb04 	addi	sp,sp,-20
41025c78:	dfc00415 	stw	ra,16(sp)
41025c7c:	df000315 	stw	fp,12(sp)
41025c80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
41025c84:	d0a01017 	ldw	r2,-32704(gp)
41025c88:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
41025c8c:	d0a01b17 	ldw	r2,-32660(gp)
41025c90:	10800044 	addi	r2,r2,1
41025c94:	d0a01b15 	stw	r2,-32660(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
41025c98:	00003106 	br	41025d60 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
41025c9c:	e0bffe17 	ldw	r2,-8(fp)
41025ca0:	10800017 	ldw	r2,0(r2)
41025ca4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
41025ca8:	e0bffe17 	ldw	r2,-8(fp)
41025cac:	10800403 	ldbu	r2,16(r2)
41025cb0:	10803fcc 	andi	r2,r2,255
41025cb4:	1005003a 	cmpeq	r2,r2,zero
41025cb8:	1000051e 	bne	r2,zero,41025cd0 <alt_tick+0x5c>
41025cbc:	d0a01b17 	ldw	r2,-32660(gp)
41025cc0:	1004c03a 	cmpne	r2,r2,zero
41025cc4:	1000021e 	bne	r2,zero,41025cd0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
41025cc8:	e0bffe17 	ldw	r2,-8(fp)
41025ccc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
41025cd0:	e0bffe17 	ldw	r2,-8(fp)
41025cd4:	10c00217 	ldw	r3,8(r2)
41025cd8:	d0a01b17 	ldw	r2,-32660(gp)
41025cdc:	10c01e36 	bltu	r2,r3,41025d58 <alt_tick+0xe4>
41025ce0:	e0bffe17 	ldw	r2,-8(fp)
41025ce4:	10800403 	ldbu	r2,16(r2)
41025ce8:	10803fcc 	andi	r2,r2,255
41025cec:	1004c03a 	cmpne	r2,r2,zero
41025cf0:	1000191e 	bne	r2,zero,41025d58 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
41025cf4:	e0bffe17 	ldw	r2,-8(fp)
41025cf8:	10c00317 	ldw	r3,12(r2)
41025cfc:	e0bffe17 	ldw	r2,-8(fp)
41025d00:	11000517 	ldw	r4,20(r2)
41025d04:	183ee83a 	callr	r3
41025d08:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
41025d0c:	e0bffd17 	ldw	r2,-12(fp)
41025d10:	1004c03a 	cmpne	r2,r2,zero
41025d14:	1000031e 	bne	r2,zero,41025d24 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
41025d18:	e13ffe17 	ldw	r4,-8(fp)
41025d1c:	1025bdc0 	call	41025bdc <alt_alarm_stop>
41025d20:	00000d06 	br	41025d58 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
41025d24:	e0bffe17 	ldw	r2,-8(fp)
41025d28:	10c00217 	ldw	r3,8(r2)
41025d2c:	e0bffd17 	ldw	r2,-12(fp)
41025d30:	1887883a 	add	r3,r3,r2
41025d34:	e0bffe17 	ldw	r2,-8(fp)
41025d38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
41025d3c:	e0bffe17 	ldw	r2,-8(fp)
41025d40:	10c00217 	ldw	r3,8(r2)
41025d44:	d0a01b17 	ldw	r2,-32660(gp)
41025d48:	1880032e 	bgeu	r3,r2,41025d58 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
41025d4c:	e0fffe17 	ldw	r3,-8(fp)
41025d50:	00800044 	movi	r2,1
41025d54:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
41025d58:	e0bfff17 	ldw	r2,-4(fp)
41025d5c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
41025d60:	d0e01004 	addi	r3,gp,-32704
41025d64:	e0bffe17 	ldw	r2,-8(fp)
41025d68:	10ffcc1e 	bne	r2,r3,41025c9c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
41025d6c:	e037883a 	mov	sp,fp
41025d70:	dfc00117 	ldw	ra,4(sp)
41025d74:	df000017 	ldw	fp,0(sp)
41025d78:	dec00204 	addi	sp,sp,8
41025d7c:	f800283a 	ret

41025d80 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
41025d80:	deffff04 	addi	sp,sp,-4
41025d84:	df000015 	stw	fp,0(sp)
41025d88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
41025d8c:	000170fa 	wrctl	ienable,zero
}
41025d90:	e037883a 	mov	sp,fp
41025d94:	df000017 	ldw	fp,0(sp)
41025d98:	dec00104 	addi	sp,sp,4
41025d9c:	f800283a 	ret

41025da0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
41025da0:	defffa04 	addi	sp,sp,-24
41025da4:	dfc00515 	stw	ra,20(sp)
41025da8:	df000415 	stw	fp,16(sp)
41025dac:	df000404 	addi	fp,sp,16
41025db0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
41025db4:	00800034 	movhi	r2,0
41025db8:	1086d404 	addi	r2,r2,6992
41025dbc:	10800017 	ldw	r2,0(r2)
41025dc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
41025dc4:	00003306 	br	41025e94 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
41025dc8:	e0bffd17 	ldw	r2,-12(fp)
41025dcc:	11000217 	ldw	r4,8(r2)
41025dd0:	10202e80 	call	410202e8 <strlen>
41025dd4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
41025dd8:	e0bffd17 	ldw	r2,-12(fp)
41025ddc:	10c00217 	ldw	r3,8(r2)
41025de0:	e0bffc17 	ldw	r2,-16(fp)
41025de4:	1885883a 	add	r2,r3,r2
41025de8:	10bfffc4 	addi	r2,r2,-1
41025dec:	10800003 	ldbu	r2,0(r2)
41025df0:	10803fcc 	andi	r2,r2,255
41025df4:	1080201c 	xori	r2,r2,128
41025df8:	10bfe004 	addi	r2,r2,-128
41025dfc:	10800bd8 	cmpnei	r2,r2,47
41025e00:	1000031e 	bne	r2,zero,41025e10 <alt_find_file+0x70>
    {
      len -= 1;
41025e04:	e0bffc17 	ldw	r2,-16(fp)
41025e08:	10bfffc4 	addi	r2,r2,-1
41025e0c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
41025e10:	e0bffc17 	ldw	r2,-16(fp)
41025e14:	1007883a 	mov	r3,r2
41025e18:	e0bffe17 	ldw	r2,-8(fp)
41025e1c:	1885883a 	add	r2,r3,r2
41025e20:	10800003 	ldbu	r2,0(r2)
41025e24:	10803fcc 	andi	r2,r2,255
41025e28:	1080201c 	xori	r2,r2,128
41025e2c:	10bfe004 	addi	r2,r2,-128
41025e30:	10800be0 	cmpeqi	r2,r2,47
41025e34:	10000a1e 	bne	r2,zero,41025e60 <alt_find_file+0xc0>
41025e38:	e0bffc17 	ldw	r2,-16(fp)
41025e3c:	1007883a 	mov	r3,r2
41025e40:	e0bffe17 	ldw	r2,-8(fp)
41025e44:	1885883a 	add	r2,r3,r2
41025e48:	10800003 	ldbu	r2,0(r2)
41025e4c:	10803fcc 	andi	r2,r2,255
41025e50:	1080201c 	xori	r2,r2,128
41025e54:	10bfe004 	addi	r2,r2,-128
41025e58:	1004c03a 	cmpne	r2,r2,zero
41025e5c:	10000a1e 	bne	r2,zero,41025e88 <alt_find_file+0xe8>
41025e60:	e0bffd17 	ldw	r2,-12(fp)
41025e64:	11000217 	ldw	r4,8(r2)
41025e68:	e1bffc17 	ldw	r6,-16(fp)
41025e6c:	e17ffe17 	ldw	r5,-8(fp)
41025e70:	10260540 	call	41026054 <memcmp>
41025e74:	1004c03a 	cmpne	r2,r2,zero
41025e78:	1000031e 	bne	r2,zero,41025e88 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
41025e7c:	e0bffd17 	ldw	r2,-12(fp)
41025e80:	e0bfff15 	stw	r2,-4(fp)
41025e84:	00000806 	br	41025ea8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
41025e88:	e0bffd17 	ldw	r2,-12(fp)
41025e8c:	10800017 	ldw	r2,0(r2)
41025e90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
41025e94:	00c00034 	movhi	r3,0
41025e98:	18c6d404 	addi	r3,r3,6992
41025e9c:	e0bffd17 	ldw	r2,-12(fp)
41025ea0:	10ffc91e 	bne	r2,r3,41025dc8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
41025ea4:	e03fff15 	stw	zero,-4(fp)
41025ea8:	e0bfff17 	ldw	r2,-4(fp)
}
41025eac:	e037883a 	mov	sp,fp
41025eb0:	dfc00117 	ldw	ra,4(sp)
41025eb4:	df000017 	ldw	fp,0(sp)
41025eb8:	dec00204 	addi	sp,sp,8
41025ebc:	f800283a 	ret

41025ec0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
41025ec0:	defffc04 	addi	sp,sp,-16
41025ec4:	df000315 	stw	fp,12(sp)
41025ec8:	df000304 	addi	fp,sp,12
41025ecc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
41025ed0:	00bffa04 	movi	r2,-24
41025ed4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
41025ed8:	e03ffe15 	stw	zero,-8(fp)
41025edc:	00001e06 	br	41025f58 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
41025ee0:	e0bffe17 	ldw	r2,-8(fp)
41025ee4:	00c00034 	movhi	r3,0
41025ee8:	18c22104 	addi	r3,r3,2180
41025eec:	10800324 	muli	r2,r2,12
41025ef0:	10c5883a 	add	r2,r2,r3
41025ef4:	10800017 	ldw	r2,0(r2)
41025ef8:	1004c03a 	cmpne	r2,r2,zero
41025efc:	1000131e 	bne	r2,zero,41025f4c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
41025f00:	e0bffe17 	ldw	r2,-8(fp)
41025f04:	00c00034 	movhi	r3,0
41025f08:	18c22104 	addi	r3,r3,2180
41025f0c:	10800324 	muli	r2,r2,12
41025f10:	10c7883a 	add	r3,r2,r3
41025f14:	e0bfff17 	ldw	r2,-4(fp)
41025f18:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
41025f1c:	00800034 	movhi	r2,0
41025f20:	1086d804 	addi	r2,r2,7008
41025f24:	10c00017 	ldw	r3,0(r2)
41025f28:	e0bffe17 	ldw	r2,-8(fp)
41025f2c:	1880040e 	bge	r3,r2,41025f40 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
41025f30:	00c00034 	movhi	r3,0
41025f34:	18c6d804 	addi	r3,r3,7008
41025f38:	e0bffe17 	ldw	r2,-8(fp)
41025f3c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
41025f40:	e0bffe17 	ldw	r2,-8(fp)
41025f44:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
41025f48:	00000606 	br	41025f64 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
41025f4c:	e0bffe17 	ldw	r2,-8(fp)
41025f50:	10800044 	addi	r2,r2,1
41025f54:	e0bffe15 	stw	r2,-8(fp)
41025f58:	e0bffe17 	ldw	r2,-8(fp)
41025f5c:	10800810 	cmplti	r2,r2,32
41025f60:	103fdf1e 	bne	r2,zero,41025ee0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
41025f64:	e0bffd17 	ldw	r2,-12(fp)
}
41025f68:	e037883a 	mov	sp,fp
41025f6c:	df000017 	ldw	fp,0(sp)
41025f70:	dec00104 	addi	sp,sp,4
41025f74:	f800283a 	ret

41025f78 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
41025f78:	defffb04 	addi	sp,sp,-20
41025f7c:	df000415 	stw	fp,16(sp)
41025f80:	df000404 	addi	fp,sp,16
41025f84:	e13ffe15 	stw	r4,-8(fp)
41025f88:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
41025f8c:	e0bfff17 	ldw	r2,-4(fp)
41025f90:	10840070 	cmpltui	r2,r2,4097
41025f94:	1000021e 	bne	r2,zero,41025fa0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
41025f98:	00840004 	movi	r2,4096
41025f9c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
41025fa0:	e0fffe17 	ldw	r3,-8(fp)
41025fa4:	e0bfff17 	ldw	r2,-4(fp)
41025fa8:	1885883a 	add	r2,r3,r2
41025fac:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
41025fb0:	e0bffe17 	ldw	r2,-8(fp)
41025fb4:	e0bffd15 	stw	r2,-12(fp)
41025fb8:	00000506 	br	41025fd0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
41025fbc:	e0bffd17 	ldw	r2,-12(fp)
41025fc0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
41025fc4:	e0bffd17 	ldw	r2,-12(fp)
41025fc8:	10800804 	addi	r2,r2,32
41025fcc:	e0bffd15 	stw	r2,-12(fp)
41025fd0:	e0fffd17 	ldw	r3,-12(fp)
41025fd4:	e0bffc17 	ldw	r2,-16(fp)
41025fd8:	18bff836 	bltu	r3,r2,41025fbc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
41025fdc:	e0bffe17 	ldw	r2,-8(fp)
41025fe0:	108007cc 	andi	r2,r2,31
41025fe4:	1005003a 	cmpeq	r2,r2,zero
41025fe8:	1000021e 	bne	r2,zero,41025ff4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
41025fec:	e0bffd17 	ldw	r2,-12(fp)
41025ff0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
41025ff4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
41025ff8:	e037883a 	mov	sp,fp
41025ffc:	df000017 	ldw	fp,0(sp)
41026000:	dec00104 	addi	sp,sp,4
41026004:	f800283a 	ret

41026008 <atexit>:
41026008:	200b883a 	mov	r5,r4
4102600c:	000d883a 	mov	r6,zero
41026010:	0009883a 	mov	r4,zero
41026014:	000f883a 	mov	r7,zero
41026018:	10260c81 	jmpi	410260c8 <__register_exitproc>

4102601c <exit>:
4102601c:	defffe04 	addi	sp,sp,-8
41026020:	000b883a 	mov	r5,zero
41026024:	dc000015 	stw	r16,0(sp)
41026028:	dfc00115 	stw	ra,4(sp)
4102602c:	2021883a 	mov	r16,r4
41026030:	10262000 	call	41026200 <__call_exitprocs>
41026034:	00800034 	movhi	r2,0
41026038:	1086d104 	addi	r2,r2,6980
4102603c:	11000017 	ldw	r4,0(r2)
41026040:	20800f17 	ldw	r2,60(r4)
41026044:	10000126 	beq	r2,zero,4102604c <exit+0x30>
41026048:	103ee83a 	callr	r2
4102604c:	8009883a 	mov	r4,r16
41026050:	10263f00 	call	410263f0 <_exit>

41026054 <memcmp>:
41026054:	00c000c4 	movi	r3,3
41026058:	1980032e 	bgeu	r3,r6,41026068 <memcmp+0x14>
4102605c:	2144b03a 	or	r2,r4,r5
41026060:	10c4703a 	and	r2,r2,r3
41026064:	10000f26 	beq	r2,zero,410260a4 <memcmp+0x50>
41026068:	31ffffc4 	addi	r7,r6,-1
4102606c:	3000061e 	bne	r6,zero,41026088 <memcmp+0x34>
41026070:	00000a06 	br	4102609c <memcmp+0x48>
41026074:	39ffffc4 	addi	r7,r7,-1
41026078:	00bfffc4 	movi	r2,-1
4102607c:	21000044 	addi	r4,r4,1
41026080:	29400044 	addi	r5,r5,1
41026084:	38800526 	beq	r7,r2,4102609c <memcmp+0x48>
41026088:	20c00003 	ldbu	r3,0(r4)
4102608c:	28800003 	ldbu	r2,0(r5)
41026090:	18bff826 	beq	r3,r2,41026074 <memcmp+0x20>
41026094:	1885c83a 	sub	r2,r3,r2
41026098:	f800283a 	ret
4102609c:	0005883a 	mov	r2,zero
410260a0:	f800283a 	ret
410260a4:	180f883a 	mov	r7,r3
410260a8:	20c00017 	ldw	r3,0(r4)
410260ac:	28800017 	ldw	r2,0(r5)
410260b0:	18bfed1e 	bne	r3,r2,41026068 <memcmp+0x14>
410260b4:	31bfff04 	addi	r6,r6,-4
410260b8:	21000104 	addi	r4,r4,4
410260bc:	29400104 	addi	r5,r5,4
410260c0:	39bff936 	bltu	r7,r6,410260a8 <memcmp+0x54>
410260c4:	003fe806 	br	41026068 <memcmp+0x14>

410260c8 <__register_exitproc>:
410260c8:	defffa04 	addi	sp,sp,-24
410260cc:	00800034 	movhi	r2,0
410260d0:	1086d104 	addi	r2,r2,6980
410260d4:	dc000015 	stw	r16,0(sp)
410260d8:	14000017 	ldw	r16,0(r2)
410260dc:	dd000415 	stw	r20,16(sp)
410260e0:	2829883a 	mov	r20,r5
410260e4:	81405217 	ldw	r5,328(r16)
410260e8:	dcc00315 	stw	r19,12(sp)
410260ec:	dc800215 	stw	r18,8(sp)
410260f0:	dc400115 	stw	r17,4(sp)
410260f4:	dfc00515 	stw	ra,20(sp)
410260f8:	2023883a 	mov	r17,r4
410260fc:	3027883a 	mov	r19,r6
41026100:	3825883a 	mov	r18,r7
41026104:	28002526 	beq	r5,zero,4102619c <__register_exitproc+0xd4>
41026108:	29000117 	ldw	r4,4(r5)
4102610c:	008007c4 	movi	r2,31
41026110:	11002716 	blt	r2,r4,410261b0 <__register_exitproc+0xe8>
41026114:	8800101e 	bne	r17,zero,41026158 <__register_exitproc+0x90>
41026118:	2105883a 	add	r2,r4,r4
4102611c:	1085883a 	add	r2,r2,r2
41026120:	20c00044 	addi	r3,r4,1
41026124:	1145883a 	add	r2,r2,r5
41026128:	0009883a 	mov	r4,zero
4102612c:	15000215 	stw	r20,8(r2)
41026130:	28c00115 	stw	r3,4(r5)
41026134:	2005883a 	mov	r2,r4
41026138:	dfc00517 	ldw	ra,20(sp)
4102613c:	dd000417 	ldw	r20,16(sp)
41026140:	dcc00317 	ldw	r19,12(sp)
41026144:	dc800217 	ldw	r18,8(sp)
41026148:	dc400117 	ldw	r17,4(sp)
4102614c:	dc000017 	ldw	r16,0(sp)
41026150:	dec00604 	addi	sp,sp,24
41026154:	f800283a 	ret
41026158:	29802204 	addi	r6,r5,136
4102615c:	00800044 	movi	r2,1
41026160:	110e983a 	sll	r7,r2,r4
41026164:	30c04017 	ldw	r3,256(r6)
41026168:	2105883a 	add	r2,r4,r4
4102616c:	1085883a 	add	r2,r2,r2
41026170:	1185883a 	add	r2,r2,r6
41026174:	19c6b03a 	or	r3,r3,r7
41026178:	14802015 	stw	r18,128(r2)
4102617c:	14c00015 	stw	r19,0(r2)
41026180:	00800084 	movi	r2,2
41026184:	30c04015 	stw	r3,256(r6)
41026188:	88bfe31e 	bne	r17,r2,41026118 <__register_exitproc+0x50>
4102618c:	30804117 	ldw	r2,260(r6)
41026190:	11c4b03a 	or	r2,r2,r7
41026194:	30804115 	stw	r2,260(r6)
41026198:	003fdf06 	br	41026118 <__register_exitproc+0x50>
4102619c:	00800034 	movhi	r2,0
410261a0:	10873604 	addi	r2,r2,7384
410261a4:	100b883a 	mov	r5,r2
410261a8:	80805215 	stw	r2,328(r16)
410261ac:	003fd606 	br	41026108 <__register_exitproc+0x40>
410261b0:	00800034 	movhi	r2,0
410261b4:	10800004 	addi	r2,r2,0
410261b8:	1000021e 	bne	r2,zero,410261c4 <__register_exitproc+0xfc>
410261bc:	013fffc4 	movi	r4,-1
410261c0:	003fdc06 	br	41026134 <__register_exitproc+0x6c>
410261c4:	01006404 	movi	r4,400
410261c8:	103ee83a 	callr	r2
410261cc:	1007883a 	mov	r3,r2
410261d0:	103ffa26 	beq	r2,zero,410261bc <__register_exitproc+0xf4>
410261d4:	80805217 	ldw	r2,328(r16)
410261d8:	180b883a 	mov	r5,r3
410261dc:	18000115 	stw	zero,4(r3)
410261e0:	18800015 	stw	r2,0(r3)
410261e4:	80c05215 	stw	r3,328(r16)
410261e8:	18006215 	stw	zero,392(r3)
410261ec:	18006315 	stw	zero,396(r3)
410261f0:	0009883a 	mov	r4,zero
410261f4:	883fc826 	beq	r17,zero,41026118 <__register_exitproc+0x50>
410261f8:	003fd706 	br	41026158 <__register_exitproc+0x90>

410261fc <register_fini>:
410261fc:	f800283a 	ret

41026200 <__call_exitprocs>:
41026200:	00800034 	movhi	r2,0
41026204:	1086d104 	addi	r2,r2,6980
41026208:	10800017 	ldw	r2,0(r2)
4102620c:	defff304 	addi	sp,sp,-52
41026210:	df000b15 	stw	fp,44(sp)
41026214:	d8800115 	stw	r2,4(sp)
41026218:	00800034 	movhi	r2,0
4102621c:	10800004 	addi	r2,r2,0
41026220:	1005003a 	cmpeq	r2,r2,zero
41026224:	d8800215 	stw	r2,8(sp)
41026228:	d8800117 	ldw	r2,4(sp)
4102622c:	dd400815 	stw	r21,32(sp)
41026230:	dd000715 	stw	r20,28(sp)
41026234:	10805204 	addi	r2,r2,328
41026238:	dfc00c15 	stw	ra,48(sp)
4102623c:	ddc00a15 	stw	r23,40(sp)
41026240:	dd800915 	stw	r22,36(sp)
41026244:	dcc00615 	stw	r19,24(sp)
41026248:	dc800515 	stw	r18,20(sp)
4102624c:	dc400415 	stw	r17,16(sp)
41026250:	dc000315 	stw	r16,12(sp)
41026254:	282b883a 	mov	r21,r5
41026258:	2039883a 	mov	fp,r4
4102625c:	d8800015 	stw	r2,0(sp)
41026260:	2829003a 	cmpeq	r20,r5,zero
41026264:	d8800117 	ldw	r2,4(sp)
41026268:	14405217 	ldw	r17,328(r2)
4102626c:	88001026 	beq	r17,zero,410262b0 <__call_exitprocs+0xb0>
41026270:	ddc00017 	ldw	r23,0(sp)
41026274:	88800117 	ldw	r2,4(r17)
41026278:	8c802204 	addi	r18,r17,136
4102627c:	143fffc4 	addi	r16,r2,-1
41026280:	80000916 	blt	r16,zero,410262a8 <__call_exitprocs+0xa8>
41026284:	05bfffc4 	movi	r22,-1
41026288:	a000151e 	bne	r20,zero,410262e0 <__call_exitprocs+0xe0>
4102628c:	8409883a 	add	r4,r16,r16
41026290:	2105883a 	add	r2,r4,r4
41026294:	1485883a 	add	r2,r2,r18
41026298:	10c02017 	ldw	r3,128(r2)
4102629c:	a8c01126 	beq	r21,r3,410262e4 <__call_exitprocs+0xe4>
410262a0:	843fffc4 	addi	r16,r16,-1
410262a4:	85bff81e 	bne	r16,r22,41026288 <__call_exitprocs+0x88>
410262a8:	d8800217 	ldw	r2,8(sp)
410262ac:	10003126 	beq	r2,zero,41026374 <__call_exitprocs+0x174>
410262b0:	dfc00c17 	ldw	ra,48(sp)
410262b4:	df000b17 	ldw	fp,44(sp)
410262b8:	ddc00a17 	ldw	r23,40(sp)
410262bc:	dd800917 	ldw	r22,36(sp)
410262c0:	dd400817 	ldw	r21,32(sp)
410262c4:	dd000717 	ldw	r20,28(sp)
410262c8:	dcc00617 	ldw	r19,24(sp)
410262cc:	dc800517 	ldw	r18,20(sp)
410262d0:	dc400417 	ldw	r17,16(sp)
410262d4:	dc000317 	ldw	r16,12(sp)
410262d8:	dec00d04 	addi	sp,sp,52
410262dc:	f800283a 	ret
410262e0:	8409883a 	add	r4,r16,r16
410262e4:	88c00117 	ldw	r3,4(r17)
410262e8:	2105883a 	add	r2,r4,r4
410262ec:	1445883a 	add	r2,r2,r17
410262f0:	18ffffc4 	addi	r3,r3,-1
410262f4:	11800217 	ldw	r6,8(r2)
410262f8:	1c001526 	beq	r3,r16,41026350 <__call_exitprocs+0x150>
410262fc:	10000215 	stw	zero,8(r2)
41026300:	303fe726 	beq	r6,zero,410262a0 <__call_exitprocs+0xa0>
41026304:	00c00044 	movi	r3,1
41026308:	1c06983a 	sll	r3,r3,r16
4102630c:	90804017 	ldw	r2,256(r18)
41026310:	8cc00117 	ldw	r19,4(r17)
41026314:	1884703a 	and	r2,r3,r2
41026318:	10001426 	beq	r2,zero,4102636c <__call_exitprocs+0x16c>
4102631c:	90804117 	ldw	r2,260(r18)
41026320:	1884703a 	and	r2,r3,r2
41026324:	10000c1e 	bne	r2,zero,41026358 <__call_exitprocs+0x158>
41026328:	2105883a 	add	r2,r4,r4
4102632c:	1485883a 	add	r2,r2,r18
41026330:	11400017 	ldw	r5,0(r2)
41026334:	e009883a 	mov	r4,fp
41026338:	303ee83a 	callr	r6
4102633c:	88800117 	ldw	r2,4(r17)
41026340:	98bfc81e 	bne	r19,r2,41026264 <__call_exitprocs+0x64>
41026344:	b8800017 	ldw	r2,0(r23)
41026348:	147fd526 	beq	r2,r17,410262a0 <__call_exitprocs+0xa0>
4102634c:	003fc506 	br	41026264 <__call_exitprocs+0x64>
41026350:	8c000115 	stw	r16,4(r17)
41026354:	003fea06 	br	41026300 <__call_exitprocs+0x100>
41026358:	2105883a 	add	r2,r4,r4
4102635c:	1485883a 	add	r2,r2,r18
41026360:	11000017 	ldw	r4,0(r2)
41026364:	303ee83a 	callr	r6
41026368:	003ff406 	br	4102633c <__call_exitprocs+0x13c>
4102636c:	303ee83a 	callr	r6
41026370:	003ff206 	br	4102633c <__call_exitprocs+0x13c>
41026374:	88800117 	ldw	r2,4(r17)
41026378:	1000081e 	bne	r2,zero,4102639c <__call_exitprocs+0x19c>
4102637c:	89000017 	ldw	r4,0(r17)
41026380:	20000726 	beq	r4,zero,410263a0 <__call_exitprocs+0x1a0>
41026384:	b9000015 	stw	r4,0(r23)
41026388:	8809883a 	mov	r4,r17
4102638c:	00000000 	call	40000000 <__alt_data_end>
41026390:	bc400017 	ldw	r17,0(r23)
41026394:	883fb71e 	bne	r17,zero,41026274 <__call_exitprocs+0x74>
41026398:	003fc506 	br	410262b0 <__call_exitprocs+0xb0>
4102639c:	89000017 	ldw	r4,0(r17)
410263a0:	882f883a 	mov	r23,r17
410263a4:	2023883a 	mov	r17,r4
410263a8:	883fb21e 	bne	r17,zero,41026274 <__call_exitprocs+0x74>
410263ac:	003fc006 	br	410262b0 <__call_exitprocs+0xb0>

410263b0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
410263b0:	defffd04 	addi	sp,sp,-12
410263b4:	df000215 	stw	fp,8(sp)
410263b8:	df000204 	addi	fp,sp,8
410263bc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
410263c0:	e0bfff17 	ldw	r2,-4(fp)
410263c4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
410263c8:	e0bffe17 	ldw	r2,-8(fp)
410263cc:	1005003a 	cmpeq	r2,r2,zero
410263d0:	1000021e 	bne	r2,zero,410263dc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
410263d4:	002af070 	cmpltui	zero,zero,43969
410263d8:	00000106 	br	410263e0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
410263dc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
410263e0:	e037883a 	mov	sp,fp
410263e4:	df000017 	ldw	fp,0(sp)
410263e8:	dec00104 	addi	sp,sp,4
410263ec:	f800283a 	ret

410263f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
410263f0:	defffd04 	addi	sp,sp,-12
410263f4:	dfc00215 	stw	ra,8(sp)
410263f8:	df000115 	stw	fp,4(sp)
410263fc:	df000104 	addi	fp,sp,4
41026400:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
41026404:	e13fff17 	ldw	r4,-4(fp)
41026408:	10263b00 	call	410263b0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
4102640c:	003fff06 	br	4102640c <_exit+0x1c>
41026410:	410261fc 	xorhi	r4,r8,2439
