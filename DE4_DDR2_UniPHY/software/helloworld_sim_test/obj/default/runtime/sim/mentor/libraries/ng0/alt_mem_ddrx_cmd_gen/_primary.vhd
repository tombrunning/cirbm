library verilog;
use verilog.vl_types.all;
entity alt_mem_ddrx_cmd_gen is
    generic(
        CFG_LOCAL_ADDR_WIDTH: integer := 33;
        CFG_LOCAL_SIZE_WIDTH: integer := 3;
        CFG_LOCAL_ID_WIDTH: integer := 8;
        CFG_INT_SIZE_WIDTH: integer := 4;
        CFG_PORT_WIDTH_COL_ADDR_WIDTH: integer := 4;
        CFG_PORT_WIDTH_ROW_ADDR_WIDTH: integer := 5;
        CFG_PORT_WIDTH_BANK_ADDR_WIDTH: integer := 2;
        CFG_PORT_WIDTH_CS_ADDR_WIDTH: integer := 2;
        CFG_PORT_WIDTH_BURST_LENGTH: integer := 5;
        CFG_PORT_WIDTH_ADDR_ORDER: integer := 2;
        CFG_DWIDTH_RATIO: integer := 2;
        CFG_CTL_QUEUE_DEPTH: integer := 8;
        CFG_MEM_IF_CHIP : integer := 1;
        CFG_MEM_IF_CS_WIDTH: integer := 1;
        CFG_MEM_IF_BA_WIDTH: integer := 3;
        CFG_MEM_IF_ROW_WIDTH: integer := 13;
        CFG_MEM_IF_COL_WIDTH: integer := 10;
        CFG_DATA_ID_WIDTH: integer := 10;
        CFG_ENABLE_QUEUE: integer := 1;
        CFG_ENABLE_BURST_MERGE: integer := 1;
        CFG_CMD_GEN_OUTPUT_REG: integer := 0;
        CFG_CTL_TBP_NUM : integer := 4;
        CFG_CTL_SHADOW_TBP_NUM: integer := 4;
        MIN_COL         : integer := 8;
        MIN_ROW         : integer := 12;
        MIN_BANK        : integer := 2;
        MIN_CS          : integer := 1
    );
    port(
        ctl_clk         : in     vl_logic;
        ctl_reset_n     : in     vl_logic;
        tbp_full        : in     vl_logic;
        tbp_load        : in     vl_logic_vector;
        tbp_read        : in     vl_logic_vector;
        tbp_write       : in     vl_logic_vector;
        tbp_chipsel     : in     vl_logic_vector;
        tbp_bank        : in     vl_logic_vector;
        tbp_row         : in     vl_logic_vector;
        tbp_col         : in     vl_logic_vector;
        tbp_shadow_chipsel: in     vl_logic_vector;
        tbp_shadow_bank : in     vl_logic_vector;
        tbp_shadow_row  : in     vl_logic_vector;
        cmd_gen_load    : out    vl_logic;
        cmd_gen_waiting_to_load: out    vl_logic;
        cmd_gen_chipsel : out    vl_logic_vector;
        cmd_gen_bank    : out    vl_logic_vector;
        cmd_gen_row     : out    vl_logic_vector;
        cmd_gen_col     : out    vl_logic_vector;
        cmd_gen_write   : out    vl_logic;
        cmd_gen_read    : out    vl_logic;
        cmd_gen_multicast: out    vl_logic;
        cmd_gen_size    : out    vl_logic_vector;
        cmd_gen_localid : out    vl_logic_vector;
        cmd_gen_dataid  : out    vl_logic_vector;
        cmd_gen_priority: out    vl_logic;
        cmd_gen_rmw_correct: out    vl_logic;
        cmd_gen_rmw_partial: out    vl_logic;
        cmd_gen_autopch : out    vl_logic;
        cmd_gen_complete: out    vl_logic;
        cmd_gen_same_chipsel_addr: out    vl_logic_vector;
        cmd_gen_same_bank_addr: out    vl_logic_vector;
        cmd_gen_same_row_addr: out    vl_logic_vector;
        cmd_gen_same_col_addr: out    vl_logic_vector;
        cmd_gen_same_read_cmd: out    vl_logic_vector;
        cmd_gen_same_write_cmd: out    vl_logic_vector;
        cmd_gen_same_shadow_chipsel_addr: out    vl_logic_vector;
        cmd_gen_same_shadow_bank_addr: out    vl_logic_vector;
        cmd_gen_same_shadow_row_addr: out    vl_logic_vector;
        cmd_gen_busy    : out    vl_logic;
        cmd_gen_full    : out    vl_logic;
        cmd_valid       : in     vl_logic;
        cmd_address     : in     vl_logic_vector;
        cmd_write       : in     vl_logic;
        cmd_read        : in     vl_logic;
        cmd_id          : in     vl_logic_vector;
        cmd_multicast   : in     vl_logic;
        cmd_size        : in     vl_logic_vector;
        cmd_priority    : in     vl_logic;
        cmd_autoprecharge: in     vl_logic;
        proc_busy       : out    vl_logic;
        proc_load       : out    vl_logic;
        proc_load_dataid: out    vl_logic;
        proc_write      : out    vl_logic;
        proc_read       : out    vl_logic;
        proc_size       : out    vl_logic_vector;
        proc_localid    : out    vl_logic_vector;
        wdatap_free_id_valid: in     vl_logic;
        wdatap_free_id_dataid: in     vl_logic_vector;
        rdatap_free_id_valid: in     vl_logic;
        rdatap_free_id_dataid: in     vl_logic_vector;
        tbp_load_index  : out    vl_logic_vector;
        data_complete   : in     vl_logic_vector;
        data_rmw_complete: in     vl_logic;
        errcmd_ready    : out    vl_logic;
        errcmd_valid    : in     vl_logic;
        errcmd_chipsel  : in     vl_logic_vector;
        errcmd_bank     : in     vl_logic_vector;
        errcmd_row      : in     vl_logic_vector;
        errcmd_column   : in     vl_logic_vector;
        errcmd_size     : in     vl_logic_vector;
        errcmd_localid  : in     vl_logic_vector;
        data_partial_be : in     vl_logic;
        cfg_enable_cmd_split: in     vl_logic;
        cfg_burst_length: in     vl_logic_vector;
        cfg_addr_order  : in     vl_logic_vector;
        cfg_enable_ecc  : in     vl_logic;
        cfg_enable_no_dm: in     vl_logic;
        cfg_col_addr_width: in     vl_logic_vector;
        cfg_row_addr_width: in     vl_logic_vector;
        cfg_bank_addr_width: in     vl_logic_vector;
        cfg_cs_addr_width: in     vl_logic_vector
    );
    attribute mti_svvh_generic_type : integer;
    attribute mti_svvh_generic_type of CFG_LOCAL_ADDR_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_LOCAL_SIZE_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_LOCAL_ID_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_INT_SIZE_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_PORT_WIDTH_COL_ADDR_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_PORT_WIDTH_ROW_ADDR_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_PORT_WIDTH_BANK_ADDR_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_PORT_WIDTH_CS_ADDR_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_PORT_WIDTH_BURST_LENGTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_PORT_WIDTH_ADDR_ORDER : constant is 1;
    attribute mti_svvh_generic_type of CFG_DWIDTH_RATIO : constant is 1;
    attribute mti_svvh_generic_type of CFG_CTL_QUEUE_DEPTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_MEM_IF_CHIP : constant is 1;
    attribute mti_svvh_generic_type of CFG_MEM_IF_CS_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_MEM_IF_BA_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_MEM_IF_ROW_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_MEM_IF_COL_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_DATA_ID_WIDTH : constant is 1;
    attribute mti_svvh_generic_type of CFG_ENABLE_QUEUE : constant is 1;
    attribute mti_svvh_generic_type of CFG_ENABLE_BURST_MERGE : constant is 1;
    attribute mti_svvh_generic_type of CFG_CMD_GEN_OUTPUT_REG : constant is 1;
    attribute mti_svvh_generic_type of CFG_CTL_TBP_NUM : constant is 1;
    attribute mti_svvh_generic_type of CFG_CTL_SHADOW_TBP_NUM : constant is 1;
    attribute mti_svvh_generic_type of MIN_COL : constant is 1;
    attribute mti_svvh_generic_type of MIN_ROW : constant is 1;
    attribute mti_svvh_generic_type of MIN_BANK : constant is 1;
    attribute mti_svvh_generic_type of MIN_CS : constant is 1;
end alt_mem_ddrx_cmd_gen;
